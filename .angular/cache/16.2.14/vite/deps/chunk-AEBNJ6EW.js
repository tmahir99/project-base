import {
  ALWAYS_FALSE_HANDLER,
  ALWAYS_TRUE_HANDLER,
  ANIMATION_FRAME,
  AbstractTuiControl,
  AbstractTuiController,
  AbstractTuiDialogDirective,
  AbstractTuiDialogService,
  AbstractTuiInteractive,
  AbstractTuiMultipleControl,
  AbstractTuiNullableControl,
  AbstractTuiTextfieldHost,
  AbstractTuiValueTransformer,
  CHAR_EN_DASH,
  CHAR_HYPHEN,
  CHAR_MINUS,
  CHAR_NO_BREAK_SPACE,
  CHAR_PLUS,
  CHROMIUM_EDGE_START_VERSION,
  DATE_FILLER_LENGTH,
  DATE_RANGE_FILLER_LENGTH,
  EMPTY_ARRAY,
  EMPTY_FUNCTION,
  EMPTY_QUERY,
  HOURS_IN_DAY,
  MODE_PROVIDER,
  PAGE_VISIBILITY,
  POLYMORPHEUS_CONTEXT,
  PolymorpheusComponent,
  PolymorpheusModule,
  PolymorpheusOutletDirective,
  PolymorpheusTemplate,
  RANGE_SEPARATOR_CHAR,
  ResizeObserverService,
  TEXTFIELD_CONTROLLER_PROVIDER,
  TUI_ALERTS,
  TUI_ANIMATIONS_DURATION,
  TUI_ANIMATION_OPTIONS,
  TUI_BUTTON_OPTIONS,
  TUI_CHECKBOX_OPTIONS,
  TUI_CLOSE_WORD,
  TUI_COMMON_ICONS,
  TUI_DATA_LIST_ACCESSOR,
  TUI_DATA_LIST_HOST,
  TUI_DATE_FORMAT,
  TUI_DATE_SEPARATOR,
  TUI_DEFAULT_IDENTITY_MATCHER,
  TUI_DEFAULT_MARKER_HANDLER,
  TUI_DEFAULT_MATCHER,
  TUI_DEFAULT_STRINGIFY,
  TUI_DIGIT_REGEXP,
  TUI_DROPDOWN_COMPONENT,
  TUI_FIRST_DAY,
  TUI_FOCUSABLE_ITEM_ACCESSOR,
  TUI_HINT_COMPONENT,
  TUI_ICON_PADDINGS,
  TUI_IS_IOS,
  TUI_IS_MOBILE,
  TUI_LAST_DAY,
  TUI_LEGACY_MASK,
  TUI_MASK_SYMBOLS_REGEXP,
  TUI_MODE,
  TUI_NON_DIGITS_REGEXP,
  TUI_NUMBER_FORMAT,
  TUI_SPIN_ICONS,
  TUI_STRICT_MATCHER,
  TUI_SWIPE_OPTIONS,
  TUI_TEXTFIELD_CLEANER,
  TUI_TEXTFIELD_HOST,
  TUI_TEXTFIELD_SIZE,
  TUI_TEXTFIELD_WATCHED_CONTROLLER,
  TUI_VALUE_ACCESSOR,
  TuiActiveZoneDirective,
  TuiActiveZoneModule,
  TuiAlertModule,
  TuiAppearance,
  TuiAutoFocusDirective,
  TuiAutoFocusModule,
  TuiButtonComponent,
  TuiButtonModule,
  TuiCalendarComponent,
  TuiCalendarModule,
  TuiCheckedDirective,
  TuiCheckedModule,
  TuiCountryIsoCode,
  TuiDataListComponent,
  TuiDataListDirective,
  TuiDataListModule,
  TuiDay,
  TuiDayRange,
  TuiDestroyService,
  TuiDialogService,
  TuiDropdownDirective,
  TuiDroppableDirective,
  TuiDroppableModule,
  TuiElementDirective,
  TuiElementModule,
  TuiExpandComponent,
  TuiExpandContentDirective,
  TuiExpandModule,
  TuiFlagPipe,
  TuiFlagPipeModule,
  TuiFocusVisibleDirective,
  TuiFocusVisibleModule,
  TuiFocusVisibleService,
  TuiFocusableDirective,
  TuiFocusableModule,
  TuiFocusedDirective,
  TuiFocusedModule,
  TuiFormatDatePipe,
  TuiFormatDatePipeModule,
  TuiGroupDirective,
  TuiGroupModule,
  TuiHintComponent,
  TuiHintDirective,
  TuiHintDriverDirective,
  TuiHintHoverDirective,
  TuiHintModule,
  TuiHintOptionsDirective,
  TuiHintPositionDirective,
  TuiHostedDropdownComponent,
  TuiHostedDropdownModule,
  TuiHoveredDirective,
  TuiHoveredModule,
  TuiHoveredService,
  TuiIdService,
  TuiInteractiveState,
  TuiItemDirective,
  TuiItemModule,
  TuiLetDirective,
  TuiLetModule,
  TuiLinkComponent,
  TuiLinkModule,
  TuiLoaderComponent,
  TuiLoaderModule,
  TuiMapperPipe,
  TuiMapperPipeModule,
  TuiMaskAccessorDirective,
  TuiMaskAccessorModule,
  TuiModeDirective,
  TuiModeModule,
  TuiMonth,
  TuiMonthPipe,
  TuiMonthRange,
  TuiOptGroupDirective,
  TuiOptionComponent,
  TuiPanDirective,
  TuiPanModule,
  TuiPositionAccessor,
  TuiPositionService,
  TuiPressedDirective,
  TuiPressedModule,
  TuiPreventDefaultDirective,
  TuiPreventDefaultModule,
  TuiPrimitiveCheckboxComponent,
  TuiPrimitiveCheckboxModule,
  TuiPrimitiveSpinButtonComponent,
  TuiPrimitiveSpinButtonModule,
  TuiPrimitiveTextfieldComponent,
  TuiPrimitiveTextfieldDirective,
  TuiPrimitiveTextfieldModule,
  TuiPrimitiveYearPickerComponent,
  TuiPrimitiveYearPickerModule,
  TuiRangeState,
  TuiRectAccessor,
  TuiRepeatTimesDirective,
  TuiRepeatTimesModule,
  TuiResizeDirective,
  TuiResizeModule,
  TuiResizeService,
  TuiRouterLinkActiveService,
  TuiScrollIntoViewDirective,
  TuiScrollIntoViewModule,
  TuiScrollService,
  TuiScrollbarComponent,
  TuiScrollbarModule,
  TuiSvgComponent,
  TuiSvgModule,
  TuiSwipeDirective,
  TuiSwipeModule,
  TuiTextfieldAppearanceDirective,
  TuiTextfieldCleanerDirective,
  TuiTextfieldComponent,
  TuiTextfieldController,
  TuiTextfieldControllerModule,
  TuiTextfieldCustomContentDirective,
  TuiTextfieldFillerDirective,
  TuiTextfieldIconDirective,
  TuiTextfieldLabelOutsideDirective,
  TuiTextfieldPostfixDirective,
  TuiTextfieldPrefixDirective,
  TuiTextfieldSizeDirective,
  TuiTime,
  TuiTooltipComponent,
  TuiTooltipModule,
  TuiValidationError,
  TuiWrapperDirective,
  TuiWrapperModule,
  TuiYear,
  USER_AGENT,
  WINDOW,
  asCallable,
  changeDateSeparator,
  shouldCall,
  svgNodeFilter,
  tuiArrayRemove,
  tuiArrayShallowEquals,
  tuiArrayToggle,
  tuiAsControl,
  tuiAsDataList,
  tuiAsDataListAccessor,
  tuiAsDataListHost,
  tuiAsDialog,
  tuiAsFocusableItemAccessor,
  tuiAsOptionContent,
  tuiAsPositionAccessor,
  tuiAsTextfieldHost,
  tuiAssert,
  tuiButtonOptionsProvider,
  tuiClamp,
  tuiCoerceBooleanProperty,
  tuiControlValue,
  tuiCreateToken,
  tuiCreateTokenFromFactory,
  tuiDateClamp,
  tuiDropdownOptionsProvider,
  tuiExtractI18n,
  tuiFadeIn,
  tuiFormatNumber,
  tuiGetActualTarget,
  tuiGetBorder,
  tuiGetClipboardDataText,
  tuiGetClosestFocusable,
  tuiGetFractionPartPadded,
  tuiGetOriginalArrayFromQueryList,
  tuiHeightCollapse,
  tuiIfMap,
  tuiIsCurrentTarget,
  tuiIsEdgeOlderThan,
  tuiIsElement,
  tuiIsFirefox,
  tuiIsHTMLElement,
  tuiIsInput,
  tuiIsNativeFocused,
  tuiIsNativeFocusedIn,
  tuiIsNumber,
  tuiIsObserved,
  tuiIsPresent,
  tuiIsString,
  tuiMoveFocus,
  tuiNullableSame,
  tuiObjectFromEntries,
  tuiPositionAccessorFor,
  tuiPreventDefault,
  tuiProvideOptions,
  tuiPure,
  tuiPx,
  tuiQuantize,
  tuiQueryListChanges,
  tuiRectAccessorFor,
  tuiRetargetedBoundaryCrossing,
  tuiRound,
  tuiSizeBigger,
  tuiSlideInRight,
  tuiSlideInTop,
  tuiToInt,
  tuiTypedFromEvent,
  tuiWatch,
  tuiZoneOptimized,
  tuiZonefree
} from "./chunk-V5HVNAUO.js";
import {
  ActivatedRoute,
  Router,
  RouterLinkActive
} from "./chunk-J4J4264W.js";
import {
  DomSanitizer
} from "./chunk-QODR4S6D.js";
import {
  COMPOSITION_BUFFER_MODE,
  ControlContainer,
  DefaultValueAccessor,
  FormsModule,
  NG_VALIDATORS,
  NG_VALUE_ACCESSOR,
  NgControl,
  NgControlStatus,
  NgModel,
  NgSelectOption,
  RangeValueAccessor,
  ReactiveFormsModule,
  ɵNgSelectMultipleOption
} from "./chunk-4UOO7GJQ.js";
import {
  AsyncPipe,
  CommonModule,
  DOCUMENT,
  I18nPluralPipe,
  NgForOf,
  NgIf,
  NgStyle,
  NgTemplateOutlet,
  getDOM
} from "./chunk-D4UE5VFS.js";
import {
  Attribute,
  ChangeDetectionStrategy,
  ChangeDetectorRef,
  Component,
  ContentChild,
  ContentChildren,
  Directive,
  ElementRef,
  EventEmitter,
  HostBinding,
  HostListener,
  Inject,
  InjectFlags,
  Injectable,
  InjectionToken,
  Injector,
  Input,
  NgModule,
  NgZone,
  Optional,
  Output,
  Pipe,
  Renderer2,
  Self,
  SkipSelf,
  TemplateRef,
  Type,
  ViewChild,
  ViewChildren,
  ViewEncapsulation$1,
  forwardRef,
  inject,
  setClassMetadata,
  ɵɵInheritDefinitionFeature,
  ɵɵNgOnChangesFeature,
  ɵɵProvidersFeature,
  ɵɵadvance,
  ɵɵattribute,
  ɵɵclassProp,
  ɵɵcontentQuery,
  ɵɵdefineComponent,
  ɵɵdefineDirective,
  ɵɵdefineInjectable,
  ɵɵdefineInjector,
  ɵɵdefineNgModule,
  ɵɵdefinePipe,
  ɵɵdirectiveInject,
  ɵɵelement,
  ɵɵelementContainer,
  ɵɵelementContainerEnd,
  ɵɵelementContainerStart,
  ɵɵelementEnd,
  ɵɵelementStart,
  ɵɵgetCurrentView,
  ɵɵgetInheritedFactory,
  ɵɵhostProperty,
  ɵɵinject,
  ɵɵinjectAttribute,
  ɵɵinvalidFactory,
  ɵɵlistener,
  ɵɵloadQuery,
  ɵɵnamespaceSVG,
  ɵɵnextContext,
  ɵɵpipe,
  ɵɵpipeBind1,
  ɵɵpipeBind2,
  ɵɵpipeBind3,
  ɵɵpipeBindV,
  ɵɵprojection,
  ɵɵprojectionDef,
  ɵɵproperty,
  ɵɵpropertyInterpolate,
  ɵɵpureFunction0,
  ɵɵpureFunction1,
  ɵɵpureFunction2,
  ɵɵpureFunction3,
  ɵɵpureFunction4,
  ɵɵpureFunction6,
  ɵɵqueryRefresh,
  ɵɵreference,
  ɵɵresetView,
  ɵɵresolveDocument,
  ɵɵrestoreView,
  ɵɵsanitizeHtml,
  ɵɵsanitizeResourceUrl,
  ɵɵsanitizeUrl,
  ɵɵstyleProp,
  ɵɵsyntheticHostProperty,
  ɵɵtemplate,
  ɵɵtemplateRefExtractor,
  ɵɵtext,
  ɵɵtextInterpolate,
  ɵɵtextInterpolate1,
  ɵɵtextInterpolate2,
  ɵɵviewQuery
} from "./chunk-JIBT2MMA.js";
import {
  defer,
  isObservable,
  merge
} from "./chunk-WCP4RZ4Y.js";
import {
  BehaviorSubject,
  EMPTY,
  Observable,
  ReplaySubject,
  Subject,
  Subscription,
  __decorate,
  __rest,
  catchError,
  combineLatest,
  debounce,
  debounceTime,
  delay,
  distinctUntilChanged,
  filter,
  identity,
  interval,
  map,
  of,
  pairwise,
  repeat,
  share,
  shareReplay,
  skip,
  startWith,
  switchMap,
  take,
  takeUntil,
  tap,
  throttleTime,
  timer
} from "./chunk-7A7WJ6DX.js";
import {
  __commonJS,
  __toESM
} from "./chunk-XSKKLE2R.js";

// node_modules/text-mask-core/dist/textMaskCore.js
var require_textMaskCore = __commonJS({
  "node_modules/text-mask-core/dist/textMaskCore.js"(exports, module) {
    !function(e, r) {
      "object" == typeof exports && "object" == typeof module ? module.exports = r() : "function" == typeof define && define.amd ? define([], r) : "object" == typeof exports ? exports.textMaskCore = r() : e.textMaskCore = r();
    }(exports, function() {
      return function(e) {
        function r(n) {
          if (t[n])
            return t[n].exports;
          var o = t[n] = { exports: {}, id: n, loaded: false };
          return e[n].call(o.exports, o, o.exports, r), o.loaded = true, o.exports;
        }
        var t = {};
        return r.m = e, r.c = t, r.p = "", r(0);
      }([function(e, r, t) {
        "use strict";
        function n(e2) {
          return e2 && e2.__esModule ? e2 : { default: e2 };
        }
        Object.defineProperty(r, "__esModule", { value: true });
        var o = t(3);
        Object.defineProperty(r, "conformToMask", { enumerable: true, get: function() {
          return n(o).default;
        } });
        var i = t(2);
        Object.defineProperty(r, "adjustCaretPosition", { enumerable: true, get: function() {
          return n(i).default;
        } });
        var a = t(5);
        Object.defineProperty(r, "createTextMaskInputElement", { enumerable: true, get: function() {
          return n(a).default;
        } });
      }, function(e, r) {
        "use strict";
        Object.defineProperty(r, "__esModule", { value: true }), r.placeholderChar = "_", r.strFunction = "function";
      }, function(e, r) {
        "use strict";
        function t(e2) {
          var r2 = e2.previousConformedValue, t2 = void 0 === r2 ? o : r2, i = e2.previousPlaceholder, a = void 0 === i ? o : i, u = e2.currentCaretPosition, l = void 0 === u ? 0 : u, s = e2.conformedValue, f = e2.rawValue, d = e2.placeholderChar, c = e2.placeholder, p = e2.indexesOfPipedChars, v = void 0 === p ? n : p, h = e2.caretTrapIndexes, m = void 0 === h ? n : h;
          if (0 === l || !f.length)
            return 0;
          var y = f.length, g = t2.length, b = c.length, C = s.length, P = y - g, k = P > 0, x = 0 === g, O = P > 1 && !k && !x;
          if (O)
            return l;
          var T = k && (t2 === s || s === c), w = 0, M = void 0, S = void 0;
          if (T)
            w = l - P;
          else {
            var j = s.toLowerCase(), _ = f.toLowerCase(), V = _.substr(0, l).split(o), A = V.filter(function(e3) {
              return j.indexOf(e3) !== -1;
            });
            S = A[A.length - 1];
            var N = a.substr(0, A.length).split(o).filter(function(e3) {
              return e3 !== d;
            }).length, E = c.substr(0, A.length).split(o).filter(function(e3) {
              return e3 !== d;
            }).length, F = E !== N, R = void 0 !== a[A.length - 1] && void 0 !== c[A.length - 2] && a[A.length - 1] !== d && a[A.length - 1] !== c[A.length - 1] && a[A.length - 1] === c[A.length - 2];
            !k && (F || R) && N > 0 && c.indexOf(S) > -1 && void 0 !== f[l] && (M = true, S = f[l]);
            for (var I = v.map(function(e3) {
              return j[e3];
            }), J = I.filter(function(e3) {
              return e3 === S;
            }).length, W = A.filter(function(e3) {
              return e3 === S;
            }).length, q = c.substr(0, c.indexOf(d)).split(o).filter(function(e3, r3) {
              return e3 === S && f[r3] !== e3;
            }).length, L = q + W + J + (M ? 1 : 0), z = 0, B = 0; B < C; B++) {
              var D = j[B];
              if (w = B + 1, D === S && z++, z >= L)
                break;
            }
          }
          if (k) {
            for (var G = w, H = w; H <= b; H++)
              if (c[H] === d && (G = H), c[H] === d || m.indexOf(H) !== -1 || H === b)
                return G;
          } else if (M) {
            for (var K = w - 1; K >= 0; K--)
              if (s[K] === S || m.indexOf(K) !== -1 || 0 === K)
                return K;
          } else
            for (var Q = w; Q >= 0; Q--)
              if (c[Q - 1] === d || m.indexOf(Q) !== -1 || 0 === Q)
                return Q;
        }
        Object.defineProperty(r, "__esModule", { value: true }), r.default = t;
        var n = [], o = "";
      }, function(e, r, t) {
        "use strict";
        function n() {
          var e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : l, r2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : u, t2 = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};
          if (!(0, i.isArray)(r2)) {
            if (("undefined" == typeof r2 ? "undefined" : o(r2)) !== a.strFunction)
              throw new Error("Text-mask:conformToMask; The mask property must be an array.");
            r2 = r2(e2, t2), r2 = (0, i.processCaretTraps)(r2).maskWithoutCaretTraps;
          }
          var n2 = t2.guide, s = void 0 === n2 || n2, f = t2.previousConformedValue, d = void 0 === f ? l : f, c = t2.placeholderChar, p = void 0 === c ? a.placeholderChar : c, v = t2.placeholder, h = void 0 === v ? (0, i.convertMaskToPlaceholder)(r2, p) : v, m = t2.currentCaretPosition, y = t2.keepCharPositions, g = s === false && void 0 !== d, b = e2.length, C = d.length, P = h.length, k = r2.length, x = b - C, O = x > 0, T = m + (O ? -x : 0), w = T + Math.abs(x);
          if (y === true && !O) {
            for (var M = l, S = T; S < w; S++)
              h[S] === p && (M += p);
            e2 = e2.slice(0, T) + M + e2.slice(T, b);
          }
          for (var j = e2.split(l).map(function(e3, r3) {
            return { char: e3, isNew: r3 >= T && r3 < w };
          }), _ = b - 1; _ >= 0; _--) {
            var V = j[_].char;
            if (V !== p) {
              var A = _ >= T && C === k;
              V === h[A ? _ - x : _] && j.splice(_, 1);
            }
          }
          var N = l, E = false;
          e:
            for (var F = 0; F < P; F++) {
              var R = h[F];
              if (R === p) {
                if (j.length > 0)
                  for (; j.length > 0; ) {
                    var I = j.shift(), J = I.char, W = I.isNew;
                    if (J === p && g !== true) {
                      N += p;
                      continue e;
                    }
                    if (r2[F].test(J)) {
                      if (y === true && W !== false && d !== l && s !== false && O) {
                        for (var q = j.length, L = null, z = 0; z < q; z++) {
                          var B = j[z];
                          if (B.char !== p && B.isNew === false)
                            break;
                          if (B.char === p) {
                            L = z;
                            break;
                          }
                        }
                        null !== L ? (N += J, j.splice(L, 1)) : F--;
                      } else
                        N += J;
                      continue e;
                    }
                    E = true;
                  }
                g === false && (N += h.substr(F, P));
                break;
              }
              N += R;
            }
          if (g && O === false) {
            for (var D = null, G = 0; G < N.length; G++)
              h[G] === p && (D = G);
            N = null !== D ? N.substr(0, D + 1) : l;
          }
          return { conformedValue: N, meta: { someCharsRejected: E } };
        }
        Object.defineProperty(r, "__esModule", { value: true });
        var o = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e2) {
          return typeof e2;
        } : function(e2) {
          return e2 && "function" == typeof Symbol && e2.constructor === Symbol && e2 !== Symbol.prototype ? "symbol" : typeof e2;
        };
        r.default = n;
        var i = t(4), a = t(1), u = [], l = "";
      }, function(e, r, t) {
        "use strict";
        function n() {
          var e2 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : f, r2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : s.placeholderChar;
          if (!o(e2))
            throw new Error("Text-mask:convertMaskToPlaceholder; The mask property must be an array.");
          if (e2.indexOf(r2) !== -1)
            throw new Error("Placeholder character must not be used as part of the mask. Please specify a character that is not present in your mask as your placeholder character.\n\n" + ("The placeholder character that was received is: " + JSON.stringify(r2) + "\n\n") + ("The mask that was received is: " + JSON.stringify(e2)));
          return e2.map(function(e3) {
            return e3 instanceof RegExp ? r2 : e3;
          }).join("");
        }
        function o(e2) {
          return Array.isArray && Array.isArray(e2) || e2 instanceof Array;
        }
        function i(e2) {
          return "string" == typeof e2 || e2 instanceof String;
        }
        function a(e2) {
          return "number" == typeof e2 && void 0 === e2.length && !isNaN(e2);
        }
        function u(e2) {
          return "undefined" == typeof e2 || null === e2;
        }
        function l(e2) {
          for (var r2 = [], t2 = void 0; t2 = e2.indexOf(d), t2 !== -1; )
            r2.push(t2), e2.splice(t2, 1);
          return { maskWithoutCaretTraps: e2, indexes: r2 };
        }
        Object.defineProperty(r, "__esModule", { value: true }), r.convertMaskToPlaceholder = n, r.isArray = o, r.isString = i, r.isNumber = a, r.isNil = u, r.processCaretTraps = l;
        var s = t(1), f = [], d = "[]";
      }, function(e, r, t) {
        "use strict";
        function n(e2) {
          return e2 && e2.__esModule ? e2 : { default: e2 };
        }
        function o(e2) {
          var r2 = { previousConformedValue: void 0, previousPlaceholder: void 0 };
          return { state: r2, update: function(t2) {
            var n2 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : e2, o2 = n2.inputElement, s2 = n2.mask, d2 = n2.guide, m2 = n2.pipe, g2 = n2.placeholderChar, b2 = void 0 === g2 ? v.placeholderChar : g2, C = n2.keepCharPositions, P = void 0 !== C && C, k = n2.showMask, x = void 0 !== k && k;
            if ("undefined" == typeof t2 && (t2 = o2.value), t2 !== r2.previousConformedValue) {
              ("undefined" == typeof s2 ? "undefined" : l(s2)) === y && void 0 !== s2.pipe && void 0 !== s2.mask && (m2 = s2.pipe, s2 = s2.mask);
              var O = void 0, T = void 0;
              if (s2 instanceof Array && (O = (0, p.convertMaskToPlaceholder)(s2, b2)), s2 !== false) {
                var w = a(t2), M = o2.selectionEnd, S = r2.previousConformedValue, j = r2.previousPlaceholder, _ = void 0;
                if (("undefined" == typeof s2 ? "undefined" : l(s2)) === v.strFunction) {
                  if (T = s2(w, { currentCaretPosition: M, previousConformedValue: S, placeholderChar: b2 }), T === false)
                    return;
                  var V = (0, p.processCaretTraps)(T), A = V.maskWithoutCaretTraps, N = V.indexes;
                  T = A, _ = N, O = (0, p.convertMaskToPlaceholder)(T, b2);
                } else
                  T = s2;
                var E = { previousConformedValue: S, guide: d2, placeholderChar: b2, pipe: m2, placeholder: O, currentCaretPosition: M, keepCharPositions: P }, F = (0, c.default)(w, T, E), R = F.conformedValue, I = ("undefined" == typeof m2 ? "undefined" : l(m2)) === v.strFunction, J = {};
                I && (J = m2(R, u({ rawValue: w }, E)), J === false ? J = { value: S, rejected: true } : (0, p.isString)(J) && (J = { value: J }));
                var W = I ? J.value : R, q = (0, f.default)({ previousConformedValue: S, previousPlaceholder: j, conformedValue: W, placeholder: O, rawValue: w, currentCaretPosition: M, placeholderChar: b2, indexesOfPipedChars: J.indexesOfPipedChars, caretTrapIndexes: _ }), L = W === O && 0 === q, z = x ? O : h, B = L ? z : W;
                r2.previousConformedValue = B, r2.previousPlaceholder = O, o2.value !== B && (o2.value = B, i(o2, q));
              }
            }
          } };
        }
        function i(e2, r2) {
          document.activeElement === e2 && (g ? b(function() {
            return e2.setSelectionRange(r2, r2, m);
          }, 0) : e2.setSelectionRange(r2, r2, m));
        }
        function a(e2) {
          if ((0, p.isString)(e2))
            return e2;
          if ((0, p.isNumber)(e2))
            return String(e2);
          if (void 0 === e2 || null === e2)
            return h;
          throw new Error("The 'value' provided to Text Mask needs to be a string or a number. The value received was:\n\n " + JSON.stringify(e2));
        }
        Object.defineProperty(r, "__esModule", { value: true });
        var u = Object.assign || function(e2) {
          for (var r2 = 1; r2 < arguments.length; r2++) {
            var t2 = arguments[r2];
            for (var n2 in t2)
              Object.prototype.hasOwnProperty.call(t2, n2) && (e2[n2] = t2[n2]);
          }
          return e2;
        }, l = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e2) {
          return typeof e2;
        } : function(e2) {
          return e2 && "function" == typeof Symbol && e2.constructor === Symbol && e2 !== Symbol.prototype ? "symbol" : typeof e2;
        };
        r.default = o;
        var s = t(2), f = n(s), d = t(3), c = n(d), p = t(4), v = t(1), h = "", m = "none", y = "object", g = "undefined" != typeof navigator && /Android/i.test(navigator.userAgent), b = "undefined" != typeof requestAnimationFrame ? requestAnimationFrame : setTimeout;
      }]);
    });
  }
});

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-utils-date.js
function tuiImmutableUpdateInputDateMulti(days = [], day) {
  return ((days === null || days === void 0 ? void 0 : days.find((item) => item.daySame(day))) ? days.filter((item) => !item.daySame(day)) : days === null || days === void 0 ? void 0 : days.concat(day)) || [];
}

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-utils-files.js
var BYTES_PER_KIB = 1024;
var BYTES_PER_MIB = 1024 * BYTES_PER_KIB;
function tuiFormatSize(units, size) {
  if (size === void 0) {
    return null;
  }
  if (size < BYTES_PER_KIB) {
    return `${size} ${units[0]}`;
  }
  if (size < BYTES_PER_MIB) {
    return `${(size / BYTES_PER_KIB).toFixed(0)} ${units[1]}`;
  }
  return `${tuiRound(size / BYTES_PER_MIB, 2).toLocaleString("ru-RU")} ${units[2]}`;
}
function tuiGetAcceptArray(accept) {
  return accept.toLowerCase().split(",").map((format) => format.trim());
}

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-utils-format.js
function tuiStringHashToHsl(value) {
  if (value === "") {
    return "";
  }
  let hash = 0;
  for (let i = 0; i < value.length; i++) {
    hash = value.charCodeAt(i) + ((hash << 5) - hash);
    hash &= hash;
  }
  const hue = hash % 360;
  const saturation = 60 + hash % 5;
  const lightness = 80 + hash % 5;
  return `hsl(${hue},${saturation}%,${lightness}%)`;
}

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-constants.js
var TUI_DATE_MODE_MASKITO_ADAPTER = {
  DMY: "dd/mm/yyyy",
  MDY: "mm/dd/yyyy",
  YMD: "yyyy/mm/dd"
};
var DATE_TIME_SEPARATOR = ", ";
var EMPTY_MASK = {
  mask() {
    return false;
  }
};
var GROUP_CLASS_NAMES = [
  "_active",
  "_disabled",
  "_focused",
  "_focus-visible",
  "_hosted_dropdown_focused",
  "ng-invalid",
  "ng-touched",
  "_pressed",
  "_readonly"
];
var MASK_AFTER_CODE_REGEXP = /\([#]+\)|[#\- ]/g;
var TUI_PHONE_MASK = [
  CHAR_PLUS,
  "7",
  " ",
  TUI_DIGIT_REGEXP,
  TUI_DIGIT_REGEXP,
  TUI_DIGIT_REGEXP,
  " ",
  TUI_DIGIT_REGEXP,
  TUI_DIGIT_REGEXP,
  TUI_DIGIT_REGEXP,
  CHAR_HYPHEN,
  TUI_DIGIT_REGEXP,
  TUI_DIGIT_REGEXP,
  CHAR_HYPHEN,
  TUI_DIGIT_REGEXP,
  TUI_DIGIT_REGEXP
];
var TUI_TIME_MASK = [
  TUI_DIGIT_REGEXP,
  TUI_DIGIT_REGEXP,
  ":",
  TUI_DIGIT_REGEXP,
  TUI_DIGIT_REGEXP
];
var TUI_FLOATING_PRECISION = 7;
var MAX_DAY_RANGE_LENGTH_MAPPER = (min, value, maxLength, backwards) => {
  if (!(value === null || value === void 0 ? void 0 : value.isSingleDay) || !maxLength) {
    return min;
  }
  const negativeMaxLength = tuiObjectFromEntries(Object.entries(maxLength).map(([key, value2]) => [key, -value2]));
  const dateShift = value.from.append(backwards ? negativeMaxLength : maxLength).append({ day: !backwards ? -1 : 1 });
  if (backwards) {
    return dateShift.dayBefore(min) ? min : dateShift;
  }
  if (!min) {
    return dateShift;
  }
  return dateShift.dayAfter(min) ? min : dateShift;
};
var MAX_TIME_VALUES = {
  HH: 23,
  MM: 59,
  SS: 59,
  MS: 999
};
var DEFAULT_ROUTER_LINK_OPTIONS = {
  fragment: "",
  preserveFragment: true,
  replaceUrl: false,
  skipLocationChange: false,
  queryParams: null,
  useHref: false,
  target: null
};

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-utils-mask.js
function tuiNormalizeDateValue(dateValue, { value, min, max, dateFormat, dateSeparator }) {
  return value && value.toString(dateFormat, dateSeparator) === dateValue ? dateValue : TuiDay.normalizeParse(dateValue, dateFormat).dayLimit(min, max).toString(dateFormat, dateSeparator);
}
function tuiCreateAutoCorrectedDatePipe(config) {
  return (value) => {
    if (value.length !== DATE_FILLER_LENGTH) {
      return { value };
    }
    return {
      value: tuiNormalizeDateValue(value, config)
    };
  };
}
function parseWithLimit(value, config) {
  return TuiDay.normalizeParse(value.slice(0, DATE_FILLER_LENGTH), config.dateFormat).dayLimit(config.min, config.max);
}
function processRawValue(value, config) {
  const { dateFormat, dateSeparator } = config;
  switch (value.length) {
    case DATE_FILLER_LENGTH:
      return parseWithLimit(value, config).toString(dateFormat, dateSeparator);
    case DATE_FILLER_LENGTH + RANGE_SEPARATOR_CHAR.length:
      return parseWithLimit(value, config).toString(dateFormat, dateSeparator) + RANGE_SEPARATOR_CHAR;
    case DATE_RANGE_FILLER_LENGTH:
      return config.value && config.value.toString(dateFormat, dateSeparator) === value ? value : TuiDayRange.sort(parseWithLimit(value.slice(0, DATE_FILLER_LENGTH), config), parseWithLimit(value.slice(DATE_FILLER_LENGTH + RANGE_SEPARATOR_CHAR.length), config)).toString(dateFormat, dateSeparator);
    default:
      return value;
  }
}
function tuiCreateAutoCorrectedDateRangePipe(config) {
  return (value) => ({ value: processRawValue(value, config) });
}
function tuiCreateAutoCorrectedTimePipe(timeMode = "HH:MM", maxValues = {}) {
  const timeFormatArray = ["HH", "MM", "SS", "MS"];
  const safeValues = Object.assign(Object.assign({}, MAX_TIME_VALUES), maxValues);
  return (conformedValue) => {
    const indexesOfPipedChars = [];
    const conformedValueArr = conformedValue.split("");
    timeFormatArray.forEach((format) => {
      const position = timeMode.indexOf(format);
      const maxFirstDigit = parseInt(String(safeValues[format]).slice(0, 1), 10);
      if (parseInt(conformedValueArr[position], 10) > maxFirstDigit) {
        conformedValueArr[position + 1] = conformedValueArr[position];
        conformedValueArr[position] = "0";
        indexesOfPipedChars.push(position);
      }
    });
    const isInvalid = timeFormatArray.some((format) => parseInt(conformedValue.slice(timeMode.indexOf(format), 2), 10) > safeValues[format]);
    return isInvalid ? false : {
      value: conformedValueArr.join(""),
      indexesOfPipedChars
    };
  };
}
function tuiCreateAutoCorrectedDateTimePipe(configs) {
  const timePipe = tuiCreateAutoCorrectedTimePipe(configs.timeMode);
  return (value) => {
    if (value.length < DATE_FILLER_LENGTH) {
      return { value };
    }
    const [date, time] = value.split(DATE_TIME_SEPARATOR);
    const formattedDate = tuiNormalizeDateValue(date, configs);
    if (!time) {
      return { value: formattedDate };
    }
    const pipedTime = timePipe(time, {});
    if (!pipedTime || tuiIsString(pipedTime)) {
      return false;
    }
    return {
      value: `${formattedDate}${DATE_TIME_SEPARATOR}${pipedTime.value}`,
      indexesOfPipedChars: pipedTime.indexesOfPipedChars ? pipedTime.indexesOfPipedChars.map((i) => i + date.length + 2) : void 0
    };
  };
}
var TWO_DIGITS = new Array(2).fill(TUI_DIGIT_REGEXP);
var FOUR_DIGITS = new Array(4).fill(TUI_DIGIT_REGEXP);
function tuiCreateDateMask(mode, separator) {
  ngDevMode && tuiAssert.assert(separator.length === 1, "Separator should consist of only 1 symbol");
  switch (mode) {
    case "YMD":
      return [...FOUR_DIGITS, separator, ...TWO_DIGITS, separator, ...TWO_DIGITS];
    case "MDY":
    case "DMY":
    default:
      return [...TWO_DIGITS, separator, ...TWO_DIGITS, separator, ...FOUR_DIGITS];
  }
}
function tuiCreateDateRangeMask(dateMode, dateSeparator) {
  ngDevMode && tuiAssert.assert(dateSeparator.length === 1, "Separator should consist of only 1 symbol");
  const dateMask = tuiCreateDateMask(dateMode, dateSeparator);
  return [
    ...dateMask,
    CHAR_NO_BREAK_SPACE,
    CHAR_EN_DASH,
    CHAR_NO_BREAK_SPACE,
    ...dateMask
  ];
}
function tuiCreateTimePartMask(maxPartValue, prefix) {
  const { length } = String(maxPartValue);
  const regExp = new Array(length).fill(TUI_DIGIT_REGEXP);
  if (prefix) {
    regExp.unshift(prefix);
  }
  return regExp;
}
function tuiCreateTimeMask(mode, maxValues = {}) {
  const { HH, MM, SS, MS } = Object.assign(Object.assign({}, MAX_TIME_VALUES), maxValues);
  return [
    ...tuiCreateTimePartMask(HH),
    ...tuiCreateTimePartMask(MM, ":"),
    ...mode.includes("HH:MM:SS") ? tuiCreateTimePartMask(SS, ":") : [],
    ...mode === "HH:MM:SS.MSS" ? tuiCreateTimePartMask(MS, ".") : []
  ];
}

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-utils-math.js
function tuiHorizontalDirectionToNumber(direction) {
  switch (direction) {
    case "left":
      return -1;
    case "right":
      return 1;
  }
}
function tuiFindKeyStepsBoundariesByFn(keySteps, fn) {
  const keyStepUpperIndex = keySteps.findIndex((keyStep, i) => i && fn(keyStep));
  const lowerStep = keySteps[keyStepUpperIndex - 1] || keySteps[0];
  const upperStep = keySteps[keyStepUpperIndex] || keySteps[keySteps.length - 1];
  return [lowerStep, upperStep];
}
function tuiPercentageToKeyStepValue(valuePercentage, keySteps) {
  const [[lowerStepPercent, lowerStepValue], [upperStepPercent, upperStepValue]] = tuiFindKeyStepsBoundariesByFn(keySteps, ([keyStepPercentage, _]) => valuePercentage <= keyStepPercentage);
  const ratio = (valuePercentage - lowerStepPercent) / (upperStepPercent - lowerStepPercent);
  const controlValue = (upperStepValue - lowerStepValue) * ratio + lowerStepValue;
  return tuiRound(controlValue, TUI_FLOATING_PRECISION);
}
function tuiKeyStepValueToPercentage(value, keySteps) {
  const [[lowerStepPercent, lowerStepValue], [upperStepPercent, upperStepValue]] = tuiFindKeyStepsBoundariesByFn(keySteps, ([_, keyStepValue]) => value <= keyStepValue);
  const ratio = (value - lowerStepValue) / (upperStepValue - lowerStepValue) || 0;
  return (upperStepPercent - lowerStepPercent) * ratio + lowerStepPercent;
}

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-classes.js
var TuiDayRangePeriod = class {
  constructor(range, name, content) {
    this.range = range;
    this.name = name;
    this.content = content;
  }
  toString() {
    return this.name;
  }
};
var TuiNamedDay = class {
  constructor(day, name, displayDay = day) {
    this.day = day;
    this.name = name;
    this.displayDay = displayDay;
  }
  toString() {
    return this.name;
  }
};
var TuiStringifiableItem = class {
  constructor(item, stringify) {
    this.item = item;
    this.stringify = stringify;
  }
  toString() {
    return this.stringify(this.item);
  }
};

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-utils-miscellaneous.js
function tuiCreateDefaultDayRangePeriods(periodTitles = [
  "For all the time",
  "Today",
  "Yesterday",
  "Current week",
  "Current month",
  "Previous month"
]) {
  const today = TuiDay.currentLocal();
  const yesterday = today.append({ day: -1 });
  const startOfWeek = today.append({ day: -today.dayOfWeek() });
  const endOfWeek = startOfWeek.append({ day: 6 });
  const startOfMonth = today.append({ day: 1 - today.day });
  const endOfMonth = startOfMonth.append({ month: 1, day: -1 });
  const startOfLastMonth = startOfMonth.append({ month: -1 });
  return [
    new TuiDayRangePeriod(new TuiDayRange(TUI_FIRST_DAY, today), periodTitles[0]),
    new TuiDayRangePeriod(new TuiDayRange(today, today), periodTitles[1]),
    new TuiDayRangePeriod(new TuiDayRange(yesterday, yesterday), periodTitles[2]),
    new TuiDayRangePeriod(new TuiDayRange(startOfWeek, endOfWeek), periodTitles[3]),
    new TuiDayRangePeriod(new TuiDayRange(startOfMonth, endOfMonth), periodTitles[4]),
    new TuiDayRangePeriod(new TuiDayRange(startOfLastMonth, startOfMonth.append({ day: -1 })), periodTitles[5])
  ];
}
function tuiCreateTimePeriods(minHour = 0, maxHour = HOURS_IN_DAY, minutes = [0, 30]) {
  const timeArray = [];
  for (let i = minHour; i < maxHour; i++) {
    minutes.forEach((minute) => {
      const time = new TuiTime(i, minute);
      timeArray.push(time);
    });
  }
  return timeArray;
}
function tuiGetPrecision(num) {
  const [, fractionPart = ""] = String(num).split(".");
  return fractionPart.length;
}
function tuiIsFlat(items) {
  return !Array.isArray(items[0]);
}
function tuiControlValueFactory(control, valueTransformer) {
  return control ? tuiControlValue(control).pipe(map((value) => valueTransformer ? valueTransformer.fromControlValue(value) : value)) : of(null);
}

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-utils-phone.js
function tuiGetMaxAllowedPhoneLength(countries, isoCode) {
  return countries[isoCode].replace(/[()\- ]/g, "").length;
}
function tuiIsoToCountryCode(countriesMasks, isoCode) {
  return countriesMasks[isoCode].replace(MASK_AFTER_CODE_REGEXP, "");
}
function tuiNotKzRegion(value) {
  const region = Number(value.slice(1, 4));
  return region < 600 || region > 799;
}

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-tokens.js
var TUI_CALENDAR_DATE_STREAM = new InjectionToken("[TUI_CALENDAR_DATE_STREAM]");
function tuiDateStreamWithTransformer(transformer) {
  return {
    provide: TUI_CALENDAR_DATE_STREAM,
    deps: [
      [new Optional(), new Self(), NgControl],
      [new Optional(), transformer]
    ],
    useFactory: tuiControlValueFactory
  };
}
var TUI_COUNTRIES_DEFAULT_MASKS = {
  [TuiCountryIsoCode.AD]: "+376###-###",
  [TuiCountryIsoCode.AE]: "+971-##-###-####",
  [TuiCountryIsoCode.AF]: "+93##-###-####",
  [TuiCountryIsoCode.AG]: "+1(268) ###-####",
  [TuiCountryIsoCode.AI]: "+1(264) ###-####",
  [TuiCountryIsoCode.AL]: "+355(###) ###-###",
  [TuiCountryIsoCode.AM]: "+374##-###-###",
  [TuiCountryIsoCode.AO]: "+244(###) ###-###",
  [TuiCountryIsoCode.AR]: "+54(###) ####-####",
  [TuiCountryIsoCode.AT]: "+43(###) ###-####",
  [TuiCountryIsoCode.AU]: "+61#-####-####",
  [TuiCountryIsoCode.AW]: "+297###-####",
  [TuiCountryIsoCode.AZ]: "+994##-###-##-##",
  [TuiCountryIsoCode.BA]: "+387 ###-####-##",
  [TuiCountryIsoCode.BB]: "+1(246) ###-####",
  [TuiCountryIsoCode.BD]: "+880##-###-###",
  [TuiCountryIsoCode.BE]: "+32(###) ###-###",
  [TuiCountryIsoCode.BF]: "+226##-##-####",
  [TuiCountryIsoCode.BG]: "+359(###) ###-###",
  [TuiCountryIsoCode.BH]: "+973####-####",
  [TuiCountryIsoCode.BI]: "+257##-##-####",
  [TuiCountryIsoCode.BJ]: "+229##-##-####",
  [TuiCountryIsoCode.BL]: "+590 ## ## ## ## ##",
  [TuiCountryIsoCode.BM]: "+1(441) ###-####",
  [TuiCountryIsoCode.BN]: "+673###-####",
  [TuiCountryIsoCode.BO]: "+591#-###-####",
  [TuiCountryIsoCode.BQ]: "+599-###-####",
  [TuiCountryIsoCode.BR]: "+55(##) ####-#####",
  [TuiCountryIsoCode.BS]: "+1(242) ###-####",
  [TuiCountryIsoCode.BT]: "+975#-###-###",
  [TuiCountryIsoCode.BW]: "+267##-###-###",
  [TuiCountryIsoCode.BY]: "+375(##) ###-##-##",
  [TuiCountryIsoCode.BZ]: "+501###-####",
  [TuiCountryIsoCode.CA]: "+1(###) ###-####",
  [TuiCountryIsoCode.CD]: "+243(###) ###-###",
  [TuiCountryIsoCode.CF]: "+236-##-##-####",
  [TuiCountryIsoCode.CG]: "+242##-###-####",
  [TuiCountryIsoCode.CH]: "+41##-###-####",
  [TuiCountryIsoCode.CI]: "+225##-##-###-###",
  [TuiCountryIsoCode.CL]: "+56#-####-####",
  [TuiCountryIsoCode.CM]: "+237#####-####",
  [TuiCountryIsoCode.CN]: "+86(###) ####-####",
  [TuiCountryIsoCode.CO]: "+57(###) ###-####",
  [TuiCountryIsoCode.CR]: "+506####-####",
  [TuiCountryIsoCode.CU]: "+53#-###-####",
  [TuiCountryIsoCode.CV]: "+238(###) ##-##",
  [TuiCountryIsoCode.CW]: "+5999-###-####",
  [TuiCountryIsoCode.CY]: "+357##-###-###",
  [TuiCountryIsoCode.CZ]: "+420(###) ###-###",
  [TuiCountryIsoCode.DE]: "+49(###) ###-###-##",
  [TuiCountryIsoCode.DJ]: "+253##-##-##-##",
  [TuiCountryIsoCode.DK]: "+45##-##-##-##",
  [TuiCountryIsoCode.DM]: "+1(767) ###-####",
  [TuiCountryIsoCode.DO]: "+1(###) ###-####",
  [TuiCountryIsoCode.DZ]: "+213##-###-####",
  [TuiCountryIsoCode.EC]: "+593##-###-####",
  [TuiCountryIsoCode.EE]: "+372####-####",
  [TuiCountryIsoCode.EG]: "+20(###) ###-####",
  [TuiCountryIsoCode.ER]: "+291#-###-###",
  [TuiCountryIsoCode.ES]: "+34(###) ###-###",
  [TuiCountryIsoCode.ET]: "+251##-###-####",
  [TuiCountryIsoCode.FI]: "+358(###) ###-##-##",
  [TuiCountryIsoCode.FJ]: "+679##-#####",
  [TuiCountryIsoCode.FK]: "+500#####",
  [TuiCountryIsoCode.FM]: "+691###-####",
  [TuiCountryIsoCode.FR]: "+33 ## ## ## ## ##",
  [TuiCountryIsoCode.GA]: "+241##-##-##-##",
  [TuiCountryIsoCode.GB]: "+44##-####-####",
  [TuiCountryIsoCode.GD]: "+1(473) ###-####",
  [TuiCountryIsoCode.GE]: "+995(###) ###-###",
  [TuiCountryIsoCode.GF]: "+594 ## ## ## ## ##",
  [TuiCountryIsoCode.GH]: "+233(###) ###-###",
  [TuiCountryIsoCode.GI]: "+350###-#####",
  [TuiCountryIsoCode.GL]: "+299##-##-##",
  [TuiCountryIsoCode.GM]: "+220(###) ##-##",
  [TuiCountryIsoCode.GN]: "+224##-###-###",
  [TuiCountryIsoCode.GP]: "+590 ## ## ## ## ##",
  [TuiCountryIsoCode.GQ]: "+240##-###-####",
  [TuiCountryIsoCode.GR]: "+30(###) ###-####",
  [TuiCountryIsoCode.GT]: "+502#-###-####",
  [TuiCountryIsoCode.GW]: "+245#-######",
  [TuiCountryIsoCode.GY]: "+592###-####",
  [TuiCountryIsoCode.HK]: "+852####-####",
  [TuiCountryIsoCode.HN]: "+504####-####",
  [TuiCountryIsoCode.HR]: "+385##-###-####",
  [TuiCountryIsoCode.HT]: "+509##-##-####",
  [TuiCountryIsoCode.HU]: "+36(###) ###-###",
  [TuiCountryIsoCode.ID]: "+62(###) ###-##-###",
  [TuiCountryIsoCode.IE]: "+353(###) ###-###",
  [TuiCountryIsoCode.IL]: "+972##-###-####",
  [TuiCountryIsoCode.IN]: "+91(####) ###-###",
  [TuiCountryIsoCode.IQ]: "+964(###) ###-####",
  [TuiCountryIsoCode.IR]: "+98(###) ###-####",
  [TuiCountryIsoCode.IS]: "+354###-####",
  [TuiCountryIsoCode.IT]: "+39(###) ####-###",
  [TuiCountryIsoCode.JM]: "+1(876) ###-####",
  [TuiCountryIsoCode.JO]: "+962#-####-####",
  [TuiCountryIsoCode.JP]: "+81-##-####-####",
  [TuiCountryIsoCode.KE]: "+254###-######",
  [TuiCountryIsoCode.KG]: "+996(###) ###-###",
  [TuiCountryIsoCode.KH]: "+855##-###-###",
  [TuiCountryIsoCode.KM]: "+269##-#####",
  [TuiCountryIsoCode.KN]: "+1(869) ###-####",
  [TuiCountryIsoCode.KP]: "+850####-#############",
  [TuiCountryIsoCode.KR]: "+82##-###-####",
  [TuiCountryIsoCode.KW]: "+965####-####",
  [TuiCountryIsoCode.KY]: "+1(345) ###-####",
  [TuiCountryIsoCode.KZ]: "+7(###) ###-##-##",
  [TuiCountryIsoCode.LA]: "+856##-##-###-###",
  [TuiCountryIsoCode.LB]: "+961##-###-###",
  [TuiCountryIsoCode.LC]: "+1(758) ###-####",
  [TuiCountryIsoCode.LI]: "+423(###) ###-####",
  [TuiCountryIsoCode.LK]: "+94##-###-####",
  [TuiCountryIsoCode.LR]: "+231##-###-###",
  [TuiCountryIsoCode.LS]: "+266#-###-####",
  [TuiCountryIsoCode.LT]: "+370(###) ##-###",
  [TuiCountryIsoCode.LU]: "+352(###) ###-###",
  [TuiCountryIsoCode.LV]: "+371##-###-###",
  [TuiCountryIsoCode.LY]: "+218##-###-####",
  [TuiCountryIsoCode.MA]: "+212##-####-###",
  [TuiCountryIsoCode.MC]: "+377###-###-###",
  [TuiCountryIsoCode.MD]: "+373####-####",
  [TuiCountryIsoCode.ME]: "+382##-###-###",
  [TuiCountryIsoCode.MF]: "+590 ## ## ## ## ##",
  [TuiCountryIsoCode.MG]: "+261##-##-#####",
  [TuiCountryIsoCode.MK]: "+389##-###-###",
  [TuiCountryIsoCode.ML]: "+223##-##-####",
  [TuiCountryIsoCode.MM]: "+95##-###-###",
  [TuiCountryIsoCode.MN]: "+976##-##-####",
  [TuiCountryIsoCode.MO]: "+853####-####",
  [TuiCountryIsoCode.MQ]: "+596 ## ## ## ## ##",
  [TuiCountryIsoCode.MR]: "+222##-##-####",
  [TuiCountryIsoCode.MS]: "+1(664) ###-####",
  [TuiCountryIsoCode.MT]: "+356####-####",
  [TuiCountryIsoCode.MU]: "+230####-####",
  [TuiCountryIsoCode.MV]: "+960###-####",
  [TuiCountryIsoCode.MW]: "+265#-####-####",
  [TuiCountryIsoCode.MX]: "+52(###) ###-####",
  [TuiCountryIsoCode.MY]: "+60(###) ###-###",
  [TuiCountryIsoCode.MZ]: "+258##-###-###",
  [TuiCountryIsoCode.NA]: "+264##-###-####",
  [TuiCountryIsoCode.NC]: "+687 ### ###",
  [TuiCountryIsoCode.NE]: "+227##-##-####",
  [TuiCountryIsoCode.NG]: "+234(###) ###-####",
  [TuiCountryIsoCode.NI]: "+505####-####",
  [TuiCountryIsoCode.NL]: "+31##-###-####",
  [TuiCountryIsoCode.NO]: "+47(###) ##-###",
  [TuiCountryIsoCode.NP]: "+977##-###-###",
  [TuiCountryIsoCode.NZ]: "+64(###) ###-####",
  [TuiCountryIsoCode.OM]: "+968##-###-###",
  [TuiCountryIsoCode.PA]: "+507###-####",
  [TuiCountryIsoCode.PE]: "+51(###) ###-###",
  [TuiCountryIsoCode.PF]: "+689 ## ## ## ##",
  [TuiCountryIsoCode.PG]: "+675(###) ##-###",
  [TuiCountryIsoCode.PH]: "+63(###) ###-####",
  [TuiCountryIsoCode.PK]: "+92(###) ###-####",
  [TuiCountryIsoCode.PL]: "+48(###) ###-###",
  [TuiCountryIsoCode.PT]: "+351##-###-####",
  [TuiCountryIsoCode.PW]: "+680###-####",
  [TuiCountryIsoCode.PY]: "+595(###) ###-###",
  [TuiCountryIsoCode.QA]: "+974####-####",
  [TuiCountryIsoCode.RE]: "+262 ## ## ## ## ##",
  [TuiCountryIsoCode.RO]: "+40##-###-####",
  [TuiCountryIsoCode.RS]: "+381##-###-####",
  [TuiCountryIsoCode.RU]: "+7### ###-##-##",
  [TuiCountryIsoCode.RW]: "+250(###) ###-###",
  [TuiCountryIsoCode.SA]: "+966#-####-####",
  [TuiCountryIsoCode.SB]: "+677###-####",
  [TuiCountryIsoCode.SC]: "+248#-###-###",
  [TuiCountryIsoCode.SD]: "+249##-###-####",
  [TuiCountryIsoCode.SE]: "+46##-###-####",
  [TuiCountryIsoCode.SG]: "+65####-####",
  [TuiCountryIsoCode.SH]: "+290####",
  [TuiCountryIsoCode.SI]: "+386##-###-###",
  [TuiCountryIsoCode.SK]: "+421(###) ###-###",
  [TuiCountryIsoCode.SL]: "+232##-######",
  [TuiCountryIsoCode.SM]: "+378####-######",
  [TuiCountryIsoCode.SN]: "+221##-###-####",
  [TuiCountryIsoCode.SO]: "+252##-###-###",
  [TuiCountryIsoCode.SR]: "+597###-####",
  [TuiCountryIsoCode.ST]: "+239##-#####",
  [TuiCountryIsoCode.SV]: "+503##-##-####",
  [TuiCountryIsoCode.SX]: "+1(721) ###-####",
  [TuiCountryIsoCode.SY]: "+963##-####-###",
  [TuiCountryIsoCode.SZ]: "+268##-##-####",
  [TuiCountryIsoCode.TC]: "+1(649) ###-####",
  [TuiCountryIsoCode.TD]: "+235##-##-##-##",
  [TuiCountryIsoCode.TG]: "+228##-###-###",
  [TuiCountryIsoCode.TH]: "+66##-###-####",
  [TuiCountryIsoCode.TJ]: "+992##-###-####",
  [TuiCountryIsoCode.TL]: "+670###-#####",
  [TuiCountryIsoCode.TM]: "+993#-###-####",
  [TuiCountryIsoCode.TN]: "+216##-###-###",
  [TuiCountryIsoCode.TO]: "+676#####",
  [TuiCountryIsoCode.TR]: "+90(###) ###-####",
  [TuiCountryIsoCode.TT]: "+1(868) ###-####",
  [TuiCountryIsoCode.TW]: "+886#-####-####",
  [TuiCountryIsoCode.TZ]: "+255##-###-####",
  [TuiCountryIsoCode.UA]: "+380(##) ###-##-##",
  [TuiCountryIsoCode.UG]: "+256(###) ###-###",
  [TuiCountryIsoCode.US]: "+1(###) ###-####",
  [TuiCountryIsoCode.UY]: "+598#-###-##-##",
  [TuiCountryIsoCode.UZ]: "+998##-###-####",
  [TuiCountryIsoCode.VC]: "+1(784) ###-####",
  [TuiCountryIsoCode.VE]: "+58(###) ###-####",
  [TuiCountryIsoCode.VG]: "+1(284)###-####",
  [TuiCountryIsoCode.VN]: "+84(###) ####-###",
  [TuiCountryIsoCode.VU]: "+678##-#####",
  [TuiCountryIsoCode.WS]: "+685##-####",
  [TuiCountryIsoCode.XK]: "+383##-###-###",
  [TuiCountryIsoCode.YE]: "+967###-###-###",
  [TuiCountryIsoCode.YT]: "+262 ## ## ## ## ##",
  [TuiCountryIsoCode.ZA]: "+27##-###-####",
  [TuiCountryIsoCode.ZM]: "+260##-###-####",
  [TuiCountryIsoCode.ZW]: "+263#-######"
};
var TUI_COUNTRIES_MASKS = tuiCreateToken(TUI_COUNTRIES_DEFAULT_MASKS);
function tuiCountriesMasksProvider(options) {
  return tuiProvideOptions(TUI_COUNTRIES_MASKS, options, TUI_COUNTRIES_DEFAULT_MASKS);
}
var TUI_DATE_VALUE_TRANSFORMER = new InjectionToken("[TUI_DATE_VALUE_TRANSFORMER]");
var TUI_DATE_RANGE_VALUE_TRANSFORMER = new InjectionToken("[TUI_DATE_RANGE_VALUE_TRANSFORMER]");
var TUI_DATE_TIME_VALUE_TRANSFORMER = new InjectionToken("[TUI_DATE_TIME_VALUE_TRANSFORMER]");
var TUI_PROMPT_WORDS = tuiCreateTokenFromFactory(tuiExtractI18n("prompt"));
var TUI_CANCEL_WORD = tuiCreateTokenFromFactory(tuiExtractI18n("cancel"));
var TUI_DONE_WORD = tuiCreateTokenFromFactory(tuiExtractI18n("done"));
var TUI_MORE_WORD = tuiCreateTokenFromFactory(tuiExtractI18n("more"));
var TUI_HIDE_TEXT = tuiCreateTokenFromFactory(tuiExtractI18n("hide"));
var TUI_SHOW_ALL_TEXT = tuiCreateTokenFromFactory(tuiExtractI18n("showAll"));
var TUI_OTHER_DATE_TEXT = tuiCreateTokenFromFactory(tuiExtractI18n("otherDate"));
var TUI_CHOOSE_DAY_OR_RANGE_TEXTS = tuiCreateTokenFromFactory(tuiExtractI18n("mobileCalendarTexts"));
var TUI_FROM_TO_TEXTS = tuiCreateTokenFromFactory(tuiExtractI18n("range"));
var TUI_PLUS_MINUS_TEXTS = tuiCreateTokenFromFactory(tuiExtractI18n("countTexts"));
var TUI_TIME_TEXTS = tuiCreateTokenFromFactory(tuiExtractI18n("time"));
var TUI_DATE_TEXTS = tuiCreateTokenFromFactory(tuiExtractI18n("dateTexts"));
var TUI_DIGITAL_INFORMATION_UNITS = tuiCreateTokenFromFactory(tuiExtractI18n("digitalInformationUnits"));
var TUI_COPY_TEXTS = tuiCreateTokenFromFactory(tuiExtractI18n("copyTexts"));
var TUI_PASSWORD_TEXTS = tuiCreateTokenFromFactory(tuiExtractI18n("passwordTexts"));
var TUI_CALENDAR_MONTHS = tuiCreateTokenFromFactory(tuiExtractI18n("shortCalendarMonths"));
var TUI_FILE_TEXTS = tuiCreateTokenFromFactory(tuiExtractI18n("fileTexts"));
var TUI_PAGINATION_TEXTS = tuiCreateTokenFromFactory(tuiExtractI18n("pagination"));
var TUI_INPUT_FILE_TEXTS = tuiCreateTokenFromFactory(tuiExtractI18n("inputFileTexts"));
var TUI_MULTI_SELECT_TEXTS = tuiCreateTokenFromFactory(tuiExtractI18n("multiSelectTexts"));
var TUI_COUNTRIES = tuiCreateTokenFromFactory(tuiExtractI18n("countries"));
var TUI_INPUT_DATE_DEFAULT_OPTIONS = {
  icon: ({ $implicit }) => $implicit === "s" ? "tuiIconCalendar" : "tuiIconCalendarLarge",
  min: TUI_FIRST_DAY,
  max: TUI_LAST_DAY,
  nativePicker: false
};
var TUI_INPUT_DATE_OPTIONS = tuiCreateToken(TUI_INPUT_DATE_DEFAULT_OPTIONS);
function tuiInputDateOptionsProvider(options) {
  return tuiProvideOptions(TUI_INPUT_DATE_OPTIONS, options, TUI_INPUT_DATE_DEFAULT_OPTIONS);
}
var TUI_DEFAULT_ITEMS_HANDLERS = {
  stringify: TUI_DEFAULT_STRINGIFY,
  identityMatcher: TUI_DEFAULT_IDENTITY_MATCHER,
  disabledItemHandler: ALWAYS_FALSE_HANDLER
};
var TUI_ITEMS_HANDLERS = tuiCreateToken(TUI_DEFAULT_ITEMS_HANDLERS);
function tuiItemsHandlersProvider(options) {
  return tuiProvideOptions(TUI_ITEMS_HANDLERS, options, TUI_DEFAULT_ITEMS_HANDLERS);
}
var TUI_MOBILE_CALENDAR = new InjectionToken("[TUI_MOBILE_CALENDAR]");
var TUI_MONTH_FORMATTER = new InjectionToken("[TUI_MONTH_FORMATTER]");
var TUI_TAB_MARGIN = tuiCreateToken(24);
var TUI_VALIDATION_ERRORS = tuiCreateToken({});

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-abstract.js
var AbstractTuiNativeSelect = class {
  constructor(host, control, el, idService, itemsHandlers) {
    this.host = host;
    this.control = control;
    this.el = el;
    this.idService = idService;
    this.itemsHandlers = itemsHandlers;
    this.placeholder = "";
    this.disabledItemHandler = null;
    this.datalist = null;
  }
  get id() {
    return this.el.nativeElement.id || this.idService.generate();
  }
  get emptyOption() {
    return !!this.placeholder && !this.control.value;
  }
};
AbstractTuiNativeSelect.ɵfac = function AbstractTuiNativeSelect_Factory(t) {
  return new (t || AbstractTuiNativeSelect)(ɵɵdirectiveInject(TUI_TEXTFIELD_HOST), ɵɵdirectiveInject(AbstractTuiControl), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(TuiIdService), ɵɵdirectiveInject(TUI_ITEMS_HANDLERS));
};
AbstractTuiNativeSelect.ɵdir = ɵɵdefineDirective({
  type: AbstractTuiNativeSelect,
  viewQuery: function AbstractTuiNativeSelect_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(TuiDataListDirective, 7, TemplateRef);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.datalist = _t.first);
    }
  },
  hostVars: 1,
  hostBindings: function AbstractTuiNativeSelect_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵhostProperty("id", ctx.id);
    }
  },
  inputs: {
    placeholder: "placeholder",
    disabledItemHandler: "disabledItemHandler"
  }
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AbstractTuiNativeSelect, [{
    type: Directive
  }], function() {
    return [{
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_TEXTFIELD_HOST]
      }]
    }, {
      type: AbstractTuiControl,
      decorators: [{
        type: Inject,
        args: [AbstractTuiControl]
      }]
    }, {
      type: ElementRef,
      decorators: [{
        type: Inject,
        args: [ElementRef]
      }]
    }, {
      type: TuiIdService,
      decorators: [{
        type: Inject,
        args: [TuiIdService]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_ITEMS_HANDLERS]
      }]
    }];
  }, {
    placeholder: [{
      type: Input
    }],
    disabledItemHandler: [{
      type: Input
    }],
    datalist: [{
      type: ViewChild,
      args: [TuiDataListDirective, {
        read: TemplateRef,
        static: true
      }]
    }],
    id: [{
      type: HostBinding,
      args: ["id"]
    }]
  });
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-arrow.js
function TuiArrowComponent_tui_svg_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "tui-svg", 2);
  }
  if (rf & 2) {
    const src_r2 = ctx.polymorpheusOutlet;
    ɵɵproperty("src", src_r2);
  }
}
function TuiArrowComponent_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
var TUI_ARROW_DEFAULT_OPTIONS = {
  iconSmall: "tuiIconChevronDown",
  iconLarge: "tuiIconChevronDownLarge"
};
var TUI_ARROW_OPTIONS = tuiCreateToken(TUI_ARROW_DEFAULT_OPTIONS);
function tuiArrowOptionsProvider(options) {
  return tuiProvideOptions(TUI_ARROW_OPTIONS, options, TUI_ARROW_DEFAULT_OPTIONS);
}
var TuiArrowComponent = class {
  constructor(dropdown, textfieldSize, options) {
    this.dropdown = dropdown;
    this.textfieldSize = textfieldSize;
    this.options = options;
  }
  get rotated() {
    return this.dropdown.open;
  }
  get arrowIcon() {
    return tuiSizeBigger(this.textfieldSize.size) ? this.options.iconLarge : this.options.iconSmall;
  }
};
TuiArrowComponent.ɵfac = function TuiArrowComponent_Factory(t) {
  return new (t || TuiArrowComponent)(ɵɵdirectiveInject(TuiHostedDropdownComponent), ɵɵdirectiveInject(TUI_TEXTFIELD_SIZE), ɵɵdirectiveInject(TUI_ARROW_OPTIONS));
};
TuiArrowComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiArrowComponent,
  selectors: [["tui-arrow"]],
  hostVars: 2,
  hostBindings: function TuiArrowComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("_rotated", ctx.rotated);
    }
  },
  decls: 3,
  vars: 4,
  consts: [[3, "src", 4, "polymorpheusOutlet"], [4, "ngIf"], [3, "src"]],
  template: function TuiArrowComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵtemplate(0, TuiArrowComponent_tui_svg_0_Template, 1, 1, "tui-svg", 0);
      ɵɵtemplate(1, TuiArrowComponent_ng_container_1_Template, 1, 0, "ng-container", 1);
      ɵɵpipe(2, "async");
    }
    if (rf & 2) {
      ɵɵproperty("polymorpheusOutlet", ctx.arrowIcon);
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ɵɵpipeBind1(2, 2, ctx.dropdown.openChange));
    }
  },
  dependencies: [TuiSvgComponent, PolymorpheusOutletDirective, NgIf, AsyncPipe],
  styles: ["[_nghost-%COMP%]{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;display:block;cursor:pointer;pointer-events:none}._rotated[_nghost-%COMP%]{transform:rotate(180deg)}"],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiArrowComponent, [{
    type: Component,
    args: [{
      selector: "tui-arrow",
      templateUrl: "./arrow.template.html",
      styleUrls: ["./arrow.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush
    }]
  }], function() {
    return [{
      type: TuiHostedDropdownComponent,
      decorators: [{
        type: Inject,
        args: [TuiHostedDropdownComponent]
      }]
    }, {
      type: TuiTextfieldSizeDirective,
      decorators: [{
        type: Inject,
        args: [TUI_TEXTFIELD_SIZE]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_ARROW_OPTIONS]
      }]
    }];
  }, {
    rotated: [{
      type: HostBinding,
      args: ["class._rotated"]
    }]
  });
})();
var TUI_ARROW = new PolymorpheusComponent(TuiArrowComponent);
var TuiArrowModule = class {
};
TuiArrowModule.ɵfac = function TuiArrowModule_Factory(t) {
  return new (t || TuiArrowModule)();
};
TuiArrowModule.ɵmod = ɵɵdefineNgModule({
  type: TuiArrowModule,
  declarations: [TuiArrowComponent],
  imports: [CommonModule, TuiSvgModule, PolymorpheusModule],
  exports: [TuiArrowComponent]
});
TuiArrowModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, TuiSvgModule, PolymorpheusModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiArrowModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, TuiSvgModule, PolymorpheusModule],
      declarations: [TuiArrowComponent],
      exports: [TuiArrowComponent]
    }]
  }], null, null);
})();
var TUI_ARROW_DEFAULT_MODE = {
  interactive: TUI_ARROW,
  disabled: TUI_ARROW
};
var TUI_ARROW_MODE = tuiCreateToken(TUI_ARROW_DEFAULT_MODE);
function tuiArrowModeProvider(options) {
  return tuiProvideOptions(TUI_ARROW_MODE, options, TUI_ARROW_DEFAULT_MODE);
}

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-accordion.js
var _c0 = ["focusableElement"];
function TuiAccordionItemComponent_ng_container_5_tui_svg_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "tui-svg", 9);
  }
  if (rf & 2) {
    const src_r5 = ctx.polymorpheusOutlet;
    const ctx_r4 = ɵɵnextContext(2);
    ɵɵclassProp("t-icon_open", ctx_r4.open);
    ɵɵproperty("src", src_r5);
  }
}
function TuiAccordionItemComponent_ng_container_5_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, TuiAccordionItemComponent_ng_container_5_tui_svg_1_Template, 1, 3, "tui-svg", 8);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("polymorpheusOutlet", ctx_r1.options.iconLarge);
  }
}
function TuiAccordionItemComponent_ng_template_7_div_0_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtext(1);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const text_r8 = ctx.polymorpheusOutlet;
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", text_r8, " ");
  }
}
function TuiAccordionItemComponent_ng_template_7_div_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 11);
    ɵɵtemplate(1, TuiAccordionItemComponent_ng_template_7_div_0_ng_container_1_Template, 2, 1, "ng-container", 12);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r6 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("polymorpheusOutlet", ctx_r6.lazyContent);
  }
}
function TuiAccordionItemComponent_ng_template_7_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtemplate(0, TuiAccordionItemComponent_ng_template_7_div_0_Template, 2, 1, "div", 10);
  }
  if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵproperty("ngIf", ctx_r2.lazyContent);
  }
}
function TuiAccordionItemComponent_div_8_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 13);
    ɵɵprojection(1, 1);
    ɵɵelementEnd();
  }
}
var _c1 = ["*", [["", "tuiAccordionItemContent", ""]]];
var _c2 = ["*", "[tuiAccordionItemContent]"];
var _c3 = [[["tui-accordion-item"]]];
var _c4 = ["tui-accordion-item"];
var TuiAccordionItemContentDirective = class extends PolymorpheusTemplate {
  constructor(templateRef, cdr) {
    super(templateRef, cdr);
  }
};
TuiAccordionItemContentDirective.ɵfac = function TuiAccordionItemContentDirective_Factory(t) {
  return new (t || TuiAccordionItemContentDirective)(ɵɵdirectiveInject(TemplateRef, 2), ɵɵdirectiveInject(ChangeDetectorRef));
};
TuiAccordionItemContentDirective.ɵdir = ɵɵdefineDirective({
  type: TuiAccordionItemContentDirective,
  selectors: [["ng-template", "tuiAccordionItemContent", ""]],
  features: [ɵɵInheritDefinitionFeature]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiAccordionItemContentDirective, [{
    type: Directive,
    args: [{
      selector: "ng-template[tuiAccordionItemContent]"
    }]
  }], function() {
    return [{
      type: TemplateRef,
      decorators: [{
        type: Inject,
        args: [TemplateRef]
      }, {
        type: Self
      }]
    }, {
      type: ChangeDetectorRef,
      decorators: [{
        type: Inject,
        args: [ChangeDetectorRef]
      }]
    }];
  }, null);
})();
var TuiAccordionItemEagerContentDirective = class {
};
TuiAccordionItemEagerContentDirective.ɵfac = function TuiAccordionItemEagerContentDirective_Factory(t) {
  return new (t || TuiAccordionItemEagerContentDirective)();
};
TuiAccordionItemEagerContentDirective.ɵdir = ɵɵdefineDirective({
  type: TuiAccordionItemEagerContentDirective,
  selectors: [["", "tuiAccordionItemContent", "", 5, "ng-template"]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiAccordionItemEagerContentDirective, [{
    type: Directive,
    args: [{
      selector: "[tuiAccordionItemContent]:not(ng-template)"
    }]
  }], null, null);
})();
var TuiAccordionItemComponent = class extends AbstractTuiInteractive {
  constructor(cdr, mode$, options) {
    super();
    this.cdr = cdr;
    this.mode$ = mode$;
    this.options = options;
    this.noPadding = false;
    this.showArrow = true;
    this.borders = "all";
    this.size = "m";
    this.disabled = false;
    this.disableHover = false;
    this.open = false;
    this.async = false;
    this.openChange = new EventEmitter();
  }
  get nativeFocusableElement() {
    return this.disabled || !this.focusableElement ? null : this.focusableElement.nativeElement;
  }
  get focused() {
    return tuiIsNativeFocused(this.nativeFocusableElement);
  }
  onFocused(focused) {
    this.updateFocused(focused);
  }
  onRowToggle() {
    if (!this.disabled) {
      this.updateOpen(!this.open);
    }
  }
  onItemKeyDownEsc(event) {
    if (!this.open) {
      return;
    }
    event.stopPropagation();
    this.updateOpen(false);
  }
  close() {
    this.updateOpen(false);
    this.cdr.markForCheck();
  }
  updateOpen(open) {
    if (this.open === open) {
      return;
    }
    this.open = open;
    this.openChange.emit(open);
  }
};
TuiAccordionItemComponent.ɵfac = function TuiAccordionItemComponent_Factory(t) {
  return new (t || TuiAccordionItemComponent)(ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(TUI_MODE), ɵɵdirectiveInject(TUI_ARROW_OPTIONS));
};
TuiAccordionItemComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiAccordionItemComponent,
  selectors: [["tui-accordion-item"]],
  contentQueries: function TuiAccordionItemComponent_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, TuiAccordionItemEagerContentDirective, 5);
      ɵɵcontentQuery(dirIndex, TuiAccordionItemContentDirective, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.eagerContent = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.lazyContent = _t.first);
    }
  },
  viewQuery: function TuiAccordionItemComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(_c0, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.focusableElement = _t.first);
    }
  },
  hostVars: 8,
  hostBindings: function TuiAccordionItemComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("$.data-mode.attr", function TuiAccordionItemComponent___data_mode_attr_HostBindingHandler() {
        return ctx.mode$;
      });
    }
    if (rf & 2) {
      ɵɵattribute("data-borders", ctx.borders)("data-size", ctx.size);
      ɵɵclassProp("_no-padding", ctx.noPadding)("_has-arrow", ctx.showArrow)("_disabled", ctx.disabled);
    }
  },
  inputs: {
    noPadding: "noPadding",
    showArrow: "showArrow",
    borders: "borders",
    size: "size",
    disabled: "disabled",
    disableHover: "disableHover",
    open: "open",
    async: "async"
  },
  outputs: {
    openChange: "openChange"
  },
  features: [ɵɵProvidersFeature([tuiAsFocusableItemAccessor(TuiAccordionItemComponent), MODE_PROVIDER]), ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c2,
  decls: 9,
  vars: 10,
  consts: [["automation-id", "tui-accordion__item-wrapper", 1, "t-wrapper"], ["automation-id", "tui-accordion__item-header", "type", "button", 1, "t-header", 3, "disabled", "tuiFocusable", "click", "keydown.esc", "tuiFocusedChange"], ["focusableElement", ""], ["automation-id", "tui-accordion__item-title", 1, "t-title"], [4, "ngIf"], [3, "async", "expanded"], ["tuiExpandContent", ""], ["class", "t-content", 4, "ngIf"], ["automation-id", "tui-accordion__item-arrow", "class", "t-icon", 3, "t-icon_open", "src", 4, "polymorpheusOutlet"], ["automation-id", "tui-accordion__item-arrow", 1, "t-icon", 3, "src"], ["automation-id", "tui-accordion__item-content", "class", "t-content", 4, "ngIf"], ["automation-id", "tui-accordion__item-content", 1, "t-content"], [4, "polymorpheusOutlet"], [1, "t-content"]],
  template: function TuiAccordionItemComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c1);
      ɵɵelementStart(0, "div", 0)(1, "button", 1, 2);
      ɵɵlistener("click", function TuiAccordionItemComponent_Template_button_click_1_listener() {
        return ctx.onRowToggle();
      })("keydown.esc", function TuiAccordionItemComponent_Template_button_keydown_esc_1_listener($event) {
        return ctx.onItemKeyDownEsc($event);
      })("tuiFocusedChange", function TuiAccordionItemComponent_Template_button_tuiFocusedChange_1_listener($event) {
        return ctx.onFocused($event);
      });
      ɵɵelementStart(3, "span", 3);
      ɵɵprojection(4);
      ɵɵelementEnd();
      ɵɵtemplate(5, TuiAccordionItemComponent_ng_container_5_Template, 2, 1, "ng-container", 4);
      ɵɵelementEnd();
      ɵɵelementStart(6, "tui-expand", 5);
      ɵɵtemplate(7, TuiAccordionItemComponent_ng_template_7_Template, 1, 1, "ng-template", 6);
      ɵɵtemplate(8, TuiAccordionItemComponent_div_8_Template, 2, 0, "div", 7);
      ɵɵelementEnd()();
    }
    if (rf & 2) {
      ɵɵadvance(1);
      ɵɵclassProp("t-header_hoverable", !ctx.disableHover)("t-header_open", ctx.open);
      ɵɵproperty("disabled", ctx.computedDisabled)("tuiFocusable", ctx.computedFocusable);
      ɵɵadvance(4);
      ɵɵproperty("ngIf", ctx.showArrow);
      ɵɵadvance(1);
      ɵɵproperty("async", ctx.async)("expanded", ctx.open);
      ɵɵadvance(2);
      ɵɵproperty("ngIf", ctx.eagerContent);
    }
  },
  dependencies: [TuiSvgComponent, TuiExpandComponent, TuiFocusableDirective, TuiFocusedDirective, NgIf, PolymorpheusOutletDirective, TuiExpandContentDirective],
  styles: ['[_nghost-%COMP%]{position:relative;display:block;overflow:hidden;border-radius:var(--tui-radius-l)}[data-borders=top-bottom][_nghost-%COMP%]{border-radius:0!important}.t-wrapper[_ngcontent-%COMP%]{position:relative;border-radius:inherit}.t-wrapper[_ngcontent-%COMP%]:after{position:absolute;top:0;left:0;width:100%;height:100%;content:"";box-sizing:border-box;border-radius:inherit;border:1px solid var(--tui-base-04);pointer-events:none}[_nghost-%COMP%]:not([data-borders])   .t-wrapper[_ngcontent-%COMP%]:after{border-width:0}[data-borders=all][_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]:after{border-width:1px}[data-borders=top-bottom][_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]:after{border-left-width:0;border-right-width:0}[data-borders=top][_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]:after{border-left-width:0;border-right-width:0;border-bottom-width:0}[data-borders=bottom][_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]:after{border-left-width:0;border-right-width:0;border-top-width:0}[data-mode=onDark][_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]:after{border-color:var(--tui-base-03)}[data-mode=onLight][_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]:after{border-color:var(--tui-text-01)}[_nghost-%COMP%]:not([data-mode])   .t-wrapper[_ngcontent-%COMP%]{background:var(--tui-base-01)}.t-header[_ngcontent-%COMP%]{-webkit-appearance:none;-moz-appearance:none;appearance:none;border:0;background:none;font-size:inherit;line-height:inherit;text-decoration:none;transition-property:background;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;display:flex;width:100%;font:var(--tui-font-text-l);align-items:center;box-sizing:border-box;border-bottom:1px solid var(--tui-base-04);min-height:var(--tui-height-l);padding:.75rem 1.25rem;color:var(--tui-text-01);cursor:pointer;text-align:left;outline:none}.t-header[_ngcontent-%COMP%]:focus-visible{box-shadow:inset 0 0 0 2px var(--tui-focus)}[data-mode=onDark][_nghost-%COMP%]   .t-header[_ngcontent-%COMP%]{color:var(--tui-text-01-night);border-color:var(--tui-base-03)}[data-mode=onLight][_nghost-%COMP%]   .t-header[_ngcontent-%COMP%]{border-color:var(--tui-text-01)}[_nghost-%COMP%]:not([data-borders])   .t-header[_ngcontent-%COMP%]{border-bottom-width:0;box-shadow:none}._has-arrow[_nghost-%COMP%]   .t-header[_ngcontent-%COMP%]{padding-right:.75rem}[data-mode=onDark][_nghost-%COMP%]   .t-header_open[_ngcontent-%COMP%]{background:var(--tui-clear-inverse)}[data-mode=onLight][_nghost-%COMP%]   .t-header_open[_ngcontent-%COMP%]{background:var(--tui-clear)}[data-size=s][_nghost-%COMP%]   .t-header[_ngcontent-%COMP%]{font:var(--tui-font-text-m);min-height:var(--tui-height-m);padding:.625rem .75rem .625rem 1rem}._no-padding[_nghost-%COMP%]   .t-header[_ngcontent-%COMP%]{padding-left:0;padding-right:0}._disabled[_nghost-%COMP%]   .t-header[_ngcontent-%COMP%]{cursor:default}.t-wrapper[_ngcontent-%COMP%]:hover:not([data-mode]) > .t-header_hoverable[_ngcontent-%COMP%]{background:var(--tui-base-02)}.t-wrapper[_ngcontent-%COMP%]:hover[data-mode=onDark] > .t-header_hoverable[_ngcontent-%COMP%]{background:var(--tui-clear-inverse)}.t-wrapper[_ngcontent-%COMP%]:hover[data-mode=onLight] > .t-header_hoverable[_ngcontent-%COMP%]{background:var(--tui-clear)}.t-title[_ngcontent-%COMP%]{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;margin-right:0;flex-grow:1}._has-arrow[_nghost-%COMP%]   .t-title[_ngcontent-%COMP%]{margin-right:.5rem}.t-icon[_ngcontent-%COMP%]{transition-property:transform,color;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;width:1.5rem;height:1.5rem;margin-left:auto;color:var(--tui-base-06)}.t-icon_open[_ngcontent-%COMP%]{transform:rotate(180deg)}[data-mode][_nghost-%COMP%]   .t-icon[_ngcontent-%COMP%]{opacity:var(--tui-disabled-opacity)}[_nghost-%COMP%]:hover[data-mode]   .t-icon[_ngcontent-%COMP%]{opacity:.8}[data-mode=onDark][_nghost-%COMP%]   .t-icon[_ngcontent-%COMP%]{color:var(--tui-text-01-night)}[data-mode=onLight][_nghost-%COMP%]   .t-icon[_ngcontent-%COMP%]{color:var(--tui-text-01)}[_nghost-%COMP%]:hover:not([data-mode])   .t-icon[_ngcontent-%COMP%]{color:var(--tui-base-07)}.t-content[_ngcontent-%COMP%]{font:var(--tui-font-text-m);padding:1.25rem;word-wrap:break-word}[data-size=s][_nghost-%COMP%]   .t-content[_ngcontent-%COMP%]{font:var(--tui-font-text-s);padding:1rem}'],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiAccordionItemComponent, [{
    type: Component,
    args: [{
      selector: "tui-accordion-item",
      templateUrl: "./accordion-item.template.html",
      styleUrls: ["./accordion-item.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [tuiAsFocusableItemAccessor(TuiAccordionItemComponent), MODE_PROVIDER],
      host: {
        "($.data-mode.attr)": "mode$"
      }
    }]
  }], function() {
    return [{
      type: ChangeDetectorRef,
      decorators: [{
        type: Inject,
        args: [ChangeDetectorRef]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Inject,
        args: [TUI_MODE]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_ARROW_OPTIONS]
      }]
    }];
  }, {
    focusableElement: [{
      type: ViewChild,
      args: ["focusableElement"]
    }],
    noPadding: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["class._no-padding"]
    }],
    showArrow: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["class._has-arrow"]
    }],
    borders: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["attr.data-borders"]
    }],
    size: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["attr.data-size"]
    }],
    disabled: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["class._disabled"]
    }],
    disableHover: [{
      type: Input
    }],
    open: [{
      type: Input
    }],
    async: [{
      type: Input
    }],
    openChange: [{
      type: Output
    }],
    eagerContent: [{
      type: ContentChild,
      args: [TuiAccordionItemEagerContentDirective]
    }],
    lazyContent: [{
      type: ContentChild,
      args: [TuiAccordionItemContentDirective]
    }]
  });
})();
var TuiAccordionComponent = class {
  constructor(destroy$) {
    this.destroy$ = destroy$;
    this.closeOthers = true;
    this.rounded = true;
    this.accordionItems = EMPTY_QUERY;
  }
  ngAfterContentInit() {
    const {
      accordionItems
    } = this;
    const rows$ = tuiQueryListChanges(accordionItems);
    const newOpenRow$ = rows$.pipe(pairwise(), map(([previous, current]) => current.find((item) => !previous.includes(item) && item.open)), filter(tuiIsPresent));
    const rowsOpen$ = merge(rows$.pipe(switchMap((rows) => merge(...rows.map((row) => row.openChange.pipe(filter(identity), map(() => row)))))), newOpenRow$).pipe(filter(() => this.closeOthers), takeUntil(this.destroy$));
    rowsOpen$.subscribe((currentRow) => {
      accordionItems.forEach((row) => {
        if (currentRow !== row) {
          row.close();
        }
      });
    });
  }
};
TuiAccordionComponent.ɵfac = function TuiAccordionComponent_Factory(t) {
  return new (t || TuiAccordionComponent)(ɵɵdirectiveInject(TuiDestroyService, 2));
};
TuiAccordionComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiAccordionComponent,
  selectors: [["tui-accordion"]],
  contentQueries: function TuiAccordionComponent_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, TuiAccordionItemComponent, 4);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.accordionItems = _t);
    }
  },
  inputs: {
    closeOthers: "closeOthers",
    rounded: "rounded"
  },
  features: [ɵɵProvidersFeature([TuiDestroyService])],
  ngContentSelectors: _c4,
  decls: 2,
  vars: 2,
  consts: [["automation-id", "tui-accordion__group", "orientation", "vertical", "size", "l", "tuiGroup", "", 1, "t-group", 3, "collapsed", "rounded"]],
  template: function TuiAccordionComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c3);
      ɵɵelementStart(0, "div", 0);
      ɵɵprojection(1);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      ɵɵproperty("collapsed", true)("rounded", ctx.rounded);
    }
  },
  dependencies: [TuiGroupDirective],
  styles: ["[_nghost-%COMP%]{display:block}.t-group[_ngcontent-%COMP%]{display:flex;align-items:stretch}"],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiAccordionComponent, [{
    type: Component,
    args: [{
      selector: "tui-accordion",
      templateUrl: "./accordion.template.html",
      styleUrls: ["./accordion.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [TuiDestroyService]
    }]
  }], function() {
    return [{
      type: TuiDestroyService,
      decorators: [{
        type: Self
      }, {
        type: Inject,
        args: [TuiDestroyService]
      }]
    }];
  }, {
    closeOthers: [{
      type: Input
    }],
    rounded: [{
      type: Input
    }],
    accordionItems: [{
      type: ContentChildren,
      args: [TuiAccordionItemComponent]
    }]
  });
})();
var TuiAccordionModule = class {
};
TuiAccordionModule.ɵfac = function TuiAccordionModule_Factory(t) {
  return new (t || TuiAccordionModule)();
};
TuiAccordionModule.ɵmod = ɵɵdefineNgModule({
  type: TuiAccordionModule,
  declarations: [TuiAccordionComponent, TuiAccordionItemComponent, TuiAccordionItemContentDirective, TuiAccordionItemEagerContentDirective],
  imports: [CommonModule, TuiFocusedModule, TuiFocusVisibleModule, TuiFocusableModule, PolymorpheusModule, TuiSvgModule, TuiGroupModule, TuiExpandModule],
  exports: [TuiAccordionComponent, TuiAccordionItemComponent, TuiAccordionItemContentDirective, TuiAccordionItemEagerContentDirective]
});
TuiAccordionModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, TuiFocusedModule, TuiFocusVisibleModule, TuiFocusableModule, PolymorpheusModule, TuiSvgModule, TuiGroupModule, TuiExpandModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiAccordionModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, TuiFocusedModule, TuiFocusVisibleModule, TuiFocusableModule, PolymorpheusModule, TuiSvgModule, TuiGroupModule, TuiExpandModule],
      declarations: [TuiAccordionComponent, TuiAccordionItemComponent, TuiAccordionItemContentDirective, TuiAccordionItemEagerContentDirective],
      exports: [TuiAccordionComponent, TuiAccordionItemComponent, TuiAccordionItemContentDirective, TuiAccordionItemEagerContentDirective]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-marker-icon.js
var TuiMarkerIconComponent = class {
  constructor(mode$) {
    this.mode$ = mode$;
    this.mode = null;
    this.size = "m";
    this.src = "";
  }
};
TuiMarkerIconComponent.ɵfac = function TuiMarkerIconComponent_Factory(t) {
  return new (t || TuiMarkerIconComponent)(ɵɵdirectiveInject(TUI_MODE));
};
TuiMarkerIconComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiMarkerIconComponent,
  selectors: [["tui-marker-icon"], ["a", "tuiMarkerIcon", ""], ["button", "tuiMarkerIcon", ""]],
  hostVars: 2,
  hostBindings: function TuiMarkerIconComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("$.data-mode.attr", function TuiMarkerIconComponent___data_mode_attr_HostBindingHandler() {
        return ctx.mode$;
      });
    }
    if (rf & 2) {
      ɵɵattribute("data-marker-mode", ctx.mode)("data-size", ctx.size);
    }
  },
  inputs: {
    mode: "mode",
    size: "size",
    src: "src"
  },
  features: [ɵɵProvidersFeature([TuiDestroyService, MODE_PROVIDER])],
  decls: 1,
  vars: 1,
  consts: [[1, "t-icon", 3, "src"]],
  template: function TuiMarkerIconComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵelement(0, "tui-svg", 0);
    }
    if (rf & 2) {
      ɵɵproperty("src", ctx.src);
    }
  },
  dependencies: [TuiSvgComponent],
  styles: ["[_nghost-%COMP%]{transition-property:all;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;position:relative;display:inline-flex;align-items:center;justify-content:center;flex-shrink:0;border-radius:100%;color:var(--tui-text-03);background-color:var(--tui-base-02);background-size:cover!important;transition-property:color,background-color}[data-size=xs][_nghost-%COMP%]{width:2rem;height:2rem}[data-size=s][_nghost-%COMP%]{width:3rem;height:3rem}[data-size=m][_nghost-%COMP%]{width:4rem;height:4rem}[data-size=l][_nghost-%COMP%]{width:6rem;height:6rem}[data-size=xl][_nghost-%COMP%]{width:8rem;height:8rem}[new][data-size=xxs][_nghost-%COMP%]{width:1.5rem;height:1.5rem}[new][data-size=xxs][_nghost-%COMP%]   .t-icon[_ngcontent-%COMP%]{transform:scale(.58)}[new][data-size=xs][_nghost-%COMP%]{width:2rem;height:2rem}[new][data-size=xs][_nghost-%COMP%]   .t-icon[_ngcontent-%COMP%]{transform:scale(.83)}[new][data-size=s][_nghost-%COMP%]{width:2.5rem;height:2.5rem}[new][data-size=s][_nghost-%COMP%]   .t-icon[_ngcontent-%COMP%]{transform:scale(1)}[new][data-size=m][_nghost-%COMP%]{width:3rem;height:3rem}[new][data-size=m][_nghost-%COMP%]   .t-icon[_ngcontent-%COMP%]{transform:scale(1)}[new][data-size=l][_nghost-%COMP%]{width:4rem;height:4rem}[new][data-size=l][_nghost-%COMP%]   .t-icon[_ngcontent-%COMP%]{transform:scale(1.33)}[new][data-size=xl][_nghost-%COMP%]{width:6rem;height:6rem}[new][data-size=xl][_nghost-%COMP%]   .t-icon[_ngcontent-%COMP%]{transform:scale(2.33)}[new][data-size=xxl][_nghost-%COMP%]{width:8rem;height:8rem}[new][data-size=xxl][_nghost-%COMP%]   .t-icon[_ngcontent-%COMP%]{transform:scale(3.33)}[data-mode=onDark][_nghost-%COMP%]:not([data-marker-mode]){color:var(--tui-base-01);background-color:var(--tui-clear-inverse)}[data-marker-mode=primary][_nghost-%COMP%]{color:var(--tui-primary-text);background-color:var(--tui-primary)}[data-marker-mode=white][_nghost-%COMP%]{color:var(--tui-text-03);background-color:var(--tui-base-01)}[data-marker-mode=warning][_nghost-%COMP%]{color:var(--tui-warning-fill);background-color:var(--tui-warning-bg)}[data-marker-mode=secondary][_nghost-%COMP%]{color:var(--tui-base-01);background-color:var(--tui-info-fill)}[data-marker-mode=error][_nghost-%COMP%]{color:var(--tui-error-fill);background-color:var(--tui-error-bg)}[data-marker-mode=success][_nghost-%COMP%]{color:var(--tui-success-fill);background-color:var(--tui-success-bg)}[data-marker-mode=link][_nghost-%COMP%]{transition-property:color;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;color:var(--tui-link);background-color:var(--tui-secondary)}a[data-marker-mode=link][_nghost-%COMP%], button[data-marker-mode=link][_nghost-%COMP%]{cursor:pointer}a[data-marker-mode=link][_nghost-%COMP%]:hover, button[data-marker-mode=link][_nghost-%COMP%]:hover{color:var(--tui-link-hover);background-color:var(--tui-secondary-hover)}a[data-marker-mode=link][_nghost-%COMP%]:active, button[data-marker-mode=link][_nghost-%COMP%]:active{color:var(--tui-link-hover);background-color:var(--tui-secondary-active)}.t-icon[_ngcontent-%COMP%]{width:1.5rem;height:1.5rem}[data-size=xs][_nghost-%COMP%]   .t-icon[_ngcontent-%COMP%]{transform:scale(1)}[data-size=s][_nghost-%COMP%]   .t-icon[_ngcontent-%COMP%]{transform:scale(1)}[data-size=m][_nghost-%COMP%]   .t-icon[_ngcontent-%COMP%]{transform:scale(1.33)}[data-size=l][_nghost-%COMP%]   .t-icon[_ngcontent-%COMP%]{transform:scale(2)}[data-size=xl][_nghost-%COMP%]   .t-icon[_ngcontent-%COMP%]{transform:scale(2.67)}"],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiMarkerIconComponent, [{
    type: Component,
    args: [{
      selector: "tui-marker-icon, a[tuiMarkerIcon], button[tuiMarkerIcon]",
      templateUrl: "./marker-icon.template.html",
      styleUrls: ["./marker-icon.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [TuiDestroyService, MODE_PROVIDER],
      host: {
        "($.data-mode.attr)": "mode$"
      }
    }]
  }], function() {
    return [{
      type: Observable,
      decorators: [{
        type: Inject,
        args: [TUI_MODE]
      }]
    }];
  }, {
    mode: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["attr.data-marker-mode"]
    }],
    size: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["attr.data-size"]
    }],
    src: [{
      type: Input
    }]
  });
})();
var TuiMarkerIconModule = class {
};
TuiMarkerIconModule.ɵfac = function TuiMarkerIconModule_Factory(t) {
  return new (t || TuiMarkerIconModule)();
};
TuiMarkerIconModule.ɵmod = ɵɵdefineNgModule({
  type: TuiMarkerIconModule,
  declarations: [TuiMarkerIconComponent],
  imports: [CommonModule, TuiSvgModule],
  exports: [TuiMarkerIconComponent]
});
TuiMarkerIconModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, TuiSvgModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiMarkerIconModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, TuiSvgModule],
      declarations: [TuiMarkerIconComponent],
      exports: [TuiMarkerIconComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-action.js
var _c02 = ["tuiAction", ""];
function TuiActionComponent_tui_marker_icon_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "tui-marker-icon", 1);
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵproperty("src", ctx_r0.icon);
  }
}
var _c12 = ["*"];
var TuiActionComponent = class extends AbstractTuiInteractive {
  constructor(focusVisible$, el) {
    super();
    this.el = el;
    this.icon = "";
    this.disabled = false;
    focusVisible$.subscribe((visible) => {
      this.updateFocusVisible(visible);
    });
  }
  get nativeFocusableElement() {
    return this.el.nativeElement;
  }
  get focused() {
    return tuiIsNativeFocused(this.nativeFocusableElement);
  }
  get tabIndex() {
    return this.computedFocusable ? 0 : -1;
  }
  onFocused(focused) {
    this.updateFocused(focused);
  }
};
TuiActionComponent.ɵfac = function TuiActionComponent_Factory(t) {
  return new (t || TuiActionComponent)(ɵɵdirectiveInject(TuiFocusVisibleService), ɵɵdirectiveInject(ElementRef));
};
TuiActionComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiActionComponent,
  selectors: [["button", "tuiAction", ""], ["a", "tuiAction", ""]],
  hostAttrs: [1, "tui-island", "tui-island_hoverable"],
  hostVars: 1,
  hostBindings: function TuiActionComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("focusin", function TuiActionComponent_focusin_HostBindingHandler() {
        return ctx.onFocused(true);
      })("focusout", function TuiActionComponent_focusout_HostBindingHandler() {
        return ctx.onFocused(false);
      });
    }
    if (rf & 2) {
      ɵɵhostProperty("tabIndex", ctx.tabIndex);
    }
  },
  inputs: {
    icon: "icon"
  },
  features: [ɵɵProvidersFeature([TuiDestroyService, TuiFocusVisibleService, tuiAsFocusableItemAccessor(TuiActionComponent)]), ɵɵInheritDefinitionFeature],
  attrs: _c02,
  ngContentSelectors: _c12,
  decls: 2,
  vars: 1,
  consts: [["size", "s", "class", "t-icon tui-island__marker", 3, "src", 4, "ngIf"], ["size", "s", 1, "t-icon", "tui-island__marker", 3, "src"]],
  template: function TuiActionComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵprojection(0);
      ɵɵtemplate(1, TuiActionComponent_tui_marker_icon_1_Template, 1, 1, "tui-marker-icon", 0);
    }
    if (rf & 2) {
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.icon);
    }
  },
  dependencies: [TuiMarkerIconComponent, NgIf],
  styles: ["[_nghost-%COMP%]{-webkit-appearance:none;-moz-appearance:none;appearance:none;border:0;background:none;font-size:inherit;line-height:inherit;text-decoration:none;display:flex;justify-content:space-between;font:var(--tui-font-text-m);padding:.875rem;border:2px solid transparent;text-align:start}._focus-visible[_nghost-%COMP%]{border-color:var(--tui-focus)}[_nghost-%COMP%]:after{display:none}.t-icon[_ngcontent-%COMP%]{color:var(--tui-action-color, var(--tui-link));background-color:var(--tui-action-background, var(--tui-base-02))}"],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiActionComponent, [{
    type: Component,
    args: [{
      selector: "button[tuiAction], a[tuiAction]",
      templateUrl: "./action.template.html",
      styleUrls: ["./action.style.less"],
      host: {
        class: "tui-island tui-island_hoverable"
      },
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [TuiDestroyService, TuiFocusVisibleService, tuiAsFocusableItemAccessor(TuiActionComponent)]
    }]
  }], function() {
    return [{
      type: TuiFocusVisibleService,
      decorators: [{
        type: Inject,
        args: [TuiFocusVisibleService]
      }]
    }, {
      type: ElementRef,
      decorators: [{
        type: Inject,
        args: [ElementRef]
      }]
    }];
  }, {
    icon: [{
      type: Input
    }],
    tabIndex: [{
      type: HostBinding,
      args: ["tabIndex"]
    }],
    onFocused: [{
      type: HostListener,
      args: ["focusin", ["true"]]
    }, {
      type: HostListener,
      args: ["focusout", ["false"]]
    }]
  });
})();
var TuiActionModule = class {
};
TuiActionModule.ɵfac = function TuiActionModule_Factory(t) {
  return new (t || TuiActionModule)();
};
TuiActionModule.ɵmod = ɵɵdefineNgModule({
  type: TuiActionModule,
  declarations: [TuiActionComponent],
  imports: [CommonModule, TuiFocusableModule, TuiFocusVisibleModule, TuiMarkerIconModule],
  exports: [TuiActionComponent]
});
TuiActionModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, TuiFocusableModule, TuiFocusVisibleModule, TuiMarkerIconModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiActionModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, TuiFocusableModule, TuiFocusVisibleModule, TuiMarkerIconModule],
      declarations: [TuiActionComponent],
      exports: [TuiActionComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-directives-data-list-dropdown-manager.js
var TuiDataListDropdownManagerDirective = class {
  constructor(destroy$) {
    this.destroy$ = destroy$;
    this.dropdowns = EMPTY_QUERY;
    this.els = EMPTY_QUERY;
  }
  ngAfterViewInit() {
    this.right$.pipe(takeUntil(this.destroy$)).subscribe((index) => {
      this.tryToFocus(index);
    });
    merge(this.immediate$, this.debounce$).pipe(switchMap((active) => {
      this.dropdowns.forEach((dropdown2, index) => {
        dropdown2.toggle(index === active);
      });
      const element = this.els.get(active);
      const dropdown = this.dropdowns.get(active);
      if (!element || !(dropdown === null || dropdown === void 0 ? void 0 : dropdown.dropdownBoxRef)) {
        return EMPTY;
      }
      const {
        nativeElement
      } = dropdown.dropdownBoxRef.location;
      const mouseEnter$ = tuiTypedFromEvent(nativeElement, "mouseenter").pipe(take(1));
      const esc$ = merge(tuiTypedFromEvent(element.nativeElement, "keydown"), tuiTypedFromEvent(nativeElement, "keydown")).pipe(filter(({
        key
      }) => key === "Escape"));
      return merge(mouseEnter$, esc$).pipe(tap((event) => {
        if (dropdown.dropdownBoxRef) {
          event.stopPropagation();
        }
        element.nativeElement.focus();
        dropdown.toggle("offsetX" in event);
      }));
    }), takeUntil(this.destroy$)).subscribe();
  }
  get elements$() {
    return tuiQueryListChanges(this.els).pipe(map((array) => array.map(({
      nativeElement
    }) => nativeElement)), shareReplay({
      bufferSize: 1,
      refCount: true
    }));
  }
  get right$() {
    return this.elements$.pipe(switchMap((elements) => merge(...elements.map((element, index) => tuiTypedFromEvent(element, "keydown").pipe(filter(({
      key
    }) => key === "ArrowRight"), tuiPreventDefault(), map(() => index))))));
  }
  get immediate$() {
    return this.elements$.pipe(switchMap((elements) => merge(...elements.map((element, index) => tuiTypedFromEvent(element, "click").pipe(map(() => index))))));
  }
  get debounce$() {
    return this.elements$.pipe(switchMap((elements) => merge(...elements.map((element, index) => merge(tuiTypedFromEvent(element, "focus"), tuiTypedFromEvent(element, "blur")).pipe(filter(({
      relatedTarget
    }) => this.notInDropdown(relatedTarget, index)), map(({
      type
    }) => type === "focus" ? index : NaN))))), debounceTime(300));
  }
  notInDropdown(element, index) {
    var _a, _b;
    return !((_b = (_a = this.dropdowns.get(index)) === null || _a === void 0 ? void 0 : _a.dropdownBoxRef) === null || _b === void 0 ? void 0 : _b.location.nativeElement.contains(element));
  }
  tryToFocus(index) {
    var _a, _b;
    const content = (_b = (_a = this.dropdowns.get(index)) === null || _a === void 0 ? void 0 : _a.dropdownBoxRef) === null || _b === void 0 ? void 0 : _b.location.nativeElement;
    if (!content) {
      return;
    }
    const focusTrap = tuiGetClosestFocusable({
      initial: content,
      root: content
    });
    const item = tuiGetClosestFocusable({
      initial: focusTrap || content,
      root: content
    });
    if (item) {
      item.focus();
    }
  }
};
TuiDataListDropdownManagerDirective.ɵfac = function TuiDataListDropdownManagerDirective_Factory(t) {
  return new (t || TuiDataListDropdownManagerDirective)(ɵɵdirectiveInject(TuiDestroyService, 2));
};
TuiDataListDropdownManagerDirective.ɵdir = ɵɵdefineDirective({
  type: TuiDataListDropdownManagerDirective,
  selectors: [["tui-data-list", "tuiDataListDropdownManager", ""]],
  contentQueries: function TuiDataListDropdownManagerDirective_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, TuiDropdownDirective, 5);
      ɵɵcontentQuery(dirIndex, TuiDropdownDirective, 5, ElementRef);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.dropdowns = _t);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.els = _t);
    }
  },
  features: [ɵɵProvidersFeature([TuiDestroyService])]
});
__decorate([tuiPure], TuiDataListDropdownManagerDirective.prototype, "elements$", null);
__decorate([tuiPure], TuiDataListDropdownManagerDirective.prototype, "right$", null);
__decorate([tuiPure], TuiDataListDropdownManagerDirective.prototype, "immediate$", null);
__decorate([tuiPure], TuiDataListDropdownManagerDirective.prototype, "debounce$", null);
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiDataListDropdownManagerDirective, [{
    type: Directive,
    args: [{
      selector: "tui-data-list[tuiDataListDropdownManager]",
      providers: [TuiDestroyService]
    }]
  }], function() {
    return [{
      type: TuiDestroyService,
      decorators: [{
        type: Self
      }, {
        type: Inject,
        args: [TuiDestroyService]
      }]
    }];
  }, {
    dropdowns: [{
      type: ContentChildren,
      args: [TuiDropdownDirective, {
        descendants: true
      }]
    }],
    els: [{
      type: ContentChildren,
      args: [TuiDropdownDirective, {
        read: ElementRef,
        descendants: true
      }]
    }],
    elements$: [],
    right$: [],
    immediate$: [],
    debounce$: []
  });
})();
var TuiDataListDropdownManagerModule = class {
};
TuiDataListDropdownManagerModule.ɵfac = function TuiDataListDropdownManagerModule_Factory(t) {
  return new (t || TuiDataListDropdownManagerModule)();
};
TuiDataListDropdownManagerModule.ɵmod = ɵɵdefineNgModule({
  type: TuiDataListDropdownManagerModule,
  declarations: [TuiDataListDropdownManagerDirective],
  exports: [TuiDataListDropdownManagerDirective]
});
TuiDataListDropdownManagerModule.ɵinj = ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiDataListDropdownManagerModule, [{
    type: NgModule,
    args: [{
      declarations: [TuiDataListDropdownManagerDirective],
      exports: [TuiDataListDropdownManagerDirective]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-directives-highlight.js
var TuiHighlightDirective = class {
  constructor(doc, el, renderer, resize$) {
    this.doc = doc;
    this.el = el;
    this.renderer = renderer;
    this.highlight = this.setUpHighlight();
    this.treeWalker = this.doc.createTreeWalker(this.el.nativeElement, NodeFilter.SHOW_TEXT, svgNodeFilter);
    this.tuiHighlight = "";
    this.tuiHighlightColor = "var(--tui-selection)";
    resize$.subscribe(() => {
      this.updateStyles();
    });
  }
  get match() {
    return this.indexOf(this.el.nativeElement.textContent) !== -1;
  }
  ngOnChanges() {
    this.updateStyles();
  }
  updateStyles() {
    this.highlight.style.display = "none";
    if (!this.match) {
      return;
    }
    this.treeWalker.currentNode = this.el.nativeElement;
    do {
      const index = this.indexOf(this.treeWalker.currentNode.nodeValue);
      if (index === -1) {
        continue;
      }
      const range = this.doc.createRange();
      range.setStart(this.treeWalker.currentNode, index);
      range.setEnd(this.treeWalker.currentNode, index + this.tuiHighlight.length);
      const hostRect = this.el.nativeElement.getBoundingClientRect();
      const {
        left,
        top,
        width,
        height
      } = range.getBoundingClientRect();
      const {
        style
      } = this.highlight;
      style.background = this.tuiHighlightColor;
      style.left = tuiPx(left - hostRect.left);
      style.top = tuiPx(top - hostRect.top);
      style.width = tuiPx(width);
      style.height = tuiPx(height);
      style.display = "block";
      return;
    } while (this.treeWalker.nextNode());
  }
  indexOf(source) {
    return !source || !this.tuiHighlight ? -1 : source.toLowerCase().indexOf(this.tuiHighlight.toLowerCase());
  }
  setUpHighlight() {
    const highlight = this.renderer.createElement("div");
    const {
      style
    } = highlight;
    style.background = this.tuiHighlightColor;
    style.zIndex = "-1";
    style.position = "absolute";
    this.renderer.appendChild(this.el.nativeElement, highlight);
    return highlight;
  }
};
TuiHighlightDirective.ɵfac = function TuiHighlightDirective_Factory(t) {
  return new (t || TuiHighlightDirective)(ɵɵdirectiveInject(DOCUMENT), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(TuiResizeService));
};
TuiHighlightDirective.ɵdir = ɵɵdefineDirective({
  type: TuiHighlightDirective,
  selectors: [["", "tuiHighlight", ""]],
  hostVars: 4,
  hostBindings: function TuiHighlightDirective_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵstyleProp("position", "relative")("z-index", 0);
    }
  },
  inputs: {
    tuiHighlight: "tuiHighlight",
    tuiHighlightColor: "tuiHighlightColor"
  },
  features: [ɵɵProvidersFeature([TuiDestroyService, TuiResizeService]), ɵɵNgOnChangesFeature]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiHighlightDirective, [{
    type: Directive,
    args: [{
      selector: "[tuiHighlight]",
      providers: [TuiDestroyService, TuiResizeService],
      host: {
        "[style.position]": '"relative"',
        "[style.zIndex]": "0"
      }
    }]
  }], function() {
    return [{
      type: Document,
      decorators: [{
        type: Inject,
        args: [DOCUMENT]
      }]
    }, {
      type: ElementRef,
      decorators: [{
        type: Inject,
        args: [ElementRef]
      }]
    }, {
      type: Renderer2,
      decorators: [{
        type: Inject,
        args: [Renderer2]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Inject,
        args: [TuiResizeService]
      }]
    }];
  }, {
    tuiHighlight: [{
      type: Input
    }],
    tuiHighlightColor: [{
      type: Input
    }]
  });
})();
var TuiHighlightModule = class {
};
TuiHighlightModule.ɵfac = function TuiHighlightModule_Factory(t) {
  return new (t || TuiHighlightModule)();
};
TuiHighlightModule.ɵmod = ɵɵdefineNgModule({
  type: TuiHighlightModule,
  declarations: [TuiHighlightDirective],
  exports: [TuiHighlightDirective]
});
TuiHighlightModule.ɵinj = ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiHighlightModule, [{
    type: NgModule,
    args: [{
      declarations: [TuiHighlightDirective],
      exports: [TuiHighlightDirective]
    }]
  }], null, null);
})();

// node_modules/@ng-web-apis/intersection-observer/fesm2015/ng-web-apis-intersection-observer.js
var INTERSECTION_ROOT = new InjectionToken("Root element for IntersectionObserver");
var INTERSECTION_ROOT_MARGIN_DEFAULT = "0px 0px 0px 0px";
var INTERSECTION_ROOT_MARGIN = new InjectionToken("rootMargin for IntersectionObserver", {
  providedIn: "root",
  factory: () => INTERSECTION_ROOT_MARGIN_DEFAULT
});
function rootMarginFactory(rootMargin) {
  return rootMargin || INTERSECTION_ROOT_MARGIN_DEFAULT;
}
var INTERSECTION_THRESHOLD_DEFAULT = 0;
var INTERSECTION_THRESHOLD = new InjectionToken("threshold for IntersectionObserver", {
  providedIn: "root",
  factory: () => INTERSECTION_THRESHOLD_DEFAULT
});
function thresholdFactory(threshold) {
  return (threshold === null || threshold === void 0 ? void 0 : threshold.split(",").map(parseFloat)) || INTERSECTION_THRESHOLD_DEFAULT;
}
var SafeObserver = typeof IntersectionObserver !== `undefined` ? IntersectionObserver : class {
  constructor() {
    this.root = null;
    this.rootMargin = ``;
    this.thresholds = [];
  }
  observe() {
  }
  unobserve() {
  }
  disconnect() {
  }
  takeRecords() {
    return [];
  }
};
var IntersectionObserverDirective = class extends SafeObserver {
  constructor(root, rootMargin, threshold) {
    super((entries) => {
      this.callbacks.forEach((callback, element) => {
        const filtered = entries.filter(({
          target
        }) => target === element);
        return filtered.length && callback(filtered, this);
      });
    }, {
      root: root && root.nativeElement,
      rootMargin: rootMarginFactory(rootMargin),
      threshold: thresholdFactory(threshold)
    });
    this.callbacks = /* @__PURE__ */ new Map();
  }
  observe(target, callback = () => {
  }) {
    super.observe(target);
    this.callbacks.set(target, callback);
  }
  unobserve(target) {
    super.unobserve(target);
    this.callbacks.delete(target);
  }
  ngOnDestroy() {
    this.disconnect();
  }
};
IntersectionObserverDirective.ɵfac = function IntersectionObserverDirective_Factory(t) {
  return new (t || IntersectionObserverDirective)(ɵɵdirectiveInject(INTERSECTION_ROOT, 8), ɵɵinjectAttribute("waIntersectionRootMargin"), ɵɵinjectAttribute("waIntersectionThreshold"));
};
IntersectionObserverDirective.ɵdir = ɵɵdefineDirective({
  type: IntersectionObserverDirective,
  selectors: [["", "waIntersectionObserver", ""]],
  exportAs: ["IntersectionObserver"],
  features: [ɵɵInheritDefinitionFeature]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(IntersectionObserverDirective, [{
    type: Directive,
    args: [{
      selector: "[waIntersectionObserver]",
      exportAs: "IntersectionObserver"
    }]
  }], function() {
    return [{
      type: ElementRef,
      decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [INTERSECTION_ROOT]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Attribute,
        args: ["waIntersectionRootMargin"]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Attribute,
        args: ["waIntersectionThreshold"]
      }]
    }];
  }, null);
})();
var IntersectionObserveeService = class extends Observable {
  constructor({
    nativeElement
  }, observer) {
    super((subscriber) => {
      observer.observe(nativeElement, (entries) => {
        subscriber.next(entries);
      });
      return () => {
        observer.unobserve(nativeElement);
      };
    });
    return this.pipe(share());
  }
};
IntersectionObserveeService.ɵfac = function IntersectionObserveeService_Factory(t) {
  return new (t || IntersectionObserveeService)(ɵɵinject(ElementRef), ɵɵinject(IntersectionObserverDirective));
};
IntersectionObserveeService.ɵprov = ɵɵdefineInjectable({
  token: IntersectionObserveeService,
  factory: IntersectionObserveeService.ɵfac
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(IntersectionObserveeService, [{
    type: Injectable
  }], function() {
    return [{
      type: ElementRef,
      decorators: [{
        type: Inject,
        args: [ElementRef]
      }]
    }, {
      type: IntersectionObserverDirective,
      decorators: [{
        type: Inject,
        args: [IntersectionObserverDirective]
      }]
    }];
  }, null);
})();
var IntersectionObserveeDirective = class {
  constructor(waIntersectionObservee) {
    this.waIntersectionObservee = waIntersectionObservee;
  }
};
IntersectionObserveeDirective.ɵfac = function IntersectionObserveeDirective_Factory(t) {
  return new (t || IntersectionObserveeDirective)(ɵɵdirectiveInject(IntersectionObserveeService));
};
IntersectionObserveeDirective.ɵdir = ɵɵdefineDirective({
  type: IntersectionObserveeDirective,
  selectors: [["", "waIntersectionObservee", ""]],
  outputs: {
    waIntersectionObservee: "waIntersectionObservee"
  },
  features: [ɵɵProvidersFeature([IntersectionObserveeService])]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(IntersectionObserveeDirective, [{
    type: Directive,
    args: [{
      selector: "[waIntersectionObservee]",
      outputs: ["waIntersectionObservee"],
      providers: [IntersectionObserveeService]
    }]
  }], function() {
    return [{
      type: Observable,
      decorators: [{
        type: Inject,
        args: [IntersectionObserveeService]
      }]
    }];
  }, null);
})();
var IntersectionRootDirective = class {
};
IntersectionRootDirective.ɵfac = function IntersectionRootDirective_Factory(t) {
  return new (t || IntersectionRootDirective)();
};
IntersectionRootDirective.ɵdir = ɵɵdefineDirective({
  type: IntersectionRootDirective,
  selectors: [["", "waIntersectionRoot", ""]],
  features: [ɵɵProvidersFeature([{
    provide: INTERSECTION_ROOT,
    useExisting: ElementRef
  }])]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(IntersectionRootDirective, [{
    type: Directive,
    args: [{
      selector: "[waIntersectionRoot]",
      providers: [{
        provide: INTERSECTION_ROOT,
        useExisting: ElementRef
      }]
    }]
  }], null, null);
})();
var IntersectionObserverModule = class {
};
IntersectionObserverModule.ɵfac = function IntersectionObserverModule_Factory(t) {
  return new (t || IntersectionObserverModule)();
};
IntersectionObserverModule.ɵmod = ɵɵdefineNgModule({
  type: IntersectionObserverModule,
  declarations: [IntersectionObserverDirective, IntersectionObserveeDirective, IntersectionRootDirective],
  exports: [IntersectionObserverDirective, IntersectionObserveeDirective, IntersectionRootDirective]
});
IntersectionObserverModule.ɵinj = ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(IntersectionObserverModule, [{
    type: NgModule,
    args: [{
      declarations: [IntersectionObserverDirective, IntersectionObserveeDirective, IntersectionRootDirective],
      exports: [IntersectionObserverDirective, IntersectionObserveeDirective, IntersectionRootDirective]
    }]
  }], null, null);
})();
var INTERSECTION_OBSERVER_SUPPORT = new InjectionToken("Intersection Observer API support", {
  providedIn: "root",
  factory: () => !!inject(WINDOW).IntersectionObserver
});
var IntersectionObserverService = class extends Observable {
  constructor({
    nativeElement
  }, support, rootMargin, threshold, root) {
    super((subscriber) => {
      if (!support) {
        subscriber.error("IntersectionObserver is not supported in your browser");
        return;
      }
      const observer = new IntersectionObserver((entries) => {
        subscriber.next(entries);
      }, {
        root: root === null || root === void 0 ? void 0 : root.nativeElement,
        rootMargin,
        threshold
      });
      observer.observe(nativeElement);
      return () => {
        observer.disconnect();
      };
    });
    return this.pipe(share());
  }
};
IntersectionObserverService.ɵfac = function IntersectionObserverService_Factory(t) {
  return new (t || IntersectionObserverService)(ɵɵinject(ElementRef), ɵɵinject(INTERSECTION_OBSERVER_SUPPORT), ɵɵinject(INTERSECTION_ROOT_MARGIN), ɵɵinject(INTERSECTION_THRESHOLD), ɵɵinject(INTERSECTION_ROOT, 8));
};
IntersectionObserverService.ɵprov = ɵɵdefineInjectable({
  token: IntersectionObserverService,
  factory: IntersectionObserverService.ɵfac
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(IntersectionObserverService, [{
    type: Injectable
  }], function() {
    return [{
      type: ElementRef,
      decorators: [{
        type: Inject,
        args: [ElementRef]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [INTERSECTION_OBSERVER_SUPPORT]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [INTERSECTION_ROOT_MARGIN]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [INTERSECTION_THRESHOLD]
      }]
    }, {
      type: ElementRef,
      decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [INTERSECTION_ROOT]
      }]
    }];
  }, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-directives-lazy-loading.js
var TuiLazyLoadingService = class extends Observable {
  constructor(cdr, destroy$, intersections$) {
    super((subscriber) => this.src$.pipe(switchMap((src) => intersections$.pipe(filter(([{
      isIntersecting
    }]) => isIntersecting), map(() => src), catchError(() => of(src)), tuiWatch(cdr), take(1))), takeUntil(destroy$)).subscribe(subscriber));
    this.src$ = new Subject();
  }
  next(src) {
    this.src$.next(src);
  }
};
TuiLazyLoadingService.ɵfac = function TuiLazyLoadingService_Factory(t) {
  return new (t || TuiLazyLoadingService)(ɵɵinject(ChangeDetectorRef), ɵɵinject(TuiDestroyService, 2), ɵɵinject(IntersectionObserverService));
};
TuiLazyLoadingService.ɵprov = ɵɵdefineInjectable({
  token: TuiLazyLoadingService,
  factory: TuiLazyLoadingService.ɵfac
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiLazyLoadingService, [{
    type: Injectable
  }], function() {
    return [{
      type: ChangeDetectorRef,
      decorators: [{
        type: Inject,
        args: [ChangeDetectorRef]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Self
      }, {
        type: Inject,
        args: [TuiDestroyService]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Inject,
        args: [IntersectionObserverService]
      }]
    }];
  }, null);
})();
var TuiLazyLoadingDirective = class {
  constructor(src$, el) {
    this.src$ = src$;
    this.el = el;
    this.animation = "tuiSkeletonVibe ease-in-out 1s infinite alternate";
    this.background = "var(--tui-clear-hover)";
    this.src = null;
    if (!this.supported) {
      this.src$.subscribe((src) => {
        this.src = src;
      });
    }
  }
  set srcSetter(src) {
    this.src = this.supported ? src : null;
    this.src$.next(src);
  }
  get supported() {
    return "loading" in this.el.nativeElement;
  }
  onLoad() {
    this.background = "";
    this.animation = "";
  }
};
TuiLazyLoadingDirective.ɵfac = function TuiLazyLoadingDirective_Factory(t) {
  return new (t || TuiLazyLoadingDirective)(ɵɵdirectiveInject(TuiLazyLoadingService), ɵɵdirectiveInject(ElementRef));
};
TuiLazyLoadingDirective.ɵdir = ɵɵdefineDirective({
  type: TuiLazyLoadingDirective,
  selectors: [["img", "loading", "lazy"]],
  hostVars: 5,
  hostBindings: function TuiLazyLoadingDirective_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("load", function TuiLazyLoadingDirective_load_HostBindingHandler() {
        return ctx.onLoad();
      });
    }
    if (rf & 2) {
      ɵɵattribute("src", ctx.src, ɵɵsanitizeUrl);
      ɵɵstyleProp("animation", ctx.animation)("background", ctx.background);
    }
  },
  inputs: {
    srcSetter: ["src", "srcSetter"]
  },
  features: [ɵɵProvidersFeature([TuiLazyLoadingService, IntersectionObserverService, TuiDestroyService])]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiLazyLoadingDirective, [{
    type: Directive,
    args: [{
      selector: 'img[loading="lazy"]',
      providers: [TuiLazyLoadingService, IntersectionObserverService, TuiDestroyService]
    }]
  }], function() {
    return [{
      type: TuiLazyLoadingService,
      decorators: [{
        type: Inject,
        args: [TuiLazyLoadingService]
      }]
    }, {
      type: ElementRef,
      decorators: [{
        type: Inject,
        args: [ElementRef]
      }]
    }];
  }, {
    srcSetter: [{
      type: Input,
      args: ["src"]
    }],
    animation: [{
      type: HostBinding,
      args: ["style.animation"]
    }],
    background: [{
      type: HostBinding,
      args: ["style.background"]
    }],
    src: [{
      type: HostBinding,
      args: ["attr.src"]
    }],
    onLoad: [{
      type: HostListener,
      args: ["load"]
    }]
  });
})();
var TuiLazyLoadingModule = class {
};
TuiLazyLoadingModule.ɵfac = function TuiLazyLoadingModule_Factory(t) {
  return new (t || TuiLazyLoadingModule)();
};
TuiLazyLoadingModule.ɵmod = ɵɵdefineNgModule({
  type: TuiLazyLoadingModule,
  declarations: [TuiLazyLoadingDirective],
  exports: [TuiLazyLoadingDirective]
});
TuiLazyLoadingModule.ɵinj = ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiLazyLoadingModule, [{
    type: NgModule,
    args: [{
      declarations: [TuiLazyLoadingDirective],
      exports: [TuiLazyLoadingDirective]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-directives-mask.js
var import_text_mask_core = __toESM(require_textMaskCore());
function _isAndroid() {
  const userAgent = getDOM() ? getDOM().getUserAgent() : "";
  return /android (\d+)/.test(userAgent.toLowerCase());
}
var MaskedInputDirective = class {
  constructor(_renderer, _elementRef, _compositionMode) {
    this._renderer = _renderer;
    this._elementRef = _elementRef;
    this._compositionMode = _compositionMode;
    this.textMaskConfig = {
      mask: [],
      guide: true,
      placeholderChar: "_",
      pipe: void 0,
      keepCharPositions: false
    };
    this.onChange = (_) => {
    };
    this.onTouched = () => {
    };
    this._composing = false;
    if (this._compositionMode == null) {
      this._compositionMode = !_isAndroid();
    }
  }
  ngOnChanges() {
    this._setupMask(true);
    if (this.textMaskInputElement !== void 0) {
      this.textMaskInputElement.update(this.inputElement.value);
    }
  }
  writeValue(value) {
    this._setupMask();
    const normalizedValue = value == null ? "" : value;
    this._renderer.setProperty(this.inputElement, "value", normalizedValue);
    if (this.textMaskInputElement !== void 0) {
      this.textMaskInputElement.update(value);
    }
  }
  registerOnChange(fn) {
    this.onChange = fn;
  }
  registerOnTouched(fn) {
    this.onTouched = fn;
  }
  setDisabledState(isDisabled) {
    this._renderer.setProperty(this.inputElement, "disabled", isDisabled);
  }
  _handleInput(value) {
    if (!this._compositionMode || this._compositionMode && !this._composing) {
      this._setupMask();
      if (this.textMaskInputElement !== void 0) {
        this.textMaskInputElement.update(value);
        value = this.inputElement.value;
        this.onChange(value);
      }
    }
  }
  _setupMask(create = false) {
    if (!this.inputElement) {
      if (this._elementRef.nativeElement.tagName.toUpperCase() === "INPUT") {
        this.inputElement = this._elementRef.nativeElement;
      } else {
        this.inputElement = this._elementRef.nativeElement.getElementsByTagName("INPUT")[0];
      }
    }
    if (this.inputElement && create) {
      this.textMaskInputElement = (0, import_text_mask_core.createTextMaskInputElement)(Object.assign({
        inputElement: this.inputElement
      }, this.textMaskConfig));
    }
  }
  _compositionStart() {
    this._composing = true;
  }
  _compositionEnd(value) {
    this._composing = false;
    this._compositionMode && this._handleInput(value);
  }
};
MaskedInputDirective.ɵfac = function MaskedInputDirective_Factory(t) {
  return new (t || MaskedInputDirective)(ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(COMPOSITION_BUFFER_MODE, 8));
};
MaskedInputDirective.ɵdir = ɵɵdefineDirective({
  type: MaskedInputDirective,
  selectors: [["", "textMask", ""]],
  hostBindings: function MaskedInputDirective_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("input", function MaskedInputDirective_input_HostBindingHandler($event) {
        return ctx._handleInput($event.target.value);
      })("blur", function MaskedInputDirective_blur_HostBindingHandler() {
        return ctx.onTouched();
      })("compositionstart", function MaskedInputDirective_compositionstart_HostBindingHandler() {
        return ctx._compositionStart();
      })("compositionend", function MaskedInputDirective_compositionend_HostBindingHandler($event) {
        return ctx._compositionEnd($event.target.value);
      });
    }
  },
  inputs: {
    textMaskConfig: ["textMask", "textMaskConfig"]
  },
  exportAs: ["textMask"],
  features: [ɵɵProvidersFeature([{
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(() => MaskedInputDirective),
    multi: true
  }, {
    provide: TUI_LEGACY_MASK,
    useExisting: forwardRef(() => MaskedInputDirective)
  }]), ɵɵNgOnChangesFeature]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MaskedInputDirective, [{
    type: Directive,
    args: [{
      host: {
        "(input)": "_handleInput($event.target.value)",
        "(blur)": "onTouched()",
        "(compositionstart)": "_compositionStart()",
        "(compositionend)": "_compositionEnd($event.target.value)"
      },
      selector: "[textMask]",
      exportAs: "textMask",
      providers: [{
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(() => MaskedInputDirective),
        multi: true
      }, {
        provide: TUI_LEGACY_MASK,
        useExisting: forwardRef(() => MaskedInputDirective)
      }]
    }]
  }], function() {
    return [{
      type: Renderer2
    }, {
      type: ElementRef
    }, {
      type: void 0,
      decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [COMPOSITION_BUFFER_MODE]
      }]
    }];
  }, {
    textMaskConfig: [{
      type: Input,
      args: ["textMask"]
    }]
  });
})();
var TextMaskModule = class {
};
TextMaskModule.ɵfac = function TextMaskModule_Factory(t) {
  return new (t || TextMaskModule)();
};
TextMaskModule.ɵmod = ɵɵdefineNgModule({
  type: TextMaskModule,
  declarations: [MaskedInputDirective],
  exports: [MaskedInputDirective]
});
TextMaskModule.ɵinj = ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TextMaskModule, [{
    type: NgModule,
    args: [{
      declarations: [MaskedInputDirective],
      exports: [MaskedInputDirective]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-directives-present.js
var TuiPresentDirective = class {
  constructor({
    nativeElement
  }, userAgent) {
    this.visibility$ = new BehaviorSubject(false);
    this.tuiPresentChange = this.visibility$.pipe(distinctUntilChanged(), skip(1));
    if (tuiIsFirefox(userAgent)) {
      return;
    }
    const observer = new MutationObserver(() => {
      if (!nativeElement.offsetParent && nativeElement.offsetWidth === 0 && nativeElement.offsetHeight === 0) {
        this.visibility$.next(false);
      }
    });
    observer.observe(nativeElement, {
      attributes: true,
      attributeFilter: ["style", "class"]
    });
  }
  /**
   * Someday animationcancel would work and mutation observer would not be needed:
   * https://drafts.csswg.org/css-animations/#eventdef-animationevent-animationcancel
   * It would also trigger on CSS like display: none on parent nodes which is awesome
   * but currently only works in Firefox
   * ___
   * TODO: remove MutationObserver when we bump versions of supported browsers:
   *** Safari 12+
   *** Chrome 83+
   * See: {@link https://caniuse.com/mdn-api_window_animationcancel_event}
   */
  onAnimation(visibility) {
    this.visibility$.next(visibility);
  }
  ngOnDestroy() {
    this.visibility$.next(false);
  }
};
TuiPresentDirective.ɵfac = function TuiPresentDirective_Factory(t) {
  return new (t || TuiPresentDirective)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(USER_AGENT));
};
TuiPresentDirective.ɵdir = ɵɵdefineDirective({
  type: TuiPresentDirective,
  selectors: [["", "tuiPresentChange", ""]],
  hostVars: 2,
  hostBindings: function TuiPresentDirective_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("animationcancel.self", function TuiPresentDirective_animationcancel_self_HostBindingHandler() {
        return ctx.onAnimation(false);
      })("animationstart.self", function TuiPresentDirective_animationstart_self_HostBindingHandler() {
        return ctx.onAnimation(true);
      });
    }
    if (rf & 2) {
      ɵɵstyleProp("animation", "tuiPresent 1s infinite");
    }
  },
  outputs: {
    tuiPresentChange: "tuiPresentChange"
  }
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiPresentDirective, [{
    type: Directive,
    args: [{
      selector: "[tuiPresentChange]",
      host: {
        "[style.animation]": '"tuiPresent 1s infinite"'
      }
    }]
  }], function() {
    return [{
      type: ElementRef,
      decorators: [{
        type: Inject,
        args: [ElementRef]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [USER_AGENT]
      }]
    }];
  }, {
    tuiPresentChange: [{
      type: Output
    }],
    onAnimation: [{
      type: HostListener,
      args: ["animationcancel.self", ["false"]]
    }, {
      type: HostListener,
      args: ["animationstart.self", ["true"]]
    }]
  });
})();
var TuiPresentModule = class {
};
TuiPresentModule.ɵfac = function TuiPresentModule_Factory(t) {
  return new (t || TuiPresentModule)();
};
TuiPresentModule.ɵmod = ɵɵdefineNgModule({
  type: TuiPresentModule,
  declarations: [TuiPresentDirective],
  exports: [TuiPresentDirective]
});
TuiPresentModule.ɵinj = ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiPresentModule, [{
    type: NgModule,
    args: [{
      declarations: [TuiPresentDirective],
      exports: [TuiPresentDirective]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-directives-project-class.js
var TuiProjectClassDirective = class {
  constructor(el) {
    this.el = el;
    this.classNames = [];
  }
  ngAfterViewChecked() {
    this.classNames.forEach((className) => {
      const hostElement = this.el.nativeElement;
      hostElement.classList.toggle(className, !!hostElement.querySelector(`.${className}`));
    });
  }
};
TuiProjectClassDirective.ɵfac = function TuiProjectClassDirective_Factory(t) {
  return new (t || TuiProjectClassDirective)(ɵɵdirectiveInject(ElementRef));
};
TuiProjectClassDirective.ɵdir = ɵɵdefineDirective({
  type: TuiProjectClassDirective,
  selectors: [["", "tuiProjectClass", ""]],
  inputs: {
    classNames: ["tuiProjectClass", "classNames"]
  }
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiProjectClassDirective, [{
    type: Directive,
    args: [{
      selector: "[tuiProjectClass]"
    }]
  }], function() {
    return [{
      type: ElementRef,
      decorators: [{
        type: Inject,
        args: [ElementRef]
      }]
    }];
  }, {
    classNames: [{
      type: Input,
      args: ["tuiProjectClass"]
    }]
  });
})();
var TuiProjectClassModule = class {
};
TuiProjectClassModule.ɵfac = function TuiProjectClassModule_Factory(t) {
  return new (t || TuiProjectClassModule)();
};
TuiProjectClassModule.ɵmod = ɵɵdefineNgModule({
  type: TuiProjectClassModule,
  declarations: [TuiProjectClassDirective],
  exports: [TuiProjectClassDirective]
});
TuiProjectClassModule.ɵinj = ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiProjectClassModule, [{
    type: NgModule,
    args: [{
      declarations: [TuiProjectClassDirective],
      exports: [TuiProjectClassDirective]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-validators.js
function tuiCreateUnfinishedValidator(nativeInputGetter, message) {
  return ({ value }) => {
    const nativeInput = nativeInputGetter();
    return value === null && nativeInput && tuiIsHTMLElement(nativeInput.nativeFocusableElement) && tuiIsInput(nativeInput.nativeFocusableElement) && nativeInput.nativeFocusableElement.value !== "" ? { unfinished: new TuiValidationError(message) } : null;
  };
}

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-directives-unfinished-validator.js
var TuiUnfinishedValidatorDirective = class {
  constructor(injector, message) {
    this.injector = injector;
    this.message = message;
    this.validate = tuiCreateUnfinishedValidator(() => this.injector.get(TUI_FOCUSABLE_ITEM_ACCESSOR), this.message || "");
  }
};
TuiUnfinishedValidatorDirective.ɵfac = function TuiUnfinishedValidatorDirective_Factory(t) {
  return new (t || TuiUnfinishedValidatorDirective)(ɵɵdirectiveInject(Injector), ɵɵinjectAttribute("tuiUnfinishedValidator"));
};
TuiUnfinishedValidatorDirective.ɵdir = ɵɵdefineDirective({
  type: TuiUnfinishedValidatorDirective,
  selectors: [["", "tuiUnfinishedValidator", ""]],
  features: [ɵɵProvidersFeature([{
    provide: NG_VALIDATORS,
    useExisting: TuiUnfinishedValidatorDirective,
    multi: true
  }])]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiUnfinishedValidatorDirective, [{
    type: Directive,
    args: [{
      selector: "[tuiUnfinishedValidator]",
      providers: [{
        provide: NG_VALIDATORS,
        useExisting: TuiUnfinishedValidatorDirective,
        multi: true
      }]
    }]
  }], function() {
    return [{
      type: Injector,
      decorators: [{
        type: Inject,
        args: [Injector]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Attribute,
        args: ["tuiUnfinishedValidator"]
      }]
    }];
  }, null);
})();
var TuiUnfinishedValidatorModule = class {
};
TuiUnfinishedValidatorModule.ɵfac = function TuiUnfinishedValidatorModule_Factory(t) {
  return new (t || TuiUnfinishedValidatorModule)();
};
TuiUnfinishedValidatorModule.ɵmod = ɵɵdefineNgModule({
  type: TuiUnfinishedValidatorModule,
  declarations: [TuiUnfinishedValidatorDirective],
  exports: [TuiUnfinishedValidatorDirective]
});
TuiUnfinishedValidatorModule.ɵinj = ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiUnfinishedValidatorModule, [{
    type: NgModule,
    args: [{
      declarations: [TuiUnfinishedValidatorDirective],
      exports: [TuiUnfinishedValidatorDirective]
    }]
  }], null, null);
})();

// node_modules/@maskito/core/index.esm.js
var MASKITO_DEFAULT_ELEMENT_PREDICATE = (e) => e.querySelector("input,textarea") || e;
var MASKITO_DEFAULT_OPTIONS = {
  mask: /^.*$/,
  preprocessors: [],
  postprocessors: [],
  plugins: [],
  overwriteMode: "shift"
};
var MaskHistory = class {
  constructor() {
    this.now = null;
    this.past = [];
    this.future = [];
  }
  undo() {
    const state = this.past.pop();
    if (state && this.now) {
      this.future.push(this.now);
      this.updateElement(state, "historyUndo");
    }
  }
  redo() {
    const state = this.future.pop();
    if (state && this.now) {
      this.past.push(this.now);
      this.updateElement(state, "historyRedo");
    }
  }
  updateHistory(state) {
    if (!this.now) {
      this.now = state;
      return;
    }
    const isValueChanged = this.now.value !== state.value;
    const isSelectionChanged = this.now.selection.some((item, index) => item !== state.selection[index]);
    if (!isValueChanged && !isSelectionChanged) {
      return;
    }
    if (isValueChanged) {
      this.past.push(this.now);
      this.future = [];
    }
    this.now = state;
  }
  updateElement(state, inputType) {
    this.now = state;
    this.updateElementState(state, {
      inputType,
      data: null
    });
  }
};
function areElementValuesEqual(sampleState, ...states) {
  return states.every(({
    value
  }) => value === sampleState.value);
}
function areElementStatesEqual(sampleState, ...states) {
  return states.every(({
    value,
    selection
  }) => value === sampleState.value && selection[0] === sampleState.selection[0] && selection[1] === sampleState.selection[1]);
}
function applyOverwriteMode({
  value,
  selection
}, newCharacters, mode) {
  const [from, to] = selection;
  const computedMode = typeof mode === "function" ? mode({
    value,
    selection
  }) : mode;
  return {
    value,
    selection: computedMode === "replace" ? [from, from + newCharacters.length] : [from, to]
  };
}
function isFixedCharacter(char) {
  return typeof char === "string";
}
function getLeadingFixedCharacters(mask, validatedValuePart, newCharacter, initialElementState) {
  let leadingFixedCharacters = "";
  for (let i = validatedValuePart.length; i < mask.length; i++) {
    const charConstraint = mask[i];
    const isInitiallyExisted = (initialElementState === null || initialElementState === void 0 ? void 0 : initialElementState.value[i]) === charConstraint;
    if (!isFixedCharacter(charConstraint) || charConstraint === newCharacter && !isInitiallyExisted) {
      return leadingFixedCharacters;
    }
    leadingFixedCharacters += charConstraint;
  }
  return leadingFixedCharacters;
}
function validateValueWithMask(value, maskExpression) {
  if (Array.isArray(maskExpression)) {
    return value.length === maskExpression.length && Array.from(value).every((char, i) => {
      const charConstraint = maskExpression[i];
      return isFixedCharacter(charConstraint) ? char === charConstraint : char.match(charConstraint);
    });
  }
  return maskExpression.test(value);
}
function guessValidValueByPattern(elementState, mask, initialElementState) {
  let maskedFrom = null;
  let maskedTo = null;
  const maskedValue = Array.from(elementState.value).reduce((validatedCharacters, char, charIndex) => {
    const leadingCharacters = getLeadingFixedCharacters(mask, validatedCharacters, char, initialElementState);
    const newValidatedChars = validatedCharacters + leadingCharacters;
    const charConstraint = mask[newValidatedChars.length];
    if (isFixedCharacter(charConstraint)) {
      return newValidatedChars + charConstraint;
    }
    if (!char.match(charConstraint)) {
      return newValidatedChars;
    }
    if (maskedFrom === null && charIndex >= elementState.selection[0]) {
      maskedFrom = newValidatedChars.length;
    }
    if (maskedTo === null && charIndex >= elementState.selection[1]) {
      maskedTo = newValidatedChars.length;
    }
    return newValidatedChars + char;
  }, "");
  const trailingFixedCharacters = getLeadingFixedCharacters(mask, maskedValue, "", initialElementState);
  return {
    value: validateValueWithMask(maskedValue + trailingFixedCharacters, mask) ? maskedValue + trailingFixedCharacters : maskedValue,
    selection: [maskedFrom !== null && maskedFrom !== void 0 ? maskedFrom : maskedValue.length, maskedTo !== null && maskedTo !== void 0 ? maskedTo : maskedValue.length]
  };
}
function guessValidValueByRegExp({
  value,
  selection
}, maskRegExp) {
  const [from, to] = selection;
  let newFrom = from;
  let newTo = to;
  const validatedValue = Array.from(value).reduce((validatedValuePart, char, i) => {
    const newPossibleValue = validatedValuePart + char;
    if (from === i) {
      newFrom = validatedValuePart.length;
    }
    if (to === i) {
      newTo = validatedValuePart.length;
    }
    return newPossibleValue.match(maskRegExp) ? newPossibleValue : validatedValuePart;
  }, "");
  return {
    value: validatedValue,
    selection: [newFrom, newTo]
  };
}
function calibrateValueByMask(elementState, mask, initialElementState = null) {
  if (validateValueWithMask(elementState.value, mask)) {
    return elementState;
  }
  const {
    value,
    selection
  } = Array.isArray(mask) ? guessValidValueByPattern(elementState, mask, initialElementState) : guessValidValueByRegExp(elementState, mask);
  return {
    selection,
    value: Array.isArray(mask) ? value.slice(0, mask.length) : value
  };
}
function removeFixedMaskCharacters(initialElementState, mask) {
  if (!Array.isArray(mask)) {
    return initialElementState;
  }
  const [from, to] = initialElementState.selection;
  const selection = [];
  const unmaskedValue = Array.from(initialElementState.value).reduce((rawValue, char, i) => {
    const charConstraint = mask[i];
    if (i === from) {
      selection.push(rawValue.length);
    }
    if (i === to) {
      selection.push(rawValue.length);
    }
    return isFixedCharacter(charConstraint) && charConstraint === char ? rawValue : rawValue + char;
  }, "");
  if (selection.length < 2) {
    selection.push(...new Array(2 - selection.length).fill(unmaskedValue.length));
  }
  return {
    value: unmaskedValue,
    selection: [selection[0], selection[1]]
  };
}
var MaskModel = class {
  constructor(initialElementState, maskOptions) {
    this.initialElementState = initialElementState;
    this.maskOptions = maskOptions;
    this.value = "";
    this.selection = [0, 0];
    const {
      value,
      selection
    } = calibrateValueByMask(initialElementState, this.getMaskExpression(initialElementState));
    this.value = value;
    this.selection = selection;
  }
  addCharacters([from, to], newCharacters) {
    const {
      value
    } = this;
    const maskExpression = this.getMaskExpression({
      value: value.slice(0, from) + newCharacters + value.slice(to),
      selection: [from + newCharacters.length, from + newCharacters.length]
    });
    const initialElementState = {
      value,
      selection: [from, to]
    };
    const unmaskedElementState = removeFixedMaskCharacters(initialElementState, maskExpression);
    const [unmaskedFrom, unmaskedTo] = applyOverwriteMode(unmaskedElementState, newCharacters, this.maskOptions.overwriteMode).selection;
    const newUnmaskedLeadingValuePart = unmaskedElementState.value.slice(0, unmaskedFrom) + newCharacters;
    const newCaretIndex = newUnmaskedLeadingValuePart.length;
    const maskedElementState = calibrateValueByMask({
      value: newUnmaskedLeadingValuePart + unmaskedElementState.value.slice(unmaskedTo),
      selection: [newCaretIndex, newCaretIndex]
    }, maskExpression, initialElementState);
    const isInvalidCharsInsertion = (
      // eslint-disable-next-line @typescript-eslint/prefer-string-starts-ends-with
      value.slice(0, unmaskedFrom) === calibrateValueByMask({
        value: newUnmaskedLeadingValuePart,
        selection: [newCaretIndex, newCaretIndex]
      }, maskExpression, initialElementState).value
    );
    if (isInvalidCharsInsertion || areElementStatesEqual(this, maskedElementState)) {
      throw new Error("Invalid mask value");
    }
    this.value = maskedElementState.value;
    this.selection = maskedElementState.selection;
  }
  deleteCharacters([from, to]) {
    if (from === to || !to) {
      return;
    }
    const {
      value
    } = this;
    const maskExpression = this.getMaskExpression({
      value: value.slice(0, from) + value.slice(to),
      selection: [from, from]
    });
    const initialElementState = {
      value,
      selection: [from, to]
    };
    const unmaskedElementState = removeFixedMaskCharacters(initialElementState, maskExpression);
    const [unmaskedFrom, unmaskedTo] = unmaskedElementState.selection;
    const newUnmaskedValue = unmaskedElementState.value.slice(0, unmaskedFrom) + unmaskedElementState.value.slice(unmaskedTo);
    const maskedElementState = calibrateValueByMask({
      value: newUnmaskedValue,
      selection: [unmaskedFrom, unmaskedFrom]
    }, maskExpression, initialElementState);
    this.value = maskedElementState.value;
    this.selection = maskedElementState.selection;
  }
  getMaskExpression(elementState) {
    const {
      mask
    } = this.maskOptions;
    return typeof mask === "function" ? mask(elementState) : mask;
  }
};
var EventListener = class {
  constructor(element) {
    this.element = element;
    this.listeners = [];
  }
  listen(eventType, fn, options) {
    const untypedFn = fn;
    this.element.addEventListener(eventType, untypedFn, options);
    this.listeners.push(() => this.element.removeEventListener(eventType, untypedFn));
  }
  destroy() {
    this.listeners.forEach((stopListen) => stopListen());
  }
};
function isHotkey(event, modifiers, hotkeyCode) {
  return event.ctrlKey === !!(modifiers & 1) && event.altKey === !!(modifiers & 2) && event.shiftKey === !!(modifiers & 4) && event.metaKey === !!(modifiers & 8) && event.keyCode === hotkeyCode;
}
function isRedo(event) {
  return isHotkey(
    event,
    1,
    89
    /* Y */
  ) || // Windows
  isHotkey(
    event,
    1 | 4,
    90
    /* Z */
  ) || // Windows & Android
  isHotkey(
    event,
    8 | 4,
    90
    /* Z */
  );
}
function isUndo(event) {
  return isHotkey(
    event,
    1,
    90
    /* Z */
  ) || // Windows & Android
  isHotkey(
    event,
    8,
    90
    /* Z */
  );
}
function isBeforeInputEventSupported(element) {
  return "onbeforeinput" in element;
}
function isEventProducingCharacter({
  key,
  ctrlKey,
  metaKey,
  altKey
}) {
  const isSystemKeyCombinations = ctrlKey || metaKey || altKey;
  const isSingleUnicodeChar = /^.$/u.test(key);
  return !isSystemKeyCombinations && key !== "Backspace" && isSingleUnicodeChar;
}
function getLineSelection({
  value,
  selection
}, isForward) {
  const [from, to] = selection;
  if (from !== to) {
    return [from, to];
  }
  const nearestBreak = isForward ? value.slice(from).indexOf("\n") + 1 || value.length : value.slice(0, to).lastIndexOf("\n") + 1;
  const selectFrom = isForward ? from : nearestBreak;
  const selectTo = isForward ? nearestBreak : to;
  return [selectFrom, selectTo];
}
function getNotEmptySelection({
  value,
  selection
}, isForward) {
  const [from, to] = selection;
  if (from !== to) {
    return [from, to];
  }
  const notEmptySelection = isForward ? [from, to + 1] : [from - 1, to];
  return notEmptySelection.map((x) => Math.min(Math.max(x, 0), value.length));
}
var TRAILING_SPACES_REG = /\s+$/g;
var LEADING_SPACES_REG = /^\s+/g;
var SPACE_REG = /\s/;
function getWordSelection({
  value,
  selection
}, isForward) {
  const [from, to] = selection;
  if (from !== to) {
    return [from, to];
  }
  if (isForward) {
    const valueAfterSelectionStart = value.slice(from);
    const [leadingSpaces] = valueAfterSelectionStart.match(LEADING_SPACES_REG) || [""];
    const nearestWordEndIndex = valueAfterSelectionStart.replace(LEADING_SPACES_REG, "").search(SPACE_REG);
    return [from, nearestWordEndIndex !== -1 ? from + leadingSpaces.length + nearestWordEndIndex : value.length];
  }
  const valueBeforeSelectionEnd = value.slice(0, to);
  const [trailingSpaces] = valueBeforeSelectionEnd.match(TRAILING_SPACES_REG) || [""];
  const selectedWordLength = valueBeforeSelectionEnd.replace(TRAILING_SPACES_REG, "").split("").reverse().findIndex((char) => char.match(SPACE_REG));
  return [selectedWordLength !== -1 ? to - trailingSpaces.length - selectedWordLength : 0, to];
}
function maskitoPipe(processors = []) {
  return (initialData, ...readonlyArgs) => processors.reduce((data, fn) => Object.assign(Object.assign({}, data), fn(data, ...readonlyArgs)), initialData);
}
function maskitoTransform(valueOrState, maskitoOptions) {
  const options = Object.assign(Object.assign({}, MASKITO_DEFAULT_OPTIONS), maskitoOptions);
  const preprocessor = maskitoPipe(options.preprocessors);
  const postprocessor = maskitoPipe(options.postprocessors);
  const initialElementState = typeof valueOrState === "string" ? {
    value: valueOrState,
    selection: [0, 0]
  } : valueOrState;
  const {
    elementState
  } = preprocessor({
    elementState: initialElementState,
    data: ""
  }, "validation");
  const maskModel = new MaskModel(elementState, options);
  const {
    value,
    selection
  } = postprocessor(maskModel, initialElementState);
  return typeof valueOrState === "string" ? value : {
    value,
    selection
  };
}
var Maskito = class extends MaskHistory {
  constructor(element, maskitoOptions) {
    super();
    this.element = element;
    this.maskitoOptions = maskitoOptions;
    this.isTextArea = this.element.nodeName === "TEXTAREA";
    this.eventListener = new EventListener(this.element);
    this.options = Object.assign(Object.assign({}, MASKITO_DEFAULT_OPTIONS), this.maskitoOptions);
    this.preprocessor = maskitoPipe(this.options.preprocessors);
    this.postprocessor = maskitoPipe(this.options.postprocessors);
    this.teardowns = this.options.plugins.map((plugin) => plugin(this.element, this.options));
    this.ensureValueFitsMask();
    this.updateHistory(this.elementState);
    this.eventListener.listen("keydown", (event) => {
      if (isRedo(event)) {
        event.preventDefault();
        return this.redo();
      }
      if (isUndo(event)) {
        event.preventDefault();
        return this.undo();
      }
    });
    if (isBeforeInputEventSupported(element)) {
      this.eventListener.listen("beforeinput", (event) => {
        const isForward = event.inputType.includes("Forward");
        this.updateHistory(this.elementState);
        switch (event.inputType) {
          case "historyUndo":
            event.preventDefault();
            return this.undo();
          case "historyRedo":
            event.preventDefault();
            return this.redo();
          case "deleteByCut":
          case "deleteContentBackward":
          case "deleteContentForward":
            return this.handleDelete({
              event,
              isForward,
              selection: getNotEmptySelection(this.elementState, isForward)
            });
          case "deleteWordForward":
          case "deleteWordBackward":
            return this.handleDelete({
              event,
              isForward,
              selection: getWordSelection(this.elementState, isForward),
              force: true
            });
          case "deleteSoftLineBackward":
          case "deleteSoftLineForward":
          case "deleteHardLineBackward":
          case "deleteHardLineForward":
            return this.handleDelete({
              event,
              isForward,
              selection: getLineSelection(this.elementState, isForward),
              force: true
            });
          case "insertCompositionText":
            return;
          case "insertLineBreak":
            return this.handleEnter(event);
          case "insertFromPaste":
          case "insertText":
          case "insertFromDrop":
          default:
            return this.handleInsert(event, event.data || "");
        }
      });
    } else {
      this.eventListener.listen("keydown", (event) => this.handleKeydown(event));
      this.eventListener.listen("paste", (event) => {
        var _a;
        return this.handleInsert(event, ((_a = event.clipboardData) === null || _a === void 0 ? void 0 : _a.getData("text/plain")) || "");
      });
    }
    this.eventListener.listen("input", ({
      inputType
    }) => {
      if (inputType === "insertCompositionText") {
        return;
      }
      this.ensureValueFitsMask();
      this.updateHistory(this.elementState);
    });
    this.eventListener.listen("compositionend", () => {
      this.ensureValueFitsMask();
      this.updateHistory(this.elementState);
    });
  }
  get elementState() {
    const {
      value,
      selectionStart,
      selectionEnd
    } = this.element;
    return {
      value,
      selection: [selectionStart || 0, selectionEnd || 0]
    };
  }
  get maxLength() {
    const {
      maxLength
    } = this.element;
    return maxLength === -1 ? Infinity : maxLength;
  }
  destroy() {
    this.eventListener.destroy();
    this.teardowns.forEach((teardown) => teardown === null || teardown === void 0 ? void 0 : teardown());
  }
  updateElementState({
    value,
    selection
  }, eventInit = {
    inputType: "insertText",
    data: null
  }) {
    const initialValue = this.elementState.value;
    this.updateValue(value);
    this.updateSelectionRange(selection);
    if (initialValue !== value) {
      this.dispatchInputEvent(eventInit);
    }
  }
  updateSelectionRange([from, to]) {
    var _a, _b;
    if (this.element.selectionStart !== from || this.element.selectionEnd !== to) {
      (_b = (_a = this.element).setSelectionRange) === null || _b === void 0 ? void 0 : _b.call(_a, from, to);
    }
  }
  updateValue(value) {
    this.element.value = value;
  }
  ensureValueFitsMask() {
    this.updateElementState(maskitoTransform(this.elementState, this.options));
  }
  dispatchInputEvent(eventInit = {
    inputType: "insertText",
    data: null
  }) {
    const globalObject = typeof window !== "undefined" ? window : globalThis;
    if (globalObject === null || globalObject === void 0 ? void 0 : globalObject.InputEvent) {
      this.element.dispatchEvent(new InputEvent("input", Object.assign(Object.assign({}, eventInit), {
        bubbles: true,
        cancelable: false
      })));
    }
  }
  handleKeydown(event) {
    const pressedKey = event.key;
    const isForward = pressedKey === "Delete";
    switch (pressedKey) {
      case "Backspace":
      case "Delete":
        return this.handleDelete({
          event,
          isForward,
          selection: getNotEmptySelection(this.elementState, isForward)
        });
      case "Enter":
        return this.handleEnter(event);
    }
    if (!isEventProducingCharacter(event)) {
      return;
    }
    this.handleInsert(event, pressedKey);
  }
  handleDelete({
    event,
    selection,
    isForward,
    force = false
  }) {
    const initialState = {
      value: this.elementState.value,
      selection
    };
    const [initialFrom, initialTo] = initialState.selection;
    const {
      elementState
    } = this.preprocessor({
      elementState: initialState,
      data: ""
    }, isForward ? "deleteForward" : "deleteBackward");
    const maskModel = new MaskModel(elementState, this.options);
    const [from, to] = elementState.selection;
    maskModel.deleteCharacters([from, to]);
    const newElementState = this.postprocessor(maskModel, initialState);
    const newPossibleValue = initialState.value.slice(0, initialFrom) + initialState.value.slice(initialTo);
    if (newPossibleValue === newElementState.value && !force) {
      return;
    }
    event.preventDefault();
    if (areElementValuesEqual(initialState, elementState, maskModel, newElementState)) {
      return this.updateSelectionRange(isForward ? [to, to] : [from, from]);
    }
    const inputTypeFallback = isForward ? "deleteContentForward" : "deleteContentBackward";
    this.updateElementState(newElementState, {
      inputType: "inputType" in event ? event.inputType : inputTypeFallback,
      data: null
    });
    this.updateHistory(newElementState);
  }
  handleInsert(event, data) {
    const initialElementState = this.elementState;
    const {
      elementState,
      data: insertedText = data
    } = this.preprocessor({
      data,
      elementState: initialElementState
    }, "insert");
    const maskModel = new MaskModel(elementState, this.options);
    try {
      maskModel.addCharacters(elementState.selection, insertedText);
    } catch (_a) {
      return event.preventDefault();
    }
    const [from, to] = elementState.selection;
    const newPossibleValue = elementState.value.slice(0, from) + data + elementState.value.slice(to);
    const newElementState = this.postprocessor(maskModel, initialElementState);
    if (newElementState.value.length > this.maxLength) {
      return event.preventDefault();
    }
    if (newPossibleValue !== newElementState.value) {
      event.preventDefault();
      this.updateElementState(newElementState, {
        data,
        inputType: "inputType" in event ? event.inputType : "insertText"
      });
      this.updateHistory(newElementState);
    }
  }
  handleEnter(event) {
    if (this.isTextArea) {
      this.handleInsert(event, "\n");
    }
  }
};

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-directives-unmask-handler.js
var TuiUnmaskHandlerDirective = class extends AbstractTuiValueTransformer {
  constructor() {
    super(...arguments);
    this.tuiUnmaskHandler = identity;
    this.maskito = null;
  }
  fromControlValue(controlValue) {
    return maskitoTransform(String(controlValue !== null && controlValue !== void 0 ? controlValue : ""), this.maskito || MASKITO_DEFAULT_OPTIONS);
  }
  toControlValue(value) {
    return this.tuiUnmaskHandler(value);
  }
};
TuiUnmaskHandlerDirective.ɵfac = function() {
  let ɵTuiUnmaskHandlerDirective_BaseFactory;
  return function TuiUnmaskHandlerDirective_Factory(t) {
    return (ɵTuiUnmaskHandlerDirective_BaseFactory || (ɵTuiUnmaskHandlerDirective_BaseFactory = ɵɵgetInheritedFactory(TuiUnmaskHandlerDirective)))(t || TuiUnmaskHandlerDirective);
  };
}();
TuiUnmaskHandlerDirective.ɵdir = ɵɵdefineDirective({
  type: TuiUnmaskHandlerDirective,
  selectors: [["", "maskito", "", "tuiUnmaskHandler", ""]],
  inputs: {
    tuiUnmaskHandler: "tuiUnmaskHandler",
    maskito: "maskito"
  },
  features: [ɵɵProvidersFeature([{
    provide: AbstractTuiValueTransformer,
    useExisting: TuiUnmaskHandlerDirective
  }]), ɵɵInheritDefinitionFeature]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiUnmaskHandlerDirective, [{
    type: Directive,
    args: [{
      selector: "[maskito][tuiUnmaskHandler]",
      providers: [{
        provide: AbstractTuiValueTransformer,
        useExisting: TuiUnmaskHandlerDirective
      }]
    }]
  }], null, {
    tuiUnmaskHandler: [{
      type: Input
    }],
    maskito: [{
      type: Input
    }]
  });
})();
var TuiUnmaskHandlerModule = class {
};
TuiUnmaskHandlerModule.ɵfac = function TuiUnmaskHandlerModule_Factory(t) {
  return new (t || TuiUnmaskHandlerModule)();
};
TuiUnmaskHandlerModule.ɵmod = ɵɵdefineNgModule({
  type: TuiUnmaskHandlerModule,
  declarations: [TuiUnmaskHandlerDirective],
  exports: [TuiUnmaskHandlerDirective]
});
TuiUnmaskHandlerModule.ɵinj = ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiUnmaskHandlerModule, [{
    type: NgModule,
    args: [{
      declarations: [TuiUnmaskHandlerDirective],
      exports: [TuiUnmaskHandlerDirective]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-providers.js
var TUI_MONTH_FORMATTER_PROVIDER = {
  provide: TUI_MONTH_FORMATTER,
  deps: [TuiMonthPipe],
  useFactory: (pipe) => (month) => month ? pipe.transform(month).pipe(map((formatted) => `${formatted} ${month.formattedYear}`)) : of("")
};
var FIXED_DROPDOWN_CONTROLLER_PROVIDER = tuiDropdownOptionsProvider({
  limitWidth: "fixed",
  align: "right"
});
var TUI_VALUE_ACCESSOR_PROVIDER = {
  provide: TUI_VALUE_ACCESSOR,
  deps: [[new Optional(), new Self(), NG_VALUE_ACCESSOR]],
  useFactory: identity
};

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-directives-value-accessor.js
var TuiValueAccessorDirective = class {
};
TuiValueAccessorDirective.ɵfac = function TuiValueAccessorDirective_Factory(t) {
  return new (t || TuiValueAccessorDirective)();
};
TuiValueAccessorDirective.ɵdir = ɵɵdefineDirective({
  type: TuiValueAccessorDirective,
  selectors: [["", "tuiValueAccessor", ""]],
  features: [ɵɵProvidersFeature([TUI_VALUE_ACCESSOR_PROVIDER])]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiValueAccessorDirective, [{
    type: Directive,
    args: [{
      selector: "[tuiValueAccessor]",
      providers: [TUI_VALUE_ACCESSOR_PROVIDER]
    }]
  }], null, null);
})();
var TuiValueAccessorModule = class {
};
TuiValueAccessorModule.ɵfac = function TuiValueAccessorModule_Factory(t) {
  return new (t || TuiValueAccessorModule)();
};
TuiValueAccessorModule.ɵmod = ɵɵdefineNgModule({
  type: TuiValueAccessorModule,
  declarations: [TuiValueAccessorDirective],
  exports: [TuiValueAccessorDirective]
});
TuiValueAccessorModule.ɵinj = ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiValueAccessorModule, [{
    type: NgModule,
    args: [{
      declarations: [TuiValueAccessorDirective],
      exports: [TuiValueAccessorDirective]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-avatar.js
function TuiAvatarComponent_img_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "img", 3);
    ɵɵlistener("error", function TuiAvatarComponent_img_0_Template_img_error_0_listener() {
      ɵɵrestoreView(_r4);
      const ctx_r3 = ɵɵnextContext();
      return ɵɵresetView(ctx_r3.onError());
    });
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵproperty("src", ctx_r0.avatarUrl || "", ɵɵsanitizeUrl);
    ɵɵattribute("alt", ctx_r0.text);
  }
}
function TuiAvatarComponent_tui_svg_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "tui-svg", 4);
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵproperty("src", ctx_r1.fallback);
  }
}
function TuiAvatarComponent_tui_svg_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "tui-svg", 4);
  }
  if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵproperty("src", ctx_r2.stringAvatar);
  }
}
var TUI_AVATAR_DEFAULT_OPTIONS = {
  size: "m",
  autoColor: false,
  rounded: false
};
var TUI_AVATAR_OPTIONS = tuiCreateToken(TUI_AVATAR_DEFAULT_OPTIONS);
function tuiAvatarOptionsProvider(options) {
  return tuiProvideOptions(TUI_AVATAR_OPTIONS, options, TUI_AVATAR_DEFAULT_OPTIONS);
}
var TuiAvatarComponent = class {
  constructor(options) {
    this.options = options;
    this.size = this.options.size;
    this.text = "";
    this.fallback = null;
    this.autoColor = this.options.autoColor;
    this.rounded = this.options.rounded;
    this.avatarUrl = null;
    this.isUrlValid = false;
  }
  set avatarUrlSetter(avatarUrl) {
    this.avatarUrl = avatarUrl;
    this.isUrlValid = !!avatarUrl && !this.iconAvatar;
  }
  get bgColor() {
    return this.autoColor ? tuiStringHashToHsl(this.text) : "";
  }
  get hasAvatar() {
    return this.avatarUrl !== null && this.isUrlValid;
  }
  get iconAvatar() {
    var _a;
    return tuiIsString(this.avatarUrl) && !!((_a = this.avatarUrl) === null || _a === void 0 ? void 0 : _a.startsWith("tuiIcon"));
  }
  get useFallback() {
    return !!this.fallback && !!this.avatarUrl && !this.isUrlValid && !this.text.length;
  }
  get computedText() {
    return this.hasAvatar || this.iconAvatar || this.text === "" ? "" : this.getSlicedText(this.text, this.size);
  }
  get stringAvatar() {
    return this.iconAvatar ? String(this.avatarUrl) : "";
  }
  onError() {
    this.isUrlValid = false;
  }
  getSlicedText(text, size) {
    const words = text.split(" ");
    return words.length > 1 && tuiSizeBigger(size) ? words[0].slice(0, 1) + words[1].slice(0, 1) : words[0].slice(0, 1);
  }
};
TuiAvatarComponent.ɵfac = function TuiAvatarComponent_Factory(t) {
  return new (t || TuiAvatarComponent)(ɵɵdirectiveInject(TUI_AVATAR_OPTIONS));
};
TuiAvatarComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiAvatarComponent,
  selectors: [["tui-avatar"]],
  hostVars: 7,
  hostBindings: function TuiAvatarComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("data-size", ctx.size);
      ɵɵstyleProp("background", ctx.bgColor);
      ɵɵclassProp("_rounded", ctx.rounded)("_has-avatar", ctx.hasAvatar);
    }
  },
  inputs: {
    size: "size",
    avatarUrlSetter: ["avatarUrl", "avatarUrlSetter"],
    text: "text",
    fallback: "fallback",
    autoColor: "autoColor",
    rounded: "rounded"
  },
  decls: 5,
  vars: 4,
  consts: [["loading", "lazy", "class", "t-image", 3, "src", "error", 4, "ngIf"], ["class", "t-icon", 3, "src", 4, "ngIf"], [1, "t-text"], ["loading", "lazy", 1, "t-image", 3, "src", "error"], [1, "t-icon", 3, "src"]],
  template: function TuiAvatarComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵtemplate(0, TuiAvatarComponent_img_0_Template, 1, 2, "img", 0);
      ɵɵtemplate(1, TuiAvatarComponent_tui_svg_1_Template, 1, 1, "tui-svg", 1);
      ɵɵtemplate(2, TuiAvatarComponent_tui_svg_2_Template, 1, 1, "tui-svg", 1);
      ɵɵelementStart(3, "span", 2);
      ɵɵtext(4);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      ɵɵproperty("ngIf", ctx.isUrlValid);
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.useFallback);
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.stringAvatar);
      ɵɵadvance(2);
      ɵɵtextInterpolate(ctx.computedText);
    }
  },
  dependencies: [TuiSvgComponent, NgIf, TuiLazyLoadingDirective],
  styles: ["[_nghost-%COMP%]{position:relative;display:flex;flex-shrink:0;border-radius:var(--tui-radius-m);color:var(--tui-secondary-active);text-align:center;text-transform:uppercase;justify-content:center;align-items:center;background:var(--tui-avatar-background, currentColor);-webkit-user-select:none;-moz-user-select:none;user-select:none;overflow:hidden}[data-size=xs][_nghost-%COMP%]{font:var(--tui-font-text-s);width:1.5rem;height:1.5rem}[data-size=s][_nghost-%COMP%]{font:var(--tui-font-text-m);width:2rem;height:2rem}[data-size=m][_nghost-%COMP%]{font:var(--tui-font-text-l);width:3rem;height:3rem}[data-size=l][_nghost-%COMP%]{font:var(--tui-font-heading-5);width:4rem;height:4rem;border-radius:var(--tui-radius-xl)}[data-size=xl][_nghost-%COMP%]{font:var(--tui-font-heading-3);width:6rem;height:6rem;border-radius:var(--tui-radius-xl)}[data-size=xxl][_nghost-%COMP%]{font:var(--tui-font-heading-1);width:9rem;height:9rem;border-radius:var(--tui-radius-l)}[new][data-size=xxs][_nghost-%COMP%]{width:1.5rem;height:1.5rem;border-radius:var(--tui-radius-s)}[new][data-size=xxs][_nghost-%COMP%]   .t-icon[_ngcontent-%COMP%]{transform:scale(.58)}[new][data-size=xs][_nghost-%COMP%]{width:2rem;height:2rem;border-radius:var(--tui-radius-s)}[new][data-size=xs][_nghost-%COMP%]   .t-icon[_ngcontent-%COMP%]{transform:scale(.83)}[new][data-size=s][_nghost-%COMP%]{width:2.5rem;height:2.5rem;border-radius:calc(1.5 * var(--tui-radius-s))}[new][data-size=s][_nghost-%COMP%]   .t-icon[_ngcontent-%COMP%]{transform:scale(1)}[new][data-size=m][_nghost-%COMP%]{width:3rem;height:3rem;border-radius:calc(2 * var(--tui-radius-s))}[new][data-size=m][_nghost-%COMP%]   .t-icon[_ngcontent-%COMP%]{transform:scale(1.17)}[new][data-size=l][_nghost-%COMP%]{width:4rem;height:4rem;border-radius:calc(2 * var(--tui-radius-s))}[new][data-size=l][_nghost-%COMP%]   .t-icon[_ngcontent-%COMP%]{transform:scale(1.67)}[new][data-size=xl][_nghost-%COMP%]{width:6rem;height:6rem;border-radius:calc(3 * var(--tui-radius-s))}[new][data-size=xl][_nghost-%COMP%]   .t-icon[_ngcontent-%COMP%]{transform:scale(2.33)}[new][data-size=xxl][_nghost-%COMP%]{width:8rem;height:8rem;border-radius:calc(4 * var(--tui-radius-s))}[new][data-size=xxl][_nghost-%COMP%]   .t-icon[_ngcontent-%COMP%]{transform:scale(3.33)}._has-avatar[_nghost-%COMP%]{background-color:transparent}._rounded[_nghost-%COMP%]{border-radius:100%!important}  .tui-avatar-stack{display:flex;width:-webkit-min-content;width:min-content}.tui-avatar-stack[data-size=xs][_nghost-%COMP%], .tui-avatar-stack   [data-size=xs][_nghost-%COMP%]{margin-right:-.625rem;box-shadow:0 0 0 1px var(--tui-avatar-border, var(--tui-base-01))}.tui-avatar-stack[data-size=s][_nghost-%COMP%], .tui-avatar-stack   [data-size=s][_nghost-%COMP%]{margin-right:-.875rem;box-shadow:0 0 0 1px var(--tui-avatar-border, var(--tui-base-01))}.tui-avatar-stack[data-size=m][_nghost-%COMP%], .tui-avatar-stack   [data-size=m][_nghost-%COMP%]{margin-right:-1.25rem;box-shadow:0 0 0 2px var(--tui-avatar-border, var(--tui-base-01))}.tui-avatar-stack[data-size=l][_nghost-%COMP%], .tui-avatar-stack   [data-size=l][_nghost-%COMP%]{margin-right:-1.625rem;box-shadow:0 0 0 2px var(--tui-avatar-border, var(--tui-base-01))}.tui-avatar-stack[data-size=xl][_nghost-%COMP%], .tui-avatar-stack   [data-size=xl][_nghost-%COMP%]{margin-right:-2.25rem;box-shadow:0 0 0 3px var(--tui-avatar-border, var(--tui-base-01))}.tui-avatar-stack[data-size=xxl][_nghost-%COMP%], .tui-avatar-stack   [data-size=xxl][_nghost-%COMP%]{margin-right:-3.375rem;box-shadow:0 0 0 3px var(--tui-avatar-border, var(--tui-base-01))}.t-image[_ngcontent-%COMP%]{width:100%;height:100%;object-fit:cover}.t-text[_ngcontent-%COMP%]{color:var(--tui-avatar-color, var(--tui-text-01))}.t-icon[_ngcontent-%COMP%]{position:absolute;top:0;left:0;width:100%;height:100%;color:var(--tui-avatar-color, var(--tui-text-01))}[data-size=xs][_nghost-%COMP%]   .t-icon[_ngcontent-%COMP%]{transform:scale(.5)}[data-size=m][_nghost-%COMP%]   .t-icon[_ngcontent-%COMP%]{transform:scale(1.6)}[data-size=l][_nghost-%COMP%]   .t-icon[_ngcontent-%COMP%]{transform:scale(2)}[data-size=xl][_nghost-%COMP%]   .t-icon[_ngcontent-%COMP%]{transform:scale(3.2)}"],
  changeDetection: 0
});
__decorate([tuiPure], TuiAvatarComponent.prototype, "getSlicedText", null);
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiAvatarComponent, [{
    type: Component,
    args: [{
      selector: "tui-avatar",
      templateUrl: "./avatar.template.html",
      styleUrls: ["./avatar.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush
    }]
  }], function() {
    return [{
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_AVATAR_OPTIONS]
      }]
    }];
  }, {
    size: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["attr.data-size"]
    }],
    avatarUrlSetter: [{
      type: Input,
      args: ["avatarUrl"]
    }],
    text: [{
      type: Input
    }],
    fallback: [{
      type: Input
    }],
    autoColor: [{
      type: Input
    }],
    rounded: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["class._rounded"]
    }],
    bgColor: [{
      type: HostBinding,
      args: ["style.background"]
    }],
    hasAvatar: [{
      type: HostBinding,
      args: ["class._has-avatar"]
    }],
    getSlicedText: []
  });
})();
var TuiAvatarModule = class {
};
TuiAvatarModule.ɵfac = function TuiAvatarModule_Factory(t) {
  return new (t || TuiAvatarModule)();
};
TuiAvatarModule.ɵmod = ɵɵdefineNgModule({
  type: TuiAvatarModule,
  declarations: [TuiAvatarComponent],
  imports: [CommonModule, TuiLazyLoadingModule, TuiSvgModule],
  exports: [TuiAvatarComponent]
});
TuiAvatarModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, TuiLazyLoadingModule, TuiSvgModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiAvatarModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, TuiLazyLoadingModule, TuiSvgModule],
      declarations: [TuiAvatarComponent],
      exports: [TuiAvatarComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-badge.js
var _c03 = ["*"];
var TuiBadgeComponent = class {
  constructor(mode$) {
    this.mode$ = mode$;
    this.size = "m";
    this.status = "default";
    this.hoverable = false;
  }
  get padding() {
    var _a;
    if (this.isEmpty) {
      return "none";
    }
    return tuiIsNumber((_a = this.value) === null || _a === void 0 ? void 0 : _a.valueOf()) ? "m" : "l";
  }
  get outputValue() {
    var _a;
    const value = (_a = this.value) === null || _a === void 0 ? void 0 : _a.valueOf();
    if (tuiIsNumber(value) && value > 99) {
      return "99+";
    }
    return tuiIsPresent(this.value) ? String(this.value) : "";
  }
  get isEmpty() {
    return !this.value && this.value !== 0;
  }
  titleText({
    offsetWidth,
    scrollWidth
  }) {
    return offsetWidth < scrollWidth ? this.outputValue : "";
  }
};
TuiBadgeComponent.ɵfac = function TuiBadgeComponent_Factory(t) {
  return new (t || TuiBadgeComponent)(ɵɵdirectiveInject(TUI_MODE));
};
TuiBadgeComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiBadgeComponent,
  selectors: [["tui-badge"]],
  hostVars: 7,
  hostBindings: function TuiBadgeComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("$.data-mode.attr", function TuiBadgeComponent___data_mode_attr_HostBindingHandler() {
        return ctx.mode$;
      });
    }
    if (rf & 2) {
      ɵɵattribute("data-size", ctx.size)("data-status", ctx.status)("data-padding", ctx.padding);
      ɵɵclassProp("_hoverable", ctx.hoverable)("_empty-value", ctx.isEmpty);
    }
  },
  inputs: {
    value: "value",
    size: "size",
    status: "status",
    hoverable: "hoverable"
  },
  features: [ɵɵProvidersFeature([MODE_PROVIDER])],
  ngContentSelectors: _c03,
  decls: 5,
  vars: 2,
  consts: [[1, "t-left-content"], [1, "t-text", 3, "title", "mouseenter"], ["text", ""]],
  template: function TuiBadgeComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵelementStart(0, "span", 0);
      ɵɵprojection(1);
      ɵɵelementEnd();
      ɵɵelementStart(2, "span", 1, 2);
      ɵɵlistener("mouseenter", function TuiBadgeComponent_Template_span_mouseenter_2_listener() {
        return 0;
      });
      ɵɵtext(4);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      const _r0 = ɵɵreference(3);
      ɵɵadvance(2);
      ɵɵproperty("title", ctx.titleText(_r0));
      ɵɵadvance(2);
      ɵɵtextInterpolate1(" ", ctx.outputValue, "\n");
    }
  },
  styles: ['[_nghost-%COMP%]{transition-property:background-color;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;--left-content-color: currentColor;position:relative;display:inline-flex;font:var(--tui-font-text-s);align-items:center;justify-content:center;box-sizing:border-box;color:var(--tui-base-01);border-radius:6.25rem;white-space:nowrap;overflow:hidden;vertical-align:middle;max-width:100%}[_nghost-%COMP%]:after{transition-property:background;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;position:absolute;top:0;left:0;width:100%;height:100%;content:"";box-sizing:border-box;border-radius:inherit;pointer-events:none}._hoverable[_nghost-%COMP%]:hover[data-status=custom]:after, ._hoverable[_nghost-%COMP%]:active[data-status=custom]:after{background-color:var(--tui-clear)}[data-status=primary][_nghost-%COMP%]{background-color:var(--tui-primary);color:var(--tui-primary-text)}[data-status=primary]._hoverable[_nghost-%COMP%]:hover{background-color:var(--tui-primary-hover)}[data-status=primary]._hoverable[_nghost-%COMP%]:active{background-color:var(--tui-primary-active)}[data-status=error][_nghost-%COMP%]{--left-content-color: var(--tui-error-fill);background-color:var(--tui-error-bg);color:var(--tui-text-01)}[data-status=error]._hoverable[_nghost-%COMP%]:hover, [data-status=error]._hoverable[_nghost-%COMP%]:active{background-color:var(--tui-error-bg-hover)}[data-status=error][data-mode=onDark][_nghost-%COMP%]{background-color:var(--tui-error-bg-night);color:var(--tui-text-01-night)}[data-status=error][data-mode=onDark]._hoverable[_nghost-%COMP%]:hover, [data-status=error][data-mode=onDark]._hoverable[_nghost-%COMP%]:active{background-color:var(--tui-error-bg-night-hover)}[data-status=success][_nghost-%COMP%]{--left-content-color: var(--tui-success-fill);background-color:var(--tui-success-bg);color:var(--tui-text-01)}[data-status=success]._hoverable[_nghost-%COMP%]:hover, [data-status=success]._hoverable[_nghost-%COMP%]:active{background-color:var(--tui-success-bg-hover)}[data-status=success][data-mode=onDark][_nghost-%COMP%]{background-color:var(--tui-success-bg-night);color:var(--tui-text-01-night)}[data-status=success][data-mode=onDark]._hoverable[_nghost-%COMP%]:hover, [data-status=success][data-mode=onDark]._hoverable[_nghost-%COMP%]:active{background-color:var(--tui-success-bg-night-hover)}[data-status=warning][_nghost-%COMP%]{--left-content-color: var(--tui-warning-fill);background-color:var(--tui-warning-bg);color:var(--tui-text-01)}[data-status=warning]._hoverable[_nghost-%COMP%]:hover, [data-status=warning]._hoverable[_nghost-%COMP%]:active{background-color:var(--tui-warning-bg-hover)}[data-status=warning][data-mode=onDark][_nghost-%COMP%]{background-color:var(--tui-warning-bg-night);color:var(--tui-text-01-night)}[data-status=warning][data-mode=onDark]._hoverable[_nghost-%COMP%]:hover, [data-status=warning][data-mode=onDark]._hoverable[_nghost-%COMP%]:active{background-color:var(--tui-warning-bg-night-hover)}[data-status=info][_nghost-%COMP%]{--left-content-color: var(--tui-info-fill);background-color:var(--tui-info-bg);color:var(--tui-text-01)}[data-status=info]._hoverable[_nghost-%COMP%]:hover, [data-status=info]._hoverable[_nghost-%COMP%]:active{background-color:var(--tui-info-bg-hover)}[data-status=info][data-mode=onDark][_nghost-%COMP%]{background-color:var(--tui-info-bg-night);color:var(--tui-text-01-night)}[data-status=info][data-mode=onDark]._hoverable[_nghost-%COMP%]:hover, [data-status=info][data-mode=onDark]._hoverable[_nghost-%COMP%]:active{background-color:var(--tui-info-bg-night-hover)}[data-status=neutral][_nghost-%COMP%]{--left-content-color: var(--tui-neutral-fill);background-color:var(--tui-neutral-bg);color:var(--tui-text-01)}[data-status=neutral]._hoverable[_nghost-%COMP%]:hover, [data-status=neutral]._hoverable[_nghost-%COMP%]:active{background-color:var(--tui-neutral-bg-hover)}[data-status=neutral][data-mode=onDark][_nghost-%COMP%]{background-color:var(--tui-neutral-bg-night);color:var(--tui-text-01-night)}[data-status=neutral][data-mode=onDark]._hoverable[_nghost-%COMP%]:hover, [data-status=neutral][data-mode=onDark]._hoverable[_nghost-%COMP%]:active{background-color:var(--tui-neutral-bg-night-hover)}[data-status=default][_nghost-%COMP%]{background-color:var(--tui-base-06)}[data-status=default][_nghost-%COMP%]:not([data-mode])._hoverable:hover{background-color:var(--tui-base-07)}[data-status=default][_nghost-%COMP%]:not([data-mode])._hoverable:active{background-color:var(--tui-base-08)}[data-status=default][data-mode=onDark][_nghost-%COMP%]{background-color:var(--tui-clear-inverse-hover)}[data-status=default][data-mode=onDark]._hoverable[_nghost-%COMP%]:hover{background-color:var(--tui-clear-inverse-active)}[data-status=default][data-mode=onDark]._hoverable[_nghost-%COMP%]:active{background-color:var(--tui-clear-inverse-active)}[data-status=default][data-mode=onDark][_nghost-%COMP%]:focus:after{border:2px solid var(--tui-base-01)}[data-status=default][data-mode=onLight][_nghost-%COMP%]{background-color:var(--tui-clear);color:var(--tui-text-01)}[data-status=default][data-mode=onLight]._hoverable[_nghost-%COMP%]:hover{background-color:var(--tui-clear-hover)}[data-status=default][data-mode=onLight]._hoverable[_nghost-%COMP%]:active{background-color:var(--tui-clear-active)}._hoverable[_nghost-%COMP%]{cursor:pointer}[data-padding=m][_nghost-%COMP%]{padding:0 .5rem}[data-padding=m][data-size=xs][_nghost-%COMP%]{padding:0 .25rem}[data-padding=m][data-size=s][_nghost-%COMP%]{padding:0 .375rem}[data-padding=m][data-size=l][_nghost-%COMP%]{padding:0 .625rem}[data-padding=l][_nghost-%COMP%]{padding:0 .625rem}[data-padding=l][data-size=xs][_nghost-%COMP%]{padding:0 .375rem}[data-padding=l][data-size=s][_nghost-%COMP%]{padding:0 .5rem}[data-padding=l][data-size=l][_nghost-%COMP%]{padding:0 .75rem}[data-size=xs][_nghost-%COMP%]{font:var(--tui-font-text-xs);height:1rem;min-width:1rem}[data-size=xs][_nghost-%COMP%]   .t-left-content[_ngcontent-%COMP%]:before{width:.34375rem;height:.34375rem}[data-size=s][_nghost-%COMP%]{font:var(--tui-font-text-xs);height:1.25rem;min-width:1.25rem}[data-size=s][_nghost-%COMP%]   .t-left-content[_ngcontent-%COMP%]:before{width:.25rem;height:.25rem}[data-size=m][_nghost-%COMP%]{height:var(--tui-height-xs);line-height:var(--tui-height-xs);min-width:var(--tui-height-xs)}[data-size=l][_nghost-%COMP%]{height:var(--tui-height-s);line-height:var(--tui-height-s);min-width:var(--tui-height-s)}[data-size=l][_nghost-%COMP%]   .t-left-content[_ngcontent-%COMP%]:before{margin:0 .5rem 0 0;width:.5rem;height:.5rem}._empty-value[_nghost-%COMP%]   .t-left-content[_ngcontent-%COMP%]{margin:0 -.25rem}._empty-value[_nghost-%COMP%]   .t-left-content[_ngcontent-%COMP%]:before{margin:0}.t-left-content[_ngcontent-%COMP%]{display:none;color:var(--left-content-color);line-height:0}.t-left-content[_ngcontent-%COMP%]:not(:empty){display:block;margin-left:-.25rem}.t-left-content[_ngcontent-%COMP%]:not(:empty):before{content:none}[data-status=error][_nghost-%COMP%]   .t-left-content[_ngcontent-%COMP%], [data-status=success][_nghost-%COMP%]   .t-left-content[_ngcontent-%COMP%], [data-status=warning][_nghost-%COMP%]   .t-left-content[_ngcontent-%COMP%], [data-status=info][_nghost-%COMP%]   .t-left-content[_ngcontent-%COMP%], [data-status=neutral][_nghost-%COMP%]   .t-left-content[_ngcontent-%COMP%]{display:block}.t-left-content[_ngcontent-%COMP%]:before{content:"";display:block;background:currentColor;margin:0 .375rem 0 0;width:.375rem;height:.375rem;border-radius:100%}.t-text[_ngcontent-%COMP%]{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}'],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiBadgeComponent, [{
    type: Component,
    args: [{
      selector: "tui-badge",
      templateUrl: "./badge.template.html",
      styleUrls: ["./badge.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [MODE_PROVIDER],
      host: {
        "($.data-mode.attr)": "mode$"
      }
    }]
  }], function() {
    return [{
      type: Observable,
      decorators: [{
        type: Inject,
        args: [TUI_MODE]
      }]
    }];
  }, {
    value: [{
      type: Input
    }],
    size: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["attr.data-size"]
    }],
    status: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["attr.data-status"]
    }],
    hoverable: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["class._hoverable"]
    }],
    padding: [{
      type: HostBinding,
      args: ["attr.data-padding"]
    }],
    isEmpty: [{
      type: HostBinding,
      args: ["class._empty-value"]
    }]
  });
})();
var TuiBadgeModule = class {
};
TuiBadgeModule.ɵfac = function TuiBadgeModule_Factory(t) {
  return new (t || TuiBadgeModule)();
};
TuiBadgeModule.ɵmod = ɵɵdefineNgModule({
  type: TuiBadgeModule,
  declarations: [TuiBadgeComponent],
  imports: [CommonModule],
  exports: [TuiBadgeComponent]
});
TuiBadgeModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiBadgeModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule],
      declarations: [TuiBadgeComponent],
      exports: [TuiBadgeComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-badged-content.js
function TuiBadgedContentComponent_div_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "div", 4);
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵstyleProp("background", ctx_r0.topNotification)("box-shadow", ctx_r0.boxShadow);
  }
}
function TuiBadgedContentComponent_div_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "div", 5);
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵstyleProp("background", ctx_r1.bottomNotification)("box-shadow", ctx_r1.boxShadow);
  }
}
function TuiBadgedContentComponent_div_3_ng_container_1_tui_badge_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "tui-badge", 10);
  }
  if (rf & 2) {
    const content_r5 = ɵɵnextContext().polymorpheusOutlet;
    const ctx_r6 = ɵɵnextContext(2);
    ɵɵstyleProp("background-color", ctx_r6.colorTop);
    ɵɵproperty("size", ctx_r6.badgeSize)("status", ctx_r6.getStatus(ctx_r6.colorTop))("value", content_r5);
  }
}
function TuiBadgedContentComponent_div_3_ng_container_1_tui_svg_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "tui-svg", 11);
  }
  if (rf & 2) {
    const content_r5 = ɵɵnextContext().polymorpheusOutlet;
    const ctx_r7 = ɵɵnextContext(2);
    ɵɵstyleProp("color", ctx_r7.colorTop);
    ɵɵproperty("src", content_r5);
  }
}
function TuiBadgedContentComponent_div_3_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, TuiBadgedContentComponent_div_3_ng_container_1_tui_badge_1_Template, 1, 5, "tui-badge", 8);
    ɵɵtemplate(2, TuiBadgedContentComponent_div_3_ng_container_1_tui_svg_2_Template, 1, 3, "tui-svg", 9);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const content_r5 = ctx.polymorpheusOutlet;
    const ctx_r4 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r4.contentIsNumber(content_r5));
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r4.contentIsString(content_r5));
  }
}
function TuiBadgedContentComponent_div_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 6);
    ɵɵtemplate(1, TuiBadgedContentComponent_div_3_ng_container_1_Template, 3, 2, "ng-container", 7);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵstyleProp("box-shadow", ctx_r2.boxShadow);
    ɵɵadvance(1);
    ɵɵproperty("polymorpheusOutlet", ctx_r2.contentTop);
  }
}
function TuiBadgedContentComponent_div_4_ng_container_1_tui_badge_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "tui-badge", 10);
  }
  if (rf & 2) {
    const content_r11 = ɵɵnextContext().polymorpheusOutlet;
    const ctx_r12 = ɵɵnextContext(2);
    ɵɵstyleProp("background-color", ctx_r12.colorBottom);
    ɵɵproperty("size", ctx_r12.badgeSize)("status", ctx_r12.getStatus(ctx_r12.colorBottom))("value", content_r11);
  }
}
function TuiBadgedContentComponent_div_4_ng_container_1_tui_svg_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "tui-svg", 11);
  }
  if (rf & 2) {
    const content_r11 = ɵɵnextContext().polymorpheusOutlet;
    const ctx_r13 = ɵɵnextContext(2);
    ɵɵstyleProp("color", ctx_r13.colorBottom);
    ɵɵproperty("src", content_r11);
  }
}
function TuiBadgedContentComponent_div_4_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, TuiBadgedContentComponent_div_4_ng_container_1_tui_badge_1_Template, 1, 5, "tui-badge", 8);
    ɵɵtemplate(2, TuiBadgedContentComponent_div_4_ng_container_1_tui_svg_2_Template, 1, 3, "tui-svg", 9);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const content_r11 = ctx.polymorpheusOutlet;
    const ctx_r10 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r10.contentIsNumber(content_r11));
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r10.contentIsString(content_r11));
  }
}
function TuiBadgedContentComponent_div_4_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 12);
    ɵɵtemplate(1, TuiBadgedContentComponent_div_4_ng_container_1_Template, 3, 2, "ng-container", 7);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r3 = ɵɵnextContext();
    ɵɵstyleProp("box-shadow", ctx_r3.boxShadow);
    ɵɵadvance(1);
    ɵɵproperty("polymorpheusOutlet", ctx_r3.contentBottom);
  }
}
var _c04 = ["*"];
var BADGE_SIZE = {
  xs: "xs",
  s: "s",
  m: "s",
  l: "m",
  xl: "m",
  xxl: "l"
};
var TuiBadgedContentComponent = class {
  constructor() {
    this.size = "m";
    this.colorTop = "";
    this.colorBottom = "";
    this.rounded = false;
  }
  get topNotification() {
    return !this.contentTop && this.colorTop ? this.colorTop : "";
  }
  get bottomNotification() {
    return !this.contentBottom && this.colorBottom ? this.colorBottom : "";
  }
  get badgeSize() {
    return BADGE_SIZE[this.size];
  }
  get badgeHidden() {
    return this.size === "xs";
  }
  get sizeBig() {
    return tuiSizeBigger(this.size);
  }
  get boxShadow() {
    const borderWidth = this.sizeBig ? 3 : 2;
    return `0 0 0 ${tuiPx(borderWidth)}`;
  }
  contentIsNumber(content) {
    return tuiIsNumber(content === null || content === void 0 ? void 0 : content.valueOf());
  }
  contentIsString(content) {
    return tuiIsString(content === null || content === void 0 ? void 0 : content.valueOf());
  }
  getStatus(color) {
    return color ? "custom" : "primary";
  }
};
TuiBadgedContentComponent.ɵfac = function TuiBadgedContentComponent_Factory(t) {
  return new (t || TuiBadgedContentComponent)();
};
TuiBadgedContentComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiBadgedContentComponent,
  selectors: [["tui-badged-content"]],
  hostVars: 7,
  hostBindings: function TuiBadgedContentComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("data-size", ctx.size);
      ɵɵclassProp("_with-top", ctx.contentTop)("_with-bottom", ctx.contentBottom)("_rounded", ctx.rounded);
    }
  },
  inputs: {
    contentTop: "contentTop",
    contentBottom: "contentBottom",
    size: "size",
    colorTop: "colorTop",
    colorBottom: "colorBottom",
    rounded: "rounded"
  },
  ngContentSelectors: _c04,
  decls: 5,
  vars: 4,
  consts: [["class", "t-notification t-notification_top", 3, "background", "boxShadow", 4, "ngIf"], ["class", "t-notification t-notification_bottom", 3, "background", "boxShadow", 4, "ngIf"], ["class", "t-content t-content_top", 3, "boxShadow", 4, "ngIf"], ["class", "t-content t-content_bottom", 3, "boxShadow", 4, "ngIf"], [1, "t-notification", "t-notification_top"], [1, "t-notification", "t-notification_bottom"], [1, "t-content", "t-content_top"], [4, "polymorpheusOutlet"], [3, "size", "status", "backgroundColor", "value", 4, "ngIf"], ["class", "t-icon", 3, "src", "color", 4, "ngIf"], [3, "size", "status", "value"], [1, "t-icon", 3, "src"], [1, "t-content", "t-content_bottom"]],
  template: function TuiBadgedContentComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵprojection(0);
      ɵɵtemplate(1, TuiBadgedContentComponent_div_1_Template, 1, 4, "div", 0);
      ɵɵtemplate(2, TuiBadgedContentComponent_div_2_Template, 1, 4, "div", 1);
      ɵɵtemplate(3, TuiBadgedContentComponent_div_3_Template, 2, 3, "div", 2);
      ɵɵtemplate(4, TuiBadgedContentComponent_div_4_Template, 2, 3, "div", 3);
    }
    if (rf & 2) {
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.topNotification);
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.bottomNotification);
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.contentTop);
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.contentBottom && ctx.sizeBig);
    }
  },
  dependencies: [TuiBadgeComponent, TuiSvgComponent, NgIf, PolymorpheusOutletDirective],
  styles: ["[_nghost-%COMP%]{position:relative;display:inline-block;color:var(--tui-base-01);height:-webkit-min-content;height:min-content}.t-notification[_ngcontent-%COMP%]{position:absolute;border-radius:100%;box-shadow:0 0 0 2px currentColor;background-color:currentColor}[data-size=xs][_nghost-%COMP%]:not(._rounded)   .t-notification_top[_ngcontent-%COMP%], [data-size=s][_nghost-%COMP%]:not(._rounded)   .t-notification_top[_ngcontent-%COMP%], [data-size=m][_nghost-%COMP%]:not(._rounded)   .t-notification_top[_ngcontent-%COMP%]{top:-.125rem;right:-.125rem}[data-size=l][_nghost-%COMP%]:not(._rounded)   .t-notification_top[_ngcontent-%COMP%], [data-size=xl][_nghost-%COMP%]:not(._rounded)   .t-notification_top[_ngcontent-%COMP%]{top:-.25rem;right:-.25rem}[data-size=xxl][_nghost-%COMP%]:not(._rounded)   .t-notification_top[_ngcontent-%COMP%]{top:-.5rem;right:-.5rem}[data-size=xs]._rounded[_nghost-%COMP%]   .t-notification_top[_ngcontent-%COMP%]{top:0;right:0}[data-size=s]._rounded[_nghost-%COMP%]   .t-notification_top[_ngcontent-%COMP%]{top:.0625rem;right:.0625rem}[data-size=m]._rounded[_nghost-%COMP%]   .t-notification_top[_ngcontent-%COMP%]{top:.1875rem;right:.1875rem}[data-size=l]._rounded[_nghost-%COMP%]   .t-notification_top[_ngcontent-%COMP%]{top:.25rem;right:.25rem}[data-size=xl]._rounded[_nghost-%COMP%]   .t-notification_top[_ngcontent-%COMP%]{top:.375rem;right:.375rem}[data-size=xxl]._rounded[_nghost-%COMP%]   .t-notification_top[_ngcontent-%COMP%]{top:.5rem;right:.5rem}[data-size=m][_nghost-%COMP%]:not(._rounded)   .t-notification_bottom[_ngcontent-%COMP%]{bottom:-.125rem;right:-.125rem}[data-size=l][_nghost-%COMP%]:not(._rounded)   .t-notification_bottom[_ngcontent-%COMP%], [data-size=xl][_nghost-%COMP%]:not(._rounded)   .t-notification_bottom[_ngcontent-%COMP%]{bottom:-.25rem;right:-.25rem}[data-size=xxl][_nghost-%COMP%]:not(._rounded)   .t-notification_bottom[_ngcontent-%COMP%]{bottom:-.5rem;right:-.5rem}[data-size=m]._rounded[_nghost-%COMP%]   .t-notification_bottom[_ngcontent-%COMP%]{bottom:.1875rem;right:.1875rem}[data-size=l]._rounded[_nghost-%COMP%]   .t-notification_bottom[_ngcontent-%COMP%]{bottom:.25rem;right:.25rem}[data-size=xl]._rounded[_nghost-%COMP%]   .t-notification_bottom[_ngcontent-%COMP%]{bottom:.375rem;right:.375rem}[data-size=xxl]._rounded[_nghost-%COMP%]   .t-notification_bottom[_ngcontent-%COMP%]{bottom:.5rem;right:.5rem}[data-size=xs][_nghost-%COMP%]   .t-notification[_ngcontent-%COMP%], [data-size=s][_nghost-%COMP%]   .t-notification[_ngcontent-%COMP%], [data-size=m][_nghost-%COMP%]   .t-notification[_ngcontent-%COMP%]{width:.5rem;height:.5rem}[data-size=l][_nghost-%COMP%]   .t-notification[_ngcontent-%COMP%]{width:.75rem;height:.75rem}[data-size=xl][_nghost-%COMP%]   .t-notification[_ngcontent-%COMP%]{width:1rem;height:1rem}[data-size=xxl][_nghost-%COMP%]   .t-notification[_ngcontent-%COMP%]{width:1.5rem;height:1.5rem}.t-icon[_ngcontent-%COMP%]{color:var(--tui-success-fill)}[data-size=xs][_nghost-%COMP%]   .t-icon[_ngcontent-%COMP%]{transform:scale(.66666667);margin:-.25rem}[data-size=s][_nghost-%COMP%]   .t-icon[_ngcontent-%COMP%], [data-size=m][_nghost-%COMP%]   .t-icon[_ngcontent-%COMP%]{width:1.5rem;height:1.5rem;margin:-.125rem}[data-size=l][_nghost-%COMP%]   .t-icon[_ngcontent-%COMP%], [data-size=xl][_nghost-%COMP%]   .t-icon[_ngcontent-%COMP%]{transform:scale(1.2)}[data-size=xxl][_nghost-%COMP%]   .t-icon[_ngcontent-%COMP%]{transform:scale(1.6)}.t-content[_ngcontent-%COMP%]{position:absolute;display:flex;align-items:center;justify-content:center;border-radius:6.25rem;overflow:hidden;background-color:currentColor;box-shadow:0 0 0 2px currentColor}[data-size=xxl]._with-top[_nghost-%COMP%]:not(._rounded)   .t-content_top[_ngcontent-%COMP%], [data-size=l]._with-top[_nghost-%COMP%]:not(._rounded)   .t-content_top[_ngcontent-%COMP%]{right:-.5rem;top:-.5rem}[data-size=xl]._with-top[_nghost-%COMP%]:not(._rounded)   .t-content_top[_ngcontent-%COMP%]{right:-.375rem;top:-.375rem}[data-size=m]._with-top[_nghost-%COMP%]:not(._rounded)   .t-content_top[_ngcontent-%COMP%], [data-size=s]._with-top[_nghost-%COMP%]:not(._rounded)   .t-content_top[_ngcontent-%COMP%], [data-size=xs]._with-top[_nghost-%COMP%]:not(._rounded)   .t-content_top[_ngcontent-%COMP%]{right:-.25rem;top:-.25rem}[data-size=xxl]._with-top._rounded[_nghost-%COMP%]   .t-content_top[_ngcontent-%COMP%]{right:.25rem;top:.25rem}[data-size=xl]._with-top._rounded[_nghost-%COMP%]   .t-content_top[_ngcontent-%COMP%]{right:.125rem;top:.125rem}[data-size=l]._with-top._rounded[_nghost-%COMP%]   .t-content_top[_ngcontent-%COMP%], [data-size=m]._with-top._rounded[_nghost-%COMP%]   .t-content_top[_ngcontent-%COMP%], [data-size=s]._with-top._rounded[_nghost-%COMP%]   .t-content_top[_ngcontent-%COMP%], [data-size=xs]._with-top._rounded[_nghost-%COMP%]   .t-content_top[_ngcontent-%COMP%]{right:-.25rem;top:-.25rem}[data-size=xxl]._with-bottom[_nghost-%COMP%]:not(._rounded)   .t-content_bottom[_ngcontent-%COMP%], [data-size=l]._with-bottom[_nghost-%COMP%]:not(._rounded)   .t-content_bottom[_ngcontent-%COMP%]{bottom:-.5rem;right:-.5rem}[data-size=xl]._with-bottom[_nghost-%COMP%]:not(._rounded)   .t-content_bottom[_ngcontent-%COMP%]{bottom:-.375rem;right:-.375rem}[data-size=m]._with-bottom[_nghost-%COMP%]:not(._rounded)   .t-content_bottom[_ngcontent-%COMP%]{bottom:-.25rem;right:-.25rem}[data-size=xxl]._with-bottom._rounded[_nghost-%COMP%]   .t-content_bottom[_ngcontent-%COMP%]{bottom:.25rem;right:.25rem}[data-size=xl]._with-bottom._rounded[_nghost-%COMP%]   .t-content_bottom[_ngcontent-%COMP%]{bottom:.125rem;right:.125rem}[data-size=l]._with-bottom._rounded[_nghost-%COMP%]   .t-content_bottom[_ngcontent-%COMP%], [data-size=m]._with-bottom._rounded[_nghost-%COMP%]   .t-content_bottom[_ngcontent-%COMP%]{bottom:-.25rem;right:-.25rem}[data-size=xxl][_nghost-%COMP%]   .t-content[_ngcontent-%COMP%]{height:2rem;min-width:2rem}[data-size=xl][_nghost-%COMP%]   .t-content[_ngcontent-%COMP%], [data-size=l][_nghost-%COMP%]   .t-content[_ngcontent-%COMP%]{height:1.5rem;min-width:1.5rem}[data-size=m][_nghost-%COMP%]   .t-content[_ngcontent-%COMP%], [data-size=s][_nghost-%COMP%]   .t-content[_ngcontent-%COMP%]{height:1.25rem;min-width:1.25rem}[data-size=xs][_nghost-%COMP%]   .t-content[_ngcontent-%COMP%]{height:1rem;min-width:1rem}"],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiBadgedContentComponent, [{
    type: Component,
    args: [{
      selector: "tui-badged-content",
      templateUrl: "./badged-content.template.html",
      styleUrls: ["./badged-content.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush
    }]
  }], null, {
    contentTop: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["class._with-top"]
    }],
    contentBottom: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["class._with-bottom"]
    }],
    size: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["attr.data-size"]
    }],
    colorTop: [{
      type: Input
    }],
    colorBottom: [{
      type: Input
    }],
    rounded: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["class._rounded"]
    }]
  });
})();
var TuiBadgedContentModule = class {
};
TuiBadgedContentModule.ɵfac = function TuiBadgedContentModule_Factory(t) {
  return new (t || TuiBadgedContentModule)();
};
TuiBadgedContentModule.ɵmod = ɵɵdefineNgModule({
  type: TuiBadgedContentModule,
  declarations: [TuiBadgedContentComponent],
  imports: [CommonModule, PolymorpheusModule, TuiSvgModule, TuiBadgeModule],
  exports: [TuiBadgedContentComponent]
});
TuiBadgedContentModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, PolymorpheusModule, TuiSvgModule, TuiBadgeModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiBadgedContentModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, PolymorpheusModule, TuiSvgModule, TuiBadgeModule],
      declarations: [TuiBadgedContentComponent],
      exports: [TuiBadgedContentComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-breadcrumbs.js
function TuiBreadcrumbsComponent_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function TuiBreadcrumbsComponent_ng_container_2_tui_svg_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "tui-svg", 4);
  }
  if (rf & 2) {
    const ctx_r4 = ɵɵnextContext(2);
    ɵɵproperty("src", ctx_r4.options.icon);
  }
}
function TuiBreadcrumbsComponent_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵelementContainer(1, 2);
    ɵɵtemplate(2, TuiBreadcrumbsComponent_ng_container_2_tui_svg_2_Template, 1, 1, "tui-svg", 3);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const item_r2 = ctx.$implicit;
    const last_r3 = ctx.last;
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", item_r2);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !last_r3);
  }
}
var TUI_BREADCRUMBS_DEFAULT_OPTIONS = {
  icon: "tuiIconChevronRight",
  size: "m",
  mode: "onLight"
};
var TUI_BREADCRUMBS_OPTIONS = tuiCreateToken(TUI_BREADCRUMBS_DEFAULT_OPTIONS);
function tuiBreadcrumbsOptionsProvider(options) {
  return tuiProvideOptions(TUI_BREADCRUMBS_OPTIONS, options, TUI_BREADCRUMBS_DEFAULT_OPTIONS);
}
var TuiBreadcrumbsComponent = class extends TuiModeDirective {
  constructor(options) {
    super();
    this.options = options;
    this.size = this.options.size;
    this.items = EMPTY_QUERY;
    this.mode = this.options.mode;
  }
};
TuiBreadcrumbsComponent.ɵfac = function TuiBreadcrumbsComponent_Factory(t) {
  return new (t || TuiBreadcrumbsComponent)(ɵɵdirectiveInject(TUI_BREADCRUMBS_OPTIONS));
};
TuiBreadcrumbsComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiBreadcrumbsComponent,
  selectors: [["tui-breadcrumbs"]],
  contentQueries: function TuiBreadcrumbsComponent_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, TuiItemDirective, 4, TemplateRef);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.items = _t);
    }
  },
  hostVars: 1,
  hostBindings: function TuiBreadcrumbsComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("data-size", ctx.size);
    }
  },
  inputs: {
    size: "size"
  },
  features: [ɵɵProvidersFeature([{
    provide: TuiModeDirective,
    useExisting: forwardRef(() => TuiBreadcrumbsComponent)
  }]), ɵɵInheritDefinitionFeature],
  decls: 3,
  vars: 4,
  consts: [[4, "ngIf"], [4, "ngFor", "ngForOf"], [3, "ngTemplateOutlet"], ["class", "t-icon", 3, "src", 4, "ngIf"], [1, "t-icon", 3, "src"]],
  template: function TuiBreadcrumbsComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵtemplate(0, TuiBreadcrumbsComponent_ng_container_0_Template, 1, 0, "ng-container", 0);
      ɵɵpipe(1, "async");
      ɵɵtemplate(2, TuiBreadcrumbsComponent_ng_container_2_Template, 3, 2, "ng-container", 1);
    }
    if (rf & 2) {
      ɵɵproperty("ngIf", ɵɵpipeBind1(1, 2, ctx.items.changes));
      ɵɵadvance(2);
      ɵɵproperty("ngForOf", ctx.items);
    }
  },
  dependencies: [TuiSvgComponent, NgIf, NgForOf, NgTemplateOutlet, AsyncPipe],
  styles: ["[_nghost-%COMP%]{display:flex;align-items:center;height:2.5rem;white-space:nowrap;font:var(--tui-font-text-s);color:var(--tui-text-01)}[data-size=l][_nghost-%COMP%]{font:var(--tui-font-text-m)}.t-icon[_ngcontent-%COMP%]{margin:0 .25rem;opacity:.4}"],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiBreadcrumbsComponent, [{
    type: Component,
    args: [{
      selector: "tui-breadcrumbs",
      templateUrl: "./breadcrumbs.template.html",
      styleUrls: ["./breadcrumbs.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [{
        provide: TuiModeDirective,
        useExisting: forwardRef(() => TuiBreadcrumbsComponent)
      }]
    }]
  }], function() {
    return [{
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_BREADCRUMBS_OPTIONS]
      }]
    }];
  }, {
    size: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["attr.data-size"]
    }],
    items: [{
      type: ContentChildren,
      args: [TuiItemDirective, {
        read: TemplateRef
      }]
    }]
  });
})();
var TuiBreadcrumbsModule = class {
};
TuiBreadcrumbsModule.ɵfac = function TuiBreadcrumbsModule_Factory(t) {
  return new (t || TuiBreadcrumbsModule)();
};
TuiBreadcrumbsModule.ɵmod = ɵɵdefineNgModule({
  type: TuiBreadcrumbsModule,
  declarations: [TuiBreadcrumbsComponent],
  imports: [CommonModule, TuiSvgModule, TuiItemModule],
  exports: [TuiBreadcrumbsComponent, TuiItemDirective]
});
TuiBreadcrumbsModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, TuiSvgModule, TuiItemModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiBreadcrumbsModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, TuiSvgModule, TuiItemModule],
      declarations: [TuiBreadcrumbsComponent],
      exports: [TuiBreadcrumbsComponent, TuiItemDirective]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-calendar-month.js
function TuiCalendarMonthComponent_tui_scrollbar_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "tui-scrollbar", 2)(1, "tui-primitive-year-picker", 3);
    ɵɵlistener("yearClick", function TuiCalendarMonthComponent_tui_scrollbar_0_Template_tui_primitive_year_picker_yearClick_1_listener($event) {
      ɵɵrestoreView(_r4);
      const ctx_r3 = ɵɵnextContext();
      return ɵɵresetView(ctx_r3.onPickerYearClick($event));
    });
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("initialItem", ctx_r0.year)("max", ctx_r0.computedMax)("min", ctx_r0.computedMin)("value", ctx_r0.value);
  }
}
function TuiCalendarMonthComponent_ng_template_1_ng_container_4_div_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r11 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 9);
    ɵɵlistener("click", function TuiCalendarMonthComponent_ng_template_1_ng_container_4_div_1_Template_div_click_0_listener() {
      const restoredCtx = ɵɵrestoreView(_r11);
      const item_r9 = restoredCtx.tuiLet;
      const ctx_r10 = ɵɵnextContext(3);
      return ɵɵresetView(ctx_r10.onItemClick(item_r9));
    })("tuiHoveredChange", function TuiCalendarMonthComponent_ng_template_1_ng_container_4_div_1_Template_div_tuiHoveredChange_0_listener($event) {
      const restoredCtx = ɵɵrestoreView(_r11);
      const item_r9 = restoredCtx.tuiLet;
      const ctx_r12 = ɵɵnextContext(3);
      return ɵɵresetView(ctx_r12.onItemHovered($event, item_r9));
    })("tuiPressedChange", function TuiCalendarMonthComponent_ng_template_1_ng_container_4_div_1_Template_div_tuiPressedChange_0_listener($event) {
      const restoredCtx = ɵɵrestoreView(_r11);
      const item_r9 = restoredCtx.tuiLet;
      const ctx_r13 = ɵɵnextContext(3);
      return ɵɵresetView(ctx_r13.onItemHovered($event, item_r9));
    });
    ɵɵelementStart(1, "div", 10);
    ɵɵtext(2);
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    const item_r9 = ctx.tuiLet;
    const month_r6 = ɵɵnextContext().$implicit;
    const ctx_r8 = ɵɵnextContext(2);
    ɵɵclassProp("t-cell_interval", ctx_r8.isItemInsideRange(item_r9))("t-cell_today", ctx_r8.isItemToday(item_r9));
    ɵɵattribute("data-range", ctx_r8.getItemRange(item_r9))("data-state", ctx_r8.getItemState(item_r9));
    ɵɵadvance(2);
    ɵɵtextInterpolate(month_r6);
  }
}
function TuiCalendarMonthComponent_ng_template_1_ng_container_4_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, TuiCalendarMonthComponent_ng_template_1_ng_container_4_div_1_Template, 3, 7, "div", 8);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const index_r7 = ctx.index;
    const ctx_r5 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("tuiLet", ctx_r5.getTuiMonth(index_r7, ctx_r5.year.year));
  }
}
function TuiCalendarMonthComponent_ng_template_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r16 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "tui-primitive-spin-button", 4);
    ɵɵlistener("leftClick", function TuiCalendarMonthComponent_ng_template_1_Template_tui_primitive_spin_button_leftClick_0_listener() {
      ɵɵrestoreView(_r16);
      const ctx_r15 = ɵɵnextContext();
      return ɵɵresetView(ctx_r15.onPreviousYear());
    })("rightClick", function TuiCalendarMonthComponent_ng_template_1_Template_tui_primitive_spin_button_rightClick_0_listener() {
      ɵɵrestoreView(_r16);
      const ctx_r17 = ɵɵnextContext();
      return ɵɵresetView(ctx_r17.onNextYear());
    });
    ɵɵelementStart(1, "button", 5);
    ɵɵlistener("click", function TuiCalendarMonthComponent_ng_template_1_Template_button_click_1_listener() {
      ɵɵrestoreView(_r16);
      const ctx_r18 = ɵɵnextContext();
      return ɵɵresetView(ctx_r18.onYearClick());
    });
    ɵɵtext(2);
    ɵɵelementEnd()();
    ɵɵelementStart(3, "div", 6);
    ɵɵtemplate(4, TuiCalendarMonthComponent_ng_template_1_ng_container_4_Template, 2, 1, "ng-container", 7);
    ɵɵpipe(5, "async");
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵproperty("focusable", false)("leftDisabled", ctx_r2.previousYearDisabled)("rightDisabled", ctx_r2.nextYearDisabled);
    ɵɵadvance(1);
    ɵɵproperty("tuiFocusable", false);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r2.year.formattedYear, " ");
    ɵɵadvance(2);
    ɵɵproperty("ngForOf", ɵɵpipeBind1(5, 6, ctx_r2.months$));
  }
}
var TODAY = TuiDay.currentLocal();
var TuiCalendarMonthComponent = class {
  constructor(months$) {
    this.months$ = months$;
    this.value = null;
    this.year = TODAY;
    this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
    this.min = TUI_FIRST_DAY;
    this.max = TUI_LAST_DAY;
    this.monthClick = new EventEmitter();
    this.hoveredItemChange = new EventEmitter();
    this.yearChange = new EventEmitter();
    this.isYearPickerShown = false;
    this.hoveredItem = null;
    this.pressedItem = null;
  }
  get isSingle() {
    return this.value !== null && (this.value instanceof TuiMonth || this.value.isSingleMonth);
  }
  get computedMin() {
    var _a;
    return (_a = this.min) !== null && _a !== void 0 ? _a : TUI_FIRST_DAY;
  }
  get computedMax() {
    var _a;
    return (_a = this.max) !== null && _a !== void 0 ? _a : TUI_LAST_DAY;
  }
  get previousYearDisabled() {
    return this.year.yearSameOrBefore(this.computedMin);
  }
  get nextYearDisabled() {
    return this.year.yearSameOrAfter(this.computedMax);
  }
  getItemState(item) {
    const {
      disabledItemHandlerWithMinMax,
      pressedItem,
      hoveredItem
    } = this;
    if (disabledItemHandlerWithMinMax(item)) {
      return TuiInteractiveState.Disabled;
    }
    if (pressedItem === null || pressedItem === void 0 ? void 0 : pressedItem.monthSame(item)) {
      return TuiInteractiveState.Active;
    }
    if (hoveredItem === null || hoveredItem === void 0 ? void 0 : hoveredItem.monthSame(item)) {
      return TuiInteractiveState.Hover;
    }
    return null;
  }
  getItemRange(item) {
    const {
      value,
      hoveredItem
    } = this;
    if (value === null) {
      return null;
    }
    if (value instanceof TuiMonth) {
      return value.monthSame(item) ? TuiRangeState.Single : null;
    }
    const theFirstOfRange = value.from.monthSame(item) && !value.isSingleMonth;
    const hoveredItemAfterFrom = (hoveredItem === null || hoveredItem === void 0 ? void 0 : hoveredItem.monthAfter(value.from)) && value.from.monthSame(item) && value.isSingleMonth;
    const hoveredItemIsCandidateToBeFrom = (hoveredItem === null || hoveredItem === void 0 ? void 0 : hoveredItem.monthSame(item)) && (hoveredItem === null || hoveredItem === void 0 ? void 0 : hoveredItem.monthBefore(value.from)) && value.isSingleMonth;
    if (theFirstOfRange || hoveredItemAfterFrom || hoveredItemIsCandidateToBeFrom) {
      return TuiRangeState.Start;
    }
    const theLastOfRange = value.to.monthSame(item) && !value.isSingleMonth;
    const hoveredItemBeforeTo = value.to.monthSame(item) && (hoveredItem === null || hoveredItem === void 0 ? void 0 : hoveredItem.monthBefore(value.to)) && value.isSingleMonth;
    const hoveredItemIsCandidateToBeTo = (hoveredItem === null || hoveredItem === void 0 ? void 0 : hoveredItem.monthSame(item)) && (hoveredItem === null || hoveredItem === void 0 ? void 0 : hoveredItem.monthAfter(value.from)) && value.isSingleMonth;
    if (theLastOfRange || hoveredItemBeforeTo || hoveredItemIsCandidateToBeTo) {
      return TuiRangeState.End;
    }
    return value.isSingleMonth && value.from.monthSame(item) ? TuiRangeState.Single : null;
  }
  getTuiMonth(monthNumber, yearNumber) {
    return new TuiMonth(yearNumber, monthNumber);
  }
  isItemToday(item) {
    return TODAY.monthSame(item);
  }
  isItemInsideRange(month) {
    const {
      value,
      hoveredItem
    } = this;
    if (value === null || value instanceof TuiMonth) {
      return false;
    }
    if (!value.isSingleMonth) {
      return value.from.monthSameOrBefore(month) && value.to.monthAfter(month);
    }
    if (hoveredItem === null) {
      return false;
    }
    const range = TuiMonthRange.sort(value.from, hoveredItem);
    return range.from.monthSameOrBefore(month) && range.to.monthAfter(month);
  }
  onPickerYearClick(year) {
    this.isYearPickerShown = false;
    if (this.year.yearSame(year)) {
      return;
    }
    this.updateActiveYear(year);
  }
  onItemClick(month) {
    if (this.disabledItemHandlerWithMinMax(month)) {
      return;
    }
    this.monthClick.emit(month);
  }
  onYearClick() {
    this.isYearPickerShown = true;
  }
  onNextYear() {
    this.updateActiveYear(this.year.append({
      year: 1
    }));
  }
  onPreviousYear() {
    this.updateActiveYear(this.year.append({
      year: -1
    }));
  }
  onItemHovered(hovered, item) {
    this.updateHoveredItem(hovered ? item : null);
  }
  onItemPressed(pressed, item) {
    this.updatePressedItem(pressed ? item : null);
  }
  calculateDisabledItemHandlerWithMinMax(disabledItemHandler, value, min, max) {
    return (item) => item.monthBefore(min) || item.monthAfter(max) || disabledItemHandler(item, {
      value
    });
  }
  get disabledItemHandlerWithMinMax() {
    return this.calculateDisabledItemHandlerWithMinMax(this.disabledItemHandler, this.value, this.computedMin, this.computedMax);
  }
  updateHoveredItem(month) {
    if (tuiNullableSame(this.hoveredItem, month, (a, b) => a.monthSame(b))) {
      return;
    }
    this.hoveredItem = month;
    this.hoveredItemChange.emit(month);
  }
  updatePressedItem(item) {
    this.pressedItem = item;
  }
  updateActiveYear(year) {
    this.year = year;
    this.yearChange.emit(year);
  }
};
TuiCalendarMonthComponent.ɵfac = function TuiCalendarMonthComponent_Factory(t) {
  return new (t || TuiCalendarMonthComponent)(ɵɵdirectiveInject(TUI_CALENDAR_MONTHS));
};
TuiCalendarMonthComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiCalendarMonthComponent,
  selectors: [["tui-calendar-month"]],
  hostVars: 2,
  hostBindings: function TuiCalendarMonthComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("_single", ctx.isSingle);
    }
  },
  inputs: {
    value: "value",
    year: "year",
    disabledItemHandler: "disabledItemHandler",
    min: "min",
    max: "max"
  },
  outputs: {
    monthClick: "monthClick",
    hoveredItemChange: "hoveredItemChange",
    yearChange: "yearChange"
  },
  decls: 3,
  vars: 2,
  consts: [["class", "t-scrollbar", 4, "ngIf", "ngIfElse"], ["monthSelect", ""], [1, "t-scrollbar"], [3, "initialItem", "max", "min", "value", "yearClick"], [3, "focusable", "leftDisabled", "rightDisabled", "leftClick", "rightClick"], ["automation-id", "tui-calendar-month__active-year", "tuiLink", "", "type", "button", 3, "tuiFocusable", "click"], [1, "t-row"], [4, "ngFor", "ngForOf"], ["class", "t-cell", 3, "t-cell_interval", "t-cell_today", "click", "tuiHoveredChange", "tuiPressedChange", 4, "tuiLet"], [1, "t-cell", 3, "click", "tuiHoveredChange", "tuiPressedChange"], [1, "t-item"]],
  template: function TuiCalendarMonthComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵtemplate(0, TuiCalendarMonthComponent_tui_scrollbar_0_Template, 2, 4, "tui-scrollbar", 0);
      ɵɵtemplate(1, TuiCalendarMonthComponent_ng_template_1_Template, 6, 8, "ng-template", null, 1, ɵɵtemplateRefExtractor);
    }
    if (rf & 2) {
      const _r1 = ɵɵreference(2);
      ɵɵproperty("ngIf", ctx.isYearPickerShown)("ngIfElse", _r1);
    }
  },
  dependencies: [TuiScrollbarComponent, TuiPrimitiveYearPickerComponent, TuiPrimitiveSpinButtonComponent, TuiLinkComponent, NgIf, TuiFocusableDirective, NgForOf, TuiLetDirective, TuiHoveredDirective, TuiPressedDirective, AsyncPipe],
  styles: ['[_nghost-%COMP%]{display:block;font:var(--tui-font-text-m)}.t-row[_ngcontent-%COMP%]{position:relative;display:flex;justify-content:space-between;height:2.25rem;isolation:isolate}.t-item[_ngcontent-%COMP%]{position:relative;flex:1;line-height:2rem;border-radius:var(--tui-radius-m)}.t-item[_ngcontent-%COMP%]:before, .t-item[_ngcontent-%COMP%]:after{content:"";position:absolute;top:0;left:0;right:0;bottom:0;z-index:-1;border-radius:var(--tui-radius-m)}.t-item[_ngcontent-%COMP%]:after{border-radius:.5rem}.t-cell[_ngcontent-%COMP%]{position:relative;display:flex;align-items:center;justify-content:center;width:3.9375rem;text-align:center;outline:none;cursor:pointer;background-clip:content-box;box-sizing:border-box;border:.125rem solid transparent}.t-cell[_ngcontent-%COMP%]:before{content:"";position:absolute;top:0;left:0;right:0;bottom:0;z-index:-1;border-radius:var(--tui-radius-m)}.t-cell_today[_ngcontent-%COMP%]:after{position:absolute;left:50%;transform:translate(-50%);content:"";bottom:.3125rem;height:.125rem;width:.75rem;border-radius:.375rem;background-color:var(--tui-text-01)}.t-cell_interval[_ngcontent-%COMP%]:before{background:var(--tui-base-02)}._single[_nghost-%COMP%]   .t-cell_interval[_ngcontent-%COMP%]:before{background:var(--tui-secondary-hover)}.t-cell_interval[_ngcontent-%COMP%]:not(:last-child):before{right:-.25rem;border-top-right-radius:0;border-bottom-right-radius:0}.t-cell_interval[_ngcontent-%COMP%]:not([data-range="start"]):not(:first-child):before{border-top-left-radius:0;border-bottom-left-radius:0}.t-cell_interval[_ngcontent-%COMP%]:last-child:first-child:before{right:0}.t-cell_interval[_ngcontent-%COMP%]:first-child > .t-item[_ngcontent-%COMP%]{border-top-left-radius:var(--tui-radius-m);border-bottom-left-radius:var(--tui-radius-m)}.t-cell_interval[_ngcontent-%COMP%]:last-child > .t-item[_ngcontent-%COMP%]{border-top-right-radius:var(--tui-radius-m);border-bottom-right-radius:var(--tui-radius-m)}.t-cell_interval[_ngcontent-%COMP%] > .t-item[_ngcontent-%COMP%]{border-radius:0}.t-cell[data-range][_ngcontent-%COMP%]:after{background-color:var(--tui-primary-text)}.t-cell[data-range][_ngcontent-%COMP%] > .t-item[_ngcontent-%COMP%]{color:var(--tui-primary-text)}.t-cell[data-range][_ngcontent-%COMP%] > .t-item[_ngcontent-%COMP%]:before, .t-cell[data-range][_ngcontent-%COMP%] > .t-item[_ngcontent-%COMP%]:after{background-color:var(--tui-primary)}.t-cell[data-range][data-state=hover][_ngcontent-%COMP%] > .t-item[_ngcontent-%COMP%]:before, .t-cell[data-range][data-state=hover][_ngcontent-%COMP%] > .t-item[_ngcontent-%COMP%]:after{background-color:var(--tui-primary-hover)}.t-cell[data-range][data-state=active][_ngcontent-%COMP%] > .t-item[_ngcontent-%COMP%]:before, .t-cell[data-range][data-state=active][_ngcontent-%COMP%] > .t-item[_ngcontent-%COMP%]:after{background-color:var(--tui-primary-active)}.t-cell[data-range=end][_ngcontent-%COMP%]:before{background:var(--tui-base-02)}._single[_nghost-%COMP%]   .t-cell[data-range=end][_ngcontent-%COMP%]:before{background:var(--tui-secondary-hover)}.t-cell[data-range=end][_ngcontent-%COMP%]:not(:first-child):before{border-top-left-radius:0;border-bottom-left-radius:0}.t-cell[data-range=end][_ngcontent-%COMP%] > .t-item[_ngcontent-%COMP%]:before{left:.625rem;border-top-left-radius:0;border-bottom-left-radius:0}.t-cell[data-range=end][_ngcontent-%COMP%] > .t-item[_ngcontent-%COMP%]:after{left:-2rem;right:100%;transform:translate(1.6rem) scaleY(.83) scaleX(.5) rotate(45deg)}.t-cell[data-range=start][_ngcontent-%COMP%] > .t-item[_ngcontent-%COMP%]:before{right:.625rem;border-top-right-radius:0;border-bottom-right-radius:0}.t-cell[data-range=start][_ngcontent-%COMP%] > .t-item[_ngcontent-%COMP%]:after{left:100%;right:-2rem;transform:translate(-1.6rem) scaleY(.83) scaleX(.5) rotate(45deg)}.t-cell[data-range=single][_ngcontent-%COMP%] > .t-item[_ngcontent-%COMP%]:after{display:none}.t-cell[data-state=disabled][_ngcontent-%COMP%]{pointer-events:none}.t-cell[data-state=disabled][_ngcontent-%COMP%] > .t-item[_ngcontent-%COMP%]{opacity:.36}.t-cell[data-state=hover][_ngcontent-%COMP%]:hover:not([data-range]) > .t-item[_ngcontent-%COMP%]{background-color:var(--tui-secondary-hover)}.t-cell[data-state=active][_ngcontent-%COMP%]:hover:not([data-range]) > .t-item[_ngcontent-%COMP%]{background-color:var(--tui-secondary-active)}[_nghost-%COMP%]{display:block;height:13.625rem;width:15.75rem;padding:1.125rem;box-sizing:content-box}.t-row[_ngcontent-%COMP%]{flex-wrap:wrap;margin-top:1.4375rem}.t-cell[_ngcontent-%COMP%]:nth-child(n + 5){margin-top:1.75rem}.t-cell_interval[_ngcontent-%COMP%]:nth-child(4n):before{right:0}.t-scrollbar[_ngcontent-%COMP%]{height:inherit;width:inherit}'],
  changeDetection: 0
});
__decorate([tuiPure], TuiCalendarMonthComponent.prototype, "calculateDisabledItemHandlerWithMinMax", null);
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiCalendarMonthComponent, [{
    type: Component,
    args: [{
      selector: "tui-calendar-month",
      templateUrl: "./calendar-month.template.html",
      styleUrls: ["./calendar-month.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush
    }]
  }], function() {
    return [{
      type: Observable,
      decorators: [{
        type: Inject,
        args: [TUI_CALENDAR_MONTHS]
      }]
    }];
  }, {
    value: [{
      type: Input
    }],
    year: [{
      type: Input
    }],
    disabledItemHandler: [{
      type: Input
    }],
    min: [{
      type: Input
    }],
    max: [{
      type: Input
    }],
    monthClick: [{
      type: Output
    }],
    hoveredItemChange: [{
      type: Output
    }],
    yearChange: [{
      type: Output
    }],
    isSingle: [{
      type: HostBinding,
      args: ["class._single"]
    }],
    calculateDisabledItemHandlerWithMinMax: []
  });
})();
var TuiCalendarMonthModule = class {
};
TuiCalendarMonthModule.ɵfac = function TuiCalendarMonthModule_Factory(t) {
  return new (t || TuiCalendarMonthModule)();
};
TuiCalendarMonthModule.ɵmod = ɵɵdefineNgModule({
  type: TuiCalendarMonthModule,
  declarations: [TuiCalendarMonthComponent],
  imports: [CommonModule, TuiPrimitiveYearPickerModule, TuiPrimitiveSpinButtonModule, TuiScrollbarModule, TuiLinkModule, TuiLetModule, TuiHoveredModule, TuiPressedModule, TuiFocusableModule],
  exports: [TuiCalendarMonthComponent]
});
TuiCalendarMonthModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, TuiPrimitiveYearPickerModule, TuiPrimitiveSpinButtonModule, TuiScrollbarModule, TuiLinkModule, TuiLetModule, TuiHoveredModule, TuiPressedModule, TuiFocusableModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiCalendarMonthModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, TuiPrimitiveYearPickerModule, TuiPrimitiveSpinButtonModule, TuiScrollbarModule, TuiLinkModule, TuiLetModule, TuiHoveredModule, TuiPressedModule, TuiFocusableModule],
      declarations: [TuiCalendarMonthComponent],
      exports: [TuiCalendarMonthComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-internal-primitive-calendar-range.js
var TuiPrimitiveCalendarRangeComponent = class {
  constructor(valueChanges, cdr, destroy$) {
    this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
    this.markerHandler = TUI_DEFAULT_MARKER_HANDLER;
    this.defaultViewedMonthFirst = TuiMonth.currentLocal();
    this.defaultViewedMonthSecond = TuiMonth.currentLocal().append({
      month: 1
    });
    this.min = TUI_FIRST_DAY;
    this.max = TUI_LAST_DAY;
    this.value = null;
    this.dayClick = new EventEmitter();
    this.hoveredItem = null;
    this.userViewedMonthFirst = this.defaultViewedMonthFirst;
    this.userViewedMonthSecond = this.defaultViewedMonthSecond;
    this.monthOffset = (value, offset) => value.append({
      month: offset
    });
    if (!valueChanges) {
      return;
    }
    valueChanges.pipe(tuiWatch(cdr), takeUntil(destroy$)).subscribe((value) => {
      this.value = value;
      this.updateViewedMonths();
    });
  }
  get cappedUserViewedMonthSecond() {
    return this.userViewedMonthSecond.monthBefore(this.max) ? this.userViewedMonthSecond : this.max;
  }
  get cappedUserViewedMonthFirst() {
    return this.userViewedMonthFirst.monthSameOrBefore(this.userViewedMonthSecond) ? this.userViewedMonthFirst : this.userViewedMonthSecond;
  }
  ngOnInit() {
    this.setInitialMonths();
  }
  onSectionFirstViewedMonth(month) {
    this.userViewedMonthFirst = month;
    this.userViewedMonthSecond = this.userViewedMonthFirst.append({
      month: 1
    });
  }
  onSectionSecondViewedMonth(month) {
    this.userViewedMonthSecond = month;
    this.userViewedMonthFirst = this.userViewedMonthSecond.append({
      month: -1
    });
  }
  onDayClick(day) {
    this.dayClick.emit(day);
  }
  setInitialMonths() {
    if (!this.value) {
      this.userViewedMonthSecond = this.updatedViewedMonthSecond(this.defaultViewedMonthSecond);
      this.userViewedMonthFirst = this.updatedViewedMonthFirst(this.defaultViewedMonthFirst);
    }
  }
  updatedViewedMonthSecond(month) {
    if (month.monthSameOrAfter(this.max)) {
      return this.max;
    }
    if (month.monthBefore(this.min)) {
      return this.min.append({
        month: 1
      });
    }
    return month;
  }
  updatedViewedMonthFirst(month) {
    if (month.monthSameOrAfter(this.userViewedMonthSecond)) {
      return this.userViewedMonthSecond.append({
        month: -1
      });
    }
    if (month.monthSameOrBefore(this.min)) {
      return this.min;
    }
    return month;
  }
  updateViewedMonths() {
    this.userViewedMonthFirst = this.value === null ? this.defaultViewedMonthFirst : this.value.from;
    this.userViewedMonthSecond = this.userViewedMonthFirst.append({
      month: 1
    });
  }
};
TuiPrimitiveCalendarRangeComponent.ɵfac = function TuiPrimitiveCalendarRangeComponent_Factory(t) {
  return new (t || TuiPrimitiveCalendarRangeComponent)(ɵɵdirectiveInject(TUI_CALENDAR_DATE_STREAM, 8), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(TuiDestroyService, 2));
};
TuiPrimitiveCalendarRangeComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiPrimitiveCalendarRangeComponent,
  selectors: [["tui-primitive-calendar-range"]],
  inputs: {
    disabledItemHandler: "disabledItemHandler",
    markerHandler: "markerHandler",
    defaultViewedMonthFirst: "defaultViewedMonthFirst",
    defaultViewedMonthSecond: "defaultViewedMonthSecond",
    min: "min",
    max: "max",
    value: "value"
  },
  outputs: {
    dayClick: "dayClick"
  },
  features: [ɵɵProvidersFeature([TuiDestroyService])],
  decls: 5,
  vars: 30,
  consts: [[3, "disabledItemHandler", "markerHandler", "max", "maxViewedMonth", "min", "month", "showAdjacent", "value", "hoveredItem", "hoveredItemChange", "dayClick", "monthChange"], [1, "t-border", 3, "disabledItemHandler", "markerHandler", "max", "min", "minViewedMonth", "month", "showAdjacent", "value", "hoveredItem", "hoveredItemChange", "dayClick", "monthChange"]],
  template: function TuiPrimitiveCalendarRangeComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵelementStart(0, "tui-calendar", 0);
      ɵɵlistener("hoveredItemChange", function TuiPrimitiveCalendarRangeComponent_Template_tui_calendar_hoveredItemChange_0_listener($event) {
        return ctx.hoveredItem = $event;
      })("dayClick", function TuiPrimitiveCalendarRangeComponent_Template_tui_calendar_dayClick_0_listener($event) {
        return ctx.onDayClick($event);
      })("monthChange", function TuiPrimitiveCalendarRangeComponent_Template_tui_calendar_monthChange_0_listener($event) {
        return ctx.onSectionFirstViewedMonth($event);
      });
      ɵɵpipe(1, "tuiMapper");
      ɵɵelementEnd();
      ɵɵelementStart(2, "tui-calendar", 1);
      ɵɵlistener("hoveredItemChange", function TuiPrimitiveCalendarRangeComponent_Template_tui_calendar_hoveredItemChange_2_listener($event) {
        return ctx.hoveredItem = $event;
      })("dayClick", function TuiPrimitiveCalendarRangeComponent_Template_tui_calendar_dayClick_2_listener($event) {
        return ctx.onDayClick($event);
      })("monthChange", function TuiPrimitiveCalendarRangeComponent_Template_tui_calendar_monthChange_2_listener($event) {
        return ctx.onSectionSecondViewedMonth($event);
      });
      ɵɵpipe(3, "tuiMapper");
      ɵɵpipe(4, "tuiMapper");
      ɵɵelementEnd();
    }
    if (rf & 2) {
      ɵɵproperty("disabledItemHandler", ctx.disabledItemHandler)("markerHandler", ctx.markerHandler)("max", ctx.max)("maxViewedMonth", ɵɵpipeBind3(1, 18, ctx.cappedUserViewedMonthSecond, ctx.monthOffset, -1))("min", ctx.min)("month", ctx.userViewedMonthFirst)("showAdjacent", false)("value", ctx.value)("hoveredItem", ctx.hoveredItem);
      ɵɵadvance(2);
      ɵɵproperty("disabledItemHandler", ctx.disabledItemHandler)("markerHandler", ctx.markerHandler)("max", ctx.max)("min", ctx.min)("minViewedMonth", ɵɵpipeBind3(3, 22, ctx.cappedUserViewedMonthFirst, ctx.monthOffset, 1))("month", ctx.userViewedMonthSecond.monthSameOrBefore(ctx.min) ? ɵɵpipeBind3(4, 26, ctx.min, ctx.monthOffset, 1) : ctx.userViewedMonthSecond)("showAdjacent", false)("value", ctx.value)("hoveredItem", ctx.hoveredItem);
    }
  },
  dependencies: [TuiCalendarComponent, TuiMapperPipe],
  styles: ["[_nghost-%COMP%]{display:flex}.t-border[_ngcontent-%COMP%]{border-left:1px solid var(--tui-base-03)}"],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiPrimitiveCalendarRangeComponent, [{
    type: Component,
    args: [{
      selector: "tui-primitive-calendar-range",
      templateUrl: "./primitive-calendar-range.template.html",
      styleUrls: ["./primitive-calendar-range.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [TuiDestroyService]
    }]
  }], function() {
    return [{
      type: Observable,
      decorators: [{
        type: Inject,
        args: [TUI_CALENDAR_DATE_STREAM]
      }, {
        type: Optional
      }]
    }, {
      type: ChangeDetectorRef,
      decorators: [{
        type: Inject,
        args: [ChangeDetectorRef]
      }]
    }, {
      type: TuiDestroyService,
      decorators: [{
        type: Self
      }, {
        type: Inject,
        args: [TuiDestroyService]
      }]
    }];
  }, {
    disabledItemHandler: [{
      type: Input
    }],
    markerHandler: [{
      type: Input
    }],
    defaultViewedMonthFirst: [{
      type: Input
    }],
    defaultViewedMonthSecond: [{
      type: Input
    }],
    min: [{
      type: Input
    }],
    max: [{
      type: Input
    }],
    value: [{
      type: Input
    }],
    dayClick: [{
      type: Output
    }]
  });
})();
var TuiPrimitiveCalendarRangeModule = class {
};
TuiPrimitiveCalendarRangeModule.ɵfac = function TuiPrimitiveCalendarRangeModule_Factory(t) {
  return new (t || TuiPrimitiveCalendarRangeModule)();
};
TuiPrimitiveCalendarRangeModule.ɵmod = ɵɵdefineNgModule({
  type: TuiPrimitiveCalendarRangeModule,
  declarations: [TuiPrimitiveCalendarRangeComponent],
  imports: [TuiMapperPipeModule, TuiScrollbarModule, TuiCalendarModule],
  exports: [TuiPrimitiveCalendarRangeComponent]
});
TuiPrimitiveCalendarRangeModule.ɵinj = ɵɵdefineInjector({
  imports: [[TuiMapperPipeModule, TuiScrollbarModule, TuiCalendarModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiPrimitiveCalendarRangeModule, [{
    type: NgModule,
    args: [{
      imports: [TuiMapperPipeModule, TuiScrollbarModule, TuiCalendarModule],
      declarations: [TuiPrimitiveCalendarRangeComponent],
      exports: [TuiPrimitiveCalendarRangeComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-calendar-range.js
var _c05 = function(a0, a1, a2, a3) {
  return [a0, a1, a2, a3, false];
};
var _c13 = function(a0, a1, a2, a3) {
  return [a0, a1, a2, a3, true];
};
function TuiCalendarRangeComponent_tui_primitive_calendar_range_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "tui-primitive-calendar-range", 2);
    ɵɵlistener("dayClick", function TuiCalendarRangeComponent_tui_primitive_calendar_range_0_Template_tui_primitive_calendar_range_dayClick_0_listener($event) {
      ɵɵrestoreView(_r4);
      const ctx_r3 = ɵɵnextContext();
      return ɵɵresetView(ctx_r3.onDayClick($event));
    });
    ɵɵpipe(1, "tuiMapper");
    ɵɵpipe(2, "tuiMapper");
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵproperty("defaultViewedMonthFirst", ctx_r0.defaultViewedMonth)("disabledItemHandler", ctx_r0.calculatedDisabledItemHandler)("markerHandler", ctx_r0.markerHandler)("max", ɵɵpipeBindV(1, 6, ɵɵpureFunction4(18, _c05, ctx_r0.computedMax, ctx_r0.maxLengthMapper, ctx_r0.value, ctx_r0.maxLength)))("min", ɵɵpipeBindV(2, 12, ɵɵpureFunction4(23, _c13, ctx_r0.computedMin, ctx_r0.maxLengthMapper, ctx_r0.value, ctx_r0.maxLength)))("value", ctx_r0.value);
  }
}
function TuiCalendarRangeComponent_ng_template_1_button_5_tui_svg_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "tui-svg", 9);
  }
  if (rf & 2) {
    const ctx_r7 = ɵɵnextContext(3);
    ɵɵproperty("src", ctx_r7.icons.check);
  }
}
function TuiCalendarRangeComponent_ng_template_1_button_5_Template(rf, ctx) {
  if (rf & 1) {
    const _r9 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 7);
    ɵɵlistener("click", function TuiCalendarRangeComponent_ng_template_1_button_5_Template_button_click_0_listener() {
      const restoredCtx = ɵɵrestoreView(_r9);
      const item_r6 = restoredCtx.$implicit;
      const ctx_r8 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r8.onItemSelect(item_r6));
    })("keydown.enter.prevent", function TuiCalendarRangeComponent_ng_template_1_button_5_Template_button_keydown_enter_prevent_0_listener() {
      const restoredCtx = ɵɵrestoreView(_r9);
      const item_r6 = restoredCtx.$implicit;
      const ctx_r10 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r10.onItemSelect(item_r6));
    })("keydown.space.prevent", function TuiCalendarRangeComponent_ng_template_1_button_5_Template_button_keydown_space_prevent_0_listener() {
      const restoredCtx = ɵɵrestoreView(_r9);
      const item_r6 = restoredCtx.$implicit;
      const ctx_r11 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r11.onItemSelect(item_r6));
    });
    ɵɵtext(1);
    ɵɵtemplate(2, TuiCalendarRangeComponent_ng_template_1_button_5_tui_svg_2_Template, 1, 1, "tui-svg", 8);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const item_r6 = ctx.$implicit;
    const ctx_r5 = ɵɵnextContext(2);
    ɵɵattribute("aria-checked", ctx_r5.isItemActive(item_r6));
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", item_r6, " ");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r5.isItemActive(item_r6));
  }
}
var _c22 = function(a0, a1, a2, a3, a4, a5) {
  return [a0, a1, a2, a3, a4, a5];
};
function TuiCalendarRangeComponent_ng_template_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r13 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 3)(1, "tui-calendar", 4);
    ɵɵlistener("dayClick", function TuiCalendarRangeComponent_ng_template_1_Template_tui_calendar_dayClick_1_listener($event) {
      ɵɵrestoreView(_r13);
      const ctx_r12 = ɵɵnextContext();
      return ɵɵresetView(ctx_r12.onDayClick($event));
    });
    ɵɵpipe(2, "tuiMapper");
    ɵɵpipe(3, "tuiMapper");
    ɵɵelementEnd();
    ɵɵelementStart(4, "tui-data-list", 5);
    ɵɵtemplate(5, TuiCalendarRangeComponent_ng_template_1_button_5_Template, 3, 3, "button", 6);
    ɵɵpipe(6, "tuiMapper");
    ɵɵpipe(7, "async");
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("disabledItemHandler", ctx_r2.calculatedDisabledItemHandler)("markerHandler", ctx_r2.markerHandler)("max", ɵɵpipeBindV(2, 7, ɵɵpureFunction4(28, _c05, ctx_r2.computedMax, ctx_r2.maxLengthMapper, ctx_r2.value, ctx_r2.maxLength)))("min", ɵɵpipeBindV(3, 13, ɵɵpureFunction4(33, _c13, ctx_r2.computedMin, ctx_r2.maxLengthMapper, ctx_r2.value, ctx_r2.maxLength)))("month", ctx_r2.computedMonth)("value", ctx_r2.value);
    ɵɵadvance(4);
    ɵɵproperty("ngForOf", ɵɵpipeBindV(6, 19, ɵɵpureFunction6(38, _c22, ctx_r2.items, ctx_r2.mapper, ctx_r2.min, ctx_r2.max, ctx_r2.minLength, ɵɵpipeBind1(7, 26, ctx_r2.otherDateText$))));
  }
}
var TuiCalendarRangeComponent = class {
  constructor(valueChanges, cdr, destroy$, otherDateText$, icons) {
    this.otherDateText$ = otherDateText$;
    this.icons = icons;
    this.defaultViewedMonth = TuiMonth.currentLocal();
    this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
    this.markerHandler = TUI_DEFAULT_MARKER_HANDLER;
    this.items = [];
    this.min = TUI_FIRST_DAY;
    this.max = TUI_LAST_DAY;
    this.minLength = null;
    this.maxLength = null;
    this.value = null;
    this.valueChange = new EventEmitter();
    this.previousValue = null;
    this.maxLengthMapper = MAX_DAY_RANGE_LENGTH_MAPPER;
    this.mapper = (items, min, max, minLength, otherDateText = "") => [...items.filter((item) => (minLength === null || item.range.from.append(minLength).daySameOrBefore(item.range.to)) && (min === null || item.range.to.daySameOrAfter(min)) && (max === null || item.range.from.daySameOrBefore(max))), otherDateText];
    if (!valueChanges) {
      return;
    }
    valueChanges.pipe(tuiWatch(cdr), takeUntil(destroy$)).subscribe((value) => {
      this.value = value;
    });
  }
  get computedMin() {
    var _a;
    return (_a = this.min) !== null && _a !== void 0 ? _a : TUI_FIRST_DAY;
  }
  get computedMax() {
    var _a;
    return (_a = this.max) !== null && _a !== void 0 ? _a : TUI_LAST_DAY;
  }
  onEsc(event) {
    var _a;
    if (event.key !== "Escape" || !((_a = this.value) === null || _a === void 0 ? void 0 : _a.isSingleDay)) {
      return;
    }
    event.stopPropagation();
    this.value = this.previousValue;
  }
  get calculatedDisabledItemHandler() {
    return this.calculateDisabledItemHandler(this.disabledItemHandler, this.value, this.minLength);
  }
  get computedMonth() {
    return this.value ? this.value.to : this.defaultViewedMonth;
  }
  isItemActive(item) {
    const {
      activePeriod
    } = this;
    return tuiIsString(item) && activePeriod === null || activePeriod === item;
  }
  // TODO: investigate if it is used anywhere and (if not) delete it in v4.0
  onRangeChange(dayRange) {
    this.updateValue(dayRange);
  }
  onDayClick(day) {
    const {
      value
    } = this;
    this.previousValue = value;
    if (value === null || !value.isSingleDay) {
      this.value = new TuiDayRange(day, day);
      return;
    }
    this.updateValue(TuiDayRange.sort(value.from, day));
  }
  onItemSelect(item) {
    if (typeof item !== "string") {
      this.updateValue(item.range.dayLimit(this.min, this.max));
      return;
    }
    if (this.activePeriod !== null) {
      this.updateValue(null);
    }
  }
  updateValue(value) {
    this.value = value;
    this.valueChange.emit(value);
  }
  get activePeriod() {
    return this.items.find((item) => tuiNullableSame(this.value, item.range, (a, b) => a.from.daySame(b.from.dayLimit(this.min, this.max)) && a.to.daySame(b.to.dayLimit(this.min, this.max)))) || null;
  }
  calculateDisabledItemHandler(disabledItemHandler, value, minLength) {
    return (item) => {
      if (!(value === null || value === void 0 ? void 0 : value.isSingleDay) || !minLength) {
        return disabledItemHandler(item);
      }
      const negativeMinLength = tuiObjectFromEntries(Object.entries(minLength).map(([key, value2]) => [key, -value2]));
      const disabledBefore = value.from.append(negativeMinLength).append({
        day: 1
      });
      const disabledAfter = value.from.append(minLength).append({
        day: -1
      });
      const inDisabledRange = disabledBefore.dayBefore(item) && disabledAfter.dayAfter(item);
      return inDisabledRange || disabledItemHandler(item);
    };
  }
};
TuiCalendarRangeComponent.ɵfac = function TuiCalendarRangeComponent_Factory(t) {
  return new (t || TuiCalendarRangeComponent)(ɵɵdirectiveInject(TUI_CALENDAR_DATE_STREAM, 8), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(TuiDestroyService, 2), ɵɵdirectiveInject(TUI_OTHER_DATE_TEXT), ɵɵdirectiveInject(TUI_COMMON_ICONS));
};
TuiCalendarRangeComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiCalendarRangeComponent,
  selectors: [["tui-calendar-range"]],
  hostBindings: function TuiCalendarRangeComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("keydown.capture", function TuiCalendarRangeComponent_keydown_capture_HostBindingHandler($event) {
        return ctx.onEsc($event);
      }, false, ɵɵresolveDocument);
    }
  },
  inputs: {
    defaultViewedMonth: "defaultViewedMonth",
    disabledItemHandler: "disabledItemHandler",
    markerHandler: "markerHandler",
    items: "items",
    min: "min",
    max: "max",
    minLength: "minLength",
    maxLength: "maxLength",
    value: "value"
  },
  outputs: {
    valueChange: "valueChange"
  },
  features: [ɵɵProvidersFeature([TuiDestroyService])],
  decls: 3,
  vars: 2,
  consts: [["automation-id", "tui-calendar-range__calendars", "tuiPreventDefault", "mousedown", 3, "defaultViewedMonthFirst", "disabledItemHandler", "markerHandler", "max", "min", "value", "dayClick", 4, "ngIf", "ngIfElse"], ["presets", ""], ["automation-id", "tui-calendar-range__calendars", "tuiPreventDefault", "mousedown", 3, "defaultViewedMonthFirst", "disabledItemHandler", "markerHandler", "max", "min", "value", "dayClick"], [1, "t-wrapper"], ["automation-id", "tui-calendar-range__calendar", "tuiPreventDefault", "mousedown", 3, "disabledItemHandler", "markerHandler", "max", "min", "month", "value", "dayClick"], ["automation-id", "tui-calendar-range__menu", "role", "menu", 1, "t-menu"], ["automation-id", "tui-calendar-range__menu__item", "role", "menuitemradio", "tuiOption", "", "tuiPreventDefault", "mousedown", 3, "click", "keydown.enter.prevent", "keydown.space.prevent", 4, "ngFor", "ngForOf"], ["automation-id", "tui-calendar-range__menu__item", "role", "menuitemradio", "tuiOption", "", "tuiPreventDefault", "mousedown", 3, "click", "keydown.enter.prevent", "keydown.space.prevent"], ["automation-id", "tui-calendar-range__checkmark", "class", "t-checkmark", 3, "src", 4, "ngIf"], ["automation-id", "tui-calendar-range__checkmark", 1, "t-checkmark", 3, "src"]],
  template: function TuiCalendarRangeComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵtemplate(0, TuiCalendarRangeComponent_tui_primitive_calendar_range_0_Template, 3, 28, "tui-primitive-calendar-range", 0);
      ɵɵtemplate(1, TuiCalendarRangeComponent_ng_template_1_Template, 8, 45, "ng-template", null, 1, ɵɵtemplateRefExtractor);
    }
    if (rf & 2) {
      const _r1 = ɵɵreference(2);
      ɵɵproperty("ngIf", !ctx.items.length)("ngIfElse", _r1);
    }
  },
  dependencies: [TuiPrimitiveCalendarRangeComponent, TuiCalendarComponent, TuiDataListComponent, TuiOptionComponent, TuiSvgComponent, NgIf, TuiPreventDefaultDirective, NgForOf, TuiMapperPipe, AsyncPipe],
  styles: ["[_nghost-%COMP%]{display:block}.t-wrapper[_ngcontent-%COMP%]{display:flex}.t-menu[_ngcontent-%COMP%]{width:11rem;border-left:1px solid var(--tui-base-03)}.t-checkmark[_ngcontent-%COMP%]{margin-left:auto;width:1rem;height:1rem}"],
  changeDetection: 0
});
__decorate([tuiPure], TuiCalendarRangeComponent.prototype, "calculateDisabledItemHandler", null);
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiCalendarRangeComponent, [{
    type: Component,
    args: [{
      selector: "tui-calendar-range",
      templateUrl: "./calendar-range.template.html",
      styleUrls: ["./calendar-range.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [TuiDestroyService]
    }]
  }], function() {
    return [{
      type: Observable,
      decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [TUI_CALENDAR_DATE_STREAM]
      }]
    }, {
      type: ChangeDetectorRef,
      decorators: [{
        type: Inject,
        args: [ChangeDetectorRef]
      }]
    }, {
      type: TuiDestroyService,
      decorators: [{
        type: Self
      }, {
        type: Inject,
        args: [TuiDestroyService]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Inject,
        args: [TUI_OTHER_DATE_TEXT]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_COMMON_ICONS]
      }]
    }];
  }, {
    defaultViewedMonth: [{
      type: Input
    }],
    disabledItemHandler: [{
      type: Input
    }],
    markerHandler: [{
      type: Input
    }],
    items: [{
      type: Input
    }],
    min: [{
      type: Input
    }],
    max: [{
      type: Input
    }],
    minLength: [{
      type: Input
    }],
    maxLength: [{
      type: Input
    }],
    value: [{
      type: Input
    }],
    valueChange: [{
      type: Output
    }],
    onEsc: [{
      type: HostListener,
      args: ["document:keydown.capture", ["$event"]]
    }],
    calculateDisabledItemHandler: []
  });
})();
var TuiCalendarRangeModule = class {
};
TuiCalendarRangeModule.ɵfac = function TuiCalendarRangeModule_Factory(t) {
  return new (t || TuiCalendarRangeModule)();
};
TuiCalendarRangeModule.ɵmod = ɵɵdefineNgModule({
  type: TuiCalendarRangeModule,
  declarations: [TuiCalendarRangeComponent],
  imports: [CommonModule, TuiMapperPipeModule, TuiPreventDefaultModule, TuiCalendarModule, TuiCalendarModule, TuiSvgModule, TuiDataListModule, TuiPrimitiveCalendarRangeModule],
  exports: [TuiCalendarRangeComponent]
});
TuiCalendarRangeModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, TuiMapperPipeModule, TuiPreventDefaultModule, TuiCalendarModule, TuiCalendarModule, TuiSvgModule, TuiDataListModule, TuiPrimitiveCalendarRangeModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiCalendarRangeModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, TuiMapperPipeModule, TuiPreventDefaultModule, TuiCalendarModule, TuiCalendarModule, TuiSvgModule, TuiDataListModule, TuiPrimitiveCalendarRangeModule],
      declarations: [TuiCalendarRangeComponent],
      exports: [TuiCalendarRangeComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-carousel.js
function TuiCarouselComponent_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function TuiCarouselComponent_fieldset_5_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "fieldset", 5);
    ɵɵlistener("waIntersectionObservee", function TuiCarouselComponent_fieldset_5_Template_fieldset_waIntersectionObservee_0_listener($event) {
      const restoredCtx = ɵɵrestoreView(_r5);
      const i_r3 = restoredCtx.index;
      const ctx_r4 = ɵɵnextContext();
      return ɵɵresetView(ctx_r4.onIntersection($event[0], i_r3));
    });
    ɵɵelementContainer(1, 6);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const item_r2 = ctx.$implicit;
    const i_r3 = ctx.index;
    const ctx_r1 = ɵɵnextContext();
    ɵɵproperty("disabled", ctx_r1.isDisabled(i_r3))("ngStyle", ctx_r1.getStyle(ctx_r1.itemsCount));
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", item_r2);
  }
}
var TuiCarouselScrollDirective = class {
  constructor(el) {
    this.el = el;
    this.tuiCarouselScroll = tuiTypedFromEvent(this.el.nativeElement, "wheel").pipe(filter(({
      deltaX
    }) => Math.abs(deltaX) > 20), throttleTime(500), map(({
      deltaX
    }) => Math.sign(deltaX)), tap(() => {
      this.el.nativeElement.scrollLeft = 10;
    }));
  }
};
TuiCarouselScrollDirective.ɵfac = function TuiCarouselScrollDirective_Factory(t) {
  return new (t || TuiCarouselScrollDirective)(ɵɵdirectiveInject(ElementRef));
};
TuiCarouselScrollDirective.ɵdir = ɵɵdefineDirective({
  type: TuiCarouselScrollDirective,
  selectors: [["", "tuiCarouselScroll", ""]],
  outputs: {
    tuiCarouselScroll: "tuiCarouselScroll"
  }
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiCarouselScrollDirective, [{
    type: Directive,
    args: [{
      selector: "[tuiCarouselScroll]"
    }]
  }], function() {
    return [{
      type: ElementRef,
      decorators: [{
        type: Inject,
        args: [ElementRef]
      }]
    }];
  }, {
    tuiCarouselScroll: [{
      type: Output
    }]
  });
})();
var TuiCarouselDirective = class extends Observable {
  constructor(el, visible$) {
    super((subscriber) => this.output$.subscribe(subscriber));
    this.el = el;
    this.visible$ = visible$;
    this.duration$ = new BehaviorSubject(0);
    this.running$ = merge(tuiTypedFromEvent(this.el.nativeElement, "mouseenter").pipe(map(ALWAYS_FALSE_HANDLER)), tuiTypedFromEvent(this.el.nativeElement, "touchstart").pipe(map(ALWAYS_FALSE_HANDLER)), tuiTypedFromEvent(this.el.nativeElement, "touchend").pipe(map(ALWAYS_TRUE_HANDLER)), tuiTypedFromEvent(this.el.nativeElement, "mouseleave").pipe(map(ALWAYS_TRUE_HANDLER)), this.visible$);
    this.output$ = combineLatest([this.duration$, this.running$]).pipe(tuiIfMap(([duration]) => interval(duration), (values) => values.every(Boolean)));
  }
  set duration(duration) {
    this.duration$.next(duration);
  }
  set index(_) {
    this.duration$.next(this.duration$.value);
  }
};
TuiCarouselDirective.ɵfac = function TuiCarouselDirective_Factory(t) {
  return new (t || TuiCarouselDirective)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(PAGE_VISIBILITY));
};
TuiCarouselDirective.ɵdir = ɵɵdefineDirective({
  type: TuiCarouselDirective,
  selectors: [["tui-carousel"]],
  inputs: {
    duration: "duration",
    index: "index"
  },
  features: [ɵɵInheritDefinitionFeature]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiCarouselDirective, [{
    type: Directive,
    args: [{
      selector: "tui-carousel"
    }]
  }], function() {
    return [{
      type: ElementRef,
      decorators: [{
        type: Inject,
        args: [ElementRef]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Inject,
        args: [PAGE_VISIBILITY]
      }]
    }];
  }, {
    duration: [{
      type: Input
    }],
    index: [{
      type: Input
    }]
  });
})();
var TuiCarouselAutoscrollDirective = class {
  constructor(tuiCarouselAutoscroll) {
    this.tuiCarouselAutoscroll = tuiCarouselAutoscroll;
  }
};
TuiCarouselAutoscrollDirective.ɵfac = function TuiCarouselAutoscrollDirective_Factory(t) {
  return new (t || TuiCarouselAutoscrollDirective)(ɵɵdirectiveInject(TuiCarouselDirective));
};
TuiCarouselAutoscrollDirective.ɵdir = ɵɵdefineDirective({
  type: TuiCarouselAutoscrollDirective,
  selectors: [["", "tuiCarouselAutoscroll", ""]],
  outputs: {
    tuiCarouselAutoscroll: "tuiCarouselAutoscroll"
  }
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiCarouselAutoscrollDirective, [{
    type: Directive,
    args: [{
      selector: "[tuiCarouselAutoscroll]",
      outputs: ["tuiCarouselAutoscroll"]
    }]
  }], function() {
    return [{
      type: Observable,
      decorators: [{
        type: Inject,
        args: [TuiCarouselDirective]
      }]
    }];
  }, null);
})();
var TuiCarouselComponent = class {
  constructor(cdr, el, isMobile) {
    this.cdr = cdr;
    this.el = el;
    this.isMobile = isMobile;
    this.translate = 0;
    this.draggable = false;
    this.itemsCount = 1;
    this.index = 0;
    this.indexChange = new EventEmitter();
    this.items = EMPTY_QUERY;
    this.transitioned = true;
  }
  get transform() {
    const x = this.transitioned ? this.computedTranslate : this.translate;
    return `translateX(${100 * x}%)`;
  }
  onTransitioned(transitioned) {
    this.transitioned = transitioned;
    if (!transitioned) {
      this.translate = this.computedTranslate;
    }
  }
  getStyle(itemsCount) {
    const percent = `${100 / itemsCount}%`;
    return {
      flexBasis: percent,
      minWidth: percent,
      maxWidth: percent
    };
  }
  next() {
    if (this.items && this.index === this.items.length - this.itemsCount) {
      return;
    }
    this.updateIndex(this.index + 1);
  }
  prev() {
    this.updateIndex(this.index - 1);
  }
  isDisabled(index) {
    return index < this.index || index > this.index + this.itemsCount;
  }
  onIntersection({
    intersectionRatio
  }, index) {
    if (intersectionRatio && intersectionRatio >= 0.5 && !this.transitioned) {
      this.updateIndex(this.index < index ? index - this.itemsCount + 1 : index);
    }
  }
  onScroll(delta) {
    if (!this.isMobile) {
      this.updateIndex(this.index + delta);
    }
  }
  onPan(x) {
    if (!this.computedDraggable) {
      return;
    }
    const {
      clientWidth
    } = this.el.nativeElement;
    const min = 1 - this.items.length / this.itemsCount;
    this.translate = tuiClamp(x / clientWidth + this.translate, min, 0);
  }
  onSwipe(direction) {
    if (direction === "left") {
      this.next();
    } else if (direction === "right") {
      this.prev();
    }
  }
  onAutoscroll() {
    this.updateIndex(this.index === this.items.length - 1 ? 0 : this.index + 1);
  }
  get computedTranslate() {
    return -this.index / this.itemsCount;
  }
  get computedDraggable() {
    return this.isMobile || this.draggable;
  }
  updateIndex(index) {
    this.index = tuiClamp(index, 0, this.items.length - 1);
    this.indexChange.emit(this.index);
    this.cdr.markForCheck();
  }
};
TuiCarouselComponent.ɵfac = function TuiCarouselComponent_Factory(t) {
  return new (t || TuiCarouselComponent)(ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(TUI_IS_MOBILE));
};
TuiCarouselComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiCarouselComponent,
  selectors: [["tui-carousel"]],
  contentQueries: function TuiCarouselComponent_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, TuiItemDirective, 4, TemplateRef);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.items = _t);
    }
  },
  hostVars: 4,
  hostBindings: function TuiCarouselComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("touchstart", function TuiCarouselComponent_touchstart_HostBindingHandler() {
        return ctx.onTransitioned(false);
      })("touchend", function TuiCarouselComponent_touchend_HostBindingHandler() {
        return ctx.onTransitioned(true);
      })("mousedown", function TuiCarouselComponent_mousedown_HostBindingHandler() {
        return ctx.onTransitioned(false);
      })("mouseup.silent", function TuiCarouselComponent_mouseup_silent_HostBindingHandler() {
        return ctx.onTransitioned(true);
      }, false, ɵɵresolveDocument);
    }
    if (rf & 2) {
      ɵɵclassProp("_draggable", ctx.draggable)("_transitioned", ctx.transitioned);
    }
  },
  inputs: {
    draggable: "draggable",
    itemsCount: "itemsCount",
    index: "index"
  },
  outputs: {
    indexChange: "indexChange"
  },
  features: [ɵɵProvidersFeature([{
    provide: TUI_SWIPE_OPTIONS,
    useValue: {
      timeout: 200,
      threshold: 30
    }
  }])],
  decls: 6,
  vars: 6,
  consts: [[4, "ngIf"], [1, "t-scroller", 3, "tuiCarouselScroll"], ["waIntersectionObserver", "", "waIntersectionThreshold", "0.5", 1, "t-wrapper"], [1, "t-items", 3, "tuiCarouselAutoscroll", "tuiPan", "tuiSwipe"], ["class", "t-item", 3, "disabled", "ngStyle", "waIntersectionObservee", 4, "ngFor", "ngForOf"], [1, "t-item", 3, "disabled", "ngStyle", "waIntersectionObservee"], [3, "ngTemplateOutlet"]],
  template: function TuiCarouselComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵtemplate(0, TuiCarouselComponent_ng_container_0_Template, 1, 0, "ng-container", 0);
      ɵɵpipe(1, "async");
      ɵɵelementStart(2, "div", 1);
      ɵɵlistener("tuiCarouselScroll", function TuiCarouselComponent_Template_div_tuiCarouselScroll_2_listener($event) {
        return ctx.onScroll($event);
      });
      ɵɵelementStart(3, "div", 2)(4, "div", 3);
      ɵɵlistener("tuiCarouselAutoscroll", function TuiCarouselComponent_Template_div_tuiCarouselAutoscroll_4_listener() {
        return ctx.onAutoscroll();
      })("tuiPan", function TuiCarouselComponent_Template_div_tuiPan_4_listener($event) {
        return ctx.onPan($event[0]);
      })("tuiSwipe", function TuiCarouselComponent_Template_div_tuiSwipe_4_listener($event) {
        return ctx.onSwipe($event.direction);
      });
      ɵɵtemplate(5, TuiCarouselComponent_fieldset_5_Template, 2, 3, "fieldset", 4);
      ɵɵelementEnd()()();
    }
    if (rf & 2) {
      ɵɵproperty("ngIf", ɵɵpipeBind1(1, 4, ctx.items.changes));
      ɵɵadvance(4);
      ɵɵstyleProp("transform", ctx.transform);
      ɵɵadvance(1);
      ɵɵproperty("ngForOf", ctx.items);
    }
  },
  dependencies: [NgIf, TuiCarouselScrollDirective, IntersectionObserverDirective, TuiCarouselAutoscrollDirective, TuiPanDirective, TuiSwipeDirective, NgForOf, NgStyle, IntersectionObserveeDirective, NgTemplateOutlet, AsyncPipe],
  styles: ['[_nghost-%COMP%]{position:relative;display:block;overflow:hidden}._draggable[_nghost-%COMP%]{-webkit-user-select:none;-moz-user-select:none;user-select:none}._draggable[_nghost-%COMP%]:hover{cursor:grab}._draggable[_nghost-%COMP%]:active{cursor:grabbing}.t-items[_ngcontent-%COMP%]{display:flex}._transitioned[_nghost-%COMP%]   .t-items[_ngcontent-%COMP%]{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out}.t-item[_ngcontent-%COMP%]{display:flex;flex-direction:column;justify-content:center;padding:var(--tui-carousel-padding, 0 1.25rem);flex:1;min-width:100%;max-width:100%;box-sizing:border-box;border:none;margin:0}.t-wrapper[_ngcontent-%COMP%]{position:-webkit-sticky;position:sticky;left:0;right:0;min-width:100%;overflow:hidden}.t-scroller[_ngcontent-%COMP%]{scrollbar-width:none;-ms-overflow-style:none;display:flex;overflow:auto;overscroll-behavior-x:none;touch-action:none}.t-scroller[_ngcontent-%COMP%]::-webkit-scrollbar, .t-scroller[_ngcontent-%COMP%]::-webkit-scrollbar-thumb{display:none}.t-scroller[_ngcontent-%COMP%]:before, .t-scroller[_ngcontent-%COMP%]:after{content:"";display:block;min-width:1rem}'],
  changeDetection: 0
});
__decorate([tuiPure], TuiCarouselComponent.prototype, "getStyle", null);
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiCarouselComponent, [{
    type: Component,
    args: [{
      selector: "tui-carousel",
      templateUrl: "./carousel.template.html",
      styleUrls: ["./carousel.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [{
        provide: TUI_SWIPE_OPTIONS,
        useValue: {
          timeout: 200,
          threshold: 30
        }
      }]
    }]
  }], function() {
    return [{
      type: ChangeDetectorRef,
      decorators: [{
        type: Inject,
        args: [ChangeDetectorRef]
      }]
    }, {
      type: ElementRef,
      decorators: [{
        type: Inject,
        args: [ElementRef]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_IS_MOBILE]
      }]
    }];
  }, {
    draggable: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["class._draggable"]
    }],
    itemsCount: [{
      type: Input
    }],
    index: [{
      type: Input
    }],
    indexChange: [{
      type: Output
    }],
    items: [{
      type: ContentChildren,
      args: [TuiItemDirective, {
        read: TemplateRef
      }]
    }],
    transitioned: [{
      type: HostBinding,
      args: ["class._transitioned"]
    }],
    onTransitioned: [{
      type: HostListener,
      args: ["touchstart", ["false"]]
    }, {
      type: HostListener,
      args: ["touchend", ["true"]]
    }, {
      type: HostListener,
      args: ["mousedown", ["false"]]
    }, {
      type: HostListener,
      args: ["document:mouseup.silent", ["true"]]
    }],
    getStyle: []
  });
})();
var TuiCarouselButtonsDirective = class {
};
TuiCarouselButtonsDirective.ɵfac = function TuiCarouselButtonsDirective_Factory(t) {
  return new (t || TuiCarouselButtonsDirective)();
};
TuiCarouselButtonsDirective.ɵdir = ɵɵdefineDirective({
  type: TuiCarouselButtonsDirective,
  selectors: [["", "tuiCarouselButtons", ""]],
  features: [ɵɵProvidersFeature([tuiButtonOptionsProvider({
    appearance: TuiAppearance.Secondary,
    shape: "rounded",
    size: "m"
  })])]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiCarouselButtonsDirective, [{
    type: Directive,
    args: [{
      selector: "[tuiCarouselButtons]",
      providers: [tuiButtonOptionsProvider({
        appearance: TuiAppearance.Secondary,
        shape: "rounded",
        size: "m"
      })]
    }]
  }], null, null);
})();
var TuiCarouselModule = class {
};
TuiCarouselModule.ɵfac = function TuiCarouselModule_Factory(t) {
  return new (t || TuiCarouselModule)();
};
TuiCarouselModule.ɵmod = ɵɵdefineNgModule({
  type: TuiCarouselModule,
  declarations: [TuiCarouselComponent, TuiCarouselDirective, TuiCarouselButtonsDirective, TuiCarouselAutoscrollDirective, TuiCarouselScrollDirective],
  imports: [CommonModule, IntersectionObserverModule, TuiPanModule, TuiSwipeModule, TuiItemModule],
  exports: [TuiCarouselComponent, TuiCarouselDirective, TuiCarouselButtonsDirective, TuiItemDirective]
});
TuiCarouselModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, IntersectionObserverModule, TuiPanModule, TuiSwipeModule, TuiItemModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiCarouselModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, IntersectionObserverModule, TuiPanModule, TuiSwipeModule, TuiItemModule],
      declarations: [TuiCarouselComponent, TuiCarouselDirective, TuiCarouselButtonsDirective, TuiCarouselAutoscrollDirective, TuiCarouselScrollDirective],
      exports: [TuiCarouselComponent, TuiCarouselDirective, TuiCarouselButtonsDirective, TuiItemDirective]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-checkbox.js
var _c06 = ["focusableElement"];
var TuiCheckboxComponent = class extends AbstractTuiNullableControl {
  constructor(control, options, cdr) {
    super(control, cdr);
    this.options = options;
    this.size = this.options.size;
  }
  get nativeFocusableElement() {
    return !this.focusableElement || this.computedDisabled ? null : this.focusableElement.nativeElement;
  }
  get focused() {
    return tuiIsNativeFocused(this.nativeFocusableElement);
  }
  get computedFocusable() {
    return this.interactive && this.focusable;
  }
  /** @deprecated use 'value' setter */
  onChecked(checked) {
    this.value = checked;
  }
  onFocused(focused) {
    this.updateFocused(focused);
  }
  onFocusVisible(focusVisible) {
    this.updateFocusVisible(focusVisible);
  }
};
TuiCheckboxComponent.ɵfac = function TuiCheckboxComponent_Factory(t) {
  return new (t || TuiCheckboxComponent)(ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(TUI_CHECKBOX_OPTIONS), ɵɵdirectiveInject(ChangeDetectorRef));
};
TuiCheckboxComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiCheckboxComponent,
  selectors: [["tui-checkbox"]],
  viewQuery: function TuiCheckboxComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(_c06, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.focusableElement = _t.first);
    }
  },
  hostVars: 1,
  hostBindings: function TuiCheckboxComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("data-size", ctx.size);
    }
  },
  inputs: {
    size: "size"
  },
  features: [ɵɵProvidersFeature([tuiAsFocusableItemAccessor(TuiCheckboxComponent), tuiAsControl(TuiCheckboxComponent)]), ɵɵInheritDefinitionFeature],
  decls: 3,
  vars: 11,
  consts: [[3, "disabled", "focused", "hovered", "invalid", "pressed", "size", "value"], ["automation-id", "tui-checkbox__native", "type", "checkbox", 1, "t-native", 3, "disabled", "id", "tuiFocusable", "tuiChecked", "tuiCheckedChange", "tuiFocusedChange", "tuiFocusVisibleChange"], ["focusableElement", ""]],
  template: function TuiCheckboxComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵelementStart(0, "tui-primitive-checkbox", 0)(1, "input", 1, 2);
      ɵɵlistener("tuiCheckedChange", function TuiCheckboxComponent_Template_input_tuiCheckedChange_1_listener($event) {
        return ctx.value = $event;
      })("tuiFocusedChange", function TuiCheckboxComponent_Template_input_tuiFocusedChange_1_listener($event) {
        return ctx.onFocused($event);
      })("tuiFocusVisibleChange", function TuiCheckboxComponent_Template_input_tuiFocusVisibleChange_1_listener($event) {
        return ctx.onFocusVisible($event);
      });
      ɵɵelementEnd()();
    }
    if (rf & 2) {
      ɵɵproperty("disabled", ctx.disabled)("focused", ctx.computedFocusVisible)("hovered", ctx.pseudoHover)("invalid", ctx.computedInvalid)("pressed", ctx.pseudoActive)("size", ctx.size)("value", ctx.value);
      ɵɵadvance(1);
      ɵɵproperty("disabled", ctx.disabled)("id", ctx.id)("tuiFocusable", ctx.computedFocusable)("tuiChecked", ctx.value);
    }
  },
  dependencies: [TuiPrimitiveCheckboxComponent, TuiCheckedDirective, TuiFocusableDirective, TuiFocusedDirective, TuiFocusVisibleDirective],
  styles: ["[_nghost-%COMP%]{font:var(--tui-font-text-s);color:var(--tui-text-01);position:relative;display:block;flex-shrink:0}[data-size=m][_nghost-%COMP%]{width:1rem;height:1rem}[data-size=l][_nghost-%COMP%]{width:1.5rem;height:1.5rem}._readonly[_nghost-%COMP%]   tui-primitive-checkbox[_ngcontent-%COMP%]{pointer-events:none}.t-native[_ngcontent-%COMP%]{padding:0;margin:0;border-width:0;border-radius:inherit;background:none;font-size:inherit;line-height:inherit;font-weight:inherit;color:inherit;caret-color:currentColor;outline:none;-webkit-appearance:none;-moz-appearance:none;appearance:none;word-break:keep-all;-webkit-text-fill-color:currentColor;position:absolute;top:0;left:0;width:100%;height:100%;opacity:0;cursor:pointer}.t-native[_ngcontent-%COMP%]:-webkit-autofill, .t-native[_ngcontent-%COMP%]:-webkit-autofill:hover, .t-native[_ngcontent-%COMP%]:-webkit-autofill:focus{caret-color:var(--tui-base-09);border-radius:inherit;color:inherit!important;background-color:transparent!important;-webkit-text-fill-color:var(--tui-text-01)!important;border-color:var(--tui-autofill);-webkit-box-shadow:0 0 0 100rem var(--tui-autofill) inset!important}@supports (-webkit-touch-callout: none){.t-native[_ngcontent-%COMP%]:active{font-size:1rem}}"],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiCheckboxComponent, [{
    type: Component,
    args: [{
      selector: "tui-checkbox",
      templateUrl: "./checkbox.template.html",
      styleUrls: ["./checkbox.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [tuiAsFocusableItemAccessor(TuiCheckboxComponent), tuiAsControl(TuiCheckboxComponent)]
    }]
  }], function() {
    return [{
      type: NgControl,
      decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NgControl]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_CHECKBOX_OPTIONS]
      }]
    }, {
      type: ChangeDetectorRef,
      decorators: [{
        type: Inject,
        args: [ChangeDetectorRef]
      }]
    }];
  }, {
    focusableElement: [{
      type: ViewChild,
      args: ["focusableElement"]
    }],
    size: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["attr.data-size"]
    }]
  });
})();
var TuiCheckboxModule = class {
};
TuiCheckboxModule.ɵfac = function TuiCheckboxModule_Factory(t) {
  return new (t || TuiCheckboxModule)();
};
TuiCheckboxModule.ɵmod = ɵɵdefineNgModule({
  type: TuiCheckboxModule,
  declarations: [TuiCheckboxComponent],
  imports: [CommonModule, TuiCheckedModule, TuiFocusableModule, TuiFocusedModule, TuiFocusVisibleModule, TuiPrimitiveCheckboxModule],
  exports: [TuiCheckboxComponent]
});
TuiCheckboxModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, TuiCheckedModule, TuiFocusableModule, TuiFocusedModule, TuiFocusVisibleModule, TuiPrimitiveCheckboxModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiCheckboxModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, TuiCheckedModule, TuiFocusableModule, TuiFocusedModule, TuiFocusVisibleModule, TuiPrimitiveCheckboxModule],
      declarations: [TuiCheckboxComponent],
      exports: [TuiCheckboxComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-checkbox-block.js
function TuiCheckboxBlockComponent_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
var _c07 = ["*"];
var TuiCheckboxBlockComponent = class extends AbstractTuiNullableControl {
  constructor(control, cdr, modeDirective) {
    super(control, cdr);
    this.modeDirective = modeDirective;
    this.contentAlign = "right";
    this.hideCheckbox = false;
    this.size = "l";
  }
  get nativeFocusableElement() {
    var _a, _b;
    return (_b = (_a = this.checkbox) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) !== null && _b !== void 0 ? _b : null;
  }
  get checked() {
    return this.value !== false && this.hideCheckbox;
  }
  get checkboxSize() {
    return this.size === "l" ? "l" : "m";
  }
  get focused() {
    return tuiIsNativeFocused(this.nativeFocusableElement);
  }
  get appearance() {
    var _a;
    if (!((_a = this.modeDirective) === null || _a === void 0 ? void 0 : _a.mode)) {
      return this.checked ? TuiAppearance.WhiteblockActive : TuiAppearance.Whiteblock;
    }
    return this.checked ? TuiAppearance.Primary : TuiAppearance.Secondary;
  }
  onFocused(focused) {
    this.updateFocused(focused);
  }
  onFocusVisible(focusVisible) {
    this.updateFocusVisible(focusVisible);
  }
  /** @deprecated use 'value' setter */
  onModelChange(value) {
    this.value = value;
  }
};
TuiCheckboxBlockComponent.ɵfac = function TuiCheckboxBlockComponent_Factory(t) {
  return new (t || TuiCheckboxBlockComponent)(ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(TuiModeDirective, 8));
};
TuiCheckboxBlockComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiCheckboxBlockComponent,
  selectors: [["tui-checkbox-block"]],
  viewQuery: function TuiCheckboxBlockComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(TuiCheckboxComponent, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.checkbox = _t.first);
    }
  },
  hostVars: 6,
  hostBindings: function TuiCheckboxBlockComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("data-align", ctx.contentAlign)("data-size", ctx.size);
      ɵɵclassProp("_hidden_input", ctx.hideCheckbox)("_active", ctx.checked);
    }
  },
  inputs: {
    contentAlign: "contentAlign",
    hideCheckbox: "hideCheckbox",
    size: "size"
  },
  features: [ɵɵProvidersFeature([tuiAsFocusableItemAccessor(TuiCheckboxBlockComponent), tuiAsControl(TuiCheckboxBlockComponent)]), ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c07,
  decls: 7,
  vars: 18,
  consts: [[4, "ngIf"], ["tuiWrapper", "", 1, "t-wrapper", 3, "active", "appearance", "disabled", "focus", "hover", "invalid"], [1, "t-view", 3, "disabled", "focusable", "nativeId", "pseudoActive", "pseudoFocus", "pseudoHover", "pseudoInvalid", "size", "ngModel", "ngModelChange", "focusedChange", "focusVisibleChange"], [1, "t-label"], [1, "t-content"]],
  template: function TuiCheckboxBlockComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵtemplate(0, TuiCheckboxBlockComponent_ng_container_0_Template, 1, 0, "ng-container", 0);
      ɵɵpipe(1, "async");
      ɵɵelementStart(2, "label", 1)(3, "tui-checkbox", 2);
      ɵɵlistener("ngModelChange", function TuiCheckboxBlockComponent_Template_tui_checkbox_ngModelChange_3_listener($event) {
        return ctx.value = $event;
      })("focusedChange", function TuiCheckboxBlockComponent_Template_tui_checkbox_focusedChange_3_listener($event) {
        return ctx.onFocused($event);
      })("focusVisibleChange", function TuiCheckboxBlockComponent_Template_tui_checkbox_focusVisibleChange_3_listener($event) {
        return ctx.onFocusVisible($event);
      });
      ɵɵelementEnd();
      ɵɵelementStart(4, "div", 3)(5, "div", 4);
      ɵɵprojection(6);
      ɵɵelementEnd()()();
    }
    if (rf & 2) {
      ɵɵproperty("ngIf", ctx.modeDirective && ɵɵpipeBind1(1, 16, ctx.modeDirective.change$));
      ɵɵadvance(2);
      ɵɵproperty("active", ctx.pseudoActive)("appearance", ctx.appearance)("disabled", ctx.computedDisabled)("focus", ctx.computedFocusVisible)("hover", ctx.pseudoHover)("invalid", ctx.computedInvalid);
      ɵɵadvance(1);
      ɵɵproperty("disabled", ctx.computedDisabled || ctx.readOnly)("focusable", ctx.focusable)("nativeId", ctx.nativeId)("pseudoActive", ctx.pseudoActive)("pseudoFocus", false)("pseudoHover", ctx.pseudoHover)("pseudoInvalid", ctx.computedInvalid)("size", ctx.checkboxSize)("ngModel", ctx.value);
    }
  },
  dependencies: [TuiCheckboxComponent, NgIf, TuiWrapperDirective, NgControlStatus, NgModel, AsyncPipe],
  styles: ["[_nghost-%COMP%]{font:var(--tui-font-text-s);color:var(--tui-text-01);display:inline-block;vertical-align:top;align-items:flex-start;border-radius:var(--tui-radius-m)}[data-size=xs][_nghost-%COMP%]{font:var(--tui-font-text-xs)}[data-size=m][_nghost-%COMP%], [data-size=l][_nghost-%COMP%]{font:var(--tui-font-text-m)}._disabled[_nghost-%COMP%], ._readonly[_nghost-%COMP%]{pointer-events:none}.t-wrapper[_ngcontent-%COMP%]{position:relative;display:flex;align-items:inherit;box-sizing:border-box;border-radius:inherit;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;user-select:none;padding:0 1rem 0 0}[data-size=xs][_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]{padding-right:.5rem}[data-align=right][_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]{flex-direction:row-reverse;padding:0 0 0 1rem}[data-align=right][data-size=xs][_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]{padding-left:.5rem}[data-size=xs]._hidden_input[_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]{padding:0 .5rem}[data-size=xs]._hidden_input[_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]:not(._focused):after{border-width:1px}[data-size=s]._hidden_input[_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]{padding:0 1rem}[data-size=m]._hidden_input[_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]{padding:0 1.5rem}[data-size=l]._hidden_input[_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]{padding:0 2.25rem}[data-size=xs][_nghost-%COMP%]   .t-view[_ngcontent-%COMP%]{margin:calc(var(--tui-height-xs) / 2 - .5rem) .25rem;transform:scale(.75)}[data-size=s][_nghost-%COMP%]   .t-view[_ngcontent-%COMP%]{margin:calc(var(--tui-height-s) / 2 - .5rem) .5rem}[data-size=m][_nghost-%COMP%]   .t-view[_ngcontent-%COMP%]{margin:calc(var(--tui-height-m) / 2 - .5rem) .75rem}[data-size=l][_nghost-%COMP%]   .t-view[_ngcontent-%COMP%]{margin:calc(var(--tui-height-l) / 2 - .75rem) 1rem}._hidden_input[_nghost-%COMP%]   .t-view[_ngcontent-%COMP%]{position:absolute;height:1px;width:1px;margin:-1px;border:0;padding:0;overflow:hidden;clip:rect(0,0,0,0);-webkit-clip-path:inset(0);clip-path:inset(0)}.t-label[_ngcontent-%COMP%]{display:flex;flex-grow:1;align-self:flex-start;align-items:center;overflow:hidden}[data-size=xs][_nghost-%COMP%]   .t-label[_ngcontent-%COMP%]{min-height:var(--tui-height-xs)}[data-size=s][_nghost-%COMP%]   .t-label[_ngcontent-%COMP%]{min-height:var(--tui-height-s)}[data-size=m][_nghost-%COMP%]   .t-label[_ngcontent-%COMP%]{min-height:var(--tui-height-m)}[data-size=l][_nghost-%COMP%]   .t-label[_ngcontent-%COMP%]{min-height:var(--tui-height-l)}._hidden_input[_nghost-%COMP%]   .t-label[_ngcontent-%COMP%]{text-align:center;justify-content:center}.t-content[_ngcontent-%COMP%]{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}"],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiCheckboxBlockComponent, [{
    type: Component,
    args: [{
      selector: "tui-checkbox-block",
      templateUrl: "./checkbox-block.template.html",
      styleUrls: ["./checkbox-block.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [tuiAsFocusableItemAccessor(TuiCheckboxBlockComponent), tuiAsControl(TuiCheckboxBlockComponent)]
    }]
  }], function() {
    return [{
      type: NgControl,
      decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NgControl]
      }]
    }, {
      type: ChangeDetectorRef,
      decorators: [{
        type: Inject,
        args: [ChangeDetectorRef]
      }]
    }, {
      type: TuiModeDirective,
      decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [TuiModeDirective]
      }]
    }];
  }, {
    checkbox: [{
      type: ViewChild,
      args: [TuiCheckboxComponent]
    }],
    contentAlign: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["attr.data-align"]
    }],
    hideCheckbox: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["class._hidden_input"]
    }],
    size: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["attr.data-size"]
    }],
    checked: [{
      type: HostBinding,
      args: ["class._active"]
    }]
  });
})();
var TuiCheckboxBlockModule = class {
};
TuiCheckboxBlockModule.ɵfac = function TuiCheckboxBlockModule_Factory(t) {
  return new (t || TuiCheckboxBlockModule)();
};
TuiCheckboxBlockModule.ɵmod = ɵɵdefineNgModule({
  type: TuiCheckboxBlockModule,
  declarations: [TuiCheckboxBlockComponent],
  imports: [CommonModule, FormsModule, TuiHoveredModule, TuiPressedModule, TuiCheckboxModule, TuiWrapperModule],
  exports: [TuiCheckboxBlockComponent]
});
TuiCheckboxBlockModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, FormsModule, TuiHoveredModule, TuiPressedModule, TuiCheckboxModule, TuiWrapperModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiCheckboxBlockModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, FormsModule, TuiHoveredModule, TuiPressedModule, TuiCheckboxModule, TuiWrapperModule],
      declarations: [TuiCheckboxBlockComponent],
      exports: [TuiCheckboxBlockComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-checkbox-labeled.js
var _c08 = ["*"];
var TuiCheckboxLabeledComponent = class extends AbstractTuiNullableControl {
  constructor(control, cdr, mode$, options) {
    super(control, cdr);
    this.mode$ = mode$;
    this.options = options;
    this.size = this.options.size;
  }
  get focused() {
    return tuiIsNativeFocused(this.nativeFocusableElement);
  }
  get nativeFocusableElement() {
    var _a, _b;
    return (_b = (_a = this.checkbox) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) !== null && _b !== void 0 ? _b : null;
  }
  onFocused(focused) {
    this.updateFocused(focused);
  }
  /** @deprecated use 'value' setter */
  onModelChange(value) {
    this.value = value;
  }
};
TuiCheckboxLabeledComponent.ɵfac = function TuiCheckboxLabeledComponent_Factory(t) {
  return new (t || TuiCheckboxLabeledComponent)(ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(TUI_MODE), ɵɵdirectiveInject(TUI_CHECKBOX_OPTIONS));
};
TuiCheckboxLabeledComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiCheckboxLabeledComponent,
  selectors: [["tui-checkbox-labeled"]],
  viewQuery: function TuiCheckboxLabeledComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(TuiCheckboxComponent, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.checkbox = _t.first);
    }
  },
  hostVars: 1,
  hostBindings: function TuiCheckboxLabeledComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("$.data-mode.attr", function TuiCheckboxLabeledComponent___data_mode_attr_HostBindingHandler() {
        return ctx.mode$;
      });
    }
    if (rf & 2) {
      ɵɵattribute("data-size", ctx.size);
    }
  },
  inputs: {
    size: "size"
  },
  features: [ɵɵProvidersFeature([tuiAsFocusableItemAccessor(TuiCheckboxLabeledComponent), tuiAsControl(TuiCheckboxLabeledComponent), MODE_PROVIDER]), ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c08,
  decls: 4,
  vars: 12,
  consts: [[1, "t-wrapper"], [3, "disabled", "focusable", "nativeId", "pseudoActive", "pseudoFocus", "pseudoHover", "pseudoInvalid", "readOnly", "size", "ngModel", "ngModelChange", "focusedChange"], [1, "t-content"]],
  template: function TuiCheckboxLabeledComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵelementStart(0, "label", 0)(1, "tui-checkbox", 1);
      ɵɵlistener("ngModelChange", function TuiCheckboxLabeledComponent_Template_tui_checkbox_ngModelChange_1_listener($event) {
        return ctx.value = $event;
      })("focusedChange", function TuiCheckboxLabeledComponent_Template_tui_checkbox_focusedChange_1_listener($event) {
        return ctx.onFocused($event);
      });
      ɵɵelementEnd();
      ɵɵelementStart(2, "div", 2);
      ɵɵprojection(3);
      ɵɵelementEnd()();
    }
    if (rf & 2) {
      ɵɵadvance(1);
      ɵɵproperty("disabled", ctx.computedDisabled)("focusable", ctx.focusable)("nativeId", ctx.nativeId)("pseudoActive", ctx.pseudoActive)("pseudoFocus", ctx.pseudoFocus)("pseudoHover", ctx.pseudoHover)("pseudoInvalid", ctx.computedInvalid)("readOnly", ctx.readOnly)("size", ctx.size)("ngModel", ctx.value);
      ɵɵadvance(1);
      ɵɵclassProp("t-content_disabled", ctx.computedDisabled);
    }
  },
  dependencies: [TuiCheckboxComponent, NgControlStatus, NgModel],
  styles: ["[_nghost-%COMP%]{position:relative;display:block;line-height:0}._disabled[_nghost-%COMP%], ._readonly[_nghost-%COMP%]{pointer-events:none}.t-wrapper[_ngcontent-%COMP%]{display:inline-flex;max-width:100%;cursor:pointer}._disabled[_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]{cursor:default}[data-mode=onDark][_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]{color:var(--tui-text-01-night)}.t-content[_ngcontent-%COMP%]{font:var(--tui-font-text-s);line-height:1rem;word-wrap:break-word;min-width:0}.t-content_disabled[_ngcontent-%COMP%]{opacity:var(--tui-disabled-opacity)}[data-size=m][_nghost-%COMP%]   .t-content[_ngcontent-%COMP%]{margin-left:.5rem}[data-size=l][_nghost-%COMP%]   .t-content[_ngcontent-%COMP%]{font:var(--tui-font-text-m);line-height:1.5rem;margin-left:.75rem}"],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiCheckboxLabeledComponent, [{
    type: Component,
    args: [{
      selector: "tui-checkbox-labeled",
      templateUrl: "./checkbox-labeled.template.html",
      styleUrls: ["./checkbox-labeled.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [tuiAsFocusableItemAccessor(TuiCheckboxLabeledComponent), tuiAsControl(TuiCheckboxLabeledComponent), MODE_PROVIDER],
      host: {
        "($.data-mode.attr)": "mode$",
        "[attr.data-size]": "size"
      }
    }]
  }], function() {
    return [{
      type: NgControl,
      decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NgControl]
      }]
    }, {
      type: ChangeDetectorRef,
      decorators: [{
        type: Inject,
        args: [ChangeDetectorRef]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Inject,
        args: [TUI_MODE]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_CHECKBOX_OPTIONS]
      }]
    }];
  }, {
    checkbox: [{
      type: ViewChild,
      args: [TuiCheckboxComponent]
    }],
    size: [{
      type: Input
    }]
  });
})();
var TuiCheckboxLabeledModule = class {
};
TuiCheckboxLabeledModule.ɵfac = function TuiCheckboxLabeledModule_Factory(t) {
  return new (t || TuiCheckboxLabeledModule)();
};
TuiCheckboxLabeledModule.ɵmod = ɵɵdefineNgModule({
  type: TuiCheckboxLabeledModule,
  declarations: [TuiCheckboxLabeledComponent],
  imports: [CommonModule, FormsModule, TuiCheckboxModule],
  exports: [TuiCheckboxLabeledComponent]
});
TuiCheckboxLabeledModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, FormsModule, TuiCheckboxModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiCheckboxLabeledModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, FormsModule, TuiCheckboxModule],
      declarations: [TuiCheckboxLabeledComponent],
      exports: [TuiCheckboxLabeledComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-select-option.js
function TuiSelectOptionComponent_tui_svg_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "tui-svg", 3);
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵproperty("src", ctx_r0.icons.check)("tuiScrollIntoView", true);
  }
}
function TuiSelectOptionComponent_ng_template_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "span", 4);
  }
}
var TuiSelectOptionComponent = class {
  constructor(icons, context, host, el, option, dataList, control, abstractControl) {
    this.icons = icons;
    this.context = context;
    this.host = host;
    this.el = el;
    this.option = option;
    this.dataList = dataList;
    this.control = control;
    this.abstractControl = abstractControl;
    this.changeDetection$ = new Subject();
    this.selected$ = merge(this.changeDetection$, this.control.valueChanges || EMPTY, tuiTypedFromEvent(this.el.nativeElement, "animationstart")).pipe(startWith(null), map(() => this.selected), distinctUntilChanged());
  }
  get matcher() {
    return this.host.identityMatcher || TUI_DEFAULT_IDENTITY_MATCHER;
  }
  ngOnInit() {
    void Promise.resolve().then(() => {
      var _a, _b;
      if (tuiIsPresent(this.option.value) && !this.option.disabled) {
        (_b = (_a = this.host).checkOption) === null || _b === void 0 ? void 0 : _b.call(_a, this.option.value);
      }
    });
  }
  ngDoCheck() {
    this.changeDetection$.next();
  }
  get value() {
    var _a, _b;
    return (_b = (_a = this.abstractControl) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : this.control.value;
  }
  get selected() {
    return tuiIsPresent(this.option.value) && tuiIsPresent(this.value) && this.matcher(this.value, this.option.value);
  }
};
TuiSelectOptionComponent.ɵfac = function TuiSelectOptionComponent_Factory(t) {
  return new (t || TuiSelectOptionComponent)(ɵɵdirectiveInject(TUI_COMMON_ICONS), ɵɵdirectiveInject(POLYMORPHEUS_CONTEXT), ɵɵdirectiveInject(TUI_DATA_LIST_HOST), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(TuiOptionComponent), ɵɵdirectiveInject(TuiDataListComponent, 8), ɵɵdirectiveInject(NgControl), ɵɵdirectiveInject(AbstractTuiControl, 8));
};
TuiSelectOptionComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiSelectOptionComponent,
  selectors: [["tui-select-option"]],
  decls: 5,
  vars: 5,
  consts: [[3, "ngTemplateOutlet"], ["automation-id", "tui-select-option__checkmark", "class", "t-checkmark", 3, "src", "tuiScrollIntoView", 4, "ngIf", "ngIfElse"], ["dummy", ""], ["automation-id", "tui-select-option__checkmark", 1, "t-checkmark", 3, "src", "tuiScrollIntoView"], [1, "t-dummy"]],
  template: function TuiSelectOptionComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵelementContainer(0, 0);
      ɵɵtemplate(1, TuiSelectOptionComponent_tui_svg_1_Template, 1, 2, "tui-svg", 1);
      ɵɵpipe(2, "async");
      ɵɵtemplate(3, TuiSelectOptionComponent_ng_template_3_Template, 1, 0, "ng-template", null, 2, ɵɵtemplateRefExtractor);
    }
    if (rf & 2) {
      const _r1 = ɵɵreference(4);
      ɵɵproperty("ngTemplateOutlet", ctx.context.$implicit);
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ɵɵpipeBind1(2, 3, ctx.selected$))("ngIfElse", _r1);
    }
  },
  dependencies: [TuiSvgComponent, NgTemplateOutlet, NgIf, TuiScrollIntoViewDirective, AsyncPipe],
  styles: ['@keyframes _ngcontent-%COMP%_retrigger{0%{left:1px}to{left:2px}}[_nghost-%COMP%]{display:flex;flex:1;align-items:center;max-width:100%;animation:_ngcontent-%COMP%_retrigger 1s}.t-checkmark[_ngcontent-%COMP%]{-webkit-margin-start:auto;margin-inline-start:auto;-webkit-border-start:.25rem solid transparent;border-inline-start:.25rem solid transparent}tui-data-list[data-list-size="s"][_nghost-%COMP%]   .t-checkmark[_ngcontent-%COMP%], tui-data-list[data-list-size="s"]   [_nghost-%COMP%]   .t-checkmark[_ngcontent-%COMP%]{-webkit-margin-end:-.375rem;margin-inline-end:-.375rem}tui-data-list[data-list-size="m"][_nghost-%COMP%]   .t-checkmark[_ngcontent-%COMP%], tui-data-list[data-list-size="m"]   [_nghost-%COMP%]   .t-checkmark[_ngcontent-%COMP%]{-webkit-margin-end:-.125rem;margin-inline-end:-.125rem}.t-dummy[_ngcontent-%COMP%]{width:1.75rem}'],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiSelectOptionComponent, [{
    type: Component,
    args: [{
      selector: "tui-select-option",
      templateUrl: "./select-option.template.html",
      styleUrls: ["./select-option.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush
    }]
  }], function() {
    return [{
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_COMMON_ICONS]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [POLYMORPHEUS_CONTEXT]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_DATA_LIST_HOST]
      }]
    }, {
      type: ElementRef,
      decorators: [{
        type: Inject,
        args: [ElementRef]
      }]
    }, {
      type: TuiOptionComponent,
      decorators: [{
        type: Inject,
        args: [TuiOptionComponent]
      }]
    }, {
      type: TuiDataListComponent,
      decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [TuiDataListComponent]
      }]
    }, {
      type: NgControl,
      decorators: [{
        type: Inject,
        args: [NgControl]
      }]
    }, {
      type: AbstractTuiControl,
      decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [AbstractTuiControl]
      }]
    }];
  }, null);
})();
var TUI_SELECT_OPTION = new PolymorpheusComponent(TuiSelectOptionComponent);
var TuiSelectOptionModule = class {
};
TuiSelectOptionModule.ɵfac = function TuiSelectOptionModule_Factory(t) {
  return new (t || TuiSelectOptionModule)();
};
TuiSelectOptionModule.ɵmod = ɵɵdefineNgModule({
  type: TuiSelectOptionModule,
  declarations: [TuiSelectOptionComponent],
  imports: [CommonModule, TuiSvgModule, TuiScrollIntoViewModule],
  exports: [TuiSelectOptionComponent]
});
TuiSelectOptionModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, TuiSvgModule, TuiScrollIntoViewModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiSelectOptionModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, TuiSvgModule, TuiScrollIntoViewModule],
      declarations: [TuiSelectOptionComponent],
      exports: [TuiSelectOptionComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-combo-box.js
function TuiComboBoxComponent_div_4_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtext(1);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const text_r4 = ctx.polymorpheusOutlet;
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", text_r4, " ");
  }
}
var _c09 = function(a0, a1) {
  return {
    $implicit: a0,
    active: a1
  };
};
function TuiComboBoxComponent_div_4_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 4);
    ɵɵtemplate(1, TuiComboBoxComponent_div_4_ng_container_1_Template, 2, 1, "ng-container", 5);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("polymorpheusOutlet", ctx_r0.computedContent)("polymorpheusOutletContext", ɵɵpureFunction2(2, _c09, ctx_r0.value, ctx_r0.computedFocused));
  }
}
function TuiComboBoxComponent_ng_template_5_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function TuiComboBoxComponent_ng_template_5_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 6);
    ɵɵtemplate(1, TuiComboBoxComponent_ng_template_5_ng_container_1_Template, 1, 0, "ng-container", 7);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("polymorpheusOutlet", ctx_r2.arrow);
  }
}
var _c14 = ["*", [["input"]]];
var _c23 = ["*", "input"];
var TuiComboBoxComponent = class extends AbstractTuiNullableControl {
  constructor(control, cdr, arrowMode, itemsHandlers, textfieldSize) {
    super(control, cdr);
    this.arrowMode = arrowMode;
    this.itemsHandlers = itemsHandlers;
    this.textfieldSize = textfieldSize;
    this.stringify = this.itemsHandlers.stringify;
    this.strictMatcher = TUI_STRICT_MATCHER;
    this.identityMatcher = this.itemsHandlers.identityMatcher;
    this.strict = true;
    this.search = null;
    this.searchChange = new EventEmitter();
    this.open = false;
  }
  get size() {
    return this.textfieldSize.size;
  }
  get arrow() {
    return !this.interactive ? this.arrowMode.disabled : this.arrowMode.interactive;
  }
  get nativeFocusableElement() {
    var _a, _b;
    return (_b = (_a = this.textfield) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) !== null && _b !== void 0 ? _b : null;
  }
  get focused() {
    var _a;
    return tuiIsNativeFocused(this.nativeFocusableElement) || !!((_a = this.hostedDropdown) === null || _a === void 0 ? void 0 : _a.focused);
  }
  get nativeValue() {
    return this.value === null ? this.search || "" : this.stringify(this.value);
  }
  get showValueTemplate() {
    return tuiIsPresent(this.value) && !this.focused;
  }
  get computedContent() {
    return this.valueContent || this.nativeValue;
  }
  onActiveZone(active) {
    this.updateFocused(active);
  }
  checkOption(option) {
    if (!this.isStrictMatch(option)) {
      return;
    }
    this.value = option;
    this.updateSearch(null);
  }
  handleOption(item) {
    this.focusInput();
    this.close();
    this.updateSearch(null);
    this.value = item;
    if (this.value) {
      this.setNativeValue(this.stringify(item));
    }
  }
  onFieldKeyDownEnter(event) {
    var _a;
    if (this.open) {
      event.preventDefault();
    }
    const options = ((_a = this.accessor) === null || _a === void 0 ? void 0 : _a.getOptions()) || [];
    if (options.length !== 1) {
      return;
    }
    this.value = options[0];
    this.updateSearch(null);
    this.close();
  }
  onValueChange(value) {
    var _a, _b;
    this.updateSearch(value);
    const match = (_a = this.accessor) === null || _a === void 0 ? void 0 : _a.getOptions().find((item) => this.isStrictMatch(item));
    if (match !== void 0) {
      this.value = match;
      this.updateSearch(null);
      return;
    }
    if (this.strict || this.search === "") {
      this.value = null;
    }
    if (this.search !== "") {
      (_b = this.hostedDropdown) === null || _b === void 0 ? void 0 : _b.updateOpen(true);
    }
  }
  /** @deprecated use 'value' setter */
  updateValue(value) {
    super.updateValue(value);
  }
  toggle() {
    var _a;
    (_a = this.hostedDropdown) === null || _a === void 0 ? void 0 : _a.updateOpen(!this.open);
  }
  isStrictMatch(item) {
    var _a;
    return !!this.search && !!((_a = this.strictMatcher) === null || _a === void 0 ? void 0 : _a.call(this, item, this.search, this.stringify));
  }
  close() {
    var _a;
    (_a = this.hostedDropdown) === null || _a === void 0 ? void 0 : _a.updateOpen(false);
  }
  updateSearch(search) {
    if (this.search === search) {
      return;
    }
    this.search = search;
    this.searchChange.emit(search);
  }
  setNativeValue(value) {
    if (this.nativeFocusableElement) {
      this.nativeFocusableElement.value = value;
    }
  }
  focusInput(preventScroll = false) {
    if (this.nativeFocusableElement) {
      this.nativeFocusableElement.focus({
        preventScroll
      });
    }
  }
};
TuiComboBoxComponent.ɵfac = function TuiComboBoxComponent_Factory(t) {
  return new (t || TuiComboBoxComponent)(ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(TUI_ARROW_MODE), ɵɵdirectiveInject(TUI_ITEMS_HANDLERS), ɵɵdirectiveInject(TUI_TEXTFIELD_SIZE));
};
TuiComboBoxComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiComboBoxComponent,
  selectors: [["tui-combo-box"]],
  contentQueries: function TuiComboBoxComponent_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, TUI_DATA_LIST_ACCESSOR, 5);
      ɵɵcontentQuery(dirIndex, TuiDataListDirective, 5, TemplateRef);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.accessor = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.datalist = _t.first);
    }
  },
  viewQuery: function TuiComboBoxComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(TuiHostedDropdownComponent, 5);
      ɵɵviewQuery(TuiPrimitiveTextfieldComponent, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.hostedDropdown = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.textfield = _t.first);
    }
  },
  hostVars: 1,
  hostBindings: function TuiComboBoxComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("data-size", ctx.size);
    }
  },
  inputs: {
    stringify: "stringify",
    strictMatcher: "strictMatcher",
    identityMatcher: "identityMatcher",
    valueContent: "valueContent",
    strict: "strict",
    search: "search"
  },
  outputs: {
    searchChange: "searchChange"
  },
  features: [ɵɵProvidersFeature([tuiAsFocusableItemAccessor(TuiComboBoxComponent), tuiAsDataListHost(TuiComboBoxComponent), tuiAsControl(TuiComboBoxComponent), tuiAsOptionContent(TUI_SELECT_OPTION)], [FIXED_DROPDOWN_CONTROLLER_PROVIDER]), ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c23,
  decls: 7,
  vars: 13,
  consts: [[1, "t-hosted", 3, "canOpen", "content", "open", "openChange", "tuiActiveZoneChange"], ["automation-id", "tui-combo-box__textfield", 1, "t-textfield", 3, "disabled", "focusable", "invalid", "nativeId", "pseudoFocus", "pseudoHover", "readOnly", "tuiTextfieldIcon", "value", "click", "keydown.enter", "valueChange"], ["automation-id", "tui-combo-box__template", "ngProjectAs", "tuiContent", "class", "t-value", 5, ["tuiContent"], 4, "ngIf"], ["icon", ""], ["automation-id", "tui-combo-box__template", "ngProjectAs", "tuiContent", 5, ["tuiContent"], 1, "t-value"], [4, "polymorpheusOutlet", "polymorpheusOutletContext"], ["appearance", "icon", "tuiWrapper", "", 1, "t-icon"], [4, "polymorpheusOutlet"]],
  template: function TuiComboBoxComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c14);
      ɵɵelementStart(0, "tui-hosted-dropdown", 0);
      ɵɵlistener("openChange", function TuiComboBoxComponent_Template_tui_hosted_dropdown_openChange_0_listener($event) {
        return ctx.open = $event;
      })("tuiActiveZoneChange", function TuiComboBoxComponent_Template_tui_hosted_dropdown_tuiActiveZoneChange_0_listener($event) {
        return ctx.onActiveZone($event);
      });
      ɵɵelementStart(1, "tui-primitive-textfield", 1);
      ɵɵlistener("click", function TuiComboBoxComponent_Template_tui_primitive_textfield_click_1_listener() {
        return ctx.toggle();
      })("keydown.enter", function TuiComboBoxComponent_Template_tui_primitive_textfield_keydown_enter_1_listener($event) {
        return ctx.onFieldKeyDownEnter($event);
      })("valueChange", function TuiComboBoxComponent_Template_tui_primitive_textfield_valueChange_1_listener($event) {
        return ctx.onValueChange($event);
      });
      ɵɵprojection(2);
      ɵɵprojection(3, 1, ["ngProjectAs", "input", 5, ["input"]]);
      ɵɵtemplate(4, TuiComboBoxComponent_div_4_Template, 2, 5, "div", 2);
      ɵɵelementEnd();
      ɵɵtemplate(5, TuiComboBoxComponent_ng_template_5_Template, 2, 1, "ng-template", null, 3, ɵɵtemplateRefExtractor);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      const _r1 = ɵɵreference(6);
      ɵɵproperty("canOpen", ctx.interactive && !!ctx.datalist)("content", ctx.datalist || "")("open", ctx.open);
      ɵɵadvance(1);
      ɵɵproperty("disabled", ctx.computedDisabled)("focusable", ctx.computedFocusable)("invalid", ctx.computedInvalid)("nativeId", ctx.nativeId)("pseudoFocus", ctx.computedFocused)("pseudoHover", ctx.pseudoHover)("readOnly", ctx.readOnly)("tuiTextfieldIcon", ctx.arrow ? _r1 : "")("value", ctx.nativeValue);
      ɵɵadvance(3);
      ɵɵproperty("ngIf", ctx.showValueTemplate);
    }
  },
  dependencies: [TuiHostedDropdownComponent, TuiPrimitiveTextfieldComponent, TuiActiveZoneDirective, TuiPrimitiveTextfieldDirective, TuiTextfieldIconDirective, NgIf, PolymorpheusOutletDirective, TuiWrapperDirective],
  styles: ["[_nghost-%COMP%]{display:block;border-radius:var(--tui-radius-m);text-align:left}.t-hosted[_ngcontent-%COMP%]{display:block;border-radius:inherit}.t-textfield[_ngcontent-%COMP%]{border-radius:inherit;text-align:inherit}.t-value[_ngcontent-%COMP%]{display:flex;width:100%;align-items:center}.t-icon[_ngcontent-%COMP%]{pointer-events:auto}"],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiComboBoxComponent, [{
    type: Component,
    args: [{
      selector: "tui-combo-box",
      templateUrl: "./combo-box.template.html",
      styleUrls: ["./combo-box.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [tuiAsFocusableItemAccessor(TuiComboBoxComponent), tuiAsDataListHost(TuiComboBoxComponent), tuiAsControl(TuiComboBoxComponent), tuiAsOptionContent(TUI_SELECT_OPTION)],
      viewProviders: [FIXED_DROPDOWN_CONTROLLER_PROVIDER]
    }]
  }], function() {
    return [{
      type: NgControl,
      decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NgControl]
      }]
    }, {
      type: ChangeDetectorRef,
      decorators: [{
        type: Inject,
        args: [ChangeDetectorRef]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_ARROW_MODE]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_ITEMS_HANDLERS]
      }]
    }, {
      type: TuiTextfieldSizeDirective,
      decorators: [{
        type: Inject,
        args: [TUI_TEXTFIELD_SIZE]
      }]
    }];
  }, {
    accessor: [{
      type: ContentChild,
      args: [TUI_DATA_LIST_ACCESSOR]
    }],
    hostedDropdown: [{
      type: ViewChild,
      args: [TuiHostedDropdownComponent]
    }],
    textfield: [{
      type: ViewChild,
      args: [TuiPrimitiveTextfieldComponent]
    }],
    stringify: [{
      type: Input
    }],
    strictMatcher: [{
      type: Input
    }],
    identityMatcher: [{
      type: Input
    }],
    valueContent: [{
      type: Input
    }],
    strict: [{
      type: Input
    }],
    search: [{
      type: Input
    }],
    searchChange: [{
      type: Output
    }],
    datalist: [{
      type: ContentChild,
      args: [TuiDataListDirective, {
        read: TemplateRef
      }]
    }],
    size: [{
      type: HostBinding,
      args: ["attr.data-size"]
    }]
  });
})();
var TuiComboBoxDirective = class extends AbstractTuiTextfieldHost {
  get value() {
    return this.host.nativeValue;
  }
  onValueChange(value) {
    this.host.onValueChange(value);
  }
};
TuiComboBoxDirective.ɵfac = function() {
  let ɵTuiComboBoxDirective_BaseFactory;
  return function TuiComboBoxDirective_Factory(t) {
    return (ɵTuiComboBoxDirective_BaseFactory || (ɵTuiComboBoxDirective_BaseFactory = ɵɵgetInheritedFactory(TuiComboBoxDirective)))(t || TuiComboBoxDirective);
  };
}();
TuiComboBoxDirective.ɵdir = ɵɵdefineDirective({
  type: TuiComboBoxDirective,
  selectors: [["tui-combo-box"]],
  features: [ɵɵProvidersFeature([tuiAsTextfieldHost(TuiComboBoxDirective)]), ɵɵInheritDefinitionFeature]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiComboBoxDirective, [{
    type: Directive,
    args: [{
      selector: "tui-combo-box",
      providers: [tuiAsTextfieldHost(TuiComboBoxDirective)]
    }]
  }], null, null);
})();
var TuiComboBoxStrictDirective = class {
  constructor(comboBox) {
    this.comboBox = comboBox;
    this.strict = true;
  }
  onInput() {
    if (!this.strict && this.comboBox.search) {
      this.comboBox.value = this.comboBox.search;
    }
  }
};
TuiComboBoxStrictDirective.ɵfac = function TuiComboBoxStrictDirective_Factory(t) {
  return new (t || TuiComboBoxStrictDirective)(ɵɵdirectiveInject(TuiComboBoxComponent));
};
TuiComboBoxStrictDirective.ɵdir = ɵɵdefineDirective({
  type: TuiComboBoxStrictDirective,
  selectors: [["tui-combo-box", "strict", ""]],
  hostBindings: function TuiComboBoxStrictDirective_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("input", function TuiComboBoxStrictDirective_input_HostBindingHandler() {
        return ctx.onInput();
      });
    }
  },
  inputs: {
    strict: "strict"
  }
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiComboBoxStrictDirective, [{
    type: Directive,
    args: [{
      selector: "tui-combo-box[strict]"
    }]
  }], function() {
    return [{
      type: TuiComboBoxComponent,
      decorators: [{
        type: Inject,
        args: [TuiComboBoxComponent]
      }]
    }];
  }, {
    strict: [{
      type: Input
    }],
    onInput: [{
      type: HostListener,
      args: ["input"]
    }]
  });
})();
var TuiComboBoxModule = class {
};
TuiComboBoxModule.ɵfac = function TuiComboBoxModule_Factory(t) {
  return new (t || TuiComboBoxModule)();
};
TuiComboBoxModule.ɵmod = ɵɵdefineNgModule({
  type: TuiComboBoxModule,
  declarations: [TuiComboBoxComponent, TuiComboBoxStrictDirective, TuiComboBoxDirective],
  imports: [CommonModule, PolymorpheusModule, TuiActiveZoneModule, TuiPrimitiveTextfieldModule, TuiHostedDropdownModule, TuiSelectOptionModule, TuiArrowModule, TuiWrapperModule, TuiTextfieldControllerModule],
  exports: [TuiComboBoxComponent, TuiComboBoxStrictDirective, TuiComboBoxDirective, TuiTextfieldComponent]
});
TuiComboBoxModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, PolymorpheusModule, TuiActiveZoneModule, TuiPrimitiveTextfieldModule, TuiHostedDropdownModule, TuiSelectOptionModule, TuiArrowModule, TuiWrapperModule, TuiTextfieldControllerModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiComboBoxModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, PolymorpheusModule, TuiActiveZoneModule, TuiPrimitiveTextfieldModule, TuiHostedDropdownModule, TuiSelectOptionModule, TuiArrowModule, TuiWrapperModule, TuiTextfieldControllerModule],
      declarations: [TuiComboBoxComponent, TuiComboBoxStrictDirective, TuiComboBoxDirective],
      exports: [TuiComboBoxComponent, TuiComboBoxStrictDirective, TuiComboBoxDirective, TuiTextfieldComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-data-list-wrapper.js
var _c010 = ["labels", ""];
function TuiDataListGroupWrapperComponent_tui_data_list_0_tui_opt_group_1_button_1_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtext(1);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const text_r10 = ctx.polymorpheusOutlet;
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", text_r10, " ");
  }
}
function TuiDataListGroupWrapperComponent_tui_data_list_0_tui_opt_group_1_button_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r12 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 6, 7);
    ɵɵlistener("click", function TuiDataListGroupWrapperComponent_tui_data_list_0_tui_opt_group_1_button_1_Template_button_click_0_listener() {
      const restoredCtx = ɵɵrestoreView(_r12);
      const item_r7 = restoredCtx.$implicit;
      const ctx_r11 = ɵɵnextContext(3);
      return ɵɵresetView(ctx_r11.itemClick.emit(item_r7));
    });
    ɵɵtemplate(2, TuiDataListGroupWrapperComponent_tui_data_list_0_tui_opt_group_1_button_1_ng_container_2_Template, 2, 1, "ng-container", 8);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const item_r7 = ctx.$implicit;
    const _r8 = ɵɵreference(1);
    const ctx_r6 = ɵɵnextContext(3);
    ɵɵproperty("disabled", ctx_r6.disabledItemHandler(item_r7))("value", item_r7);
    ɵɵadvance(2);
    ɵɵproperty("polymorpheusOutlet", ctx_r6.itemContent)("polymorpheusOutletContext", ctx_r6.getContext(item_r7, _r8));
  }
}
function TuiDataListGroupWrapperComponent_tui_data_list_0_tui_opt_group_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "tui-opt-group", 4);
    ɵɵtemplate(1, TuiDataListGroupWrapperComponent_tui_data_list_0_tui_opt_group_1_button_1_Template, 3, 4, "button", 5);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const group_r4 = ctx.$implicit;
    const index_r5 = ctx.index;
    const ctx_r3 = ɵɵnextContext(2);
    ɵɵproperty("label", ctx_r3.labels[index_r5]);
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", group_r4);
  }
}
function TuiDataListGroupWrapperComponent_tui_data_list_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "tui-data-list", 2);
    ɵɵtemplate(1, TuiDataListGroupWrapperComponent_tui_data_list_0_tui_opt_group_1_Template, 2, 2, "tui-opt-group", 3);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵproperty("emptyContent", ctx_r0.emptyContent)("size", ctx_r0.size);
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r0.items);
  }
}
function TuiDataListGroupWrapperComponent_ng_template_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "tui-loader", 9);
  }
}
function TuiDataListWrapperComponent_tui_data_list_0_button_1_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtext(1);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const text_r7 = ctx.polymorpheusOutlet;
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", text_r7, " ");
  }
}
function TuiDataListWrapperComponent_tui_data_list_0_button_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r9 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 4, 5);
    ɵɵlistener("click", function TuiDataListWrapperComponent_tui_data_list_0_button_1_Template_button_click_0_listener() {
      const restoredCtx = ɵɵrestoreView(_r9);
      const item_r4 = restoredCtx.$implicit;
      const ctx_r8 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r8.itemClick.emit(item_r4));
    });
    ɵɵelementStart(2, "span", 6);
    ɵɵtemplate(3, TuiDataListWrapperComponent_tui_data_list_0_button_1_ng_container_3_Template, 2, 1, "ng-container", 7);
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    const item_r4 = ctx.$implicit;
    const _r5 = ɵɵreference(1);
    const ctx_r3 = ɵɵnextContext(2);
    ɵɵproperty("disabled", ctx_r3.disabledItemHandler(item_r4))("value", item_r4);
    ɵɵadvance(3);
    ɵɵproperty("polymorpheusOutlet", ctx_r3.itemContent)("polymorpheusOutletContext", ctx_r3.getContext(item_r4, _r5));
  }
}
function TuiDataListWrapperComponent_tui_data_list_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "tui-data-list", 2);
    ɵɵtemplate(1, TuiDataListWrapperComponent_tui_data_list_0_button_1_Template, 4, 4, "button", 3);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵproperty("emptyContent", ctx_r0.emptyContent)("size", ctx_r0.size);
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r0.items);
  }
}
function TuiDataListWrapperComponent_ng_template_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "tui-loader", 8);
  }
}
var _c15 = "[_nghost-%COMP%]{display:block}.t-content[_ngcontent-%COMP%]{flex:1}.t-loader[_ngcontent-%COMP%]{margin:.75rem 0}";
var AbstractTuiDataListWrapper = class {
  constructor(itemsHandlers, defaultSize) {
    this.itemsHandlers = itemsHandlers;
    this.defaultSize = defaultSize;
    this.optionsQuery = EMPTY_QUERY;
    this.disabledItemHandler = this.itemsHandlers.disabledItemHandler;
    this.size = this.defaultSize;
    this.itemClick = new EventEmitter();
    this.itemContent = ({
      $implicit
    }) => this.itemsHandlers.stringify($implicit);
  }
  getContext($implicit, {
    nativeElement
  }) {
    return {
      $implicit,
      active: tuiIsNativeFocused(nativeElement)
    };
  }
  getOptions(includeDisabled = false) {
    return this.optionsQuery.filter(({
      disabled
    }) => includeDisabled || !disabled).map(({
      value
    }) => value).filter(tuiIsPresent);
  }
};
AbstractTuiDataListWrapper.ɵfac = function AbstractTuiDataListWrapper_Factory(t) {
  ɵɵinvalidFactory();
};
AbstractTuiDataListWrapper.ɵdir = ɵɵdefineDirective({
  type: AbstractTuiDataListWrapper,
  viewQuery: function AbstractTuiDataListWrapper_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(TuiOptionComponent, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.optionsQuery = _t);
    }
  },
  inputs: {
    disabledItemHandler: "disabledItemHandler",
    emptyContent: "emptyContent",
    size: "size",
    itemContent: "itemContent"
  },
  outputs: {
    itemClick: "itemClick"
  }
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AbstractTuiDataListWrapper, [{
    type: Directive
  }], function() {
    return [{
      type: void 0
    }, {
      type: void 0
    }];
  }, {
    optionsQuery: [{
      type: ViewChildren,
      args: [forwardRef(() => TuiOptionComponent)]
    }],
    disabledItemHandler: [{
      type: Input
    }],
    emptyContent: [{
      type: Input
    }],
    size: [{
      type: Input
    }],
    itemClick: [{
      type: Output
    }],
    itemContent: [{
      type: Input
    }]
  });
})();
var TuiDataListGroupWrapperComponent = class extends AbstractTuiDataListWrapper {
  constructor(itemsHandlers, controller) {
    super(itemsHandlers, (controller === null || controller === void 0 ? void 0 : controller.size) || "m");
    this.items = [];
    this.labels = [];
  }
};
TuiDataListGroupWrapperComponent.ɵfac = function TuiDataListGroupWrapperComponent_Factory(t) {
  return new (t || TuiDataListGroupWrapperComponent)(ɵɵdirectiveInject(TUI_ITEMS_HANDLERS), ɵɵdirectiveInject(TuiTextfieldSizeDirective, 8));
};
TuiDataListGroupWrapperComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiDataListGroupWrapperComponent,
  selectors: [["tui-data-list-wrapper", "labels", ""]],
  inputs: {
    items: "items",
    labels: "labels"
  },
  features: [ɵɵProvidersFeature([tuiAsDataListAccessor(TuiDataListGroupWrapperComponent)]), ɵɵInheritDefinitionFeature],
  attrs: _c010,
  decls: 3,
  vars: 2,
  consts: [[3, "emptyContent", "size", 4, "ngIf", "ngIfElse"], ["loading", ""], [3, "emptyContent", "size"], [3, "label", 4, "ngFor", "ngForOf"], [3, "label"], ["automation-id", "tui-data-list-wrapper__option", "tuiElement", "", "tuiOption", "", 3, "disabled", "value", "click", 4, "ngFor", "ngForOf"], ["automation-id", "tui-data-list-wrapper__option", "tuiElement", "", "tuiOption", "", 3, "disabled", "value", "click"], ["elementRef", "elementRef"], [4, "polymorpheusOutlet", "polymorpheusOutletContext"], [1, "t-loader"]],
  template: function TuiDataListGroupWrapperComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵtemplate(0, TuiDataListGroupWrapperComponent_tui_data_list_0_Template, 2, 3, "tui-data-list", 0);
      ɵɵtemplate(1, TuiDataListGroupWrapperComponent_ng_template_1_Template, 1, 0, "ng-template", null, 1, ɵɵtemplateRefExtractor);
    }
    if (rf & 2) {
      const _r1 = ɵɵreference(2);
      ɵɵproperty("ngIf", ctx.items)("ngIfElse", _r1);
    }
  },
  dependencies: [TuiDataListComponent, TuiOptionComponent, TuiLoaderComponent, NgIf, NgForOf, TuiOptGroupDirective, TuiElementDirective, PolymorpheusOutletDirective],
  styles: ["[_nghost-%COMP%]{display:block}.t-content[_ngcontent-%COMP%]{flex:1}.t-loader[_ngcontent-%COMP%]{margin:.75rem 0}"],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiDataListGroupWrapperComponent, [{
    type: Component,
    args: [{
      selector: "tui-data-list-wrapper[labels]",
      templateUrl: "./data-list-group-wrapper.template.html",
      styleUrls: ["./data-list-wrapper.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [tuiAsDataListAccessor(TuiDataListGroupWrapperComponent)]
    }]
  }], function() {
    return [{
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_ITEMS_HANDLERS]
      }]
    }, {
      type: TuiTextfieldSizeDirective,
      decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [TuiTextfieldSizeDirective]
      }]
    }];
  }, {
    items: [{
      type: Input
    }],
    labels: [{
      type: Input
    }]
  });
})();
var TuiDataListWrapperComponent = class extends AbstractTuiDataListWrapper {
  constructor(itemsHandlers, controller) {
    super(itemsHandlers, (controller === null || controller === void 0 ? void 0 : controller.size) || "m");
    this.items = [];
  }
};
TuiDataListWrapperComponent.ɵfac = function TuiDataListWrapperComponent_Factory(t) {
  return new (t || TuiDataListWrapperComponent)(ɵɵdirectiveInject(TUI_ITEMS_HANDLERS), ɵɵdirectiveInject(TUI_TEXTFIELD_WATCHED_CONTROLLER, 8));
};
TuiDataListWrapperComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiDataListWrapperComponent,
  selectors: [["tui-data-list-wrapper", 3, "labels", ""]],
  inputs: {
    items: "items"
  },
  features: [ɵɵProvidersFeature([tuiAsDataListAccessor(TuiDataListWrapperComponent), TEXTFIELD_CONTROLLER_PROVIDER]), ɵɵInheritDefinitionFeature],
  decls: 3,
  vars: 2,
  consts: [[3, "emptyContent", "size", 4, "ngIf", "ngIfElse"], ["loading", ""], [3, "emptyContent", "size"], ["automation-id", "tui-data-list-wrapper__option", "tuiElement", "", "tuiOption", "", 3, "disabled", "value", "click", 4, "ngFor", "ngForOf"], ["automation-id", "tui-data-list-wrapper__option", "tuiElement", "", "tuiOption", "", 3, "disabled", "value", "click"], ["elementRef", "elementRef"], [1, "t-content"], [4, "polymorpheusOutlet", "polymorpheusOutletContext"], ["automation-id", "tui-data-list-wrapper__loader", 1, "t-loader"]],
  template: function TuiDataListWrapperComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵtemplate(0, TuiDataListWrapperComponent_tui_data_list_0_Template, 2, 3, "tui-data-list", 0);
      ɵɵtemplate(1, TuiDataListWrapperComponent_ng_template_1_Template, 1, 0, "ng-template", null, 1, ɵɵtemplateRefExtractor);
    }
    if (rf & 2) {
      const _r1 = ɵɵreference(2);
      ɵɵproperty("ngIf", ctx.items)("ngIfElse", _r1);
    }
  },
  dependencies: [TuiDataListComponent, TuiOptionComponent, TuiLoaderComponent, NgIf, NgForOf, TuiElementDirective, PolymorpheusOutletDirective],
  styles: [_c15],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiDataListWrapperComponent, [{
    type: Component,
    args: [{
      selector: "tui-data-list-wrapper:not([labels])",
      templateUrl: "./data-list-wrapper.template.html",
      styleUrls: ["./data-list-wrapper.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [tuiAsDataListAccessor(TuiDataListWrapperComponent), TEXTFIELD_CONTROLLER_PROVIDER]
    }]
  }], function() {
    return [{
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_ITEMS_HANDLERS]
      }]
    }, {
      type: TuiTextfieldController,
      decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [TUI_TEXTFIELD_WATCHED_CONTROLLER]
      }]
    }];
  }, {
    items: [{
      type: Input
    }]
  });
})();
var TuiDataListWrapperModule = class {
};
TuiDataListWrapperModule.ɵfac = function TuiDataListWrapperModule_Factory(t) {
  return new (t || TuiDataListWrapperModule)();
};
TuiDataListWrapperModule.ɵmod = ɵɵdefineNgModule({
  type: TuiDataListWrapperModule,
  declarations: [TuiDataListWrapperComponent, TuiDataListGroupWrapperComponent],
  imports: [CommonModule, PolymorpheusModule, TuiElementModule, TuiDataListModule, TuiLoaderModule],
  exports: [TuiDataListWrapperComponent, TuiDataListGroupWrapperComponent, TuiDataListDirective]
});
TuiDataListWrapperModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, PolymorpheusModule, TuiElementModule, TuiDataListModule, TuiLoaderModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiDataListWrapperModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, PolymorpheusModule, TuiElementModule, TuiDataListModule, TuiLoaderModule],
      declarations: [TuiDataListWrapperComponent, TuiDataListGroupWrapperComponent],
      exports: [TuiDataListWrapperComponent, TuiDataListGroupWrapperComponent, TuiDataListDirective]
    }]
  }], null, null);
})();

// node_modules/@ng-web-apis/mutation-observer/fesm2015/ng-web-apis-mutation-observer.js
var MUTATION_OBSERVER_INIT = new InjectionToken("MutationObserver config");
function booleanAttribute(element, attribute) {
  return element.getAttribute(attribute) !== null || void 0;
}
function mutationObserverInitFactory({
  nativeElement
}) {
  const attributeFilter = nativeElement.getAttribute("attributeFilter");
  return {
    attributeFilter: attributeFilter === null || attributeFilter === void 0 ? void 0 : attributeFilter.split(",").map((attr) => attr.trim()),
    attributeOldValue: booleanAttribute(nativeElement, "attributeOldValue"),
    attributes: booleanAttribute(nativeElement, "attributes"),
    characterData: booleanAttribute(nativeElement, "characterData"),
    characterDataOldValue: booleanAttribute(nativeElement, "characterDataOldValue"),
    childList: booleanAttribute(nativeElement, "childList"),
    subtree: booleanAttribute(nativeElement, "subtree")
  };
}
var SafeObserver2 = typeof MutationObserver !== `undefined` ? MutationObserver : class {
  observe() {
  }
  disconnect() {
  }
  takeRecords() {
    return [];
  }
};
var MutationObserverDirective = class extends SafeObserver2 {
  constructor({
    nativeElement
  }, config, _1, _2, _3, _4, _5, _6, _7) {
    super((records) => {
      this.waMutationObserver.emit(records);
    });
    this.waMutationObserver = new EventEmitter();
    this.observe(nativeElement, config);
  }
  ngOnDestroy() {
    this.disconnect();
  }
};
MutationObserverDirective.ɵfac = function MutationObserverDirective_Factory(t) {
  return new (t || MutationObserverDirective)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(MUTATION_OBSERVER_INIT), ɵɵinjectAttribute("attributeFilter"), ɵɵinjectAttribute("attributeOldValue"), ɵɵinjectAttribute("attributes"), ɵɵinjectAttribute("characterData"), ɵɵinjectAttribute("characterDataOldValue"), ɵɵinjectAttribute("childList"), ɵɵinjectAttribute("subtree"));
};
MutationObserverDirective.ɵdir = ɵɵdefineDirective({
  type: MutationObserverDirective,
  selectors: [["", "waMutationObserver", ""]],
  outputs: {
    waMutationObserver: "waMutationObserver"
  },
  exportAs: ["MutationObserver"],
  features: [ɵɵProvidersFeature([{
    provide: MUTATION_OBSERVER_INIT,
    deps: [ElementRef],
    useFactory: mutationObserverInitFactory
  }]), ɵɵInheritDefinitionFeature]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MutationObserverDirective, [{
    type: Directive,
    args: [{
      selector: "[waMutationObserver]",
      exportAs: "MutationObserver",
      providers: [{
        provide: MUTATION_OBSERVER_INIT,
        deps: [ElementRef],
        useFactory: mutationObserverInitFactory
      }]
    }]
  }], function() {
    return [{
      type: ElementRef,
      decorators: [{
        type: Inject,
        args: [ElementRef]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [MUTATION_OBSERVER_INIT]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Attribute,
        args: ["attributeFilter"]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Attribute,
        args: ["attributeOldValue"]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Attribute,
        args: ["attributes"]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Attribute,
        args: ["characterData"]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Attribute,
        args: ["characterDataOldValue"]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Attribute,
        args: ["childList"]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Attribute,
        args: ["subtree"]
      }]
    }];
  }, {
    waMutationObserver: [{
      type: Output
    }]
  });
})();
var MutationObserverService = class extends Observable {
  constructor({
    nativeElement
  }, config) {
    super((subscriber) => {
      const observer = new MutationObserver((records) => {
        subscriber.next(records);
      });
      observer.observe(nativeElement, config);
      return () => {
        observer.disconnect();
      };
    });
  }
};
MutationObserverService.ɵfac = function MutationObserverService_Factory(t) {
  return new (t || MutationObserverService)(ɵɵinject(ElementRef), ɵɵinject(MUTATION_OBSERVER_INIT));
};
MutationObserverService.ɵprov = ɵɵdefineInjectable({
  token: MutationObserverService,
  factory: MutationObserverService.ɵfac
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MutationObserverService, [{
    type: Injectable
  }], function() {
    return [{
      type: ElementRef,
      decorators: [{
        type: Inject,
        args: [ElementRef]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [MUTATION_OBSERVER_INIT]
      }]
    }];
  }, null);
})();
var MutationObserverModule = class {
};
MutationObserverModule.ɵfac = function MutationObserverModule_Factory(t) {
  return new (t || MutationObserverModule)();
};
MutationObserverModule.ɵmod = ɵɵdefineNgModule({
  type: MutationObserverModule,
  declarations: [MutationObserverDirective],
  exports: [MutationObserverDirective]
});
MutationObserverModule.ɵinj = ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MutationObserverModule, [{
    type: NgModule,
    args: [{
      declarations: [MutationObserverDirective],
      exports: [MutationObserverDirective]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-elastic-container.js
var _c011 = ["*"];
var TuiElasticContainerDirective = class {
  constructor(el, resize$, mutation$) {
    this.el = el;
    this.resize$ = resize$;
    this.mutation$ = mutation$;
    this.tuiElasticContainer = merge(this.resize$, this.mutation$).pipe(debounceTime(0), map(() => this.el.nativeElement.clientHeight - 1), distinctUntilChanged());
  }
};
TuiElasticContainerDirective.ɵfac = function TuiElasticContainerDirective_Factory(t) {
  return new (t || TuiElasticContainerDirective)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ResizeObserverService), ɵɵdirectiveInject(MutationObserverService));
};
TuiElasticContainerDirective.ɵdir = ɵɵdefineDirective({
  type: TuiElasticContainerDirective,
  selectors: [["", "tuiElasticContainer", ""]],
  outputs: {
    tuiElasticContainer: "tuiElasticContainer"
  },
  features: [ɵɵProvidersFeature([ResizeObserverService, MutationObserverService, {
    provide: MUTATION_OBSERVER_INIT,
    useValue: {
      childList: true,
      characterData: true,
      subtree: true
    }
  }])]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiElasticContainerDirective, [{
    type: Directive,
    args: [{
      selector: "[tuiElasticContainer]",
      providers: [ResizeObserverService, MutationObserverService, {
        provide: MUTATION_OBSERVER_INIT,
        useValue: {
          childList: true,
          characterData: true,
          subtree: true
        }
      }]
    }]
  }], function() {
    return [{
      type: ElementRef,
      decorators: [{
        type: Inject,
        args: [ElementRef]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Inject,
        args: [ResizeObserverService]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Inject,
        args: [MutationObserverService]
      }]
    }];
  }, {
    tuiElasticContainer: [{
      type: Output
    }]
  });
})();
var TuiElasticContainerComponent = class {
  constructor() {
    this.height = NaN;
    this.transitions = 0;
  }
  onAnimation(_name, count) {
    this.transitions += count;
  }
};
TuiElasticContainerComponent.ɵfac = function TuiElasticContainerComponent_Factory(t) {
  return new (t || TuiElasticContainerComponent)();
};
TuiElasticContainerComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiElasticContainerComponent,
  selectors: [["tui-elastic-container"]],
  hostVars: 4,
  hostBindings: function TuiElasticContainerComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵstyleProp("height", ctx.height, "px");
      ɵɵclassProp("_transitioning", ctx.transitions);
    }
  },
  ngContentSelectors: _c011,
  decls: 2,
  vars: 0,
  consts: [[1, "t-wrapper", 3, "transitioncancel.silent", "transitionend.silent", "transitionstart.silent", "tuiElasticContainer"]],
  template: function TuiElasticContainerComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵelementStart(0, "div", 0);
      ɵɵlistener("transitioncancel.silent", function TuiElasticContainerComponent_Template_div_transitioncancel_silent_0_listener($event) {
        return ctx.onAnimation($event.propertyName, -1);
      })("transitionend.silent", function TuiElasticContainerComponent_Template_div_transitionend_silent_0_listener($event) {
        return ctx.onAnimation($event.propertyName, -1);
      })("transitionstart.silent", function TuiElasticContainerComponent_Template_div_transitionstart_silent_0_listener($event) {
        return ctx.onAnimation($event.propertyName, 1);
      })("tuiElasticContainer", function TuiElasticContainerComponent_Template_div_tuiElasticContainer_0_listener($event) {
        return ctx.height = $event;
      });
      ɵɵprojection(1);
      ɵɵelementEnd();
    }
  },
  dependencies: [TuiElasticContainerDirective],
  styles: ["[_nghost-%COMP%]{transition-property:height;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;display:block;overflow:hidden}._transitioning[_nghost-%COMP%]{height:auto!important}.t-wrapper[_ngcontent-%COMP%]{padding-top:1px;margin-top:-1px}"],
  changeDetection: 0
});
__decorate([shouldCall((name) => name === "height")], TuiElasticContainerComponent.prototype, "onAnimation", null);
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiElasticContainerComponent, [{
    type: Component,
    args: [{
      selector: "tui-elastic-container",
      templateUrl: "./elastic-container.component.html",
      styleUrls: ["./elastic-container.component.less"],
      changeDetection: ChangeDetectionStrategy.OnPush
    }]
  }], null, {
    height: [{
      type: HostBinding,
      args: ["style.height.px"]
    }],
    transitions: [{
      type: HostBinding,
      args: ["class._transitioning"]
    }],
    onAnimation: []
  });
})();
var TuiElasticContainerModule = class {
};
TuiElasticContainerModule.ɵfac = function TuiElasticContainerModule_Factory(t) {
  return new (t || TuiElasticContainerModule)();
};
TuiElasticContainerModule.ɵmod = ɵɵdefineNgModule({
  type: TuiElasticContainerModule,
  declarations: [TuiElasticContainerComponent, TuiElasticContainerDirective],
  exports: [TuiElasticContainerComponent]
});
TuiElasticContainerModule.ɵinj = ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiElasticContainerModule, [{
    type: NgModule,
    args: [{
      declarations: [TuiElasticContainerComponent, TuiElasticContainerDirective],
      exports: [TuiElasticContainerComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-files.js
function TuiFileComponent_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0, 4);
  }
  if (rf & 2) {
    ɵɵnextContext();
    const _r3 = ɵɵreference(4);
    ɵɵproperty("ngTemplateOutlet", _r3);
  }
}
function TuiFileComponent_ng_template_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r8 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "a", 5);
    ɵɵlistener("tuiFocusVisibleChange", function TuiFileComponent_ng_template_1_Template_a_tuiFocusVisibleChange_0_listener($event) {
      ɵɵrestoreView(_r8);
      const ctx_r7 = ɵɵnextContext();
      return ɵɵresetView(ctx_r7.onFocusVisible($event));
    });
    ɵɵelementContainer(1, 4);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    const _r3 = ɵɵreference(4);
    ɵɵproperty("href", ctx_r2.src, ɵɵsanitizeUrl);
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", _r3);
  }
}
function TuiFileComponent_ng_template_3_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtext(1);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const text_r13 = ctx.polymorpheusOutlet;
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", text_r13, " ");
  }
}
function TuiFileComponent_ng_template_3_div_8_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 15);
    ɵɵtext(1);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const fileSize_r14 = ctx.ngIf;
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", fileSize_r14, " ");
  }
}
function TuiFileComponent_ng_template_3_div_10_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtext(1);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const text_r17 = ctx.polymorpheusOutlet;
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", text_r17, " ");
  }
}
function TuiFileComponent_ng_template_3_div_10_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 16);
    ɵɵtemplate(1, TuiFileComponent_ng_template_3_div_10_ng_container_1_Template, 2, 1, "ng-container", 7);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const content_r15 = ctx.ngIf;
    ɵɵadvance(1);
    ɵɵproperty("polymorpheusOutlet", content_r15);
  }
}
function TuiFileComponent_ng_template_3_ng_container_13_button_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r21 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 18);
    ɵɵlistener("click.prevent", function TuiFileComponent_ng_template_3_ng_container_13_button_1_Template_button_click_prevent_0_listener() {
      ɵɵrestoreView(_r21);
      const ctx_r20 = ɵɵnextContext(3);
      return ɵɵresetView(ctx_r20.onRemoveClick());
    });
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const texts_r19 = ctx.ngIf;
    const ctx_r18 = ɵɵnextContext(3);
    ɵɵproperty("icon", ctx_r18.icons.close)("title", texts_r19.remove);
  }
}
function TuiFileComponent_ng_template_3_ng_container_13_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, TuiFileComponent_ng_template_3_ng_container_13_button_1_Template, 1, 2, "button", 17);
    ɵɵpipe(2, "async");
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r12 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ɵɵpipeBind1(2, 1, ctx_r12.fileTexts$));
  }
}
function TuiFileComponent_ng_template_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 6);
    ɵɵtemplate(1, TuiFileComponent_ng_template_3_ng_container_1_Template, 2, 1, "ng-container", 7);
    ɵɵelementEnd();
    ɵɵelementStart(2, "div", 8)(3, "div", 9)(4, "div", 10);
    ɵɵtext(5);
    ɵɵelementEnd();
    ɵɵelementStart(6, "div", 11);
    ɵɵtext(7);
    ɵɵelementEnd();
    ɵɵtemplate(8, TuiFileComponent_ng_template_3_div_8_Template, 2, 1, "div", 12);
    ɵɵpipe(9, "async");
    ɵɵelementEnd();
    ɵɵtemplate(10, TuiFileComponent_ng_template_3_div_10_Template, 2, 1, "div", 13);
    ɵɵpipe(11, "async");
    ɵɵprojection(12);
    ɵɵelementEnd();
    ɵɵtemplate(13, TuiFileComponent_ng_template_3_ng_container_13_Template, 3, 3, "ng-container", 14);
  }
  if (rf & 2) {
    const ctx_r4 = ɵɵnextContext();
    const _r5 = ɵɵreference(6);
    ɵɵclassProp("t-preview_big", ctx_r4.isBig);
    ɵɵadvance(1);
    ɵɵproperty("polymorpheusOutlet", ctx_r4.leftContent || _r5);
    ɵɵadvance(4);
    ɵɵtextInterpolate1(" ", ctx_r4.name, " ");
    ɵɵadvance(2);
    ɵɵtextInterpolate1(" ", ctx_r4.type, " ");
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r4.showSize && ɵɵpipeBind1(9, 8, ctx_r4.fileSize$));
    ɵɵadvance(2);
    ɵɵproperty("ngIf", ɵɵpipeBind1(11, 10, ctx_r4.content$));
    ɵɵadvance(3);
    ɵɵproperty("ngIf", ctx_r4.allowDelete);
  }
}
function TuiFileComponent_ng_template_5_img_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "img", 22);
  }
  if (rf & 2) {
    const ctx_r22 = ɵɵnextContext(2);
    ɵɵproperty("src", ctx_r22.preview, ɵɵsanitizeUrl);
  }
}
function TuiFileComponent_ng_template_5_ng_template_1_tui_loader_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "tui-loader", 24);
  }
  if (rf & 2) {
    const ctx_r27 = ɵɵnextContext(3);
    ɵɵproperty("inheritColor", ctx_r27.isBig);
  }
}
function TuiFileComponent_ng_template_5_ng_template_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtemplate(0, TuiFileComponent_ng_template_5_ng_template_1_tui_loader_0_Template, 1, 1, "tui-loader", 23);
  }
  if (rf & 2) {
    ɵɵnextContext();
    const _r25 = ɵɵreference(4);
    const ctx_r24 = ɵɵnextContext();
    ɵɵproperty("ngIf", ctx_r24.isLoading)("ngIfElse", _r25);
  }
}
function TuiFileComponent_ng_template_5_ng_template_3_tui_svg_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "tui-svg", 26);
  }
  if (rf & 2) {
    const src_r29 = ctx.polymorpheusOutlet;
    const ctx_r28 = ɵɵnextContext(3);
    ɵɵclassProp("t-icon_blank", ctx_r28.isBig || ctx_r28.isDeleted)("t-icon_error", ctx_r28.isError);
    ɵɵproperty("src", src_r29);
  }
}
var _c012 = function(a0) {
  return {
    $implicit: a0
  };
};
function TuiFileComponent_ng_template_5_ng_template_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtemplate(0, TuiFileComponent_ng_template_5_ng_template_3_tui_svg_0_Template, 1, 5, "tui-svg", 25);
  }
  if (rf & 2) {
    const ctx_r26 = ɵɵnextContext(2);
    ɵɵproperty("polymorpheusOutlet", ctx_r26.icon)("polymorpheusOutletContext", ɵɵpureFunction1(2, _c012, ctx_r26.size));
  }
}
function TuiFileComponent_ng_template_5_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtemplate(0, TuiFileComponent_ng_template_5_img_0_Template, 1, 1, "img", 19);
    ɵɵtemplate(1, TuiFileComponent_ng_template_5_ng_template_1_Template, 1, 2, "ng-template", null, 20, ɵɵtemplateRefExtractor);
    ɵɵtemplate(3, TuiFileComponent_ng_template_5_ng_template_3_Template, 1, 4, "ng-template", null, 21, ɵɵtemplateRefExtractor);
  }
  if (rf & 2) {
    const _r23 = ɵɵreference(2);
    const ctx_r6 = ɵɵnextContext();
    ɵɵproperty("ngIf", ctx_r6.preview)("ngIfElse", _r23);
  }
}
var _c16 = ["*"];
function TuiFilesComponent_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function TuiFilesComponent_ng_container_4_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0, 6);
  }
  if (rf & 2) {
    const item_r4 = ɵɵnextContext().$implicit;
    ɵɵproperty("ngTemplateOutlet", item_r4);
  }
}
function TuiFilesComponent_ng_container_4_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, TuiFilesComponent_ng_container_4_ng_container_1_Template, 1, 1, "ng-container", 5);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const index_r5 = ctx.index;
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngIf", !ctx_r1.max || index_r5 < ctx_r1.max);
  }
}
function TuiFilesComponent_tui_expand_5_ng_container_2_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0, 6);
  }
  if (rf & 2) {
    const item_r9 = ɵɵnextContext().$implicit;
    ɵɵproperty("ngTemplateOutlet", item_r9);
  }
}
function TuiFilesComponent_tui_expand_5_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, TuiFilesComponent_tui_expand_5_ng_container_2_ng_container_1_Template, 1, 1, "ng-container", 5);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const index_r10 = ctx.index;
    const ctx_r8 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r8.max && index_r10 >= ctx_r8.max);
  }
}
function TuiFilesComponent_tui_expand_5_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "tui-expand", 7)(1, "div", 8);
    ɵɵtemplate(2, TuiFilesComponent_tui_expand_5_ng_container_2_Template, 2, 1, "ng-container", 2);
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵproperty("expanded", ctx_r2.expanded);
    ɵɵadvance(2);
    ɵɵproperty("ngForOf", ctx_r2.items);
  }
}
function TuiFilesComponent_button_6_Template(rf, ctx) {
  if (rf & 1) {
    const _r14 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 9);
    ɵɵlistener("click", function TuiFilesComponent_button_6_Template_button_click_0_listener() {
      ɵɵrestoreView(_r14);
      const ctx_r13 = ɵɵnextContext();
      return ɵɵresetView(ctx_r13.toggle());
    });
    ɵɵtext(1);
    ɵɵpipe(2, "async");
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r3 = ɵɵnextContext();
    ɵɵclassProp("t-button_collapsed", !ctx_r3.expanded);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ɵɵpipeBind1(2, 3, ctx_r3.expanded ? ctx_r3.hideText$ : ctx_r3.showAllText$), " ");
  }
}
var TUI_FILE_DEFAULT_OPTIONS = {
  formatSize: tuiFormatSize,
  icons: {
    normal: ({
      $implicit
    }) => $implicit === "l" ? "tuiIconFileLarge" : "tuiIconCheckCircleLarge",
    error: "tuiIconAlertCircleLarge",
    deleted: "tuiIconTrashLarge"
  }
};
var TUI_FILE_OPTIONS = tuiCreateToken(TUI_FILE_DEFAULT_OPTIONS);
var TuiFileComponent = class {
  constructor(sanitizer, icons, fileTexts$, options, units$) {
    this.sanitizer = sanitizer;
    this.icons = icons;
    this.fileTexts$ = fileTexts$;
    this.options = options;
    this.units$ = units$;
    this.file = {
      name: ""
    };
    this.state = "normal";
    this.size = "m";
    this.showDelete = true;
    this.showSize = true;
    this.removed = new EventEmitter();
    this.focused = false;
  }
  get preview() {
    return this.isBig ? this.createPreview(this.file, this.sanitizer) : "";
  }
  get isBig() {
    return this.size === "l";
  }
  get isLoading() {
    return this.state === "loading";
  }
  get isError() {
    return this.state === "error";
  }
  get isDeleted() {
    return this.state === "deleted";
  }
  get allowDelete() {
    return this.showDelete && tuiIsObserved(this.removed);
  }
  get icon() {
    return this.state === "loading" ? "" : this.options.icons[this.state];
  }
  get src() {
    return this.file.src || "";
  }
  get name() {
    return this.getName(this.file);
  }
  get type() {
    return this.getType(this.file);
  }
  get content$() {
    return this.calculateContent$(this.state, this.file, this.fileTexts$);
  }
  get fileSize$() {
    return this.calculateFileSize$(this.file, this.units$);
  }
  onRemoveClick() {
    this.removed.emit();
  }
  onFocusVisible(focusVisible) {
    this.focused = focusVisible;
  }
  calculateContent$(state, file, fileTexts$) {
    return state === "error" && !file.content ? fileTexts$.pipe(map((texts) => texts.loadingError)) : of(this.file.content || "");
  }
  calculateFileSize$(file, units$) {
    return units$.pipe(map((units) => this.options.formatSize(units, file.size)));
  }
  createPreview(file, sanitizer) {
    if (file.src) {
      return file.src;
    }
    if (file instanceof File && file.type && file.type.startsWith("image/")) {
      return sanitizer.bypassSecurityTrustUrl(URL.createObjectURL(file));
    }
    return "";
  }
  getName(file) {
    return file.name.split(".").slice(0, -1).join(".");
  }
  getType(file) {
    return `.${file.name.split(".").pop()}` || "";
  }
};
TuiFileComponent.ɵfac = function TuiFileComponent_Factory(t) {
  return new (t || TuiFileComponent)(ɵɵdirectiveInject(DomSanitizer), ɵɵdirectiveInject(TUI_COMMON_ICONS), ɵɵdirectiveInject(TUI_FILE_TEXTS), ɵɵdirectiveInject(TUI_FILE_OPTIONS), ɵɵdirectiveInject(TUI_DIGITAL_INFORMATION_UNITS));
};
TuiFileComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiFileComponent,
  selectors: [["tui-file"]],
  hostVars: 5,
  hostBindings: function TuiFileComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("data-delete", ctx.showDelete);
      ɵɵclassProp("_focused", ctx.focused)("_link", ctx.src);
    }
  },
  inputs: {
    file: "file",
    state: "state",
    size: "size",
    showDelete: "showDelete",
    showSize: "showSize",
    leftContent: "leftContent"
  },
  outputs: {
    removed: "removed"
  },
  ngContentSelectors: _c16,
  decls: 7,
  vars: 2,
  consts: [[3, "ngTemplateOutlet", 4, "ngIf", "ngIfElse"], ["withLink", ""], ["fileInfoTemplate", ""], ["defaultLeftContent", ""], [3, "ngTemplateOutlet"], ["rel", "noreferrer noopener", "target", "_blank", 1, "t-link", 3, "href", "tuiFocusVisibleChange"], [1, "t-preview"], [4, "polymorpheusOutlet"], [1, "t-wrapper"], [1, "t-text"], ["automation-id", "tui-file__name", 1, "t-name"], ["automation-id", "tui-file__type", 1, "t-type"], ["automation-id", "tui-file__size", "class", "t-size", 4, "ngIf"], ["automation-id", "tui-file__content", "class", "t-content", 4, "ngIf"], [4, "ngIf"], ["automation-id", "tui-file__size", 1, "t-size"], ["automation-id", "tui-file__content", 1, "t-content"], ["appearance", "icon", "automation-id", "tui-file__remove", "size", "xs", "tuiIconButton", "", "tuiPreventDefault", "mousedown", "type", "button", "class", "t-remove", 3, "icon", "title", "click.prevent", 4, "ngIf"], ["appearance", "icon", "automation-id", "tui-file__remove", "size", "xs", "tuiIconButton", "", "tuiPreventDefault", "mousedown", "type", "button", 1, "t-remove", 3, "icon", "title", "click.prevent"], ["alt", "file preview", "automation-id", "tui-file__preview", "class", "t-image", 3, "src", 4, "ngIf", "ngIfElse"], ["loader", ""], ["svg", ""], ["alt", "file preview", "automation-id", "tui-file__preview", 1, "t-image", 3, "src"], ["automation-id", "tui-file__loader", "class", "t-loader", 3, "inheritColor", 4, "ngIf", "ngIfElse"], ["automation-id", "tui-file__loader", 1, "t-loader", 3, "inheritColor"], ["automation-id", "tui-file__icon", "class", "t-icon", 3, "t-icon_blank", "t-icon_error", "src", 4, "polymorpheusOutlet", "polymorpheusOutletContext"], ["automation-id", "tui-file__icon", 1, "t-icon", 3, "src"]],
  template: function TuiFileComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵtemplate(0, TuiFileComponent_ng_container_0_Template, 1, 1, "ng-container", 0);
      ɵɵtemplate(1, TuiFileComponent_ng_template_1_Template, 2, 2, "ng-template", null, 1, ɵɵtemplateRefExtractor);
      ɵɵtemplate(3, TuiFileComponent_ng_template_3_Template, 14, 12, "ng-template", null, 2, ɵɵtemplateRefExtractor);
      ɵɵtemplate(5, TuiFileComponent_ng_template_5_Template, 5, 2, "ng-template", null, 3, ɵɵtemplateRefExtractor);
    }
    if (rf & 2) {
      const _r1 = ɵɵreference(2);
      ɵɵproperty("ngIf", !ctx.src)("ngIfElse", _r1);
    }
  },
  dependencies: [TuiButtonComponent, TuiLoaderComponent, TuiSvgComponent, NgIf, NgTemplateOutlet, TuiFocusVisibleDirective, PolymorpheusOutletDirective, TuiPreventDefaultDirective, AsyncPipe],
  styles: ['[_nghost-%COMP%]{position:relative;display:flex;align-items:center;font:var(--tui-font-text-m);background:var(--tui-base-01);border:1px solid var(--tui-base-03);border-radius:var(--tui-radius-m)}[data-delete=always][_nghost-%COMP%]   .t-remove[_ngcontent-%COMP%]{opacity:1}[data-mode=onDark][_nghost-%COMP%]{color:var(--tui-text-01-night)}[_nghost-%COMP%]:not(._link){padding:.5625rem 2.1875rem .5625rem .5625rem}[_nghost-%COMP%]:hover   .t-remove[_ngcontent-%COMP%]{opacity:1}._focused[_nghost-%COMP%]{border-color:var(--tui-focus);box-shadow:0 0 0 1px inset var(--tui-focus)}.t-link[_ngcontent-%COMP%]{display:flex;flex:1;padding:.5625rem 2.1875rem .5625rem .5625rem;text-decoration:none;outline:none;cursor:pointer;color:var(--tui-text-01);max-width:calc(100% - 2.75rem)}.t-link[_ngcontent-%COMP%]:hover{background-color:var(--tui-base-02)}.t-preview[_ngcontent-%COMP%]{position:relative;display:flex;align-items:center;justify-content:center;flex-shrink:0;width:1.5rem;height:1.5rem;margin-right:.75rem;border-radius:var(--tui-radius-m);overflow:hidden;color:var(--tui-base-06)}.t-preview_big[_ngcontent-%COMP%]{width:4rem;height:4rem;margin-right:1rem}.t-preview_big[_ngcontent-%COMP%]:before{position:absolute;top:0;left:0;width:100%;height:100%;content:"";background:var(--tui-base-08);opacity:.08}.t-image[_ngcontent-%COMP%]{max-width:100%;max-height:100%}.t-loader[_ngcontent-%COMP%]{position:absolute;top:0;left:0;width:100%;height:100%}.t-icon[_ngcontent-%COMP%]{position:absolute;top:0;left:0;bottom:0;right:0;color:var(--tui-success-fill);margin:auto}.t-icon_blank[_ngcontent-%COMP%]{color:var(--tui-base-06)}.t-icon_error[_ngcontent-%COMP%]{color:var(--tui-error-fill)}.t-remove[_ngcontent-%COMP%]{transition-property:opacity;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;position:absolute;top:.625rem;right:.625rem}.t-remove[_ngcontent-%COMP%]:focus{opacity:1}.t-remove[_ngcontent-%COMP%]:focus-visible{box-shadow:inset 0 0 0 2px var(--tui-focus)}@media (hover: hover) and (pointer: fine){.t-remove[_ngcontent-%COMP%]{opacity:0}}.t-wrapper[_ngcontent-%COMP%]{display:flex;flex-direction:column;justify-content:center;overflow:hidden}.t-text[_ngcontent-%COMP%]{display:flex}.t-size[_ngcontent-%COMP%]{flex-shrink:0;opacity:var(--tui-disabled-opacity);margin-left:.5rem}.t-type[_ngcontent-%COMP%]{flex-shrink:0}.t-name[_ngcontent-%COMP%]{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.t-content[_ngcontent-%COMP%]{font:var(--tui-font-text-s);color:var(--tui-error-fill)}'],
  changeDetection: 0
});
__decorate([tuiPure], TuiFileComponent.prototype, "calculateContent$", null);
__decorate([tuiPure], TuiFileComponent.prototype, "calculateFileSize$", null);
__decorate([tuiPure], TuiFileComponent.prototype, "createPreview", null);
__decorate([tuiPure], TuiFileComponent.prototype, "getName", null);
__decorate([tuiPure], TuiFileComponent.prototype, "getType", null);
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiFileComponent, [{
    type: Component,
    args: [{
      selector: "tui-file",
      templateUrl: "./file.template.html",
      styleUrls: ["./file.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush
    }]
  }], function() {
    return [{
      type: DomSanitizer,
      decorators: [{
        type: Inject,
        args: [DomSanitizer]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_COMMON_ICONS]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_FILE_TEXTS]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_FILE_OPTIONS]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_DIGITAL_INFORMATION_UNITS]
      }]
    }];
  }, {
    file: [{
      type: Input
    }],
    state: [{
      type: Input
    }],
    size: [{
      type: Input
    }],
    showDelete: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["attr.data-delete"]
    }],
    showSize: [{
      type: Input
    }],
    leftContent: [{
      type: Input
    }],
    removed: [{
      type: Output
    }],
    focused: [{
      type: HostBinding,
      args: ["class._focused"]
    }],
    src: [{
      type: HostBinding,
      args: ["class._link"]
    }],
    calculateContent$: [],
    calculateFileSize$: [],
    createPreview: [],
    getName: [],
    getType: []
  });
})();
var TuiFilesComponent = class {
  constructor(hideText$, showAllText$) {
    this.hideText$ = hideText$;
    this.showAllText$ = showAllText$;
    this.items = EMPTY_QUERY;
    this.max = 0;
    this.expanded = false;
    this.expandedChange = new EventEmitter();
  }
  get hasExtraItems() {
    return !!this.max && this.items.length > this.max;
  }
  toggle() {
    this.expanded = !this.expanded;
    this.expandedChange.emit(this.expanded);
  }
};
TuiFilesComponent.ɵfac = function TuiFilesComponent_Factory(t) {
  return new (t || TuiFilesComponent)(ɵɵdirectiveInject(TUI_HIDE_TEXT), ɵɵdirectiveInject(TUI_SHOW_ALL_TEXT));
};
TuiFilesComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiFilesComponent,
  selectors: [["tui-files"]],
  contentQueries: function TuiFilesComponent_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, TuiItemDirective, 4, TemplateRef);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.items = _t);
    }
  },
  inputs: {
    max: "max",
    expanded: "expanded"
  },
  outputs: {
    expandedChange: "expandedChange"
  },
  ngContentSelectors: _c16,
  decls: 7,
  vars: 7,
  consts: [[4, "ngIf"], ["orientation", "vertical", "tuiGroup", "", 1, "t-files", 3, "collapsed"], [4, "ngFor", "ngForOf"], [3, "expanded", 4, "ngIf"], ["appearance", "whiteblock", "size", "m", "tuiButton", "", "type", "button", "class", "t-button", 3, "t-button_collapsed", "click", 4, "ngIf"], [3, "ngTemplateOutlet", 4, "ngIf"], [3, "ngTemplateOutlet"], [3, "expanded"], [1, "t-extra-items"], ["appearance", "whiteblock", "size", "m", "tuiButton", "", "type", "button", 1, "t-button", 3, "click"]],
  template: function TuiFilesComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵtemplate(0, TuiFilesComponent_ng_container_0_Template, 1, 0, "ng-container", 0);
      ɵɵpipe(1, "async");
      ɵɵelementStart(2, "section", 1);
      ɵɵprojection(3);
      ɵɵtemplate(4, TuiFilesComponent_ng_container_4_Template, 2, 1, "ng-container", 2);
      ɵɵtemplate(5, TuiFilesComponent_tui_expand_5_Template, 3, 2, "tui-expand", 3);
      ɵɵtemplate(6, TuiFilesComponent_button_6_Template, 3, 5, "button", 4);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      ɵɵproperty("ngIf", ɵɵpipeBind1(1, 5, ctx.items == null ? null : ctx.items.changes));
      ɵɵadvance(2);
      ɵɵproperty("collapsed", true);
      ɵɵadvance(2);
      ɵɵproperty("ngForOf", ctx.items);
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.hasExtraItems);
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.hasExtraItems);
    }
  },
  dependencies: [TuiExpandComponent, TuiButtonComponent, NgIf, TuiGroupDirective, NgForOf, NgTemplateOutlet, AsyncPipe],
  styles: ["tui-files{display:block}tui-files .t-files{position:relative;display:block;width:100%;height:100%;border-radius:var(--tui-radius-m);overflow:hidden}tui-files .t-button{z-index:3;width:100%;background:var(--tui-base-01)}tui-files .t-button_collapsed{box-shadow:var(--tui-shadow-modal);margin-top:-1.5rem}tui-files .t-extra-items tui-file{border-radius:0;margin-top:0;margin-bottom:-.0625rem}\n"],
  encapsulation: 2,
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiFilesComponent, [{
    type: Component,
    args: [{
      selector: "tui-files",
      templateUrl: "./files.component.html",
      styleUrls: ["./files.component.less"],
      encapsulation: ViewEncapsulation$1.None,
      changeDetection: ChangeDetectionStrategy.OnPush
    }]
  }], function() {
    return [{
      type: Observable,
      decorators: [{
        type: Inject,
        args: [TUI_HIDE_TEXT]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Inject,
        args: [TUI_SHOW_ALL_TEXT]
      }]
    }];
  }, {
    items: [{
      type: ContentChildren,
      args: [TuiItemDirective, {
        read: TemplateRef
      }]
    }],
    max: [{
      type: Input
    }],
    expanded: [{
      type: Input
    }],
    expandedChange: [{
      type: Output
    }]
  });
})();
var TuiFilesModule = class {
};
TuiFilesModule.ɵfac = function TuiFilesModule_Factory(t) {
  return new (t || TuiFilesModule)();
};
TuiFilesModule.ɵmod = ɵɵdefineNgModule({
  type: TuiFilesModule,
  declarations: [TuiFilesComponent, TuiFileComponent],
  imports: [CommonModule, TuiGroupModule, TuiLoaderModule, PolymorpheusModule, TuiSvgModule, TuiFocusVisibleModule, TuiButtonModule, TuiItemModule, TuiExpandModule, TuiPreventDefaultModule],
  exports: [TuiFilesComponent, TuiFileComponent, TuiItemDirective]
});
TuiFilesModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, TuiGroupModule, TuiLoaderModule, PolymorpheusModule, TuiSvgModule, TuiFocusVisibleModule, TuiButtonModule, TuiItemModule, TuiExpandModule, TuiPreventDefaultModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiFilesModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, TuiGroupModule, TuiLoaderModule, PolymorpheusModule, TuiSvgModule, TuiFocusVisibleModule, TuiButtonModule, TuiItemModule, TuiExpandModule, TuiPreventDefaultModule],
      declarations: [TuiFilesComponent, TuiFileComponent],
      exports: [TuiFilesComponent, TuiFileComponent, TuiItemDirective]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-filter.js
function TuiFilterComponent_tui_checkbox_block_0_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtext(1);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const text_r4 = ctx.polymorpheusOutlet;
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", text_r4, " ");
  }
}
function TuiFilterComponent_tui_checkbox_block_0_tui_badge_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "tui-badge", 5);
  }
  if (rf & 2) {
    const badgeValue_r5 = ctx.ngIf;
    const item_r1 = ɵɵnextContext().$implicit;
    const ctx_r3 = ɵɵnextContext();
    ɵɵclassProp("t-badge_disabled", ctx_r3.disabledItemHandler(item_r1));
    ɵɵproperty("size", ctx_r3.size)("value", badgeValue_r5);
  }
}
var _c013 = function(a0) {
  return {
    $implicit: a0
  };
};
function TuiFilterComponent_tui_checkbox_block_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r8 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "tui-checkbox-block", 1);
    ɵɵlistener("ngModelChange", function TuiFilterComponent_tui_checkbox_block_0_Template_tui_checkbox_block_ngModelChange_0_listener($event) {
      const restoredCtx = ɵɵrestoreView(_r8);
      const item_r1 = restoredCtx.$implicit;
      const ctx_r7 = ɵɵnextContext();
      return ɵɵresetView(ctx_r7.onCheckbox($event, item_r1));
    });
    ɵɵelementStart(1, "div", 2);
    ɵɵtemplate(2, TuiFilterComponent_tui_checkbox_block_0_ng_container_2_Template, 2, 1, "ng-container", 3);
    ɵɵtemplate(3, TuiFilterComponent_tui_checkbox_block_0_tui_badge_3_Template, 1, 4, "tui-badge", 4);
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    const item_r1 = ctx.$implicit;
    const ctx_r0 = ɵɵnextContext();
    ɵɵproperty("disabled", ctx_r0.disabledItemHandler(item_r1))("hideCheckbox", true)("ngModel", ctx_r0.isCheckboxEnabled(item_r1))("size", ctx_r0.size);
    ɵɵadvance(2);
    ɵɵproperty("polymorpheusOutlet", ctx_r0.content)("polymorpheusOutletContext", ɵɵpureFunction1(7, _c013, item_r1));
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.badgeHandler(item_r1));
  }
}
var TuiFilterComponent = class extends AbstractTuiMultipleControl {
  constructor(control, cdr, el) {
    super(control, cdr);
    this.el = el;
    this.identityMatcher = TUI_DEFAULT_IDENTITY_MATCHER;
    this.items = [];
    this.size = "m";
    this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
    this.toggledItem = new EventEmitter();
    this.content = ({
      $implicit
    }) => TUI_DEFAULT_STRINGIFY($implicit);
    this.badgeHandler = (item) => Number(item);
  }
  get focused() {
    return tuiIsNativeFocusedIn(this.el.nativeElement);
  }
  onCheckbox(value, item) {
    this.toggledItem.emit(item);
    this.value = value ? [...this.value, item] : this.value.filter((arrItem) => !this.identityMatcher(arrItem, item));
  }
  isCheckboxEnabled(item) {
    return this.value.some((arrItem) => this.identityMatcher(arrItem, item));
  }
};
TuiFilterComponent.ɵfac = function TuiFilterComponent_Factory(t) {
  return new (t || TuiFilterComponent)(ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(ElementRef));
};
TuiFilterComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiFilterComponent,
  selectors: [["tui-filter"]],
  hostVars: 1,
  hostBindings: function TuiFilterComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("data-size", ctx.size);
    }
  },
  inputs: {
    identityMatcher: "identityMatcher",
    items: "items",
    size: "size",
    disabledItemHandler: "disabledItemHandler",
    content: "content",
    badgeHandler: "badgeHandler"
  },
  outputs: {
    toggledItem: "toggledItem"
  },
  features: [ɵɵInheritDefinitionFeature],
  decls: 1,
  vars: 1,
  consts: [["automation-id", "tui-filter__checkbox", "class", "t-item", 3, "disabled", "hideCheckbox", "ngModel", "size", "ngModelChange", 4, "ngFor", "ngForOf"], ["automation-id", "tui-filter__checkbox", 1, "t-item", 3, "disabled", "hideCheckbox", "ngModel", "size", "ngModelChange"], ["automation-id", "tui-filter__content", 1, "t-content"], [4, "polymorpheusOutlet", "polymorpheusOutletContext"], ["automation-id", "tui-filter__badge", "tuiMode", "onLight", "class", "t-badge", 3, "t-badge_disabled", "size", "value", 4, "ngIf"], ["automation-id", "tui-filter__badge", "tuiMode", "onLight", 1, "t-badge", 3, "size", "value"]],
  template: function TuiFilterComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵtemplate(0, TuiFilterComponent_tui_checkbox_block_0_Template, 4, 9, "tui-checkbox-block", 0);
    }
    if (rf & 2) {
      ɵɵproperty("ngForOf", ctx.items);
    }
  },
  dependencies: [TuiCheckboxBlockComponent, TuiBadgeComponent, NgForOf, NgControlStatus, NgModel, PolymorpheusOutletDirective, NgIf, TuiModeDirective],
  styles: ["[_nghost-%COMP%]{display:block;margin-bottom:-.25rem}.t-content[_ngcontent-%COMP%]{display:flex;align-items:center}.t-item[_ngcontent-%COMP%]{margin-right:.25rem;margin-bottom:.25rem}.t-item[_ngcontent-%COMP%]:last-child, [data-size=l][_nghost-%COMP%]   .t-item[_ngcontent-%COMP%]:last-child{margin-right:0}[data-size=l][_nghost-%COMP%]   .t-item[_ngcontent-%COMP%]{margin-right:.5rem;margin-bottom:.5rem}.t-badge[_ngcontent-%COMP%]{margin-left:.25rem}.t-badge_disabled[_ngcontent-%COMP%]{opacity:var(--tui-disabled-opacity)}"],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiFilterComponent, [{
    type: Component,
    args: [{
      selector: "tui-filter",
      templateUrl: "./filter.template.html",
      styleUrls: ["./filter.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush
    }]
  }], function() {
    return [{
      type: NgControl,
      decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NgControl]
      }]
    }, {
      type: ChangeDetectorRef,
      decorators: [{
        type: Inject,
        args: [ChangeDetectorRef]
      }]
    }, {
      type: ElementRef,
      decorators: [{
        type: Inject,
        args: [ElementRef]
      }]
    }];
  }, {
    identityMatcher: [{
      type: Input
    }],
    items: [{
      type: Input
    }],
    size: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["attr.data-size"]
    }],
    disabledItemHandler: [{
      type: Input
    }],
    toggledItem: [{
      type: Output
    }],
    content: [{
      type: Input
    }],
    badgeHandler: [{
      type: Input
    }]
  });
})();
var TuiFilterModule = class {
};
TuiFilterModule.ɵfac = function TuiFilterModule_Factory(t) {
  return new (t || TuiFilterModule)();
};
TuiFilterModule.ɵmod = ɵɵdefineNgModule({
  type: TuiFilterModule,
  declarations: [TuiFilterComponent],
  imports: [CommonModule, FormsModule, PolymorpheusModule, TuiCheckboxBlockModule, TuiBadgeModule, TuiModeModule],
  exports: [TuiFilterComponent]
});
TuiFilterModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, FormsModule, PolymorpheusModule, TuiCheckboxBlockModule, TuiBadgeModule, TuiModeModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiFilterModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, FormsModule, PolymorpheusModule, TuiCheckboxBlockModule, TuiBadgeModule, TuiModeModule],
      declarations: [TuiFilterComponent],
      exports: [TuiFilterComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-input.js
var _c014 = ["*", [["input"]]];
var _c17 = ["*", "input"];
var TuiInputComponent = class extends AbstractTuiControl {
  constructor(control, cdr, textfieldSize, valueTransformer) {
    super(control, cdr, valueTransformer);
    this.textfieldSize = textfieldSize;
    this.open = false;
  }
  get size() {
    return this.textfieldSize.size;
  }
  get nativeFocusableElement() {
    return this.computedDisabled || !this.textfield ? null : this.textfield.nativeFocusableElement;
  }
  get focused() {
    return tuiIsNativeFocused(this.nativeFocusableElement) || !!this.hostedDropdown && this.hostedDropdown.focused;
  }
  get canOpen() {
    return this.interactive && !!this.datalist;
  }
  onValueChange(value) {
    this.value = value;
    this.open = true;
  }
  onActiveZone(active) {
    this.updateFocused(active);
  }
  handleOption(item) {
    this.setNativeValue(String(item));
    this.focusInput();
    this.value = String(item);
    this.open = false;
  }
  getFallbackValue() {
    return "";
  }
  focusInput(preventScroll = false) {
    if (this.nativeFocusableElement) {
      this.nativeFocusableElement.focus({
        preventScroll
      });
    }
  }
  setNativeValue(value) {
    if (this.nativeFocusableElement) {
      this.nativeFocusableElement.value = value;
    }
  }
};
TuiInputComponent.ɵfac = function TuiInputComponent_Factory(t) {
  return new (t || TuiInputComponent)(ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(TUI_TEXTFIELD_SIZE), ɵɵdirectiveInject(AbstractTuiValueTransformer, 8));
};
TuiInputComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiInputComponent,
  selectors: [["tui-input"]],
  contentQueries: function TuiInputComponent_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, TuiDataListDirective, 5, TemplateRef);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.datalist = _t.first);
    }
  },
  viewQuery: function TuiInputComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(TuiHostedDropdownComponent, 5);
      ɵɵviewQuery(TuiPrimitiveTextfieldComponent, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.hostedDropdown = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.textfield = _t.first);
    }
  },
  hostVars: 1,
  hostBindings: function TuiInputComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("data-size", ctx.size);
    }
  },
  features: [ɵɵProvidersFeature([TUI_VALUE_ACCESSOR_PROVIDER, tuiAsFocusableItemAccessor(TuiInputComponent), tuiAsDataListHost(TuiInputComponent), tuiAsControl(TuiInputComponent)], [FIXED_DROPDOWN_CONTROLLER_PROVIDER]), ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c17,
  decls: 4,
  vars: 11,
  consts: [[1, "t-hosted", 3, "canOpen", "content", "open", "openChange", "tuiActiveZoneChange"], ["automation-id", "tui-input__textfield", 1, "t-textfield", 3, "disabled", "focusable", "invalid", "nativeId", "pseudoFocus", "pseudoHover", "readOnly", "value", "valueChange"]],
  template: function TuiInputComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c014);
      ɵɵelementStart(0, "tui-hosted-dropdown", 0);
      ɵɵlistener("openChange", function TuiInputComponent_Template_tui_hosted_dropdown_openChange_0_listener($event) {
        return ctx.open = $event;
      })("tuiActiveZoneChange", function TuiInputComponent_Template_tui_hosted_dropdown_tuiActiveZoneChange_0_listener($event) {
        return ctx.onActiveZone($event);
      });
      ɵɵelementStart(1, "tui-primitive-textfield", 1);
      ɵɵlistener("valueChange", function TuiInputComponent_Template_tui_primitive_textfield_valueChange_1_listener($event) {
        return ctx.onValueChange($event);
      });
      ɵɵprojection(2);
      ɵɵprojection(3, 1, ["ngProjectAs", "input", 5, ["input"]]);
      ɵɵelementEnd()();
    }
    if (rf & 2) {
      ɵɵproperty("canOpen", ctx.canOpen)("content", ctx.datalist || "")("open", ctx.open);
      ɵɵadvance(1);
      ɵɵproperty("disabled", ctx.computedDisabled)("focusable", ctx.computedFocusable)("invalid", ctx.computedInvalid)("nativeId", ctx.nativeId)("pseudoFocus", ctx.computedFocused)("pseudoHover", ctx.pseudoHover)("readOnly", ctx.readOnly)("value", ctx.value);
    }
  },
  dependencies: [TuiHostedDropdownComponent, TuiPrimitiveTextfieldComponent, TuiActiveZoneDirective, TuiPrimitiveTextfieldDirective],
  styles: ["[_nghost-%COMP%]{display:block;border-radius:var(--tui-radius-m);text-align:left}._disabled[_nghost-%COMP%]{pointer-events:none}.t-hosted[_ngcontent-%COMP%]{display:block;border-radius:inherit}.t-textfield[_ngcontent-%COMP%]{border-radius:inherit;text-align:inherit}"],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputComponent, [{
    type: Component,
    args: [{
      selector: "tui-input",
      templateUrl: "./input.template.html",
      styleUrls: ["./input.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [TUI_VALUE_ACCESSOR_PROVIDER, tuiAsFocusableItemAccessor(TuiInputComponent), tuiAsDataListHost(TuiInputComponent), tuiAsControl(TuiInputComponent)],
      viewProviders: [FIXED_DROPDOWN_CONTROLLER_PROVIDER]
    }]
  }], function() {
    return [{
      type: NgControl,
      decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NgControl]
      }]
    }, {
      type: ChangeDetectorRef,
      decorators: [{
        type: Inject,
        args: [ChangeDetectorRef]
      }]
    }, {
      type: TuiTextfieldSizeDirective,
      decorators: [{
        type: Inject,
        args: [TUI_TEXTFIELD_SIZE]
      }]
    }, {
      type: AbstractTuiValueTransformer,
      decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [AbstractTuiValueTransformer]
      }]
    }];
  }, {
    hostedDropdown: [{
      type: ViewChild,
      args: [TuiHostedDropdownComponent]
    }],
    textfield: [{
      type: ViewChild,
      args: [TuiPrimitiveTextfieldComponent]
    }],
    datalist: [{
      type: ContentChild,
      args: [TuiDataListDirective, {
        read: TemplateRef
      }]
    }],
    size: [{
      type: HostBinding,
      args: ["attr.data-size"]
    }]
  });
})();
var TuiInputDirective = class extends AbstractTuiTextfieldHost {
  onValueChange(value) {
    this.host.onValueChange(value);
  }
};
TuiInputDirective.ɵfac = function() {
  let ɵTuiInputDirective_BaseFactory;
  return function TuiInputDirective_Factory(t) {
    return (ɵTuiInputDirective_BaseFactory || (ɵTuiInputDirective_BaseFactory = ɵɵgetInheritedFactory(TuiInputDirective)))(t || TuiInputDirective);
  };
}();
TuiInputDirective.ɵdir = ɵɵdefineDirective({
  type: TuiInputDirective,
  selectors: [["tui-input"]],
  features: [ɵɵProvidersFeature([tuiAsTextfieldHost(TuiInputDirective)]), ɵɵInheritDefinitionFeature]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputDirective, [{
    type: Directive,
    args: [{
      selector: "tui-input",
      providers: [tuiAsTextfieldHost(TuiInputDirective)]
    }]
  }], null, null);
})();
var TuiInputModule = class {
};
TuiInputModule.ɵfac = function TuiInputModule_Factory(t) {
  return new (t || TuiInputModule)();
};
TuiInputModule.ɵmod = ɵɵdefineNgModule({
  type: TuiInputModule,
  declarations: [TuiInputComponent, TuiInputDirective],
  imports: [CommonModule, TuiActiveZoneModule, TuiPrimitiveTextfieldModule, TuiHostedDropdownModule],
  exports: [TuiInputComponent, TuiInputDirective, TuiTextfieldComponent]
});
TuiInputModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, TuiActiveZoneModule, TuiPrimitiveTextfieldModule, TuiHostedDropdownModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, TuiActiveZoneModule, TuiPrimitiveTextfieldModule, TuiHostedDropdownModule],
      declarations: [TuiInputComponent, TuiInputDirective],
      exports: [TuiInputComponent, TuiInputDirective, TuiTextfieldComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-input-copy.js
function TuiInputCopyComponent_ng_template_3_tui_svg_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r7 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "tui-svg", 4);
    ɵɵlistener("click", function TuiInputCopyComponent_ng_template_3_tui_svg_0_Template_tui_svg_click_0_listener() {
      ɵɵrestoreView(_r7);
      const ctx_r6 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r6.copy());
    });
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const src_r5 = ctx.polymorpheusOutlet;
    const ctx_r4 = ɵɵnextContext(2);
    const _r2 = ɵɵreference(6);
    ɵɵproperty("disabled", !ctx_r4.value)("src", src_r5)("tuiHint", _r2)("tuiHintAppearance", ctx_r4.messageAppearance)("tuiHintDirection", ctx_r4.messageDirection);
  }
}
var _c015 = function(a0) {
  return {
    $implicit: a0
  };
};
function TuiInputCopyComponent_ng_template_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtemplate(0, TuiInputCopyComponent_ng_template_3_tui_svg_0_Template, 1, 5, "tui-svg", 3);
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵproperty("polymorpheusOutlet", ctx_r1.icon)("polymorpheusOutletContext", ɵɵpureFunction1(2, _c015, ctx_r1.size));
  }
}
function TuiInputCopyComponent_ng_template_5_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtext(1);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const text_r9 = ctx.polymorpheusOutlet;
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", text_r9, " ");
  }
}
function TuiInputCopyComponent_ng_template_5_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtemplate(0, TuiInputCopyComponent_ng_template_5_ng_container_0_Template, 2, 1, "ng-container", 5);
    ɵɵpipe(1, "async");
  }
  if (rf & 2) {
    const ctx_r3 = ɵɵnextContext();
    ɵɵproperty("polymorpheusOutlet", ɵɵpipeBind1(1, 1, ctx_r3.hintText$));
  }
}
var _c18 = ["*", [["input"]]];
var _c24 = ["*", "input"];
var TUI_INPUT_COPY_DEFAULT_OPTIONS = {
  successMessage: "",
  messageDirection: "bottom-left",
  messageAppearance: "",
  icon: ({
    $implicit
  }) => $implicit === "s" ? "tuiIconCopy" : "tuiIconCopyLarge"
};
var TUI_INPUT_COPY_OPTIONS = tuiCreateToken(TUI_INPUT_COPY_DEFAULT_OPTIONS);
function tuiInputCopyOptionsProvider(options) {
  return tuiProvideOptions(TUI_INPUT_COPY_OPTIONS, options, TUI_INPUT_COPY_DEFAULT_OPTIONS);
}
var TuiInputCopyComponent = class extends AbstractTuiControl {
  constructor(control, cdr, doc, copyTexts$, options, textfieldSize) {
    super(control, cdr);
    this.doc = doc;
    this.copyTexts$ = copyTexts$;
    this.options = options;
    this.textfieldSize = textfieldSize;
    this.copy$ = new Subject();
    this.successMessage = this.options.successMessage;
    this.messageDirection = this.options.messageDirection;
    this.messageAppearance = this.options.messageAppearance;
  }
  get size() {
    return this.textfieldSize.size;
  }
  get hintText$() {
    return this.copyTexts$.pipe(switchMap((texts) => this.copy$.pipe(switchMap(() => merge(of(this.successMessage || texts[1]), timer(3e3).pipe(map(() => texts[0])))), startWith(texts[0]))));
  }
  get nativeFocusableElement() {
    return this.computedDisabled || !this.textfield ? null : this.textfield.nativeFocusableElement;
  }
  get focused() {
    var _a;
    return !!((_a = this.textfield) === null || _a === void 0 ? void 0 : _a.focused);
  }
  get icon() {
    return this.options.icon;
  }
  onValueChange(value) {
    this.value = value;
  }
  onFocused(focused) {
    this.updateFocused(focused);
  }
  copy() {
    var _a;
    if (!((_a = this.textfield) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement)) {
      return;
    }
    this.textfield.nativeFocusableElement.select();
    this.doc.execCommand("copy");
    this.copy$.next();
  }
  getFallbackValue() {
    return "";
  }
};
TuiInputCopyComponent.ɵfac = function TuiInputCopyComponent_Factory(t) {
  return new (t || TuiInputCopyComponent)(ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(DOCUMENT), ɵɵdirectiveInject(TUI_COPY_TEXTS), ɵɵdirectiveInject(TUI_INPUT_COPY_OPTIONS), ɵɵdirectiveInject(TUI_TEXTFIELD_SIZE));
};
TuiInputCopyComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiInputCopyComponent,
  selectors: [["tui-input-copy"]],
  viewQuery: function TuiInputCopyComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(TuiPrimitiveTextfieldComponent, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.textfield = _t.first);
    }
  },
  hostVars: 1,
  hostBindings: function TuiInputCopyComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("data-size", ctx.size);
    }
  },
  inputs: {
    successMessage: "successMessage",
    messageDirection: "messageDirection",
    messageAppearance: "messageAppearance"
  },
  features: [ɵɵProvidersFeature([TUI_VALUE_ACCESSOR_PROVIDER, tuiAsFocusableItemAccessor(TuiInputCopyComponent), tuiAsControl(TuiInputCopyComponent)]), ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c24,
  decls: 7,
  vars: 10,
  consts: [[1, "t-textfield", 3, "disabled", "focusable", "invalid", "nativeId", "pseudoActive", "pseudoFocus", "pseudoHover", "readOnly", "tuiTextfieldIcon", "value", "valueChange", "focusedChange"], ["iconContent", ""], ["hint", ""], ["appearance", "icon", "automation-id", "tui-copy__icon", "tuiWrapper", "", "class", "t-icon", 3, "disabled", "src", "tuiHint", "tuiHintAppearance", "tuiHintDirection", "click", 4, "polymorpheusOutlet", "polymorpheusOutletContext"], ["appearance", "icon", "automation-id", "tui-copy__icon", "tuiWrapper", "", 1, "t-icon", 3, "disabled", "src", "tuiHint", "tuiHintAppearance", "tuiHintDirection", "click"], [4, "polymorpheusOutlet"]],
  template: function TuiInputCopyComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c18);
      ɵɵelementStart(0, "tui-primitive-textfield", 0);
      ɵɵlistener("valueChange", function TuiInputCopyComponent_Template_tui_primitive_textfield_valueChange_0_listener($event) {
        return ctx.value = $event;
      })("focusedChange", function TuiInputCopyComponent_Template_tui_primitive_textfield_focusedChange_0_listener($event) {
        return ctx.onFocused($event);
      });
      ɵɵprojection(1);
      ɵɵprojection(2, 1, ["ngProjectAs", "input", 5, ["input"]]);
      ɵɵelementEnd();
      ɵɵtemplate(3, TuiInputCopyComponent_ng_template_3_Template, 1, 4, "ng-template", null, 1, ɵɵtemplateRefExtractor);
      ɵɵtemplate(5, TuiInputCopyComponent_ng_template_5_Template, 2, 3, "ng-template", null, 2, ɵɵtemplateRefExtractor);
    }
    if (rf & 2) {
      const _r0 = ɵɵreference(4);
      ɵɵproperty("disabled", ctx.computedDisabled)("focusable", ctx.focusable)("invalid", ctx.computedInvalid)("nativeId", ctx.nativeId)("pseudoActive", ctx.pseudoActive)("pseudoFocus", ctx.pseudoFocus)("pseudoHover", ctx.pseudoHover)("readOnly", ctx.readOnly)("tuiTextfieldIcon", !ctx.disabled ? _r0 : "")("value", ctx.value);
    }
  },
  dependencies: [TuiPrimitiveTextfieldComponent, TuiSvgComponent, TuiPrimitiveTextfieldDirective, TuiTextfieldIconDirective, PolymorpheusOutletDirective, TuiWrapperDirective, TuiHintDirective, TuiHintDriverDirective, TuiHintHoverDirective, TuiHintPositionDirective, AsyncPipe],
  styles: ["[_nghost-%COMP%]{display:block;border-radius:var(--tui-radius-m);text-align:left}.t-icon[_ngcontent-%COMP%]{position:relative;cursor:pointer;pointer-events:auto;color:var(--tui-base-06)}.t-textfield[_ngcontent-%COMP%]{border-radius:inherit;text-align:inherit}"],
  changeDetection: 0
});
__decorate([tuiPure], TuiInputCopyComponent.prototype, "hintText$", null);
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputCopyComponent, [{
    type: Component,
    args: [{
      selector: "tui-input-copy",
      templateUrl: "./input-copy.template.html",
      styleUrls: ["./input-copy.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [TUI_VALUE_ACCESSOR_PROVIDER, tuiAsFocusableItemAccessor(TuiInputCopyComponent), tuiAsControl(TuiInputCopyComponent)]
    }]
  }], function() {
    return [{
      type: NgControl,
      decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NgControl]
      }]
    }, {
      type: ChangeDetectorRef,
      decorators: [{
        type: Inject,
        args: [ChangeDetectorRef]
      }]
    }, {
      type: Document,
      decorators: [{
        type: Inject,
        args: [DOCUMENT]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Inject,
        args: [TUI_COPY_TEXTS]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_INPUT_COPY_OPTIONS]
      }]
    }, {
      type: TuiTextfieldSizeDirective,
      decorators: [{
        type: Inject,
        args: [TUI_TEXTFIELD_SIZE]
      }]
    }];
  }, {
    textfield: [{
      type: ViewChild,
      args: [TuiPrimitiveTextfieldComponent]
    }],
    successMessage: [{
      type: Input
    }],
    messageDirection: [{
      type: Input
    }],
    messageAppearance: [{
      type: Input
    }],
    size: [{
      type: HostBinding,
      args: ["attr.data-size"]
    }],
    hintText$: []
  });
})();
var TuiInputCopyDirective = class extends AbstractTuiTextfieldHost {
  onValueChange(value) {
    this.host.onValueChange(value);
  }
};
TuiInputCopyDirective.ɵfac = function() {
  let ɵTuiInputCopyDirective_BaseFactory;
  return function TuiInputCopyDirective_Factory(t) {
    return (ɵTuiInputCopyDirective_BaseFactory || (ɵTuiInputCopyDirective_BaseFactory = ɵɵgetInheritedFactory(TuiInputCopyDirective)))(t || TuiInputCopyDirective);
  };
}();
TuiInputCopyDirective.ɵdir = ɵɵdefineDirective({
  type: TuiInputCopyDirective,
  selectors: [["tui-input-copy"]],
  features: [ɵɵProvidersFeature([tuiAsTextfieldHost(TuiInputCopyDirective)]), ɵɵInheritDefinitionFeature]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputCopyDirective, [{
    type: Directive,
    args: [{
      selector: "tui-input-copy",
      providers: [tuiAsTextfieldHost(TuiInputCopyDirective)]
    }]
  }], null, null);
})();
var TuiInputCopyModule = class {
};
TuiInputCopyModule.ɵfac = function TuiInputCopyModule_Factory(t) {
  return new (t || TuiInputCopyModule)();
};
TuiInputCopyModule.ɵmod = ɵɵdefineNgModule({
  type: TuiInputCopyModule,
  declarations: [TuiInputCopyComponent, TuiInputCopyDirective],
  imports: [CommonModule, PolymorpheusModule, TuiWrapperModule, TuiSvgModule, TuiHintModule, TuiPrimitiveTextfieldModule, TuiAlertModule, TuiTextfieldControllerModule],
  exports: [TuiInputCopyComponent, TuiInputCopyDirective, TuiTextfieldComponent]
});
TuiInputCopyModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, PolymorpheusModule, TuiWrapperModule, TuiSvgModule, TuiHintModule, TuiPrimitiveTextfieldModule, TuiAlertModule, TuiTextfieldControllerModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputCopyModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, PolymorpheusModule, TuiWrapperModule, TuiSvgModule, TuiHintModule, TuiPrimitiveTextfieldModule, TuiAlertModule, TuiTextfieldControllerModule],
      declarations: [TuiInputCopyComponent, TuiInputCopyDirective],
      exports: [TuiInputCopyComponent, TuiInputCopyDirective, TuiTextfieldComponent]
    }]
  }], null, null);
})();

// node_modules/@maskito/kit/index.esm.js
var DEFAULT_DECIMAL_PSEUDO_SEPARATORS = [".", ",", "б", "ю"];
var DEFAULT_MIN_DATE = /* @__PURE__ */ new Date("0001-01-01");
var DEFAULT_MAX_DATE = /* @__PURE__ */ new Date("9999-12-31");
var DEFAULT_TIME_SEGMENT_MAX_VALUES = {
  hours: 23,
  minutes: 59,
  seconds: 59,
  milliseconds: 999
};
var CHAR_NO_BREAK_SPACE2 = " ";
var CHAR_EN_DASH2 = "–";
var CHAR_EM_DASH = "—";
var CHAR_HYPHEN2 = "-";
var CHAR_MINUS2 = "−";
var POSSIBLE_DATE_RANGE_SEPARATOR = [CHAR_HYPHEN2, CHAR_EN_DASH2, CHAR_EM_DASH, CHAR_MINUS2];
var POSSIBLE_DATE_TIME_SEPARATOR = [",", " "];
var TIME_FIXED_CHARACTERS = [":", "."];
var TIME_SEGMENT_VALUE_LENGTHS = {
  hours: 2,
  minutes: 2,
  seconds: 2,
  milliseconds: 3
};
function clamp(value, min, max) {
  const clampedValue = Math.min(Number(max), Math.max(Number(min), Number(value)));
  return value instanceof Date ? new Date(clampedValue) : clampedValue;
}
function appendDate(initialDate, {
  day,
  month,
  year
} = {}) {
  const date = new Date(initialDate);
  if (day) {
    date.setDate(date.getDate() + day);
  }
  if (month) {
    date.setMonth(date.getMonth() + month);
  }
  if (year) {
    date.setFullYear(date.getFullYear() + year);
  }
  return date;
}
var getDateSegmentValueLength = (dateString) => {
  var _a, _b, _c;
  return {
    day: ((_a = dateString.match(/d/g)) === null || _a === void 0 ? void 0 : _a.length) || 0,
    month: ((_b = dateString.match(/m/g)) === null || _b === void 0 ? void 0 : _b.length) || 0,
    year: ((_c = dateString.match(/y/g)) === null || _c === void 0 ? void 0 : _c.length) || 0
  };
};
function dateToSegments(date) {
  return {
    day: String(date.getDate()).padStart(2, "0"),
    month: String(date.getMonth() + 1).padStart(2, "0"),
    year: String(date.getFullYear()).padStart(4, "0"),
    hours: String(date.getHours()).padStart(2, "0"),
    minutes: String(date.getMinutes()).padStart(2, "0"),
    seconds: String(date.getSeconds()).padStart(2, "0"),
    milliseconds: String(date.getMilliseconds()).padStart(3, "0")
  };
}
function isDateStringComplete(dateString, dateModeTemplate) {
  if (dateString.length < dateModeTemplate.length) {
    return false;
  }
  return dateString.split(/\D/).every((segment) => !segment.match(/^0+$/));
}
function parseDateRangeString(dateRange, dateModeTemplate, rangeSeparator) {
  const digitsInDate = dateModeTemplate.replace(/\W/g, "").length;
  return dateRange.replace(rangeSeparator, "").match(new RegExp(`(\\D*\\d[^\\d\\s]*){1,${digitsInDate}}`, "g")) || [];
}
function getObjectFromEntries(keyValuePairs) {
  return keyValuePairs.reduce((obj, [key, val]) => Object.assign(Object.assign({}, obj), {
    [key]: val
  }), {});
}
function parseDateString(dateString, fullMode) {
  const cleanMode = fullMode.replace(/[^dmy]/g, "");
  const onlyDigitsDate = dateString.replace(/\D+/g, "");
  const dateSegments = {
    day: onlyDigitsDate.slice(cleanMode.indexOf("d"), cleanMode.lastIndexOf("d") + 1),
    month: onlyDigitsDate.slice(cleanMode.indexOf("m"), cleanMode.lastIndexOf("m") + 1),
    year: onlyDigitsDate.slice(cleanMode.indexOf("y"), cleanMode.lastIndexOf("y") + 1)
  };
  return getObjectFromEntries(Object.entries(dateSegments).filter(([_, value]) => Boolean(value)).sort(([a], [b]) => fullMode.toLowerCase().indexOf(a[0]) > fullMode.toLowerCase().indexOf(b[0]) ? 1 : -1));
}
function segmentsToDate(parsedDate, parsedTime) {
  var _a, _b, _c, _d, _e, _f, _g;
  const year = ((_a = parsedDate.year) === null || _a === void 0 ? void 0 : _a.length) === 2 ? `20${parsedDate.year}` : parsedDate.year;
  const date = new Date(Number(year !== null && year !== void 0 ? year : "0"), Number((_b = parsedDate.month) !== null && _b !== void 0 ? _b : "1") - 1, Number((_c = parsedDate.day) !== null && _c !== void 0 ? _c : "1"), Number((_d = parsedTime === null || parsedTime === void 0 ? void 0 : parsedTime.hours) !== null && _d !== void 0 ? _d : "0"), Number((_e = parsedTime === null || parsedTime === void 0 ? void 0 : parsedTime.minutes) !== null && _e !== void 0 ? _e : "0"), Number((_f = parsedTime === null || parsedTime === void 0 ? void 0 : parsedTime.seconds) !== null && _f !== void 0 ? _f : "0"), Number((_g = parsedTime === null || parsedTime === void 0 ? void 0 : parsedTime.milliseconds) !== null && _g !== void 0 ? _g : "0"));
  date.setFullYear(Number(year !== null && year !== void 0 ? year : "0"));
  return date;
}
var DATE_TIME_SEPARATOR2 = ", ";
function toDateString({
  day,
  month,
  year,
  hours,
  minutes,
  seconds,
  milliseconds
}, dateMode, timeMode) {
  var _a;
  const safeYear = ((_a = dateMode.match(/y/g)) === null || _a === void 0 ? void 0 : _a.length) === 2 ? year === null || year === void 0 ? void 0 : year.slice(-2) : year;
  const fullMode = dateMode + (timeMode ? DATE_TIME_SEPARATOR2 + timeMode : "");
  return fullMode.replace(/d+/g, day !== null && day !== void 0 ? day : "").replace(/m+/g, month !== null && month !== void 0 ? month : "").replace(/y+/g, safeYear !== null && safeYear !== void 0 ? safeYear : "").replace(/H+/g, hours !== null && hours !== void 0 ? hours : "").replace(/MSS/g, milliseconds !== null && milliseconds !== void 0 ? milliseconds : "").replace(/M+/g, minutes !== null && minutes !== void 0 ? minutes : "").replace(/S+/g, seconds !== null && seconds !== void 0 ? seconds : "").replace(/^\D+/g, "").replace(/\D+$/g, "");
}
function padWithZeroesUntilValid(segmentValue, paddedMaxValue, prefixedZeroesCount = 0) {
  if (Number(segmentValue.padEnd(paddedMaxValue.length, "0")) <= Number(paddedMaxValue)) {
    return {
      validatedSegmentValue: segmentValue,
      prefixedZeroesCount
    };
  }
  if (segmentValue.endsWith("0")) {
    return padWithZeroesUntilValid(`0${segmentValue.slice(0, paddedMaxValue.length - 1)}`, paddedMaxValue, prefixedZeroesCount + 1);
  }
  return padWithZeroesUntilValid(`${segmentValue.slice(0, paddedMaxValue.length - 1)}0`, paddedMaxValue, prefixedZeroesCount);
}
var dateMaxValues = {
  day: 31,
  month: 12,
  year: 9999
};
function validateDateString({
  dateString,
  dateModeTemplate,
  offset,
  selection: [from, to]
}) {
  const parsedDate = parseDateString(dateString, dateModeTemplate);
  const dateSegments = Object.entries(parsedDate);
  const validatedDateSegments = {};
  let paddedZeroes = 0;
  for (const [segmentName, segmentValue] of dateSegments) {
    const validatedDate = toDateString(validatedDateSegments, dateModeTemplate);
    const maxSegmentValue = dateMaxValues[segmentName];
    const fantomSeparator = validatedDate.length && 1;
    const lastSegmentDigitIndex = offset + validatedDate.length + fantomSeparator + getDateSegmentValueLength(dateModeTemplate)[segmentName];
    const isLastSegmentDigitAdded = lastSegmentDigitIndex >= from && lastSegmentDigitIndex === to;
    if (isLastSegmentDigitAdded && Number(segmentValue) > Number(maxSegmentValue)) {
      return {
        validatedDateString: "",
        updatedSelection: [from, to]
      };
    }
    if (isLastSegmentDigitAdded && Number(segmentValue) < 1) {
      return {
        validatedDateString: "",
        updatedSelection: [from, to]
      };
    }
    const {
      validatedSegmentValue,
      prefixedZeroesCount
    } = padWithZeroesUntilValid(segmentValue, `${maxSegmentValue}`);
    paddedZeroes += prefixedZeroesCount;
    validatedDateSegments[segmentName] = validatedSegmentValue;
  }
  const validatedDateString = toDateString(validatedDateSegments, dateModeTemplate);
  const addedDateSegmentSeparators = validatedDateString.length - dateString.length;
  return {
    validatedDateString,
    updatedSelection: [from + paddedZeroes + addedDateSegmentSeparators, to + paddedZeroes + addedDateSegmentSeparators]
  };
}
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
var reHasRegExpChar = new RegExp(reRegExpChar.source);
function escapeRegExp(str) {
  return str && reHasRegExpChar.test(str) ? str.replace(reRegExpChar, "\\$&") : str;
}
function findCommonBeginningSubstr(a, b) {
  let res = "";
  for (let i = 0; i < a.length; i++) {
    if (a[i] !== b[i]) {
      return res;
    }
    res += a[i];
  }
  return res;
}
function getFocused({
  activeElement
}) {
  if (!(activeElement === null || activeElement === void 0 ? void 0 : activeElement.shadowRoot)) {
    return activeElement;
  }
  let element = activeElement.shadowRoot.activeElement;
  while (element === null || element === void 0 ? void 0 : element.shadowRoot) {
    element = element.shadowRoot.activeElement;
  }
  return element;
}
function identity2(x) {
  return x;
}
function isEmpty(entity) {
  return !entity || typeof entity === "object" && Object.keys(entity).length === 0;
}
function raiseSegmentValueToMin(segments, fullMode) {
  const segmentsLength = getDateSegmentValueLength(fullMode);
  return getObjectFromEntries(Object.entries(segments).map(([key, value]) => {
    const segmentLength = segmentsLength[key];
    return [key, value.length === segmentLength && value.match(/^0+$/) ? "1".padStart(segmentLength, "0") : value];
  }));
}
function createMinMaxDatePostprocessor({
  dateModeTemplate,
  min = DEFAULT_MIN_DATE,
  max = DEFAULT_MAX_DATE,
  rangeSeparator = "",
  dateSegmentSeparator = "."
}) {
  return ({
    value,
    selection
  }) => {
    const endsWithRangeSeparator = rangeSeparator && value.endsWith(rangeSeparator);
    const dateStrings = parseDateRangeString(value, dateModeTemplate, rangeSeparator);
    let validatedValue = "";
    for (const dateString of dateStrings) {
      validatedValue += validatedValue ? rangeSeparator : "";
      const parsedDate = parseDateString(dateString, dateModeTemplate);
      if (!isDateStringComplete(dateString, dateModeTemplate)) {
        const fixedDate = raiseSegmentValueToMin(parsedDate, dateModeTemplate);
        const fixedValue = toDateString(fixedDate, dateModeTemplate);
        const tail = dateString.endsWith(dateSegmentSeparator) ? dateSegmentSeparator : "";
        validatedValue += fixedValue + tail;
        continue;
      }
      const date = segmentsToDate(parsedDate);
      const clampedDate = clamp(date, min, max);
      validatedValue += toDateString(dateToSegments(clampedDate), dateModeTemplate);
    }
    return {
      selection,
      value: validatedValue + (endsWithRangeSeparator ? rangeSeparator : "")
    };
  };
}
function normalizeDatePreprocessor({
  dateModeTemplate,
  dateSegmentsSeparator,
  rangeSeparator = ""
}) {
  return ({
    elementState,
    data
  }) => {
    const separator = rangeSeparator ? new RegExp(`${rangeSeparator}|-`) : DATE_TIME_SEPARATOR2;
    const possibleDates = data.split(separator);
    const dates = data.includes(DATE_TIME_SEPARATOR2) ? [possibleDates[0]] : possibleDates;
    if (dates.every((date) => date.trim().split(/\D/).length === dateModeTemplate.split(dateSegmentsSeparator).length)) {
      const newData = dates.map((date) => normalizeDateString(date, dateModeTemplate, dateSegmentsSeparator)).join(rangeSeparator);
      return {
        elementState,
        data: `${newData}${data.includes(DATE_TIME_SEPARATOR2) ? DATE_TIME_SEPARATOR2 + possibleDates[1] || "" : ""}`
      };
    }
    return {
      elementState,
      data
    };
  };
}
function normalizeDateString(dateString, template, separator) {
  const dateSegments = dateString.split(/\D/);
  const templateSegments = template.split(separator);
  const normalizedSegments = dateSegments.map((segment, index) => index === templateSegments.length - 1 ? segment : segment.padStart(templateSegments[index].length, "0"));
  return normalizedSegments.join(separator);
}
function maskitoPostfixPostprocessorGenerator(postfix) {
  const postfixRE = new RegExp(`${escapeRegExp(postfix)}$`);
  return postfix ? ({
    value,
    selection
  }, initialElementState) => {
    if (!value && !initialElementState.value.endsWith(postfix)) {
      return {
        value,
        selection
      };
    }
    if (!value.endsWith(postfix) && !initialElementState.value.endsWith(postfix)) {
      return {
        selection,
        value: value + postfix
      };
    }
    const initialValueBeforePostfix = initialElementState.value.replace(postfixRE, "");
    const postfixWasModified = initialElementState.selection[1] >= initialValueBeforePostfix.length;
    const alreadyExistedValueBeforePostfix = findCommonBeginningSubstr(initialValueBeforePostfix, value);
    return {
      selection,
      value: Array.from(postfix).reverse().reduce((newValue, char, index) => {
        const i = newValue.length - 1 - index;
        const isInitiallyMirroredChar = alreadyExistedValueBeforePostfix[i] === char && postfixWasModified;
        return newValue[i] !== char || isInitiallyMirroredChar ? newValue.slice(0, i + 1) + char + newValue.slice(i + 1) : newValue;
      }, value)
    };
  } : identity2;
}
function maskitoPrefixPostprocessorGenerator(prefix) {
  return prefix ? ({
    value,
    selection
  }, initialElementState) => {
    if (value.startsWith(prefix) || // already valid
    !value && !initialElementState.value.startsWith(prefix)) {
      return {
        value,
        selection
      };
    }
    const [from, to] = selection;
    const prefixedValue = Array.from(prefix).reduce((modifiedValue, char, i) => modifiedValue[i] === char ? modifiedValue : modifiedValue.slice(0, i) + char + modifiedValue.slice(i), value);
    const addedCharsCount = prefixedValue.length - value.length;
    return {
      selection: [from + addedCharsCount, to + addedCharsCount],
      value: prefixedValue
    };
  } : identity2;
}
function createValidDatePreprocessor({
  dateModeTemplate,
  dateSegmentsSeparator,
  rangeSeparator = ""
}) {
  return ({
    elementState,
    data
  }) => {
    const {
      value,
      selection
    } = elementState;
    if (data === dateSegmentsSeparator) {
      return {
        elementState,
        data: selection[0] === value.length ? data : ""
      };
    }
    if (POSSIBLE_DATE_RANGE_SEPARATOR.includes(data)) {
      return {
        elementState,
        data: rangeSeparator
      };
    }
    const newCharacters = data.replace(new RegExp(`[^\\d${escapeRegExp(dateSegmentsSeparator)}${rangeSeparator}]`, "g"), "");
    if (!newCharacters) {
      return {
        elementState,
        data: ""
      };
    }
    const [from, rawTo] = selection;
    let to = rawTo + data.length;
    const newPossibleValue = value.slice(0, from) + newCharacters + value.slice(to);
    const dateStrings = parseDateRangeString(newPossibleValue, dateModeTemplate, rangeSeparator);
    let validatedValue = "";
    const hasRangeSeparator = Boolean(rangeSeparator) && newPossibleValue.includes(rangeSeparator);
    for (const dateString of dateStrings) {
      const {
        validatedDateString,
        updatedSelection
      } = validateDateString({
        dateString,
        dateModeTemplate,
        offset: validatedValue ? validatedValue.length + rangeSeparator.length : 0,
        selection: [from, to]
      });
      if (dateString && !validatedDateString) {
        return {
          elementState,
          data: ""
        };
      }
      to = updatedSelection[1];
      validatedValue += hasRangeSeparator && validatedValue ? rangeSeparator + validatedDateString : validatedDateString;
    }
    const newData = validatedValue.slice(from, to);
    return {
      elementState: {
        selection,
        value: validatedValue.slice(0, from) + newData.split(dateSegmentsSeparator).map((segment) => "0".repeat(segment.length)).join(dateSegmentsSeparator) + validatedValue.slice(to)
      },
      data: newData
    };
  };
}
function maskitoEventHandler(name, handler, eventListenerOptions) {
  return (element, maskitoOptions) => {
    const listener = () => handler(element, maskitoOptions);
    element.addEventListener(name, listener, eventListenerOptions);
    return () => element.removeEventListener(name, listener, eventListenerOptions);
  };
}
function maskitoCaretGuard(guard) {
  return (element) => {
    const document2 = element.ownerDocument;
    let isPointerDown = 0;
    const onPointerDown = () => isPointerDown++;
    const onPointerUp = () => {
      isPointerDown = Math.max(--isPointerDown, 0);
    };
    const listener = () => {
      if (getFocused(document2) !== element) {
        return;
      }
      if (isPointerDown) {
        return document2.addEventListener("mouseup", listener, {
          once: true,
          passive: true
        });
      }
      const start = element.selectionStart || 0;
      const end = element.selectionEnd || 0;
      const [fromLimit, toLimit] = guard(element.value, [start, end]);
      if (fromLimit > start || toLimit < end) {
        element.setSelectionRange(clamp(start, fromLimit, toLimit), clamp(end, fromLimit, toLimit));
      }
    };
    document2.addEventListener("selectionchange", listener, {
      passive: true
    });
    element.addEventListener("mousedown", onPointerDown, {
      passive: true
    });
    document2.addEventListener("mouseup", onPointerUp, {
      passive: true
    });
    return () => {
      document2.removeEventListener("selectionchange", listener);
      document2.removeEventListener("mousedown", onPointerDown);
      document2.removeEventListener("mouseup", onPointerUp);
    };
  };
}
function createZeroPlaceholdersPreprocessor() {
  return ({
    elementState
  }, actionType) => {
    const {
      value,
      selection
    } = elementState;
    if (!value || isLastChar(value, selection)) {
      return {
        elementState
      };
    }
    const [from, to] = selection;
    const zeroes = value.slice(from, to).replace(/\d/g, "0");
    const newValue = value.slice(0, from) + zeroes + value.slice(to);
    if (actionType === "validation" || actionType === "insert" && from === to) {
      return {
        elementState: {
          selection,
          value: newValue
        }
      };
    }
    return {
      elementState: {
        selection: actionType === "deleteBackward" || actionType === "insert" ? [from, from] : [to, to],
        value: newValue
      }
    };
  };
}
function isLastChar(value, [_, to]) {
  return to === value.length;
}
function maskitoDateOptionsGenerator({
  mode,
  separator = ".",
  max,
  min
}) {
  const dateModeTemplate = mode.split("/").join(separator);
  return Object.assign(Object.assign({}, MASKITO_DEFAULT_OPTIONS), {
    mask: Array.from(dateModeTemplate).map((char) => char === separator ? char : /\d/),
    overwriteMode: "replace",
    preprocessors: [createZeroPlaceholdersPreprocessor(), normalizeDatePreprocessor({
      dateModeTemplate,
      dateSegmentsSeparator: separator
    }), createValidDatePreprocessor({
      dateModeTemplate,
      dateSegmentsSeparator: separator
    })],
    postprocessors: [createMinMaxDatePostprocessor({
      min,
      max,
      dateModeTemplate,
      dateSegmentSeparator: separator
    })]
  });
}
function createMinMaxRangeLengthPostprocessor({
  dateModeTemplate,
  rangeSeparator,
  minLength,
  maxLength,
  max = DEFAULT_MAX_DATE
}) {
  if (isEmpty(minLength) && isEmpty(maxLength)) {
    return identity2;
  }
  return ({
    value,
    selection
  }) => {
    const dateStrings = parseDateRangeString(value, dateModeTemplate, rangeSeparator);
    if (dateStrings.length !== 2 || dateStrings.some((date) => !isDateStringComplete(date, dateModeTemplate))) {
      return {
        value,
        selection
      };
    }
    const [fromDate, toDate] = dateStrings.map((dateString) => segmentsToDate(parseDateString(dateString, dateModeTemplate)));
    const minDistantToDate = appendDate(fromDate, Object.assign(Object.assign({}, minLength), {
      // 06.02.2023 - 07.02.2023 => {minLength: {day: 3}} => 06.02.2023 - 08.02.2023
      // "from"-day is included in the range
      day: (minLength === null || minLength === void 0 ? void 0 : minLength.day) && minLength.day - 1
    }));
    const maxDistantToDate = !isEmpty(maxLength) ? appendDate(fromDate, Object.assign(Object.assign({}, maxLength), {
      day: (maxLength === null || maxLength === void 0 ? void 0 : maxLength.day) && maxLength.day - 1
    })) : max;
    const minLengthClampedToDate = clamp(toDate, minDistantToDate, max);
    const minMaxLengthClampedToDate = minLengthClampedToDate > maxDistantToDate ? maxDistantToDate : minLengthClampedToDate;
    return {
      selection,
      value: dateStrings[0] + rangeSeparator + toDateString(dateToSegments(minMaxLengthClampedToDate), dateModeTemplate)
    };
  };
}
function createSwapDatesPostprocessor({
  dateModeTemplate,
  rangeSeparator
}) {
  return ({
    value,
    selection
  }) => {
    const dateStrings = parseDateRangeString(value, dateModeTemplate, rangeSeparator);
    const isDateRangeComplete = dateStrings.length === 2 && dateStrings.every((date) => isDateStringComplete(date, dateModeTemplate));
    const [from, to] = selection;
    const caretAtTheEnd = from >= value.length;
    const allValueSelected = from === 0 && to >= value.length;
    if (!(caretAtTheEnd || allValueSelected) || !isDateRangeComplete) {
      return {
        value,
        selection
      };
    }
    const [fromDate, toDate] = dateStrings.map((dateString) => segmentsToDate(parseDateString(dateString, dateModeTemplate)));
    return {
      selection,
      value: fromDate > toDate ? dateStrings.reverse().join(rangeSeparator) : value
    };
  };
}
function maskitoDateRangeOptionsGenerator({
  mode,
  separator = ".",
  min,
  max,
  minLength,
  maxLength,
  dateSeparator = separator,
  rangeSeparator = `${CHAR_NO_BREAK_SPACE2}${CHAR_EN_DASH2}${CHAR_NO_BREAK_SPACE2}`
}) {
  const dateModeTemplate = mode.split("/").join(dateSeparator);
  const dateMask = Array.from(dateModeTemplate).map((char) => char === dateSeparator ? char : /\d/);
  return Object.assign(Object.assign({}, MASKITO_DEFAULT_OPTIONS), {
    mask: [...dateMask, ...Array.from(rangeSeparator), ...dateMask],
    overwriteMode: "replace",
    preprocessors: [createZeroPlaceholdersPreprocessor(), normalizeDatePreprocessor({
      dateModeTemplate,
      rangeSeparator,
      dateSegmentsSeparator: dateSeparator
    }), createValidDatePreprocessor({
      dateModeTemplate,
      rangeSeparator,
      dateSegmentsSeparator: dateSeparator
    })],
    postprocessors: [createMinMaxDatePostprocessor({
      min,
      max,
      dateModeTemplate,
      rangeSeparator,
      dateSegmentSeparator: dateSeparator
    }), createMinMaxRangeLengthPostprocessor({
      dateModeTemplate,
      minLength,
      maxLength,
      max,
      rangeSeparator
    }), createSwapDatesPostprocessor({
      dateModeTemplate,
      rangeSeparator
    })]
  });
}
function padTimeSegments(timeSegments) {
  return getObjectFromEntries(Object.entries(timeSegments).map(([segmentName, segmentValue]) => [segmentName, `${segmentValue}`.padEnd(TIME_SEGMENT_VALUE_LENGTHS[segmentName], "0")]));
}
function parseTimeString(timeString) {
  const onlyDigits = timeString.replace(/\D+/g, "");
  const timeSegments = {
    hours: onlyDigits.slice(0, 2),
    minutes: onlyDigits.slice(2, 4),
    seconds: onlyDigits.slice(4, 6),
    milliseconds: onlyDigits.slice(6, 9)
  };
  return getObjectFromEntries(Object.entries(timeSegments).filter(([_, value]) => Boolean(value)));
}
function toTimeString({
  hours = "",
  minutes = "",
  seconds = "",
  milliseconds = ""
}) {
  const mm = minutes && `:${minutes}`;
  const ss = seconds && `:${seconds}`;
  const ms = milliseconds && `.${milliseconds}`;
  return `${hours}${mm}${ss}${ms}`;
}
var TRAILING_TIME_SEGMENT_SEPARATOR_REG = new RegExp(`[${TIME_FIXED_CHARACTERS.map(escapeRegExp).join("")}]$`);
function validateTimeString({
  timeString,
  paddedMaxValues,
  offset,
  selection: [from, to]
}) {
  const parsedTime = parseTimeString(timeString);
  const possibleTimeSegments = Object.entries(parsedTime);
  const validatedTimeSegments = {};
  let paddedZeroes = 0;
  for (const [segmentName, segmentValue] of possibleTimeSegments) {
    const validatedTime = toTimeString(validatedTimeSegments);
    const maxSegmentValue = paddedMaxValues[segmentName];
    const fantomSeparator = validatedTime.length && 1;
    const lastSegmentDigitIndex = offset + validatedTime.length + fantomSeparator + TIME_SEGMENT_VALUE_LENGTHS[segmentName];
    const isLastSegmentDigitAdded = lastSegmentDigitIndex >= from && lastSegmentDigitIndex <= to;
    if (isLastSegmentDigitAdded && Number(segmentValue) > Number(maxSegmentValue)) {
      return {
        validatedTimeString: "",
        updatedTimeSelection: [from, to]
      };
    }
    const {
      validatedSegmentValue,
      prefixedZeroesCount
    } = padWithZeroesUntilValid(segmentValue, `${maxSegmentValue}`);
    paddedZeroes += prefixedZeroesCount;
    validatedTimeSegments[segmentName] = validatedSegmentValue;
  }
  const [trailingSegmentSeparator = ""] = timeString.match(TRAILING_TIME_SEGMENT_SEPARATOR_REG) || [];
  const validatedTimeString = toTimeString(validatedTimeSegments) + trailingSegmentSeparator;
  const addedDateSegmentSeparators = Math.max(validatedTimeString.length - timeString.length, 0);
  return {
    validatedTimeString,
    updatedTimeSelection: [from + paddedZeroes + addedDateSegmentSeparators, to + paddedZeroes + addedDateSegmentSeparators]
  };
}
function isDateTimeStringComplete(dateTimeString, dateMode, timeMode) {
  return dateTimeString.length >= dateMode.length + timeMode.length + DATE_TIME_SEPARATOR2.length && dateTimeString.split(DATE_TIME_SEPARATOR2)[0].split(/\D/).every((segment) => !segment.match(/^0+$/));
}
function parseDateTimeString(dateTime, dateModeTemplate) {
  const hasSeparator = dateTime.includes(DATE_TIME_SEPARATOR2);
  return [dateTime.slice(0, dateModeTemplate.length), dateTime.slice(hasSeparator ? dateModeTemplate.length + DATE_TIME_SEPARATOR2.length : dateModeTemplate.length)];
}
function createMinMaxDateTimePostprocessor({
  dateModeTemplate,
  timeMode,
  min = DEFAULT_MIN_DATE,
  max = DEFAULT_MAX_DATE
}) {
  return ({
    value,
    selection
  }) => {
    const [dateString, timeString] = parseDateTimeString(value, dateModeTemplate);
    const parsedDate = parseDateString(dateString, dateModeTemplate);
    const parsedTime = parseTimeString(timeString);
    if (!isDateTimeStringComplete(value, dateModeTemplate, timeMode)) {
      const fixedDate = raiseSegmentValueToMin(parsedDate, dateModeTemplate);
      const {
        year,
        month,
        day
      } = isDateStringComplete(dateString, dateModeTemplate) ? dateToSegments(clamp(segmentsToDate(fixedDate), min, max)) : fixedDate;
      const fixedValue = toDateString(Object.assign({
        year,
        month,
        day
      }, parsedTime), dateModeTemplate, timeMode);
      const tail = value.slice(fixedValue.length);
      return {
        selection,
        value: fixedValue + tail
      };
    }
    const date = segmentsToDate(parsedDate, parsedTime);
    const clampedDate = clamp(date, min, max);
    const validatedValue = toDateString(dateToSegments(clampedDate), dateModeTemplate, timeMode);
    return {
      selection,
      value: validatedValue
    };
  };
}
function createValidDateTimePreprocessor({
  dateModeTemplate,
  dateSegmentsSeparator
}) {
  const invalidCharsRegExp = new RegExp(`[^\\d${TIME_FIXED_CHARACTERS.map(escapeRegExp).join("")}${escapeRegExp(dateSegmentsSeparator)}]+`);
  return ({
    elementState,
    data
  }) => {
    const {
      value,
      selection
    } = elementState;
    if (data === dateSegmentsSeparator) {
      return {
        elementState,
        data: selection[0] === value.length ? data : ""
      };
    }
    if (POSSIBLE_DATE_TIME_SEPARATOR.includes(data)) {
      return {
        elementState,
        data: DATE_TIME_SEPARATOR2
      };
    }
    const newCharacters = data.replace(invalidCharsRegExp, "");
    if (!newCharacters) {
      return {
        elementState,
        data: ""
      };
    }
    const [from, rawTo] = selection;
    let to = rawTo + data.length;
    const newPossibleValue = value.slice(0, from) + newCharacters + value.slice(to);
    const [dateString, timeString] = parseDateTimeString(newPossibleValue, dateModeTemplate);
    let validatedValue = "";
    const hasDateTimeSeparator = newPossibleValue.includes(DATE_TIME_SEPARATOR2);
    const {
      validatedDateString,
      updatedSelection
    } = validateDateString({
      dateString,
      dateModeTemplate,
      offset: 0,
      selection: [from, to]
    });
    if (dateString && !validatedDateString) {
      return {
        elementState,
        data: ""
      };
    }
    to = updatedSelection[1];
    validatedValue += validatedDateString;
    const paddedMaxValues = padTimeSegments(DEFAULT_TIME_SEGMENT_MAX_VALUES);
    const {
      validatedTimeString,
      updatedTimeSelection
    } = validateTimeString({
      timeString,
      paddedMaxValues,
      offset: validatedValue.length + DATE_TIME_SEPARATOR2.length,
      selection: [from, to]
    });
    if (timeString && !validatedTimeString) {
      return {
        elementState,
        data: ""
      };
    }
    to = updatedTimeSelection[1];
    validatedValue += hasDateTimeSeparator ? DATE_TIME_SEPARATOR2 + validatedTimeString : validatedTimeString;
    const newData = validatedValue.slice(from, to);
    return {
      elementState: {
        selection,
        value: validatedValue.slice(0, from) + newData.split(dateSegmentsSeparator).map((segment) => "0".repeat(segment.length)).join(dateSegmentsSeparator) + validatedValue.slice(to)
      },
      data: newData
    };
  };
}
function maskitoDateTimeOptionsGenerator({
  dateMode,
  timeMode,
  dateSeparator = ".",
  min,
  max
}) {
  const dateModeTemplate = dateMode.split("/").join(dateSeparator);
  return Object.assign(Object.assign({}, MASKITO_DEFAULT_OPTIONS), {
    mask: [...Array.from(dateModeTemplate).map((char) => char === dateSeparator ? char : /\d/), ...DATE_TIME_SEPARATOR2.split(""), ...Array.from(timeMode).map((char) => TIME_FIXED_CHARACTERS.includes(char) ? char : /\d/)],
    overwriteMode: "replace",
    preprocessors: [createZeroPlaceholdersPreprocessor(), normalizeDatePreprocessor({
      dateModeTemplate,
      dateSegmentsSeparator: dateSeparator
    }), createValidDateTimePreprocessor({
      dateModeTemplate,
      dateSegmentsSeparator: dateSeparator
    })],
    postprocessors: [createMinMaxDateTimePostprocessor({
      min,
      max,
      dateModeTemplate,
      timeMode
    })]
  });
}
function generateMaskExpression({
  decimalSeparator,
  isNegativeAllowed,
  precision,
  thousandSeparator,
  prefix,
  postfix,
  decimalPseudoSeparators = [],
  pseudoMinuses = []
}) {
  const computedPrefix = computeAllOptionalCharsRegExp(prefix);
  const digit = "\\d";
  const optionalMinus = isNegativeAllowed ? `[${CHAR_MINUS2}${pseudoMinuses.map((x) => `\\${x}`).join("")}]?` : "";
  const integerPart = thousandSeparator ? `[${digit}${escapeRegExp(thousandSeparator).replace(/\s/g, "\\s")}]*` : `[${digit}]*`;
  const decimalPart = precision > 0 ? `([${escapeRegExp(decimalSeparator)}${decimalPseudoSeparators.map(escapeRegExp).join("")}]${digit}{0,${Number.isFinite(precision) ? precision : ""}})?` : "";
  const computedPostfix = computeAllOptionalCharsRegExp(postfix);
  return new RegExp(`^${computedPrefix}${optionalMinus}${integerPart}${decimalPart}${computedPostfix}$`);
}
function computeAllOptionalCharsRegExp(str) {
  return str ? `${str.split("").map((char) => `${escapeRegExp(char)}?`).join("")}` : "";
}
function maskitoParseNumber(maskedNumber, decimalSeparator = ".") {
  const hasNegativeSign = !!maskedNumber.match(new RegExp(`^\\D*[${CHAR_MINUS2}\\${CHAR_HYPHEN2}${CHAR_EN_DASH2}${CHAR_EM_DASH}]`));
  const unmaskedNumber = maskedNumber.replace(new RegExp(`[^\\d${escapeRegExp(decimalSeparator)}]`, "g"), "").replace(decimalSeparator, ".");
  return unmaskedNumber ? Number((hasNegativeSign ? CHAR_HYPHEN2 : "") + unmaskedNumber) : NaN;
}
function stringifyNumberWithoutExp(value) {
  const valueAsString = String(value);
  const [numberPart, expPart] = valueAsString.split("e-");
  let valueWithoutExp = valueAsString;
  if (expPart) {
    const [, fractionalPart] = numberPart.split(".");
    const decimalDigits = Number(expPart) + ((fractionalPart === null || fractionalPart === void 0 ? void 0 : fractionalPart.length) || 0);
    valueWithoutExp = value.toFixed(decimalDigits);
  }
  return valueWithoutExp;
}
function validateDecimalPseudoSeparators({
  decimalSeparator,
  thousandSeparator,
  decimalPseudoSeparators = DEFAULT_DECIMAL_PSEUDO_SEPARATORS
}) {
  return decimalPseudoSeparators.filter((char) => char !== thousandSeparator && char !== decimalSeparator);
}
function createDecimalZeroPaddingPostprocessor({
  decimalSeparator,
  precision,
  decimalZeroPadding,
  postfix
}) {
  if (precision <= 0 || !decimalZeroPadding) {
    return identity2;
  }
  const trailingPostfixRegExp = new RegExp(`${escapeRegExp(postfix)}$`);
  return ({
    value,
    selection
  }) => {
    if (Number.isNaN(maskitoParseNumber(value, decimalSeparator))) {
      return {
        value,
        selection
      };
    }
    const [integerPart, decimalPart = ""] = value.replace(trailingPostfixRegExp, "").split(decimalSeparator);
    return {
      value: integerPart + decimalSeparator + decimalPart.padEnd(precision, "0") + postfix,
      selection
    };
  };
}
function createInitializationOnlyPreprocessor({
  decimalSeparator,
  decimalPseudoSeparators,
  pseudoMinuses
}) {
  let isInitializationPhase = true;
  const cleanNumberMask = generateMaskExpression({
    decimalSeparator,
    decimalPseudoSeparators,
    pseudoMinuses,
    prefix: "",
    postfix: "",
    thousandSeparator: "",
    precision: Infinity,
    isNegativeAllowed: true
  });
  return ({
    elementState,
    data
  }) => {
    if (!isInitializationPhase) {
      return {
        elementState,
        data
      };
    }
    isInitializationPhase = false;
    return {
      elementState: maskitoTransform(elementState, {
        mask: cleanNumberMask
      }),
      data
    };
  };
}
function createLeadingZeroesValidationPostprocessor(decimalSeparator, thousandSeparator) {
  const trimLeadingZeroes = (value) => {
    const escapedThousandSeparator = escapeRegExp(thousandSeparator);
    return value.replace(
      // all leading zeroes followed by another zero
      new RegExp(`^(\\D+)?[0${escapedThousandSeparator}]+(?=0)`),
      "$1"
    ).replace(
      // zero followed by not-zero digit
      new RegExp(`^(\\D+)?[0${escapedThousandSeparator}]+(?=[1-9])`),
      "$1"
    );
  };
  const countTrimmedZeroesBefore = (value, index) => {
    const valueBefore = value.slice(0, index);
    const followedByZero = value.slice(index).startsWith("0");
    return valueBefore.length - trimLeadingZeroes(valueBefore).length + (followedByZero ? 1 : 0);
  };
  return ({
    value,
    selection
  }) => {
    const [from, to] = selection;
    const hasDecimalSeparator = value.includes(decimalSeparator);
    const [integerPart, decimalPart = ""] = value.split(decimalSeparator);
    const zeroTrimmedIntegerPart = trimLeadingZeroes(integerPart);
    if (integerPart === zeroTrimmedIntegerPart) {
      return {
        value,
        selection
      };
    }
    const newFrom = from - countTrimmedZeroesBefore(value, from);
    const newTo = to - countTrimmedZeroesBefore(value, to);
    return {
      value: zeroTrimmedIntegerPart + (hasDecimalSeparator ? decimalSeparator : "") + decimalPart,
      selection: [Math.max(newFrom, 0), Math.max(newTo, 0)]
    };
  };
}
function createMinMaxPostprocessor({
  min,
  max,
  decimalSeparator
}) {
  return ({
    value,
    selection
  }) => {
    const parsedNumber = maskitoParseNumber(value, decimalSeparator);
    const limitedValue = (
      /**
       * We cannot limit lower bound if user enters positive number.
       * The same for upper bound and negative number.
       * ___
       * @example (min = 5)
       * Empty input => Without this condition user cannot type 42 (the first digit will be rejected)
       * ___
       * @example (max = -10)
       * Value is -10 => Without this condition user cannot delete 0 to enter another digit
       */
      parsedNumber > 0 ? Math.min(parsedNumber, max) : Math.max(parsedNumber, min)
    );
    if (!Number.isNaN(parsedNumber) && limitedValue !== parsedNumber) {
      const newValue = `${limitedValue}`.replace(".", decimalSeparator).replace(CHAR_HYPHEN2, CHAR_MINUS2);
      return {
        value: newValue,
        selection: [newValue.length, newValue.length]
      };
    }
    return {
      value,
      selection
    };
  };
}
function createNonRemovableCharsDeletionPreprocessor({
  decimalSeparator,
  thousandSeparator,
  decimalZeroPadding
}) {
  return ({
    elementState,
    data
  }, actionType) => {
    const {
      value,
      selection
    } = elementState;
    const [from, to] = selection;
    const selectedCharacters = value.slice(from, to);
    const nonRemovableSeparators = decimalZeroPadding ? [decimalSeparator, thousandSeparator] : [thousandSeparator];
    const areNonRemovableZeroesSelected = decimalZeroPadding && from > value.indexOf(decimalSeparator) && Boolean(selectedCharacters.match(/^0+$/gi));
    if (actionType !== "deleteBackward" && actionType !== "deleteForward" || !nonRemovableSeparators.includes(selectedCharacters) && !areNonRemovableZeroesSelected) {
      return {
        elementState,
        data
      };
    }
    return {
      elementState: {
        value,
        selection: actionType === "deleteForward" ? [to, to] : [from, from]
      },
      data
    };
  };
}
function createNotEmptyIntegerPartPreprocessor({
  decimalSeparator,
  precision
}) {
  const startWithDecimalSepRegExp = new RegExp(`^\\D*${escapeRegExp(decimalSeparator)}`);
  return ({
    elementState,
    data
  }) => {
    const {
      value,
      selection
    } = elementState;
    const [from] = selection;
    if (precision <= 0 || value.includes(decimalSeparator) || !data.match(startWithDecimalSepRegExp)) {
      return {
        elementState,
        data
      };
    }
    const digitsBeforeCursor = value.slice(0, from).match(/\d+/);
    return {
      elementState,
      data: digitsBeforeCursor ? data : `0${data}`
    };
  };
}
function createPseudoCharactersPreprocessor(validCharacter, pseudoCharacters) {
  const pseudoCharactersRegExp = new RegExp(`[${pseudoCharacters.join("")}]`, "gi");
  return ({
    elementState,
    data
  }) => {
    const {
      value,
      selection
    } = elementState;
    return {
      elementState: {
        selection,
        value: value.replace(pseudoCharactersRegExp, validCharacter)
      },
      data: data.replace(pseudoCharactersRegExp, validCharacter)
    };
  };
}
function createRepeatedDecimalSeparatorPreprocessor(decimalSeparator) {
  return ({
    elementState,
    data
  }) => {
    const {
      value,
      selection
    } = elementState;
    const [from, to] = selection;
    return {
      elementState,
      data: !value.includes(decimalSeparator) || value.slice(from, to + 1).includes(decimalSeparator) ? data : data.replace(new RegExp(escapeRegExp(decimalSeparator), "gi"), "")
    };
  };
}
function createThousandSeparatorPostprocessor({
  thousandSeparator,
  decimalSeparator,
  prefix,
  postfix
}) {
  if (!thousandSeparator) {
    return identity2;
  }
  const prefixReg = new RegExp(`^${escapeRegExp(prefix)}${CHAR_MINUS2}?`);
  const postfixReg = new RegExp(`${escapeRegExp(postfix)}$`);
  const isAllSpaces = (...chars) => chars.every((x) => /\s/.test(x));
  return ({
    value,
    selection
  }) => {
    const [integerPart, decimalPart = ""] = value.split(decimalSeparator);
    const [initialFrom, initialTo] = selection;
    let [from, to] = selection;
    const cleanIntegerPart = integerPart.replace(prefixReg, "").replace(postfixReg, "");
    const [integerPartPrefix = ""] = integerPart.match(prefixReg) || [];
    const [integerPartPostfix = ""] = integerPart.match(postfixReg) || [];
    const processedIntegerPart = Array.from(cleanIntegerPart).reduceRight((formattedValuePart, char, i) => {
      const isLeadingThousandSeparator = !i && char === thousandSeparator;
      const isPositionForSeparator = !isLeadingThousandSeparator && formattedValuePart.length && (formattedValuePart.length + 1) % 4 === 0;
      if (isPositionForSeparator && (char === thousandSeparator || isAllSpaces(char, thousandSeparator))) {
        return thousandSeparator + formattedValuePart;
      }
      if (char === thousandSeparator && !isPositionForSeparator) {
        if (i && i <= initialFrom) {
          from--;
        }
        if (i && i <= initialTo) {
          to--;
        }
        return formattedValuePart;
      }
      if (!isPositionForSeparator) {
        return char + formattedValuePart;
      }
      if (i <= initialFrom) {
        from++;
      }
      if (i <= initialTo) {
        to++;
      }
      return char + thousandSeparator + formattedValuePart;
    }, "");
    return {
      value: integerPartPrefix + processedIntegerPart + integerPartPostfix + (value.includes(decimalSeparator) ? decimalSeparator : "") + decimalPart,
      selection: [from, to]
    };
  };
}
function createZeroPrecisionPreprocessor(precision, decimalSeparator) {
  if (precision > 0) {
    return identity2;
  }
  const decimalPartRegExp = new RegExp(`${escapeRegExp(decimalSeparator)}.*$`, "g");
  return ({
    elementState,
    data
  }) => {
    const {
      value,
      selection
    } = elementState;
    const [from, to] = selection;
    const newValue = value.replace(decimalPartRegExp, "");
    return {
      elementState: {
        selection: [Math.min(from, newValue.length), Math.min(to, newValue.length)],
        value: newValue
      },
      data: data.replace(decimalPartRegExp, "")
    };
  };
}
var DUMMY_SELECTION = [0, 0];
function createLeadingZeroesValidationPlugin(decimalSeparator, thousandSeparator) {
  const dropRepeatedLeadingZeroes = createLeadingZeroesValidationPostprocessor(decimalSeparator, thousandSeparator);
  return maskitoEventHandler("blur", (element) => {
    const newValue = dropRepeatedLeadingZeroes({
      value: element.value,
      selection: DUMMY_SELECTION
    }, {
      value: "",
      selection: DUMMY_SELECTION
    }).value;
    if (element.value !== newValue) {
      element.value = newValue;
      element.dispatchEvent(new Event("input"));
    }
  }, {
    capture: true
  });
}
function createMinMaxPlugin({
  min,
  max,
  decimalSeparator
}) {
  return maskitoEventHandler("blur", (element, options) => {
    const parsedNumber = maskitoParseNumber(element.value, decimalSeparator);
    const clampedNumber = clamp(parsedNumber, min, max);
    if (!Number.isNaN(parsedNumber) && parsedNumber !== clampedNumber) {
      element.value = maskitoTransform(stringifyNumberWithoutExp(clampedNumber), options);
      element.dispatchEvent(new Event("input"));
    }
  }, {
    capture: true
  });
}
function createNotEmptyIntegerPlugin(decimalSeparator) {
  return maskitoEventHandler("blur", (element) => {
    const newValue = element.value.replace(new RegExp(`^(\\D+)?${escapeRegExp(decimalSeparator)}`), `$10${decimalSeparator}`);
    if (newValue !== element.value) {
      element.value = newValue;
      element.dispatchEvent(new Event("input"));
    }
  }, {
    capture: true
  });
}
function maskitoNumberOptionsGenerator({
  max = Number.MAX_SAFE_INTEGER,
  min = Number.MIN_SAFE_INTEGER,
  precision = 0,
  thousandSeparator = CHAR_NO_BREAK_SPACE2,
  decimalSeparator = ".",
  decimalPseudoSeparators,
  decimalZeroPadding = false,
  prefix = "",
  postfix = ""
} = {}) {
  const pseudoMinuses = [CHAR_HYPHEN2, CHAR_EN_DASH2, CHAR_EM_DASH].filter((char) => char !== thousandSeparator && char !== decimalSeparator);
  const validatedDecimalPseudoSeparators = validateDecimalPseudoSeparators({
    decimalSeparator,
    thousandSeparator,
    decimalPseudoSeparators
  });
  return Object.assign(Object.assign({}, MASKITO_DEFAULT_OPTIONS), {
    mask: generateMaskExpression({
      decimalSeparator,
      precision,
      thousandSeparator,
      prefix,
      postfix,
      isNegativeAllowed: min < 0
    }),
    preprocessors: [createInitializationOnlyPreprocessor({
      decimalSeparator,
      decimalPseudoSeparators: validatedDecimalPseudoSeparators,
      pseudoMinuses
    }), createPseudoCharactersPreprocessor(CHAR_MINUS2, pseudoMinuses), createPseudoCharactersPreprocessor(decimalSeparator, validatedDecimalPseudoSeparators), createNotEmptyIntegerPartPreprocessor({
      decimalSeparator,
      precision
    }), createNonRemovableCharsDeletionPreprocessor({
      decimalSeparator,
      decimalZeroPadding,
      thousandSeparator
    }), createZeroPrecisionPreprocessor(precision, decimalSeparator), createRepeatedDecimalSeparatorPreprocessor(decimalSeparator)],
    postprocessors: [createMinMaxPostprocessor({
      decimalSeparator,
      min,
      max
    }), maskitoPrefixPostprocessorGenerator(prefix), maskitoPostfixPostprocessorGenerator(postfix), createThousandSeparatorPostprocessor({
      decimalSeparator,
      thousandSeparator,
      prefix,
      postfix
    }), createDecimalZeroPaddingPostprocessor({
      decimalSeparator,
      decimalZeroPadding,
      precision,
      postfix
    })],
    plugins: [createLeadingZeroesValidationPlugin(decimalSeparator, thousandSeparator), createNotEmptyIntegerPlugin(decimalSeparator), createMinMaxPlugin({
      min,
      max,
      decimalSeparator
    })],
    overwriteMode: decimalZeroPadding ? ({
      value,
      selection: [from]
    }) => from <= value.indexOf(decimalSeparator) ? "shift" : "replace" : "shift"
  });
}
function createMaxValidationPreprocessor(timeSegmentMaxValues) {
  const paddedMaxValues = padTimeSegments(timeSegmentMaxValues);
  const invalidCharsRegExp = new RegExp(`[^\\d${TIME_FIXED_CHARACTERS.map(escapeRegExp).join("")}]+`);
  return ({
    elementState,
    data
  }, actionType) => {
    if (actionType === "deleteBackward" || actionType === "deleteForward") {
      return {
        elementState,
        data
      };
    }
    const {
      value,
      selection
    } = elementState;
    if (actionType === "validation") {
      const {
        validatedTimeString: validatedTimeString2,
        updatedTimeSelection: updatedTimeSelection2
      } = validateTimeString({
        timeString: value,
        paddedMaxValues,
        offset: 0,
        selection
      });
      return {
        elementState: {
          value: validatedTimeString2,
          selection: updatedTimeSelection2
        },
        data
      };
    }
    const newCharacters = data.replace(invalidCharsRegExp, "");
    const [from, rawTo] = selection;
    let to = rawTo + newCharacters.length;
    const newPossibleValue = value.slice(0, from) + newCharacters + value.slice(to);
    const {
      validatedTimeString,
      updatedTimeSelection
    } = validateTimeString({
      timeString: newPossibleValue,
      paddedMaxValues,
      offset: 0,
      selection: [from, to]
    });
    if (newPossibleValue && !validatedTimeString) {
      return {
        elementState,
        data: ""
      };
    }
    to = updatedTimeSelection[1];
    const newData = validatedTimeString.slice(from, to);
    return {
      elementState: {
        selection,
        value: validatedTimeString.slice(0, from) + "0".repeat(newData.length) + validatedTimeString.slice(to)
      },
      data: newData
    };
  };
}
function maskitoTimeOptionsGenerator({
  mode,
  timeSegmentMaxValues = {}
}) {
  const enrichedTimeSegmentMaxValues = Object.assign(Object.assign({}, DEFAULT_TIME_SEGMENT_MAX_VALUES), timeSegmentMaxValues);
  return Object.assign(Object.assign({}, MASKITO_DEFAULT_OPTIONS), {
    mask: Array.from(mode).map((char) => TIME_FIXED_CHARACTERS.includes(char) ? char : /\d/),
    preprocessors: [createZeroPlaceholdersPreprocessor(), createMaxValidationPreprocessor(enrichedTimeSegmentMaxValues)],
    overwriteMode: "replace"
  });
}

// node_modules/@maskito/angular/node_modules/tslib/tslib.es6.mjs
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

// node_modules/@maskito/angular/fesm2015/maskito-angular.js
var MaskitoCva = class {
  constructor(accessor) {
    this.accessor = accessor;
    this.maskito = MASKITO_DEFAULT_OPTIONS;
    const original = accessor.writeValue.bind(accessor);
    accessor.writeValue = (value) => {
      var _a;
      original(maskitoTransform(String(value !== null && value !== void 0 ? value : ""), (_a = this.maskito) !== null && _a !== void 0 ? _a : MASKITO_DEFAULT_OPTIONS));
    };
  }
};
MaskitoCva.ɵfac = function MaskitoCva_Factory(t) {
  return new (t || MaskitoCva)(ɵɵdirectiveInject(DefaultValueAccessor));
};
MaskitoCva.ɵdir = ɵɵdefineDirective({
  type: MaskitoCva,
  selectors: [["input", "maskito", ""], ["textarea", "maskito", ""]],
  hostBindings: function MaskitoCva_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("input", function MaskitoCva_input_HostBindingHandler($event) {
        return ctx.accessor._handleInput($event.target.value);
      })("blur", function MaskitoCva_blur_HostBindingHandler() {
        return ctx.accessor.onTouched();
      })("compositionstart", function MaskitoCva_compositionstart_HostBindingHandler() {
        return ctx.accessor._compositionStart();
      })("compositionend", function MaskitoCva_compositionend_HostBindingHandler($event) {
        return ctx.accessor._compositionEnd($event.target.value);
      });
    }
  },
  inputs: {
    maskito: "maskito"
  },
  features: [ɵɵProvidersFeature([DefaultValueAccessor, {
    provide: NG_VALUE_ACCESSOR,
    multi: true,
    useExisting: DefaultValueAccessor
  }])]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MaskitoCva, [{
    type: Directive,
    args: [{
      selector: "input[maskito], textarea[maskito]",
      providers: [DefaultValueAccessor, {
        provide: NG_VALUE_ACCESSOR,
        multi: true,
        useExisting: DefaultValueAccessor
      }],
      host: {
        "(input)": "$any(this.accessor)._handleInput($event.target.value)",
        "(blur)": "accessor.onTouched()",
        "(compositionstart)": "$any(this.accessor)._compositionStart()",
        "(compositionend)": "$any(this.accessor)._compositionEnd($event.target.value)"
      }
    }]
  }], function() {
    return [{
      type: DefaultValueAccessor
    }];
  }, {
    maskito: [{
      type: Input
    }]
  });
})();
var MaskitoDirective = class {
  constructor(ngZone, elementRef) {
    this.ngZone = ngZone;
    this.elementRef = elementRef;
    this.maskedElement = null;
    this.maskito = MASKITO_DEFAULT_OPTIONS;
    this.maskitoElement = MASKITO_DEFAULT_ELEMENT_PREDICATE;
  }
  ngOnChanges() {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      (_a = this.maskedElement) === null || _a === void 0 ? void 0 : _a.destroy();
      const predicate = this.maskitoElement;
      const predicateResult = yield predicate(this.elementRef.nativeElement);
      if (this.maskitoElement !== predicate) {
        return;
      }
      this.ngZone.runOutsideAngular(() => {
        var _a2;
        this.maskedElement = new Maskito(predicateResult, (_a2 = this.maskito) !== null && _a2 !== void 0 ? _a2 : MASKITO_DEFAULT_OPTIONS);
      });
    });
  }
  ngOnDestroy() {
    var _a;
    (_a = this.maskedElement) === null || _a === void 0 ? void 0 : _a.destroy();
  }
};
MaskitoDirective.ɵfac = function MaskitoDirective_Factory(t) {
  return new (t || MaskitoDirective)(ɵɵdirectiveInject(NgZone), ɵɵdirectiveInject(ElementRef));
};
MaskitoDirective.ɵdir = ɵɵdefineDirective({
  type: MaskitoDirective,
  selectors: [["", "maskito", ""]],
  inputs: {
    maskito: "maskito",
    maskitoElement: "maskitoElement"
  },
  features: [ɵɵNgOnChangesFeature]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MaskitoDirective, [{
    type: Directive,
    args: [{
      selector: "[maskito]"
    }]
  }], function() {
    return [{
      type: NgZone,
      decorators: [{
        type: Inject,
        args: [NgZone]
      }]
    }, {
      type: ElementRef,
      decorators: [{
        type: Inject,
        args: [ElementRef]
      }]
    }];
  }, {
    maskito: [{
      type: Input
    }],
    maskitoElement: [{
      type: Input
    }]
  });
})();
var MaskitoPipe = class {
  transform(value, maskitoOptions) {
    return maskitoTransform(String(value !== null && value !== void 0 ? value : ""), maskitoOptions !== null && maskitoOptions !== void 0 ? maskitoOptions : MASKITO_DEFAULT_OPTIONS);
  }
};
MaskitoPipe.ɵfac = function MaskitoPipe_Factory(t) {
  return new (t || MaskitoPipe)();
};
MaskitoPipe.ɵpipe = ɵɵdefinePipe({
  name: "maskito",
  type: MaskitoPipe,
  pure: true
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MaskitoPipe, [{
    type: Pipe,
    args: [{
      name: "maskito"
    }]
  }], null, null);
})();
var MaskitoModule = class {
};
MaskitoModule.ɵfac = function MaskitoModule_Factory(t) {
  return new (t || MaskitoModule)();
};
MaskitoModule.ɵmod = ɵɵdefineNgModule({
  type: MaskitoModule,
  declarations: [MaskitoDirective, MaskitoCva, MaskitoPipe],
  exports: [MaskitoDirective, MaskitoCva, MaskitoPipe]
});
MaskitoModule.ɵinj = ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MaskitoModule, [{
    type: NgModule,
    args: [{
      declarations: [MaskitoDirective, MaskitoCva, MaskitoPipe],
      exports: [MaskitoDirective, MaskitoCva, MaskitoPipe]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-input-number.js
function TuiInputNumberComponent_div_4_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtext(1);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const text_r7 = ctx.polymorpheusOutlet;
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", text_r7, " ");
  }
}
function TuiInputNumberComponent_div_4_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 6);
    ɵɵtemplate(1, TuiInputNumberComponent_div_4_ng_container_1_Template, 2, 1, "ng-container", 7);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    ɵɵnextContext();
    const _r4 = ɵɵreference(9);
    ɵɵadvance(1);
    ɵɵproperty("polymorpheusOutlet", _r4);
  }
}
function TuiInputNumberComponent_section_5_Template(rf, ctx) {
  if (rf & 1) {
    const _r9 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "section", 8)(1, "button", 9);
    ɵɵlistener("click.prevent", function TuiInputNumberComponent_section_5_Template_button_click_prevent_1_listener() {
      ɵɵrestoreView(_r9);
      const ctx_r8 = ɵɵnextContext();
      return ɵɵresetView(ctx_r8.onArrow(ctx_r8.step));
    })("mousedown.prevent", function TuiInputNumberComponent_section_5_Template_button_mousedown_prevent_1_listener() {
      ɵɵrestoreView(_r9);
      const ctx_r10 = ɵɵnextContext();
      return ɵɵresetView(ctx_r10.nativeFocusableElement == null ? null : ctx_r10.nativeFocusableElement.focus());
    });
    ɵɵtext(2, " + ");
    ɵɵelementEnd();
    ɵɵelementStart(3, "button", 9);
    ɵɵlistener("click.prevent", function TuiInputNumberComponent_section_5_Template_button_click_prevent_3_listener() {
      ɵɵrestoreView(_r9);
      const ctx_r11 = ɵɵnextContext();
      return ɵɵresetView(ctx_r11.onArrow(-ctx_r11.step));
    })("mousedown.prevent", function TuiInputNumberComponent_section_5_Template_button_mousedown_prevent_3_listener() {
      ɵɵrestoreView(_r9);
      const ctx_r12 = ɵɵnextContext();
      return ɵɵresetView(ctx_r12.nativeFocusableElement == null ? null : ctx_r12.nativeFocusableElement.focus());
    });
    ɵɵtext(4, " - ");
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    const _r0 = ɵɵreference(1);
    ɵɵadvance(1);
    ɵɵproperty("appearance", _r0.appearance)("disabled", !ctx_r2.canIncrement)("focusable", false)("icon", ctx_r2.options.icons.up);
    ɵɵadvance(2);
    ɵɵproperty("appearance", _r0.appearance)("disabled", !ctx_r2.canDecrement)("focusable", false)("icon", ctx_r2.options.icons.down);
  }
}
function TuiInputNumberComponent_ng_container_6_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function TuiInputNumberComponent_ng_template_8_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0, 2);
  }
}
var _c016 = ["*", [["input"]], [["tuiContent"]]];
var _c19 = ["*", "input", "tuiContent"];
var TUI_INPUT_NUMBER_DEFAULT_OPTIONS = {
  icons: {
    up: "tuiIconPlus",
    down: "tuiIconMinus"
  },
  min: Number.MIN_SAFE_INTEGER,
  max: Number.MAX_SAFE_INTEGER,
  step: 0,
  decimal: "not-zero",
  precision: 2
};
var TUI_INPUT_NUMBER_OPTIONS = tuiCreateToken(TUI_INPUT_NUMBER_DEFAULT_OPTIONS);
function tuiInputNumberOptionsProvider(options) {
  return tuiProvideOptions(TUI_INPUT_NUMBER_OPTIONS, options, TUI_INPUT_NUMBER_DEFAULT_OPTIONS);
}
var DEFAULT_MAX_LENGTH = 18;
var TUI_NUMBER_VALUE_TRANSFORMER = new InjectionToken("");
var TuiInputNumberComponent = class extends AbstractTuiNullableControl {
  constructor(control, cdr, transformer, options, numberFormat, isIOS, textfieldSize, controller) {
    super(control, cdr, transformer);
    this.options = options;
    this.numberFormat = numberFormat;
    this.isIOS = isIOS;
    this.textfieldSize = textfieldSize;
    this.controller = controller;
    this.unfinishedValue = "";
    this.min = this.options.min;
    this.max = this.options.max;
    this.decimal = this.options.decimal;
    this.precision = this.options.precision;
    this.step = this.options.step;
    this.prefix = "";
    this.postfix = "";
    this.polymorpheusValueContent = EMPTY_QUERY;
  }
  get size() {
    return this.textfieldSize.size;
  }
  get computedMin() {
    return this.computeMin(this.min, this.max);
  }
  get computedMax() {
    return this.computeMax(this.min, this.max);
  }
  get nativeFocusableElement() {
    return !this.textfield || this.computedDisabled ? null : this.textfield.nativeFocusableElement;
  }
  get focused() {
    var _a;
    return !!((_a = this.textfield) === null || _a === void 0 ? void 0 : _a.focused);
  }
  get isNegativeAllowed() {
    return this.computedMin < 0;
  }
  get inputMode() {
    if (this.isIOS && this.isNegativeAllowed) {
      return "text";
    }
    return this.decimal === "never" ? "numeric" : "decimal";
  }
  get calculatedMaxLength() {
    const decimalPart = this.decimal !== "never" && this.nativeValue.includes(this.numberFormat.decimalSeparator);
    const precision = decimalPart ? Math.min(this.precision + 1, 20) : 0;
    const takeThousand = this.numberFormat.thousandSeparator.repeat(5).length;
    return DEFAULT_MAX_LENGTH + precision + takeThousand;
  }
  get formattedValue() {
    return this.value !== null ? this.getFormattedValue(this.value || 0) : "";
  }
  get computedValue() {
    return this.focused ? this.nativeValue : this.formattedValue;
  }
  get canDecrement() {
    return this.interactive && (this.value || 0) > this.computedMin;
  }
  get canIncrement() {
    return this.interactive && (this.value || 0) < this.computedMax;
  }
  get computedPrefix() {
    return this.prefix || this.controller.prefix;
  }
  get computedPostfix() {
    const postfix = this.postfix || this.controller.postfix;
    return postfix && ` ${postfix}`;
  }
  get mask() {
    return this.calculateMask(this.precision, this.decimal, this.numberFormat.decimalSeparator, this.numberFormat.thousandSeparator, this.computedMin, this.computedMax, this.computedPrefix, this.computedPostfix);
  }
  onArrow(step) {
    if (!step) {
      return;
    }
    this.value = tuiClamp((this.value || 0) + step, this.computedMin, this.computedMax);
    this.nativeValue = this.formattedValue;
  }
  onValueChange(nativeValue) {
    const parsedValue = maskitoParseNumber(nativeValue, this.numberFormat.decimalSeparator);
    this.unfinishedValue = null;
    if (Number.isNaN(parsedValue)) {
      this.value = null;
      return;
    }
    if (this.isNativeValueNotFinished) {
      this.unfinishedValue = nativeValue;
      return;
    }
    if (parsedValue < this.computedMin || parsedValue > this.computedMax) {
      return;
    }
    this.value = parsedValue;
  }
  onFocused(focused) {
    this.updateFocused(focused);
    const nativeNumberValue = this.unfinishedValue ? maskitoParseNumber(this.unfinishedValue, this.numberFormat.decimalSeparator) : this.nativeNumberValue;
    this.unfinishedValue = null;
    if (Number.isNaN(nativeNumberValue)) {
      this.nativeValue = focused ? this.computedPrefix + this.computedPostfix : "";
      this.value = null;
      return;
    }
    if (!focused) {
      this.value = nativeNumberValue;
      this.nativeValue = this.formattedValue;
    }
  }
  getFormattedValue(value) {
    const absValue = Math.abs(value);
    const hasFraction = absValue % 1 > 0;
    let decimalLimit = this.decimal === "always" || hasFraction && this.decimal !== "never" ? this.precision : 0;
    const fraction = hasFraction ? tuiGetFractionPartPadded(value, this.precision) : "";
    if (this.focused && this.decimal !== "always") {
      decimalLimit = fraction.length;
    }
    return this.computedPrefix + tuiFormatNumber(value, Object.assign(Object.assign({}, this.numberFormat), {
      decimalLimit
    })).replace(CHAR_HYPHEN, CHAR_MINUS) + this.computedPostfix;
  }
  get isNativeValueNotFinished() {
    const nativeNumberValue = this.nativeNumberValue;
    return nativeNumberValue < 0 ? nativeNumberValue > this.computedMax : nativeNumberValue < this.computedMin;
  }
  get nativeValue() {
    var _a;
    return ((_a = this.nativeFocusableElement) === null || _a === void 0 ? void 0 : _a.value) || "";
  }
  set nativeValue(value) {
    if (!this.textfield || !this.nativeFocusableElement) {
      return;
    }
    this.textfield.value = value;
    this.nativeFocusableElement.value = value;
  }
  writeValue(value) {
    super.writeValue(value);
    this.nativeValue = this.formattedValue;
  }
  get nativeNumberValue() {
    return maskitoParseNumber(this.nativeValue, this.numberFormat.decimalSeparator);
  }
  computeMin(min, max) {
    var _a, _b, _c, _d, _e, _f;
    return Math.min((_c = (_b = (_a = this.valueTransformer) === null || _a === void 0 ? void 0 : _a.fromControlValue(min)) !== null && _b !== void 0 ? _b : min) !== null && _c !== void 0 ? _c : this.options.min, (_f = (_e = (_d = this.valueTransformer) === null || _d === void 0 ? void 0 : _d.fromControlValue(max)) !== null && _e !== void 0 ? _e : max) !== null && _f !== void 0 ? _f : this.options.max);
  }
  computeMax(min, max) {
    var _a, _b, _c, _d, _e, _f;
    return Math.max((_c = (_b = (_a = this.valueTransformer) === null || _a === void 0 ? void 0 : _a.fromControlValue(min)) !== null && _b !== void 0 ? _b : min) !== null && _c !== void 0 ? _c : this.options.min, (_f = (_e = (_d = this.valueTransformer) === null || _d === void 0 ? void 0 : _d.fromControlValue(max)) !== null && _e !== void 0 ? _e : max) !== null && _f !== void 0 ? _f : this.options.max);
  }
  calculateMask(precision, decimalMode, decimalSeparator, thousandSeparator, min, max, prefix, postfix) {
    const _a = maskitoNumberOptionsGenerator({
      decimalSeparator,
      thousandSeparator,
      min,
      max,
      prefix,
      postfix,
      precision: decimalMode === "never" ? 0 : precision,
      decimalZeroPadding: decimalMode === "always"
    }), {
      plugins
    } = _a, options = __rest(_a, ["plugins"]);
    return Object.assign(Object.assign({}, options), {
      plugins: [...plugins, maskitoCaretGuard((value) => [prefix.length, value.length - postfix.length])]
    });
  }
};
TuiInputNumberComponent.ɵfac = function TuiInputNumberComponent_Factory(t) {
  return new (t || TuiInputNumberComponent)(ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(TUI_NUMBER_VALUE_TRANSFORMER, 8), ɵɵdirectiveInject(TUI_INPUT_NUMBER_OPTIONS), ɵɵdirectiveInject(TUI_NUMBER_FORMAT), ɵɵdirectiveInject(TUI_IS_IOS), ɵɵdirectiveInject(TUI_TEXTFIELD_SIZE), ɵɵdirectiveInject(TUI_TEXTFIELD_WATCHED_CONTROLLER));
};
TuiInputNumberComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiInputNumberComponent,
  selectors: [["tui-input-number"]],
  contentQueries: function TuiInputNumberComponent_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, PolymorpheusOutletDirective, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.polymorpheusValueContent = _t);
    }
  },
  viewQuery: function TuiInputNumberComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(TuiPrimitiveTextfieldComponent, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.textfield = _t.first);
    }
  },
  hostVars: 1,
  hostBindings: function TuiInputNumberComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("keydown.arrowDown", function TuiInputNumberComponent_keydown_arrowDown_HostBindingHandler() {
        return ctx.onArrow(-ctx.step);
      })("keydown.arrowUp", function TuiInputNumberComponent_keydown_arrowUp_HostBindingHandler() {
        return ctx.onArrow(ctx.step);
      });
    }
    if (rf & 2) {
      ɵɵattribute("data-size", ctx.size);
    }
  },
  inputs: {
    min: "min",
    max: "max",
    decimal: "decimal",
    precision: "precision",
    step: "step",
    prefix: "prefix",
    postfix: "postfix"
  },
  features: [ɵɵProvidersFeature([tuiAsFocusableItemAccessor(TuiInputNumberComponent), tuiAsControl(TuiInputNumberComponent), TEXTFIELD_CONTROLLER_PROVIDER]), ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c19,
  decls: 10,
  vars: 14,
  consts: [["tuiTextfieldPostfix", "", "tuiTextfieldPrefix", "", "tuiValueAccessor", "", 1, "t-textfield", 3, "disabled", "focusable", "invalid", "maskito", "pseudoActive", "pseudoFocus", "pseudoHover", "readOnly", "value", "focusedChange", "valueChange"], ["textfield", ""], ["ngProjectAs", "tuiContent", "class", "t-value-content", 5, ["tuiContent"], 4, "ngIf"], ["class", "t-buttons", 4, "ngIf"], [4, "ngIf"], ["valueContent", ""], ["ngProjectAs", "tuiContent", 5, ["tuiContent"], 1, "t-value-content"], [4, "polymorpheusOutlet"], [1, "t-buttons"], ["size", "s", "tuiIconButton", "", "type", "button", 1, "t-button", 3, "appearance", "disabled", "focusable", "icon", "click.prevent", "mousedown.prevent"]],
  template: function TuiInputNumberComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c016);
      ɵɵelementStart(0, "tui-primitive-textfield", 0, 1);
      ɵɵlistener("focusedChange", function TuiInputNumberComponent_Template_tui_primitive_textfield_focusedChange_0_listener($event) {
        return ctx.onFocused($event);
      })("valueChange", function TuiInputNumberComponent_Template_tui_primitive_textfield_valueChange_0_listener($event) {
        return ctx.onValueChange($event);
      });
      ɵɵprojection(2);
      ɵɵprojection(3, 1, ["ngProjectAs", "input", 5, ["input"]]);
      ɵɵtemplate(4, TuiInputNumberComponent_div_4_Template, 2, 1, "div", 2);
      ɵɵelementEnd();
      ɵɵtemplate(5, TuiInputNumberComponent_section_5_Template, 5, 8, "section", 3);
      ɵɵtemplate(6, TuiInputNumberComponent_ng_container_6_Template, 1, 0, "ng-container", 4);
      ɵɵpipe(7, "async");
      ɵɵtemplate(8, TuiInputNumberComponent_ng_template_8_Template, 1, 0, "ng-template", null, 5, ɵɵtemplateRefExtractor);
    }
    if (rf & 2) {
      ɵɵproperty("disabled", ctx.computedDisabled)("focusable", ctx.focusable)("invalid", ctx.computedInvalid)("maskito", ctx.mask)("pseudoActive", ctx.pseudoActive)("pseudoFocus", ctx.computedFocused)("pseudoHover", ctx.pseudoHover)("readOnly", ctx.readOnly)("value", ctx.computedValue);
      ɵɵadvance(4);
      ɵɵproperty("ngIf", ctx.polymorpheusValueContent.length);
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.step);
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ɵɵpipeBind1(7, 12, ctx.polymorpheusValueContent.changes));
    }
  },
  dependencies: [TuiPrimitiveTextfieldComponent, TuiButtonComponent, TuiPrimitiveTextfieldDirective, TuiTextfieldPostfixDirective, TuiTextfieldPrefixDirective, TuiValueAccessorDirective, MaskitoDirective, NgIf, PolymorpheusOutletDirective, AsyncPipe],
  styles: ["[_nghost-%COMP%]{display:flex;border-radius:var(--tui-radius-m);text-align:left}.t-textfield[_ngcontent-%COMP%]{flex:1;max-width:100%;border-radius:inherit;text-align:inherit}.t-textfield[_ngcontent-%COMP%]:not(:last-child){border-top-right-radius:0;border-bottom-right-radius:0}.t-value-content[_ngcontent-%COMP%]{width:100%}.t-buttons[_ngcontent-%COMP%]{display:flex;flex-direction:column;align-items:stretch;margin-left:.125rem;border-radius:inherit}[data-size=s][_ngcontent-%COMP%] + .t-buttons[_ngcontent-%COMP%]{flex-direction:row-reverse}[data-size=s][_ngcontent-%COMP%] + .t-buttons[_ngcontent-%COMP%]   .t-button[_ngcontent-%COMP%]:first-child{margin:0 0 0 .125rem;border-top-right-radius:inherit;border-bottom-right-radius:inherit}[data-size=s][_ngcontent-%COMP%] + .t-buttons[_ngcontent-%COMP%]   .t-button[_ngcontent-%COMP%]:last-child{border-radius:0}[data-size=m][_ngcontent-%COMP%] + .t-buttons[_ngcontent-%COMP%]   .t-button[_ngcontent-%COMP%]{width:calc(var(--tui-height-m) * .75)}[data-size=l][_ngcontent-%COMP%] + .t-buttons[_ngcontent-%COMP%]   .t-button[_ngcontent-%COMP%]{width:calc(var(--tui-height-l) * .75)}.t-button[_ngcontent-%COMP%]{display:flex;flex:1;height:auto;border-radius:0}.t-button[_ngcontent-%COMP%]:first-child{margin-bottom:.125rem;border-top-right-radius:inherit}.t-button[_ngcontent-%COMP%]:last-child{border-bottom-right-radius:inherit}"],
  changeDetection: 0
});
__decorate([tuiPure], TuiInputNumberComponent.prototype, "computeMin", null);
__decorate([tuiPure], TuiInputNumberComponent.prototype, "computeMax", null);
__decorate([tuiPure], TuiInputNumberComponent.prototype, "calculateMask", null);
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputNumberComponent, [{
    type: Component,
    args: [{
      selector: "tui-input-number",
      templateUrl: "./input-number.template.html",
      styleUrls: ["./input-number.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [tuiAsFocusableItemAccessor(TuiInputNumberComponent), tuiAsControl(TuiInputNumberComponent), TEXTFIELD_CONTROLLER_PROVIDER]
    }]
  }], function() {
    return [{
      type: NgControl,
      decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NgControl]
      }]
    }, {
      type: ChangeDetectorRef,
      decorators: [{
        type: Inject,
        args: [ChangeDetectorRef]
      }]
    }, {
      type: AbstractTuiValueTransformer,
      decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [TUI_NUMBER_VALUE_TRANSFORMER]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_INPUT_NUMBER_OPTIONS]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_NUMBER_FORMAT]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_IS_IOS]
      }]
    }, {
      type: TuiTextfieldSizeDirective,
      decorators: [{
        type: Inject,
        args: [TUI_TEXTFIELD_SIZE]
      }]
    }, {
      type: TuiTextfieldController,
      decorators: [{
        type: Inject,
        args: [TUI_TEXTFIELD_WATCHED_CONTROLLER]
      }]
    }];
  }, {
    textfield: [{
      type: ViewChild,
      args: [TuiPrimitiveTextfieldComponent]
    }],
    min: [{
      type: Input
    }],
    max: [{
      type: Input
    }],
    decimal: [{
      type: Input
    }],
    precision: [{
      type: Input
    }],
    step: [{
      type: Input
    }],
    prefix: [{
      type: Input
    }],
    postfix: [{
      type: Input
    }],
    polymorpheusValueContent: [{
      type: ContentChildren,
      args: [PolymorpheusOutletDirective, {
        descendants: true
      }]
    }],
    size: [{
      type: HostBinding,
      args: ["attr.data-size"]
    }],
    onArrow: [{
      type: HostListener,
      args: ["keydown.arrowDown", ["-step"]]
    }, {
      type: HostListener,
      args: ["keydown.arrowUp", ["step"]]
    }],
    computeMin: [],
    computeMax: [],
    calculateMask: []
  });
})();
var TuiInputNumberDirective = class extends AbstractTuiTextfieldHost {
  get value() {
    return this.host.computedValue;
  }
  onValueChange(value) {
    this.host.onValueChange(value);
  }
  ngDoCheck() {
    if (!this.host.nativeFocusableElement) {
      return;
    }
    this.host.nativeFocusableElement.inputMode = this.host.inputMode;
    this.host.nativeFocusableElement.maxLength = this.host.nativeFocusableElement.maxLength > 0 ? this.host.nativeFocusableElement.maxLength : this.host.calculatedMaxLength;
  }
};
TuiInputNumberDirective.ɵfac = function() {
  let ɵTuiInputNumberDirective_BaseFactory;
  return function TuiInputNumberDirective_Factory(t) {
    return (ɵTuiInputNumberDirective_BaseFactory || (ɵTuiInputNumberDirective_BaseFactory = ɵɵgetInheritedFactory(TuiInputNumberDirective)))(t || TuiInputNumberDirective);
  };
}();
TuiInputNumberDirective.ɵdir = ɵɵdefineDirective({
  type: TuiInputNumberDirective,
  selectors: [["tui-input-number"]],
  features: [ɵɵProvidersFeature([tuiAsTextfieldHost(TuiInputNumberDirective)]), ɵɵInheritDefinitionFeature]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputNumberDirective, [{
    type: Directive,
    args: [{
      selector: "tui-input-number",
      providers: [tuiAsTextfieldHost(TuiInputNumberDirective)]
    }]
  }], null, null);
})();
var TuiInputNumberModule = class {
};
TuiInputNumberModule.ɵfac = function TuiInputNumberModule_Factory(t) {
  return new (t || TuiInputNumberModule)();
};
TuiInputNumberModule.ɵmod = ɵɵdefineNgModule({
  type: TuiInputNumberModule,
  declarations: [TuiInputNumberComponent, TuiInputNumberDirective],
  imports: [CommonModule, MaskitoModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiValueAccessorModule, PolymorpheusModule, TuiButtonModule],
  exports: [TuiInputNumberComponent, TuiInputNumberDirective, TuiTextfieldComponent]
});
TuiInputNumberModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, MaskitoModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiValueAccessorModule, PolymorpheusModule, TuiButtonModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputNumberModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, MaskitoModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiValueAccessorModule, PolymorpheusModule, TuiButtonModule],
      declarations: [TuiInputNumberComponent, TuiInputNumberDirective],
      exports: [TuiInputNumberComponent, TuiInputNumberDirective, TuiTextfieldComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-input-count.js
function TuiInputCountComponent_ng_container_3_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = ɵɵgetCurrentView();
    ɵɵelementContainerStart(0);
    ɵɵelementStart(1, "section", 2)(2, "button", 3);
    ɵɵlistener("click", function TuiInputCountComponent_ng_container_3_ng_container_1_Template_button_click_2_listener() {
      ɵɵrestoreView(_r4);
      const ctx_r3 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r3.increaseValue());
    })("mousedown", function TuiInputCountComponent_ng_container_3_ng_container_1_Template_button_mousedown_2_listener($event) {
      ɵɵrestoreView(_r4);
      const ctx_r5 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r5.onButtonMouseDown($event, ctx_r5.plusButtonDisabled));
    });
    ɵɵelementEnd();
    ɵɵelementStart(3, "button", 4);
    ɵɵlistener("click", function TuiInputCountComponent_ng_container_3_ng_container_1_Template_button_click_3_listener() {
      ɵɵrestoreView(_r4);
      const ctx_r6 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r6.decreaseValue());
    })("mousedown", function TuiInputCountComponent_ng_container_3_ng_container_1_Template_button_mousedown_3_listener($event) {
      ɵɵrestoreView(_r4);
      const ctx_r7 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r7.onButtonMouseDown($event, ctx_r7.minusButtonDisabled));
    });
    ɵɵelementEnd()();
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const texts_r2 = ctx.ngIf;
    const ctx_r1 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵproperty("appearance", ctx_r1.options.appearance)("disabled", ctx_r1.plusButtonDisabled)("focusable", false)("icon", ctx_r1.iconUp)("title", texts_r2[0]);
    ɵɵadvance(1);
    ɵɵproperty("appearance", ctx_r1.options.appearance)("disabled", ctx_r1.minusButtonDisabled)("focusable", false)("icon", ctx_r1.iconDown)("title", texts_r2[1]);
  }
}
function TuiInputCountComponent_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, TuiInputCountComponent_ng_container_3_ng_container_1_Template, 4, 10, "ng-container", 1);
    ɵɵpipe(2, "async");
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ɵɵpipeBind1(2, 1, ctx_r0.minusTexts$));
  }
}
var _c017 = ["*", [["input"]]];
var _c110 = ["*", "input"];
var TUI_INPUT_COUNT_DEFAULT_OPTIONS = {
  icons: {
    up: "tuiIconPlus",
    down: "tuiIconMinus"
  },
  appearance: "textfield",
  hideButtons: false,
  min: 0,
  max: Number.MAX_SAFE_INTEGER,
  step: 1,
  postfix: ""
};
var TUI_INPUT_COUNT_OPTIONS = tuiCreateToken(TUI_INPUT_COUNT_DEFAULT_OPTIONS);
function tuiInputCountOptionsProvider(options) {
  return tuiProvideOptions(TUI_INPUT_COUNT_OPTIONS, options, TUI_INPUT_COUNT_DEFAULT_OPTIONS);
}
var TuiInputCountComponent = class extends AbstractTuiNullableControl {
  constructor(control, cdr, textfieldController, minusTexts$, isMobile, options, numberFormat) {
    super(control, cdr);
    this.textfieldController = textfieldController;
    this.minusTexts$ = minusTexts$;
    this.isMobile = isMobile;
    this.options = options;
    this.numberFormat = numberFormat;
    this.step = this.options.step;
    this.min = this.options.min;
    this.max = this.options.max;
    this.hideButtons = this.options.hideButtons;
    this.prefix = "";
    this.postfix = this.options.postfix;
  }
  get computedMin() {
    var _a;
    return (_a = this.min) !== null && _a !== void 0 ? _a : this.options.min;
  }
  get computedMax() {
    var _a;
    return (_a = this.max) !== null && _a !== void 0 ? _a : this.options.max;
  }
  get buttonsHidden() {
    return this.hideButtons || this.textfieldController.appearance === "table";
  }
  get iconUp() {
    return this.options.icons.up;
  }
  get iconDown() {
    return this.options.icons.down;
  }
  get nativeFocusableElement() {
    return !this.inputNumber || this.computedDisabled ? null : this.inputNumber.nativeFocusableElement;
  }
  get size() {
    return this.textfieldController.size;
  }
  get focused() {
    return tuiIsNativeFocused(this.nativeFocusableElement);
  }
  get minusButtonDisabled() {
    return !this.interactive || tuiIsPresent(this.value) && this.value <= this.computedMin;
  }
  get plusButtonDisabled() {
    return !this.interactive || tuiIsPresent(this.value) && this.value >= this.computedMax;
  }
  onButtonMouseDown(event, disabled = false) {
    if (disabled || !this.nativeFocusableElement || this.isMobile) {
      return;
    }
    event.preventDefault();
    this.nativeFocusableElement.focus();
  }
  onFocused(focused) {
    this.updateFocused(focused);
  }
  /**
   * @deprecated
   * TODO: drop in v4.0 as unused method
   */
  onInputNumberChange(value) {
    this.value = value;
  }
  /** @deprecated */
  onValueChange(value) {
    this.value = maskitoParseNumber(value, this.numberFormat.decimalSeparator);
  }
  decreaseValue() {
    if (this.readOnly) {
      return;
    }
    const newValue = (this.value || 0) - this.step;
    this.safeUpdateValue(newValue);
  }
  increaseValue() {
    if (this.readOnly) {
      return;
    }
    const newValue = (this.value || 0) + this.step;
    this.safeUpdateValue(newValue);
  }
  onKeydown(event) {
    switch (event.key) {
      case "ArrowUp":
      case "Up":
        this.increaseValue();
        event.preventDefault();
        break;
      case "ArrowDown":
      case "Down":
        this.decreaseValue();
        event.preventDefault();
        break;
      default:
        break;
    }
  }
  safeUpdateValue(newValue) {
    this.value = tuiClamp(newValue, this.computedMin, this.computedMax);
  }
};
TuiInputCountComponent.ɵfac = function TuiInputCountComponent_Factory(t) {
  return new (t || TuiInputCountComponent)(ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(TUI_TEXTFIELD_WATCHED_CONTROLLER), ɵɵdirectiveInject(TUI_PLUS_MINUS_TEXTS), ɵɵdirectiveInject(TUI_IS_MOBILE), ɵɵdirectiveInject(TUI_INPUT_COUNT_OPTIONS), ɵɵdirectiveInject(TUI_NUMBER_FORMAT));
};
TuiInputCountComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiInputCountComponent,
  selectors: [["tui-input-count"]],
  viewQuery: function TuiInputCountComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(TuiInputNumberComponent, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.inputNumber = _t.first);
    }
  },
  hostVars: 3,
  hostBindings: function TuiInputCountComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("data-size", ctx.size);
      ɵɵclassProp("_hide-buttons", ctx.buttonsHidden);
    }
  },
  inputs: {
    step: "step",
    min: "min",
    max: "max",
    hideButtons: "hideButtons",
    prefix: "prefix",
    postfix: "postfix"
  },
  features: [ɵɵProvidersFeature([tuiAsFocusableItemAccessor(TuiInputCountComponent), tuiAsControl(TuiInputCountComponent), TEXTFIELD_CONTROLLER_PROVIDER]), ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c110,
  decls: 4,
  vars: 14,
  consts: [["decimal", "never", 1, "t-textfield", 3, "disabled", "focusable", "max", "min", "nativeId", "postfix", "prefix", "pseudoActive", "pseudoFocus", "pseudoHover", "pseudoInvalid", "readOnly", "ngModel", "ngModelChange", "focusedChange", "keydown"], [4, "ngIf"], [1, "t-buttons"], ["automation-id", "tui-input-count__plus-button", "size", "s", "tuiIconButton", "", "type", "button", 1, "t-button", "t-button_plus", 3, "appearance", "disabled", "focusable", "icon", "title", "click", "mousedown"], ["automation-id", "tui-input-count__minus-button", "size", "s", "tuiIconButton", "", "type", "button", 1, "t-button", "t-button_minus", 3, "appearance", "disabled", "focusable", "icon", "title", "click", "mousedown"]],
  template: function TuiInputCountComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c017);
      ɵɵelementStart(0, "tui-input-number", 0);
      ɵɵlistener("ngModelChange", function TuiInputCountComponent_Template_tui_input_number_ngModelChange_0_listener($event) {
        return ctx.value = $event;
      })("focusedChange", function TuiInputCountComponent_Template_tui_input_number_focusedChange_0_listener($event) {
        return ctx.onFocused($event);
      })("keydown", function TuiInputCountComponent_Template_tui_input_number_keydown_0_listener($event) {
        return ctx.onKeydown($event);
      });
      ɵɵprojection(1);
      ɵɵprojection(2, 1, ["ngProjectAs", "input", 5, ["input"]]);
      ɵɵelementEnd();
      ɵɵtemplate(3, TuiInputCountComponent_ng_container_3_Template, 3, 3, "ng-container", 1);
    }
    if (rf & 2) {
      ɵɵproperty("disabled", ctx.computedDisabled)("focusable", ctx.focusable)("max", ctx.computedMax)("min", ctx.computedMin)("nativeId", ctx.nativeId)("postfix", ctx.postfix)("prefix", ctx.prefix)("pseudoActive", ctx.pseudoActive)("pseudoFocus", ctx.pseudoFocus)("pseudoHover", ctx.pseudoHover)("pseudoInvalid", ctx.pseudoInvalid)("readOnly", ctx.readOnly)("ngModel", ctx.value);
      ɵɵadvance(3);
      ɵɵproperty("ngIf", !ctx.buttonsHidden);
    }
  },
  dependencies: [TuiInputNumberComponent, TuiButtonComponent, TuiInputNumberDirective, NgControlStatus, NgModel, NgIf, AsyncPipe],
  styles: ["[_nghost-%COMP%]{display:flex;font:var(--tui-font-text-s);border-radius:var(--tui-radius-m);height:var(--tui-height-m);color:var(--tui-text-01);text-align:left}._disabled[_nghost-%COMP%]{pointer-events:none}[data-size=l][_nghost-%COMP%]{font:var(--tui-font-text-m);height:var(--tui-height-l)}.t-textfield[_ngcontent-%COMP%]{position:relative;border-radius:inherit;text-align:inherit;flex-grow:1;min-width:0}[_nghost-%COMP%]:not(._hide-buttons)   .t-textfield[_ngcontent-%COMP%]{border-top-right-radius:0;border-bottom-right-radius:0}.t-buttons[_ngcontent-%COMP%]{display:flex;flex-direction:column;margin-left:.125rem;height:100%;border-radius:inherit}.t-buttons[_ngcontent-%COMP%]   .t-button[_ngcontent-%COMP%]{display:flex;width:calc(var(--tui-height-m) * .75);height:calc(50% - .0625rem);border-radius:0}.t-buttons[_ngcontent-%COMP%]   .t-button_plus[_ngcontent-%COMP%]{margin-bottom:.125rem;border-top-right-radius:inherit}.t-buttons[_ngcontent-%COMP%]   .t-button_minus[_ngcontent-%COMP%]{border-bottom-right-radius:inherit}[data-size=l][_nghost-%COMP%]   .t-buttons[_ngcontent-%COMP%]   .t-button[_ngcontent-%COMP%]{width:calc(var(--tui-height-l) * .75)}"],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputCountComponent, [{
    type: Component,
    args: [{
      selector: "tui-input-count",
      templateUrl: "./input-count.template.html",
      styleUrls: ["./input-count.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [tuiAsFocusableItemAccessor(TuiInputCountComponent), tuiAsControl(TuiInputCountComponent), TEXTFIELD_CONTROLLER_PROVIDER]
    }]
  }], function() {
    return [{
      type: NgControl,
      decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NgControl]
      }]
    }, {
      type: ChangeDetectorRef,
      decorators: [{
        type: Inject,
        args: [ChangeDetectorRef]
      }]
    }, {
      type: TuiTextfieldController,
      decorators: [{
        type: Inject,
        args: [TUI_TEXTFIELD_WATCHED_CONTROLLER]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Inject,
        args: [TUI_PLUS_MINUS_TEXTS]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_IS_MOBILE]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_INPUT_COUNT_OPTIONS]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_NUMBER_FORMAT]
      }]
    }];
  }, {
    inputNumber: [{
      type: ViewChild,
      args: [TuiInputNumberComponent]
    }],
    step: [{
      type: Input
    }],
    min: [{
      type: Input
    }],
    max: [{
      type: Input
    }],
    hideButtons: [{
      type: Input
    }],
    prefix: [{
      type: Input
    }],
    postfix: [{
      type: Input
    }],
    buttonsHidden: [{
      type: HostBinding,
      args: ["class._hide-buttons"]
    }],
    size: [{
      type: HostBinding,
      args: ["attr.data-size"]
    }]
  });
})();
var TuiInputCountDirective = class extends AbstractTuiTextfieldHost {
  onValueChange(value) {
    this.host.onValueChange(value);
  }
  ngAfterViewInit() {
    if (this.host.nativeFocusableElement) {
      const {
        nativeFocusableElement
      } = this.host;
      nativeFocusableElement.autocomplete = "off";
      nativeFocusableElement.inputMode = "numeric";
      nativeFocusableElement.maxLength = nativeFocusableElement.maxLength > -1 ? nativeFocusableElement.maxLength : 18;
    }
  }
};
TuiInputCountDirective.ɵfac = function() {
  let ɵTuiInputCountDirective_BaseFactory;
  return function TuiInputCountDirective_Factory(t) {
    return (ɵTuiInputCountDirective_BaseFactory || (ɵTuiInputCountDirective_BaseFactory = ɵɵgetInheritedFactory(TuiInputCountDirective)))(t || TuiInputCountDirective);
  };
}();
TuiInputCountDirective.ɵdir = ɵɵdefineDirective({
  type: TuiInputCountDirective,
  selectors: [["tui-input-count"]],
  features: [ɵɵProvidersFeature([tuiAsTextfieldHost(TuiInputCountDirective)]), ɵɵInheritDefinitionFeature]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputCountDirective, [{
    type: Directive,
    args: [{
      selector: "tui-input-count",
      providers: [tuiAsTextfieldHost(TuiInputCountDirective)]
    }]
  }], null, null);
})();
var TuiInputCountModule = class {
};
TuiInputCountModule.ɵfac = function TuiInputCountModule_Factory(t) {
  return new (t || TuiInputCountModule)();
};
TuiInputCountModule.ɵmod = ɵɵdefineNgModule({
  type: TuiInputCountModule,
  declarations: [TuiInputCountComponent, TuiInputCountDirective],
  imports: [CommonModule, FormsModule, TuiButtonModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiValueAccessorModule, TuiInputNumberModule],
  exports: [TuiInputCountComponent, TuiInputCountDirective, TuiTextfieldComponent]
});
TuiInputCountModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, FormsModule, TuiButtonModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiValueAccessorModule, TuiInputNumberModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputCountModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, FormsModule, TuiButtonModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiValueAccessorModule, TuiInputNumberModule],
      declarations: [TuiInputCountComponent, TuiInputCountDirective],
      exports: [TuiInputCountComponent, TuiInputCountDirective, TuiTextfieldComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-input-date.js
function TuiInputDateComponent_tui_primitive_textfield_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r7 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "tui-primitive-textfield", 5);
    ɵɵlistener("focusedChange", function TuiInputDateComponent_tui_primitive_textfield_1_Template_tui_primitive_textfield_focusedChange_0_listener($event) {
      ɵɵrestoreView(_r7);
      const ctx_r6 = ɵɵnextContext();
      return ɵɵresetView(ctx_r6.onFocused($event));
    })("valueChange", function TuiInputDateComponent_tui_primitive_textfield_1_Template_tui_primitive_textfield_valueChange_0_listener($event) {
      ɵɵrestoreView(_r7);
      const ctx_r8 = ɵɵnextContext();
      return ɵɵresetView(ctx_r8.onValueChange($event));
    });
    ɵɵprojection(1);
    ɵɵprojection(2, 1, ["ngProjectAs", "input", 5, ["input"]]);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const filler_r5 = ctx.tuiLet;
    const ctx_r0 = ɵɵnextContext();
    const _r1 = ɵɵreference(4);
    ɵɵproperty("disabled", ctx_r0.computedDisabled)("focusable", ctx_r0.computedFocusable)("invalid", ctx_r0.computedInvalid)("maskito", ctx_r0.computedMask)("nativeId", ctx_r0.nativeId)("pseudoFocus", ctx_r0.pseudoFocus)("pseudoHover", ctx_r0.pseudoHover)("readOnly", ctx_r0.readOnly)("tuiTextfieldFiller", ctx_r0.getComputedFiller(filler_r5 || ""))("tuiTextfieldIcon", ctx_r0.calendarIcon && _r1)("value", ctx_r0.computedValue);
  }
}
function TuiInputDateComponent_ng_template_3_tui_svg_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r13 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "tui-svg", 8);
    ɵɵlistener("click", function TuiInputDateComponent_ng_template_3_tui_svg_0_Template_tui_svg_click_0_listener() {
      ɵɵrestoreView(_r13);
      const ctx_r12 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r12.onIconClick());
    });
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const src_r11 = ctx.polymorpheusOutlet;
    const ctx_r9 = ɵɵnextContext(2);
    ɵɵclassProp("t-icon", !ctx_r9.computedDisabled);
    ɵɵproperty("src", src_r11);
  }
}
function TuiInputDateComponent_ng_template_3_input_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "input", 9);
  }
}
var _c018 = function(a0) {
  return {
    $implicit: a0
  };
};
function TuiInputDateComponent_ng_template_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtemplate(0, TuiInputDateComponent_ng_template_3_tui_svg_0_Template, 1, 3, "tui-svg", 6);
    ɵɵtemplate(1, TuiInputDateComponent_ng_template_3_input_1_Template, 1, 0, "input", 7);
  }
  if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵproperty("polymorpheusOutlet", ctx_r2.calendarIcon)("polymorpheusOutletContext", ɵɵpureFunction1(3, _c018, ctx_r2.size));
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r2.isMobile && ctx_r2.nativePicker);
  }
}
function TuiInputDateComponent_ng_template_5_div_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r16 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 12)(1, "button", 13);
    ɵɵlistener("click", function TuiInputDateComponent_ng_template_5_div_1_Template_button_click_1_listener() {
      ɵɵrestoreView(_r16);
      const ctx_r15 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r15.onDayClick(ctx_r15.items[0].day));
    });
    ɵɵtext(2);
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    const ctx_r14 = ɵɵnextContext(2);
    ɵɵadvance(2);
    ɵɵtextInterpolate1(" ", ctx_r14.items[0], " ");
  }
}
function TuiInputDateComponent_ng_template_5_Template(rf, ctx) {
  if (rf & 1) {
    const _r18 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "tui-calendar", 10);
    ɵɵlistener("dayClick", function TuiInputDateComponent_ng_template_5_Template_tui_calendar_dayClick_0_listener($event) {
      ɵɵrestoreView(_r18);
      const ctx_r17 = ɵɵnextContext();
      return ɵɵresetView(ctx_r17.onDayClick($event));
    })("monthChange", function TuiInputDateComponent_ng_template_5_Template_tui_calendar_monthChange_0_listener($event) {
      ɵɵrestoreView(_r18);
      const ctx_r19 = ɵɵnextContext();
      return ɵɵresetView(ctx_r19.onMonthChange($event));
    });
    ɵɵelementEnd();
    ɵɵtemplate(1, TuiInputDateComponent_ng_template_5_div_1_Template, 3, 1, "div", 11);
  }
  if (rf & 2) {
    const ctx_r4 = ɵɵnextContext();
    ɵɵproperty("disabledItemHandler", ctx_r4.disabledItemHandler)("markerHandler", ctx_r4.markerHandler)("max", ctx_r4.computedMax)("min", ctx_r4.computedMin)("month", ctx_r4.computedActiveYearMonth)("value", ctx_r4.value);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r4.items.length === 1);
  }
}
var _c111 = ["*", [["input"]]];
var _c25 = ["*", "input"];
var TuiNativeDateDirective = class {
  constructor(host, dateFormat) {
    this.host = host;
    this.dateFormat = dateFormat;
  }
  get value() {
    return this.host.value.length === DATE_FILLER_LENGTH ? TuiDay.normalizeParse(this.host.value, this.dateFormat).toString("YMD", "-") : "";
  }
  get max() {
    return this.host.max.toJSON();
  }
  get min() {
    return this.host.min.toJSON();
  }
  onChange(value) {
    this.host.onValueChange(value ? TuiDay.normalizeParse(value, "YMD").toString(this.dateFormat) : "");
  }
};
TuiNativeDateDirective.ɵfac = function TuiNativeDateDirective_Factory(t) {
  return new (t || TuiNativeDateDirective)(ɵɵdirectiveInject(TUI_TEXTFIELD_HOST), ɵɵdirectiveInject(TUI_DATE_FORMAT));
};
TuiNativeDateDirective.ɵdir = ɵɵdefineDirective({
  type: TuiNativeDateDirective,
  selectors: [["input", "tuiDate", ""]],
  hostAttrs: ["type", "date"],
  hostVars: 4,
  hostBindings: function TuiNativeDateDirective_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("change", function TuiNativeDateDirective_change_HostBindingHandler($event) {
        return ctx.onChange($event.target.value);
      })("click.stop.silent", function TuiNativeDateDirective_click_stop_silent_HostBindingHandler() {
        return 0;
      })("input.stop.silent", function TuiNativeDateDirective_input_stop_silent_HostBindingHandler() {
        return 0;
      })("mousedown.stop.silent", function TuiNativeDateDirective_mousedown_stop_silent_HostBindingHandler() {
        return 0;
      });
    }
    if (rf & 2) {
      ɵɵhostProperty("tabIndex", -1)("value", ctx.value)("max", ctx.max)("min", ctx.min);
    }
  }
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiNativeDateDirective, [{
    type: Directive,
    args: [{
      selector: "input[tuiDate]",
      host: {
        type: "date",
        "[tabIndex]": "-1",
        "[value]": "value",
        "(change)": "onChange($event.target.value)",
        "[max]": "max",
        "[min]": "min",
        "(click.stop.silent)": "0",
        "(input.stop.silent)": "0",
        "(mousedown.stop.silent)": "0"
      }
    }]
  }], function() {
    return [{
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_TEXTFIELD_HOST]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_DATE_FORMAT]
      }]
    }];
  }, null);
})();
var TuiInputDateComponent = class extends AbstractTuiNullableControl {
  constructor(control, cdr, isMobile, mobileCalendar, dateFormat, dateSeparator, dateTexts$, valueTransformer, options, textfieldSize) {
    super(control, cdr, valueTransformer);
    this.isMobile = isMobile;
    this.mobileCalendar = mobileCalendar;
    this.dateFormat = dateFormat;
    this.dateSeparator = dateSeparator;
    this.dateTexts$ = dateTexts$;
    this.valueTransformer = valueTransformer;
    this.options = options;
    this.textfieldSize = textfieldSize;
    this.month = null;
    this.min = this.options.min;
    this.max = this.options.max;
    this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
    this.markerHandler = TUI_DEFAULT_MARKER_HANDLER;
    this.items = [];
    this.defaultActiveYearMonth = TuiMonth.currentLocal();
    this.open = false;
    this.filler$ = this.dateTexts$.pipe(map((dateTexts) => changeDateSeparator(dateTexts[this.dateFormat], this.dateSeparator)));
  }
  get size() {
    return this.textfieldSize.size;
  }
  get computedMin() {
    var _a;
    return (_a = this.min) !== null && _a !== void 0 ? _a : this.options.min;
  }
  get computedMax() {
    var _a;
    return (_a = this.max) !== null && _a !== void 0 ? _a : this.options.max;
  }
  get nativeFocusableElement() {
    var _a, _b;
    return (_b = (_a = this.textfield) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) !== null && _b !== void 0 ? _b : null;
  }
  get focused() {
    var _a;
    return !!((_a = this.textfield) === null || _a === void 0 ? void 0 : _a.focused);
  }
  /**
   * @deprecated
   */
  get computedMobile() {
    return this.isMobile && (!!this.mobileCalendar || this.nativePicker);
  }
  get nativePicker() {
    return this.options.nativePicker;
  }
  get calendarIcon() {
    return this.options.icon;
  }
  get computedValue() {
    const {
      value,
      nativeValue,
      activeItem
    } = this;
    if (activeItem) {
      return String(activeItem);
    }
    return value ? value.toString(this.dateFormat, this.dateSeparator) : nativeValue;
  }
  get computedActiveYearMonth() {
    if (this.items[0] && this.value && this.value.daySame(this.items[0].day)) {
      return this.items[0].displayDay;
    }
    return this.month || this.value || tuiDateClamp(this.defaultActiveYearMonth, this.computedMin, this.computedMax);
  }
  get nativeValue() {
    var _a;
    return ((_a = this.nativeFocusableElement) === null || _a === void 0 ? void 0 : _a.value) || "";
  }
  set nativeValue(value) {
    if (this.nativeFocusableElement) {
      this.nativeFocusableElement.value = value;
    }
  }
  get computedMask() {
    return this.activeItem ? MASKITO_DEFAULT_OPTIONS : this.computeMaskOptions(this.dateFormat, this.dateSeparator, this.computedMin, this.computedMax);
  }
  get activeItem() {
    const {
      value
    } = this;
    return value && this.items.find((item) => item.day.daySame(value)) || null;
  }
  onClick() {
    if (!this.isMobile && this.interactive) {
      this.open = !this.open;
    }
  }
  getComputedFiller(filler) {
    return this.activeItem ? "" : filler;
  }
  // noinspection JSUnusedGlobalSymbols
  /**
   * TODO: Remove in 4.0
   * @deprecated: use {@link onIconClick} instead
   */
  onMobileClick() {
    this.onIconClick();
  }
  onIconClick() {
    if (this.isMobile && this.interactive) {
      this.open = true;
    }
  }
  onValueChange(value) {
    if (this.control) {
      this.control.updateValueAndValidity({
        emitEvent: false
      });
    }
    if (!value && !this.mobileCalendar) {
      this.onOpenChange(true);
    }
    this.value = value.length !== DATE_FILLER_LENGTH ? null : TuiDay.normalizeParse(value, this.dateFormat);
  }
  onDayClick(value) {
    this.value = value;
    this.open = false;
  }
  onMonthChange(month) {
    this.month = month;
  }
  onOpenChange(open) {
    this.open = open;
  }
  onFocused(focused) {
    this.updateFocused(focused);
  }
  setDisabledState() {
    super.setDisabledState();
    this.open = false;
  }
  writeValue(value) {
    super.writeValue(value);
    this.nativeValue = value ? this.computedValue : "";
  }
  valueIdenticalComparator(oldValue, newValue) {
    return tuiNullableSame(oldValue, newValue, (a, b) => a.daySame(b));
  }
  computeMaskOptions(mode, separator, min, max) {
    return maskitoDateOptionsGenerator({
      separator,
      mode: TUI_DATE_MODE_MASKITO_ADAPTER[mode],
      min: min.toLocalNativeDate(),
      max: max.toLocalNativeDate()
    });
  }
};
TuiInputDateComponent.ɵfac = function TuiInputDateComponent_Factory(t) {
  return new (t || TuiInputDateComponent)(ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(TUI_IS_MOBILE), ɵɵdirectiveInject(TUI_MOBILE_CALENDAR, 8), ɵɵdirectiveInject(TUI_DATE_FORMAT), ɵɵdirectiveInject(TUI_DATE_SEPARATOR), ɵɵdirectiveInject(TUI_DATE_TEXTS), ɵɵdirectiveInject(TUI_DATE_VALUE_TRANSFORMER, 8), ɵɵdirectiveInject(TUI_INPUT_DATE_OPTIONS), ɵɵdirectiveInject(TUI_TEXTFIELD_SIZE));
};
TuiInputDateComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiInputDateComponent,
  selectors: [["tui-input-date", 3, "multiple", ""]],
  viewQuery: function TuiInputDateComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(TuiPrimitiveTextfieldComponent, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.textfield = _t.first);
    }
  },
  hostVars: 1,
  hostBindings: function TuiInputDateComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("click", function TuiInputDateComponent_click_HostBindingHandler() {
        return ctx.onClick();
      });
    }
    if (rf & 2) {
      ɵɵattribute("data-size", ctx.size);
    }
  },
  inputs: {
    min: "min",
    max: "max",
    disabledItemHandler: "disabledItemHandler",
    markerHandler: "markerHandler",
    items: "items",
    defaultActiveYearMonth: "defaultActiveYearMonth"
  },
  features: [ɵɵProvidersFeature([tuiAsFocusableItemAccessor(TuiInputDateComponent), tuiAsControl(TuiInputDateComponent), tuiDateStreamWithTransformer(TUI_DATE_VALUE_TRANSFORMER), {
    provide: TUI_DROPDOWN_COMPONENT,
    useFactory: () => inject(TUI_IS_MOBILE) && inject(TUI_MOBILE_CALENDAR, InjectFlags.Optional) || inject(TUI_DROPDOWN_COMPONENT, InjectFlags.SkipSelf)
  }]), ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c25,
  decls: 7,
  vars: 7,
  consts: [[1, "t-hosted", 3, "canOpen", "content", "open", "openChange"], ["automation-id", "tui-input-date-range__textfield", "tuiValueAccessor", "", "class", "t-textfield", 3, "disabled", "focusable", "invalid", "maskito", "nativeId", "pseudoFocus", "pseudoHover", "readOnly", "tuiTextfieldFiller", "tuiTextfieldIcon", "value", "focusedChange", "valueChange", 4, "tuiLet"], ["iconContent", ""], [3, "polymorpheus"], ["dropdown", "polymorpheus"], ["automation-id", "tui-input-date-range__textfield", "tuiValueAccessor", "", 1, "t-textfield", 3, "disabled", "focusable", "invalid", "maskito", "nativeId", "pseudoFocus", "pseudoHover", "readOnly", "tuiTextfieldFiller", "tuiTextfieldIcon", "value", "focusedChange", "valueChange"], ["appearance", "icon", "automation-id", "tui-input-date-range__icon", "tuiWrapper", "", 3, "t-icon", "src", "click", 4, "polymorpheusOutlet", "polymorpheusOutletContext"], ["tuiDate", "", "class", "t-native-input", 4, "ngIf"], ["appearance", "icon", "automation-id", "tui-input-date-range__icon", "tuiWrapper", "", 3, "src", "click"], ["tuiDate", "", 1, "t-native-input"], ["automation-id", "tui-input-date__calendar", "tuiPreventDefault", "mousedown", 3, "disabledItemHandler", "markerHandler", "max", "min", "month", "value", "dayClick", "monthChange"], ["tuiPreventDefault", "mousedown", "class", "t-button", 4, "ngIf"], ["tuiPreventDefault", "mousedown", 1, "t-button"], ["tuiLink", "", "type", "button", 3, "click"]],
  template: function TuiInputDateComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c111);
      ɵɵelementStart(0, "tui-hosted-dropdown", 0);
      ɵɵlistener("openChange", function TuiInputDateComponent_Template_tui_hosted_dropdown_openChange_0_listener($event) {
        return ctx.onOpenChange($event);
      });
      ɵɵtemplate(1, TuiInputDateComponent_tui_primitive_textfield_1_Template, 3, 11, "tui-primitive-textfield", 1);
      ɵɵpipe(2, "async");
      ɵɵtemplate(3, TuiInputDateComponent_ng_template_3_Template, 2, 5, "ng-template", null, 2, ɵɵtemplateRefExtractor);
      ɵɵtemplate(5, TuiInputDateComponent_ng_template_5_Template, 2, 7, "ng-template", 3, 4, ɵɵtemplateRefExtractor);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      const _r3 = ɵɵreference(6);
      ɵɵproperty("canOpen", ctx.interactive && !ctx.nativePicker)("content", _r3)("open", ctx.open && ctx.interactive && !ctx.nativePicker);
      ɵɵadvance(1);
      ɵɵproperty("tuiLet", ɵɵpipeBind1(2, 5, ctx.filler$));
      ɵɵadvance(4);
      ɵɵproperty("polymorpheus", ctx.type);
    }
  },
  dependencies: [TuiHostedDropdownComponent, TuiPrimitiveTextfieldComponent, TuiSvgComponent, TuiCalendarComponent, TuiLinkComponent, TuiLetDirective, TuiPrimitiveTextfieldDirective, TuiValueAccessorDirective, MaskitoDirective, TuiTextfieldFillerDirective, TuiTextfieldIconDirective, PolymorpheusOutletDirective, TuiWrapperDirective, NgIf, TuiNativeDateDirective, PolymorpheusTemplate, TuiPreventDefaultDirective, AsyncPipe],
  styles: ["[_nghost-%COMP%]{display:block;border-radius:var(--tui-radius-m);text-align:left}.t-hosted[_ngcontent-%COMP%]{display:block;border-radius:inherit}.t-textfield[_ngcontent-%COMP%]{border-radius:inherit;text-align:inherit}.t-icon[_ngcontent-%COMP%]{pointer-events:auto}.t-button[_ngcontent-%COMP%]{display:flex;height:2.75rem;justify-content:center;box-shadow:inset 0 1px var(--tui-base-03)}.t-button[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{flex:1;text-align:center}.t-native-input[_ngcontent-%COMP%]{position:absolute;top:0;left:0;width:100%;height:100%;opacity:0;pointer-events:auto;font-size:2rem}"],
  changeDetection: 0
});
__decorate([tuiPure], TuiInputDateComponent.prototype, "computeMaskOptions", null);
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputDateComponent, [{
    type: Component,
    args: [{
      selector: "tui-input-date:not([multiple])",
      templateUrl: "./input-date.template.html",
      styleUrls: ["./input-date.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [tuiAsFocusableItemAccessor(TuiInputDateComponent), tuiAsControl(TuiInputDateComponent), tuiDateStreamWithTransformer(TUI_DATE_VALUE_TRANSFORMER), {
        provide: TUI_DROPDOWN_COMPONENT,
        useFactory: () => inject(TUI_IS_MOBILE) && inject(TUI_MOBILE_CALENDAR, InjectFlags.Optional) || inject(TUI_DROPDOWN_COMPONENT, InjectFlags.SkipSelf)
      }]
    }]
  }], function() {
    return [{
      type: NgControl,
      decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NgControl]
      }]
    }, {
      type: ChangeDetectorRef,
      decorators: [{
        type: Inject,
        args: [ChangeDetectorRef]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_IS_MOBILE]
      }]
    }, {
      type: Type,
      decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [TUI_MOBILE_CALENDAR]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_DATE_FORMAT]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_DATE_SEPARATOR]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Inject,
        args: [TUI_DATE_TEXTS]
      }]
    }, {
      type: AbstractTuiValueTransformer,
      decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [TUI_DATE_VALUE_TRANSFORMER]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_INPUT_DATE_OPTIONS]
      }]
    }, {
      type: TuiTextfieldSizeDirective,
      decorators: [{
        type: Inject,
        args: [TUI_TEXTFIELD_SIZE]
      }]
    }];
  }, {
    textfield: [{
      type: ViewChild,
      args: [TuiPrimitiveTextfieldComponent]
    }],
    min: [{
      type: Input
    }],
    max: [{
      type: Input
    }],
    disabledItemHandler: [{
      type: Input
    }],
    markerHandler: [{
      type: Input
    }],
    items: [{
      type: Input
    }],
    defaultActiveYearMonth: [{
      type: Input
    }],
    size: [{
      type: HostBinding,
      args: ["attr.data-size"]
    }],
    onClick: [{
      type: HostListener,
      args: ["click"]
    }],
    computeMaskOptions: []
  });
})();
var TuiInputDateDirective = class extends AbstractTuiTextfieldHost {
  get value() {
    return this.host.computedValue;
  }
  get max() {
    return this.host.computedMax;
  }
  get min() {
    return this.host.computedMin;
  }
  onValueChange(value) {
    if (!value) {
      this.host.nativeValue = "";
    }
    this.host.onValueChange(value);
  }
  process(input) {
    input.inputMode = "numeric";
  }
};
TuiInputDateDirective.ɵfac = function() {
  let ɵTuiInputDateDirective_BaseFactory;
  return function TuiInputDateDirective_Factory(t) {
    return (ɵTuiInputDateDirective_BaseFactory || (ɵTuiInputDateDirective_BaseFactory = ɵɵgetInheritedFactory(TuiInputDateDirective)))(t || TuiInputDateDirective);
  };
}();
TuiInputDateDirective.ɵdir = ɵɵdefineDirective({
  type: TuiInputDateDirective,
  selectors: [["tui-input-date", 3, "multiple", ""]],
  features: [ɵɵProvidersFeature([tuiAsTextfieldHost(TuiInputDateDirective)]), ɵɵInheritDefinitionFeature]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputDateDirective, [{
    type: Directive,
    args: [{
      selector: "tui-input-date:not([multiple])",
      providers: [tuiAsTextfieldHost(TuiInputDateDirective)]
    }]
  }], null, null);
})();
var TuiInputDateModule = class {
};
TuiInputDateModule.ɵfac = function TuiInputDateModule_Factory(t) {
  return new (t || TuiInputDateModule)();
};
TuiInputDateModule.ɵmod = ɵɵdefineNgModule({
  type: TuiInputDateModule,
  declarations: [TuiInputDateComponent, TuiInputDateDirective, TuiNativeDateDirective],
  imports: [CommonModule, MaskitoModule, PolymorpheusModule, TuiWrapperModule, TuiPreventDefaultModule, TuiCalendarModule, TuiSvgModule, TuiLinkModule, TuiHostedDropdownModule, TuiPrimitiveTextfieldModule, TuiValueAccessorModule, TuiLetModule, TuiTextfieldControllerModule],
  exports: [TuiInputDateComponent, TuiInputDateDirective, TuiTextfieldComponent]
});
TuiInputDateModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, MaskitoModule, PolymorpheusModule, TuiWrapperModule, TuiPreventDefaultModule, TuiCalendarModule, TuiSvgModule, TuiLinkModule, TuiHostedDropdownModule, TuiPrimitiveTextfieldModule, TuiValueAccessorModule, TuiLetModule, TuiTextfieldControllerModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputDateModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, MaskitoModule, PolymorpheusModule, TuiWrapperModule, TuiPreventDefaultModule, TuiCalendarModule, TuiSvgModule, TuiLinkModule, TuiHostedDropdownModule, TuiPrimitiveTextfieldModule, TuiValueAccessorModule, TuiLetModule, TuiTextfieldControllerModule],
      declarations: [TuiInputDateComponent, TuiInputDateDirective, TuiNativeDateDirective],
      exports: [TuiInputDateComponent, TuiInputDateDirective, TuiTextfieldComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-tag.js
var _c019 = ["input"];
function TuiTagComponent_div_1_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtext(1);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const text_r5 = ctx.polymorpheusOutlet;
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", text_r5, " ");
  }
}
function TuiTagComponent_div_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 6);
    ɵɵtemplate(1, TuiTagComponent_div_1_ng_container_1_Template, 2, 1, "ng-container", 7);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("polymorpheusOutlet", ctx_r0.leftContent);
  }
}
function TuiTagComponent_tui_loader_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "tui-loader", 8);
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵproperty("inheritColor", true)("size", ctx_r1.loaderSize);
  }
}
function TuiTagComponent_tui_svg_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r7 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "tui-svg", 9);
    ɵɵlistener("click", function TuiTagComponent_tui_svg_4_Template_tui_svg_click_0_listener($event) {
      ɵɵrestoreView(_r7);
      const ctx_r6 = ɵɵnextContext();
      return ɵɵresetView(ctx_r6.remove($event));
    })("mousedown.stop.prevent.silent", function TuiTagComponent_tui_svg_4_Template_tui_svg_mousedown_stop_prevent_silent_0_listener() {
      return 0;
    });
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵproperty("src", ctx_r2.icons.close);
  }
}
function TuiTagComponent_input_5_Template(rf, ctx) {
  if (rf & 1) {
    const _r11 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "input", 10, 11);
    ɵɵlistener("blur", function TuiTagComponent_input_5_Template_input_blur_0_listener() {
      ɵɵrestoreView(_r11);
      const ctx_r10 = ɵɵnextContext();
      return ɵɵresetView(ctx_r10.onBlur());
    })("keydown", function TuiTagComponent_input_5_Template_input_keydown_0_listener($event) {
      ɵɵrestoreView(_r11);
      const ctx_r12 = ɵɵnextContext();
      return ɵɵresetView(ctx_r12.onKeyDown($event));
    })("ngModelChange", function TuiTagComponent_input_5_Template_input_ngModelChange_0_listener($event) {
      ɵɵrestoreView(_r11);
      const ctx_r13 = ɵɵnextContext();
      return ɵɵresetView(ctx_r13.onInput($event));
    });
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r3 = ɵɵnextContext();
    ɵɵproperty("ngModel", ctx_r3.editedText);
    ɵɵattribute("maxLength", ctx_r3.maxLength);
  }
}
var TUI_TAG_DEFAULT_OPTIONS = {
  size: "m",
  status: "default",
  autoColor: false
};
var TUI_TAG_OPTIONS = tuiCreateToken(TUI_TAG_DEFAULT_OPTIONS);
function tuiTagOptionsProvider(options) {
  return tuiProvideOptions(TUI_TAG_OPTIONS, options, TUI_TAG_DEFAULT_OPTIONS);
}
var TuiTagComponent = class {
  constructor(el, mode$, options, icons) {
    this.el = el;
    this.mode$ = mode$;
    this.options = options;
    this.icons = icons;
    this.value = "";
    this.editable = false;
    this.separator = ",";
    this.maxLength = null;
    this.size = this.options.size;
    this.showLoader = false;
    this.status = this.options.status;
    this.hoverable = false;
    this.removable = false;
    this.disabled = false;
    this.autoColor = this.options.autoColor;
    this.edited = new EventEmitter();
    this.editing = false;
    this.editedText = null;
  }
  set input(input) {
    if (input) {
      input.nativeElement.focus();
    }
  }
  get backgroundColor() {
    return this.autoColor ? tuiStringHashToHsl(this.value) : null;
  }
  get canRemove() {
    return this.removable && !this.disabled && !this.showLoader;
  }
  get displayText() {
    return this.editedText === null ? this.value : this.editedText;
  }
  get loaderSize() {
    return tuiSizeBigger(this.size) ? "s" : "xs";
  }
  edit(event) {
    if (!this.canEdit) {
      return;
    }
    event.preventDefault();
    this.editing = true;
    this.editedText = this.value;
  }
  remove(event) {
    if (!this.canRemove) {
      return;
    }
    event.preventDefault();
    event.stopPropagation();
    this.edited.emit("");
  }
  onInput(value) {
    const newTags = value.split(this.separator);
    if (newTags.length > 1) {
      this.save(String(newTags));
      return;
    }
    this.editedText = value;
  }
  onKeyDown(event) {
    event.stopPropagation();
    switch (event.key.toLowerCase()) {
      case "enter":
        event.preventDefault();
        this.save(this.editedText || "");
        break;
      case "escape":
      case "esc":
        event.preventDefault();
        this.stopEditing();
        this.el.nativeElement.focus();
        break;
      default:
        break;
    }
  }
  onBlur() {
    if (this.editedText !== null) {
      this.save(this.editedText);
    }
  }
  get canEdit() {
    return this.editable && !this.disabled && !this.showLoader;
  }
  stopEditing() {
    this.editing = false;
    this.editedText = null;
  }
  save(value) {
    this.stopEditing();
    this.edited.emit(value.trim());
  }
};
TuiTagComponent.ɵfac = function TuiTagComponent_Factory(t) {
  return new (t || TuiTagComponent)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(TUI_MODE), ɵɵdirectiveInject(TUI_TAG_OPTIONS), ɵɵdirectiveInject(TUI_COMMON_ICONS));
};
TuiTagComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiTagComponent,
  selectors: [["tui-tag"], ["a", "tuiTag", ""], ["button", "tuiTag", ""]],
  viewQuery: function TuiTagComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(_c019, 5, ElementRef);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.input = _t.first);
    }
  },
  hostVars: 10,
  hostBindings: function TuiTagComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("$.data-mode.attr", function TuiTagComponent___data_mode_attr_HostBindingHandler() {
        return ctx.mode$;
      })("keydown.enter", function TuiTagComponent_keydown_enter_HostBindingHandler($event) {
        return ctx.edit($event);
      })("keydown.delete", function TuiTagComponent_keydown_delete_HostBindingHandler($event) {
        return ctx.remove($event);
      })("keydown.backspace", function TuiTagComponent_keydown_backspace_HostBindingHandler($event) {
        return ctx.remove($event);
      });
    }
    if (rf & 2) {
      ɵɵattribute("data-size", ctx.size)("data-status", ctx.status);
      ɵɵclassProp("_hoverable", ctx.hoverable)("_disabled", ctx.disabled)("_autocolor", ctx.autoColor)("_editing", ctx.editing);
    }
  },
  inputs: {
    value: "value",
    editable: "editable",
    separator: "separator",
    maxLength: "maxLength",
    size: "size",
    showLoader: "showLoader",
    status: "status",
    hoverable: "hoverable",
    removable: "removable",
    disabled: "disabled",
    autoColor: "autoColor",
    leftContent: "leftContent"
  },
  outputs: {
    edited: "edited"
  },
  features: [ɵɵProvidersFeature([MODE_PROVIDER])],
  decls: 6,
  vars: 7,
  consts: [[1, "t-tag", 3, "dblclick"], ["class", "t-content", 4, "ngIf"], ["automation-id", "tui-tag__text", 1, "t-text", 3, "textContent"], ["class", "t-content", 3, "inheritColor", "size", 4, "ngIf"], ["automation-id", "tui-tag__remove", "class", "t-icon", 3, "src", "click", "mousedown.stop.prevent.silent", 4, "ngIf"], ["automation-id", "tui-tag__edit", "type", "text", "class", "t-edit", 3, "ngModel", "blur", "keydown", "ngModelChange", 4, "ngIf"], [1, "t-content"], [4, "polymorpheusOutlet"], [1, "t-content", 3, "inheritColor", "size"], ["automation-id", "tui-tag__remove", 1, "t-icon", 3, "src", "click", "mousedown.stop.prevent.silent"], ["automation-id", "tui-tag__edit", "type", "text", 1, "t-edit", 3, "ngModel", "blur", "keydown", "ngModelChange"], ["input", ""]],
  template: function TuiTagComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵelementStart(0, "div", 0);
      ɵɵlistener("dblclick", function TuiTagComponent_Template_div_dblclick_0_listener($event) {
        return ctx.edit($event);
      });
      ɵɵtemplate(1, TuiTagComponent_div_1_Template, 2, 1, "div", 1);
      ɵɵelement(2, "span", 2);
      ɵɵtemplate(3, TuiTagComponent_tui_loader_3_Template, 1, 2, "tui-loader", 3);
      ɵɵtemplate(4, TuiTagComponent_tui_svg_4_Template, 1, 1, "tui-svg", 4);
      ɵɵelementEnd();
      ɵɵtemplate(5, TuiTagComponent_input_5_Template, 2, 2, "input", 5);
    }
    if (rf & 2) {
      ɵɵstyleProp("background-color", ctx.backgroundColor);
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.leftContent);
      ɵɵadvance(1);
      ɵɵproperty("textContent", ctx.displayText);
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.showLoader);
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.canRemove);
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.editing);
    }
  },
  dependencies: [TuiLoaderComponent, TuiSvgComponent, NgIf, PolymorpheusOutletDirective, DefaultValueAccessor, NgControlStatus, NgModel],
  styles: ['[_nghost-%COMP%]{transition-property:background;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;position:relative;display:inline-block;font:var(--tui-font-text-s);line-height:1.25rem;max-width:100%;cursor:default;outline:none;text-decoration:none;padding:0;border:0}[_nghost-%COMP%]:after{transition-property:background;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;position:absolute;top:0;left:0;width:100%;height:100%;content:"";box-sizing:border-box;border-radius:inherit;pointer-events:none}._hoverable[_nghost-%COMP%]:hover[data-status=custom]:after, ._hoverable[_nghost-%COMP%]:active[data-status=custom]:after{background-color:var(--tui-clear)}[_nghost-%COMP%]:focus:after{border:2px solid var(--tui-focus)}[data-size=s][_nghost-%COMP%]{font:var(--tui-font-text-xs);line-height:1.25rem;border-radius:var(--tui-radius-xs)}[data-size=m][_nghost-%COMP%]{border-radius:var(--tui-radius-xs)}[data-size=l][_nghost-%COMP%]{border-radius:var(--tui-radius-s)}[data-status=primary][_nghost-%COMP%]{background-color:var(--tui-primary);color:var(--tui-primary-text)}[data-status=primary]._hoverable[_nghost-%COMP%]:hover{background-color:var(--tui-primary-hover)}[data-status=primary]._hoverable[_nghost-%COMP%]:active{background-color:var(--tui-primary-active)}[data-status=error][_nghost-%COMP%]{background-color:var(--tui-error-bg);color:var(--tui-text-01)}[data-status=error]._hoverable[_nghost-%COMP%]:hover, [data-status=error]._hoverable[_nghost-%COMP%]:active{background-color:var(--tui-error-bg-hover)}[data-status=error][data-mode=onDark][_nghost-%COMP%]{background-color:var(--tui-error-bg-night);color:var(--tui-text-01-night)}[data-status=error][data-mode=onDark]._hoverable[_nghost-%COMP%]:hover, [data-status=error][data-mode=onDark]._hoverable[_nghost-%COMP%]:active{background-color:var(--tui-error-bg-night-hover)}[data-status=success][_nghost-%COMP%]{background-color:var(--tui-success-bg);color:var(--tui-text-01)}[data-status=success]._hoverable[_nghost-%COMP%]:hover, [data-status=success]._hoverable[_nghost-%COMP%]:active{background-color:var(--tui-success-bg-hover)}[data-status=success][data-mode=onDark][_nghost-%COMP%]{background-color:var(--tui-success-bg-night);color:var(--tui-text-01-night)}[data-status=success][data-mode=onDark]._hoverable[_nghost-%COMP%]:hover, [data-status=success][data-mode=onDark]._hoverable[_nghost-%COMP%]:active{background-color:var(--tui-success-bg-night-hover)}[data-status=warning][_nghost-%COMP%]{background-color:var(--tui-warning-bg);color:var(--tui-text-01)}[data-status=warning]._hoverable[_nghost-%COMP%]:hover, [data-status=warning]._hoverable[_nghost-%COMP%]:active{background-color:var(--tui-warning-bg-hover)}[data-status=warning][data-mode=onDark][_nghost-%COMP%]{background-color:var(--tui-warning-bg-night);color:var(--tui-text-01-night)}[data-status=warning][data-mode=onDark]._hoverable[_nghost-%COMP%]:hover, [data-status=warning][data-mode=onDark]._hoverable[_nghost-%COMP%]:active{background-color:var(--tui-warning-bg-night-hover)}[data-status=default][_nghost-%COMP%]{color:var(--tui-text-01-night);background-color:var(--tui-base-06)}[data-status=default][_nghost-%COMP%]:not([data-mode])._hoverable:hover{background-color:var(--tui-base-07)}[data-status=default][_nghost-%COMP%]:not([data-mode])._hoverable:active{background-color:var(--tui-base-08)}[data-status=default][data-mode=onDark][_nghost-%COMP%]{color:var(--tui-text-01-night);background-color:var(--tui-clear-inverse)}[data-status=default][data-mode=onDark]._hoverable[_nghost-%COMP%]:hover{background-color:var(--tui-clear-inverse-hover)}[data-status=default][data-mode=onDark]._hoverable[_nghost-%COMP%]:active{background-color:var(--tui-clear-inverse-active)}[data-status=default][data-mode=onDark][_nghost-%COMP%]:focus:after{border:2px solid var(--tui-base-01)}[data-status=default][data-mode=onLight][_nghost-%COMP%]{background-color:var(--tui-clear);color:var(--tui-text-01)}[data-status=default][data-mode=onLight]._hoverable[_nghost-%COMP%]:hover{background-color:var(--tui-clear-hover)}[data-status=default][data-mode=onLight]._hoverable[_nghost-%COMP%]:active{background-color:var(--tui-clear-active)}._editing[_nghost-%COMP%]{background:transparent!important}._disabled[_nghost-%COMP%]{pointer-events:none;opacity:var(--tui-disabled-opacity)}._hoverable[_nghost-%COMP%]{cursor:pointer}._autocolor[_nghost-%COMP%]{color:#000c}.t-text[_ngcontent-%COMP%]{white-space:pre;overflow:hidden;text-overflow:ellipsis;padding-right:.02em}.t-tag[_ngcontent-%COMP%]{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;position:relative;display:flex;width:auto;align-items:center;font:inherit;border-radius:inherit}[data-size=s][_nghost-%COMP%]   .t-tag[_ngcontent-%COMP%]{height:1.25rem;padding:0 .375rem}[data-size=m][_nghost-%COMP%]   .t-tag[_ngcontent-%COMP%]{height:var(--tui-height-xs);padding:0 .5rem}[data-size=l][_nghost-%COMP%]   .t-tag[_ngcontent-%COMP%]{height:var(--tui-height-s);padding:0 .75rem}._editing[_nghost-%COMP%]   .t-tag[_ngcontent-%COMP%]{visibility:hidden}.t-edit[_ngcontent-%COMP%]{margin:0;border-width:0;border-radius:inherit;background:none;font-size:inherit;line-height:inherit;font-weight:inherit;color:inherit;caret-color:currentColor;outline:none;-webkit-appearance:none;-moz-appearance:none;appearance:none;word-break:keep-all;-webkit-text-fill-color:currentColor;position:absolute;top:0;left:0;font:inherit;color:var(--tui-text-01);width:100%;height:100%;box-sizing:border-box;padding:0 .5rem}.t-edit[_ngcontent-%COMP%]:-webkit-autofill, .t-edit[_ngcontent-%COMP%]:-webkit-autofill:hover, .t-edit[_ngcontent-%COMP%]:-webkit-autofill:focus{caret-color:var(--tui-base-09);border-radius:inherit;color:inherit!important;background-color:transparent!important;-webkit-text-fill-color:var(--tui-text-01)!important;border-color:var(--tui-autofill);-webkit-box-shadow:0 0 0 100rem var(--tui-autofill) inset!important}@supports (-webkit-touch-callout: none){.t-edit[_ngcontent-%COMP%]:active{font-size:1rem}}[data-size=s][_nghost-%COMP%]   .t-edit[_ngcontent-%COMP%]{padding:0 .375rem}[data-size=m][_nghost-%COMP%]   .t-edit[_ngcontent-%COMP%]{padding:0 .5rem}[data-size=l][_nghost-%COMP%]   .t-edit[_ngcontent-%COMP%]{padding:0 .75rem}.t-icon[_ngcontent-%COMP%]{width:1rem;height:100%;cursor:pointer;pointer-events:all;opacity:var(--tui-disabled-opacity);-webkit-margin-start:.25rem;margin-inline-start:.25rem;-webkit-margin-end:-.25rem;margin-inline-end:-.25rem}.t-icon[_ngcontent-%COMP%]:hover{opacity:1}[data-size=s][_nghost-%COMP%]   .t-icon[_ngcontent-%COMP%]{-webkit-margin-start:0;margin-inline-start:0}[data-size=s][_nghost-%COMP%]   .t-icon[_ngcontent-%COMP%]     svg{transform:scale(.75)}.t-content[_ngcontent-%COMP%]{width:1rem;height:1rem;-webkit-margin-end:.25rem;margin-inline-end:.25rem}'],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiTagComponent, [{
    type: Component,
    args: [{
      selector: "tui-tag, a[tuiTag], button[tuiTag]",
      templateUrl: "./tag.template.html",
      styleUrls: ["./tag.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [MODE_PROVIDER],
      host: {
        "($.data-mode.attr)": "mode$"
      }
    }]
  }], function() {
    return [{
      type: ElementRef,
      decorators: [{
        type: Inject,
        args: [ElementRef]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Inject,
        args: [TUI_MODE]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_TAG_OPTIONS]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_COMMON_ICONS]
      }]
    }];
  }, {
    value: [{
      type: Input
    }],
    editable: [{
      type: Input
    }],
    separator: [{
      type: Input
    }],
    maxLength: [{
      type: Input
    }],
    size: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["attr.data-size"]
    }],
    showLoader: [{
      type: Input
    }],
    status: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["attr.data-status"]
    }],
    hoverable: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["class._hoverable"]
    }],
    removable: [{
      type: Input
    }],
    disabled: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["class._disabled"]
    }],
    autoColor: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["class._autocolor"]
    }],
    leftContent: [{
      type: Input
    }],
    edited: [{
      type: Output
    }],
    editing: [{
      type: HostBinding,
      args: ["class._editing"]
    }],
    input: [{
      type: ViewChild,
      args: ["input", {
        read: ElementRef
      }]
    }],
    edit: [{
      type: HostListener,
      args: ["keydown.enter", ["$event"]]
    }],
    remove: [{
      type: HostListener,
      args: ["keydown.delete", ["$event"]]
    }, {
      type: HostListener,
      args: ["keydown.backspace", ["$event"]]
    }]
  });
})();
var TuiTagModule = class {
};
TuiTagModule.ɵfac = function TuiTagModule_Factory(t) {
  return new (t || TuiTagModule)();
};
TuiTagModule.ɵmod = ɵɵdefineNgModule({
  type: TuiTagModule,
  declarations: [TuiTagComponent],
  imports: [CommonModule, FormsModule, TuiSvgModule, TuiLoaderModule, PolymorpheusModule],
  exports: [TuiTagComponent]
});
TuiTagModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, FormsModule, TuiSvgModule, TuiLoaderModule, PolymorpheusModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiTagModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, FormsModule, TuiSvgModule, TuiLoaderModule, PolymorpheusModule],
      declarations: [TuiTagComponent],
      exports: [TuiTagComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-input-tag.js
var _c020 = ["focusableElement"];
var _c112 = ["tagsContainer"];
var _c26 = ["cleaner"];
var _c32 = ["errorIcon"];
var _c42 = ["tag"];
function TuiInputTagComponent_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function TuiInputTagComponent_div_5_tui_svg_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "tui-svg", 21);
  }
  if (rf & 2) {
    const src_r11 = ctx.polymorpheusOutlet;
    ɵɵproperty("src", src_r11);
  }
}
var _c5 = function(a0) {
  return {
    $implicit: a0
  };
};
function TuiInputTagComponent_div_5_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 19);
    ɵɵtemplate(1, TuiInputTagComponent_div_5_tui_svg_1_Template, 1, 1, "tui-svg", 20);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("polymorpheusOutlet", ctx_r1.iconLeft)("polymorpheusOutletContext", ɵɵpureFunction1(2, _c5, ctx_r1.size));
  }
}
function TuiInputTagComponent_div_8_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 22);
    ɵɵprojection(1, 2);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵclassProp("t-placeholder_raised", ctx_r2.placeholderRaised);
  }
}
function TuiInputTagComponent_ng_container_11_tui_tag_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r17 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "tui-tag", 24, 25);
    ɵɵlistener("edited", function TuiInputTagComponent_ng_container_11_tui_tag_1_Template_tui_tag_edited_0_listener($event) {
      const restoredCtx = ɵɵrestoreView(_r17);
      const index_r14 = restoredCtx.index;
      const ctx_r16 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r16.onTagEdited($event, index_r14));
    })("keydown.arrowLeft.prevent", function TuiInputTagComponent_ng_container_11_tui_tag_1_Template_tui_tag_keydown_arrowLeft_prevent_0_listener() {
      const restoredCtx = ɵɵrestoreView(_r17);
      const index_r14 = restoredCtx.index;
      const ctx_r18 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r18.onTagKeyDownArrowLeft(index_r14));
    })("keydown.arrowRight.prevent", function TuiInputTagComponent_ng_container_11_tui_tag_1_Template_tui_tag_keydown_arrowRight_prevent_0_listener() {
      const restoredCtx = ɵɵrestoreView(_r17);
      const index_r14 = restoredCtx.index;
      const ctx_r19 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r19.onTagKeyDownArrowRight(index_r14));
    });
    ɵɵpipe(2, "async");
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const item_r13 = ctx.$implicit;
    const ctx_r12 = ɵɵnextContext(2);
    ɵɵproperty("autoColor", ctx_r12.autoColor)("disabled", ctx_r12.computedDisabled || ctx_r12.disabledItemHandler(item_r13))("editable", ctx_r12.editable && !ctx_r12.readOnly)("hoverable", !ctx_r12.readOnly)("leftContent", ctx_r12.getLeftContent(item_r13))("maxLength", ctx_r12.maxLength)("removable", !ctx_r12.readOnly && ctx_r12.removable)("separator", ctx_r12.separator)("size", ctx_r12.controller.size)("status", ɵɵpipeBind1(2, 12, ctx_r12.status$))("tuiFocusable", false)("value", item_r13.toString());
  }
}
function TuiInputTagComponent_ng_container_11_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, TuiInputTagComponent_ng_container_11_tui_tag_1_Template, 3, 14, "tui-tag", 23);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r3 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r3.value)("ngForTrackBy", ctx_r3.trackByFn);
  }
}
function TuiInputTagComponent_ng_template_12_span_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "span", 27);
  }
  if (rf & 2) {
    const item_r21 = ctx.$implicit;
    const ctx_r20 = ɵɵnextContext(2);
    ɵɵclassProp("t-text_comma", ctx_r20.computedFocused && !ctx_r20.inputHidden)("t-text_disabled", ctx_r20.disabledItemHandler(item_r21))("t-text_error", !ctx_r20.tagValidator(item_r21));
    ɵɵproperty("textContent", item_r21);
  }
}
function TuiInputTagComponent_ng_template_12_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtemplate(0, TuiInputTagComponent_ng_template_12_span_0_Template, 1, 7, "span", 26);
  }
  if (rf & 2) {
    const ctx_r5 = ɵɵnextContext();
    ɵɵproperty("ngForOf", ctx_r5.value);
  }
}
function TuiInputTagComponent_div_22_ng_container_1_tui_svg_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r29 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "tui-svg", 32, 33);
    ɵɵlistener("click.stop", function TuiInputTagComponent_div_22_ng_container_1_tui_svg_1_Template_tui_svg_click_stop_0_listener() {
      ɵɵrestoreView(_r29);
      const ctx_r28 = ɵɵnextContext(3);
      return ɵɵresetView(ctx_r28.onCleanerClick());
    });
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const src_r26 = ctx.polymorpheusOutlet;
    ɵɵproperty("src", src_r26);
  }
}
function TuiInputTagComponent_div_22_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, TuiInputTagComponent_div_22_ng_container_1_tui_svg_1_Template, 2, 1, "tui-svg", 31);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r22 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("polymorpheusOutlet", ctx_r22.iconCleaner)("polymorpheusOutletContext", ɵɵpureFunction1(2, _c5, ctx_r22.size));
  }
}
function TuiInputTagComponent_div_22_tui_tooltip_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "tui-tooltip", 34);
  }
  if (rf & 2) {
    const ctx_r23 = ɵɵnextContext(2);
    ɵɵproperty("content", ctx_r23.hintOptions == null ? null : ctx_r23.hintOptions.content)("describeId", ctx_r23.id);
  }
}
function TuiInputTagComponent_div_22_div_3_tui_svg_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "tui-svg", 21);
  }
  if (rf & 2) {
    const src_r31 = ctx.polymorpheusOutlet;
    ɵɵproperty("src", src_r31);
  }
}
function TuiInputTagComponent_div_22_div_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 35);
    ɵɵtemplate(1, TuiInputTagComponent_div_22_div_3_tui_svg_1_Template, 1, 1, "tui-svg", 20);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r24 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("polymorpheusOutlet", ctx_r24.icon)("polymorpheusOutletContext", ɵɵpureFunction1(2, _c5, ctx_r24.size));
  }
}
function TuiInputTagComponent_div_22_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 28);
    ɵɵtemplate(1, TuiInputTagComponent_div_22_ng_container_1_Template, 2, 4, "ng-container", 0);
    ɵɵtemplate(2, TuiInputTagComponent_div_22_tui_tooltip_2_Template, 1, 2, "tui-tooltip", 29);
    ɵɵtemplate(3, TuiInputTagComponent_div_22_div_3_Template, 2, 4, "div", 30);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r7 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r7.hasCleaner);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r7.showHint);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r7.icon);
  }
}
function TuiInputTagComponent_ng_template_23_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "tui-svg", 36);
  }
  if (rf & 2) {
    const ctx_r9 = ɵɵnextContext();
    ɵɵproperty("src", ctx_r9.icons.error);
  }
}
var _c6 = [[["tuiContent"]], [["select"]], "*"];
var _c7 = ["tuiContent", "select", "*"];
var TUI_INPUT_TAG_DEFAULT_OPTIONS = {
  autoColor: false,
  separator: ",",
  tagStatus: "primary",
  uniqueTags: true
};
var TUI_INPUT_TAG_OPTIONS = tuiCreateToken(TUI_INPUT_TAG_DEFAULT_OPTIONS);
function tuiInputTagOptionsProvider(options) {
  return tuiProvideOptions(TUI_INPUT_TAG_OPTIONS, options, TUI_INPUT_TAG_DEFAULT_OPTIONS);
}
var TAG_SIZE_REM = {
  s: 1.25,
  m: 1.5,
  l: 2
};
var LINE_HEIGHT_REM = {
  s: 1,
  m: 1.25,
  l: 1.25
};
var TAG_VERTICAL_SPACE_REM = 0.125;
var TuiInputTagComponent = class extends AbstractTuiMultipleControl {
  constructor(control, cdr, el, modeDirective, mode$, hintOptions, controller, options, icons) {
    super(control, cdr);
    this.el = el;
    this.modeDirective = modeDirective;
    this.mode$ = mode$;
    this.hintOptions = hintOptions;
    this.controller = controller;
    this.options = options;
    this.icons = icons;
    this.tags = EMPTY_QUERY;
    this.separator = this.options.separator;
    this.search = "";
    this.editable = true;
    this.tagValidator = ALWAYS_TRUE_HANDLER;
    this.expandable = true;
    this.rows = Infinity;
    this.inputHidden = false;
    this.uniqueTags = this.options.uniqueTags;
    this.autoColor = this.options.autoColor;
    this.maxLength = null;
    this.placeholder = "";
    this.removable = true;
    this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
    this.searchChange = new EventEmitter();
    this.status$ = this.mode$.pipe(map(() => this.status));
    this.open = false;
  }
  set pseudoFocusedSetter(value) {
    if (!value && !this.focused) {
      this.scrollTo(0);
    }
    this.pseudoFocus = value;
  }
  get nativeFocusableElement() {
    return !this.focusableElement || this.computedDisabled ? null : this.focusableElement.nativeElement;
  }
  get focused() {
    var _a;
    return tuiIsNativeFocusedIn(this.el.nativeElement) || !!((_a = this.hostedDropdown) === null || _a === void 0 ? void 0 : _a.focused);
  }
  get appearance() {
    return this.controller.appearance;
  }
  get size() {
    return this.controller.size;
  }
  get labelOutside() {
    const {
      size,
      labelOutside
    } = this.controller;
    return size === "s" || labelOutside;
  }
  get iconLeft() {
    return this.controller.iconLeft;
  }
  get icon() {
    return this.controller.icon;
  }
  get iconCleaner() {
    return this.controller.options.iconCleaner;
  }
  get hasCleaner() {
    return this.controller.cleaner && this.hasValue && this.interactive;
  }
  get hasNativeValue() {
    return !!this.search;
  }
  get hasValue() {
    return !!this.value.length || this.hasNativeValue;
  }
  get hasPlaceholder() {
    return !this.labelOutside || !this.hasValue && (!this.hasExampleText || this.inputHidden);
  }
  get placeholderRaised() {
    return !this.labelOutside && (this.computedFocused && !this.readOnly || this.hasValue);
  }
  get hasExampleText() {
    var _a;
    return !!((_a = this.nativeFocusableElement) === null || _a === void 0 ? void 0 : _a.placeholder) && this.computedFocused && !this.hasValue && !this.readOnly;
  }
  get hasRightIcons() {
    var _a;
    return this.hasCleaner || !!this.icon || !!((_a = this.hintOptions) === null || _a === void 0 ? void 0 : _a.content) && !this.computedDisabled;
  }
  get showHint() {
    var _a;
    return !!((_a = this.hintOptions) === null || _a === void 0 ? void 0 : _a.content) && (this.controller.options.hintOnDisabled || !this.computedDisabled);
  }
  get status() {
    var _a;
    return ((_a = this.modeDirective) === null || _a === void 0 ? void 0 : _a.mode) ? "default" : this.options.tagStatus;
  }
  get canOpen() {
    return this.interactive && !!this.datalist;
  }
  get computeMaxHeight() {
    return this.expandable ? this.rows * this.lineHeight : null;
  }
  onFocusInOut() {
    this.cdr.detectChanges();
  }
  detectRetargetFromLabel(event) {
    if (tuiRetargetedBoundaryCrossing(event)) {
      event.stopImmediatePropagation();
    }
  }
  getLeftContent(tag) {
    return !this.tagValidator(tag) && this.errorIconTemplate ? this.errorIconTemplate : "";
  }
  onCleanerClick() {
    this.updateSearch("");
    this.clear();
    this.focusInput();
  }
  onActiveZone(active) {
    this.open = false;
    this.addTag();
    this.updateFocused(active);
    if (!active && !this.computedFocused) {
      this.scrollTo(0);
    }
  }
  onMouseDown(event) {
    var _a;
    const actualTarget = tuiGetActualTarget(event);
    if (!this.focusableElement || actualTarget === this.focusableElement.nativeElement || !tuiIsElement(event.target) || ((_a = this.cleanerSvg) === null || _a === void 0 ? void 0 : _a.nativeElement.contains(event.target)) || this.tagsContainer && actualTarget !== this.tagsContainer.nativeElement && this.tagsContainer.nativeElement.contains(actualTarget)) {
      return;
    }
    event.preventDefault();
    this.focusInput();
  }
  onFieldKeyDownBackspace(event) {
    if (!this.labelOutside && !this.hasNativeValue && this.value.length) {
      this.deleteLastEnabledItem();
    } else {
      this.onFieldKeyDownArrowLeft(event);
    }
  }
  onFieldKeyDownArrowLeft(event) {
    if (!this.labelOutside || this.hasNativeValue || !this.value.length) {
      return;
    }
    event.preventDefault();
    this.tags.last.nativeElement.focus();
  }
  onFieldKeyDownEnter() {
    this.addTag();
    this.scrollTo();
  }
  onTagKeyDownArrowLeft(currentIndex) {
    if (currentIndex > 0) {
      this.onScrollKeyDown(currentIndex, -1);
    }
  }
  onTagKeyDownArrowRight(currentIndex) {
    if (currentIndex === this.value.length - 1) {
      this.focusInput(false);
    } else {
      this.onScrollKeyDown(currentIndex, 1);
    }
  }
  onTagEdited(value, index) {
    this.focusInput(value === "");
    this.value = this.filterValue(this.value.map((tag, tagIndex) => tagIndex !== index ? tag : value.split(this.separator).map((tag2) => tag2.trim()).filter(Boolean)).reduce((result, item) => result.concat(item), []));
  }
  handleOption(item) {
    this.focusInput();
    this.updateSearch("");
    this.value = this.filterValue(this.value.concat(item));
    this.open = false;
    this.scrollTo();
  }
  onInput(value) {
    const array = value.split(this.separator);
    const tags = array.map((item) => this.clippedValue(item.trim())).filter((item, index, {
      length
    }) => item.length > 0 && index !== length - 1);
    const validated = tags.filter((tag) => !this.disabledItemHandler(tag));
    if (array.length > 1) {
      this.updateSearch(this.clippedValue(array[array.length - 1].trim()));
      this.value = this.filterValue([...this.value, ...validated]);
    } else {
      this.updateSearch(this.clippedValue(value));
    }
    this.open = this.hasNativeValue;
  }
  onPaste(event) {
    const pasted = tuiGetClipboardDataText(event);
    this.onInput(pasted || "");
  }
  onDrop({
    dataTransfer
  }) {
    if (dataTransfer) {
      this.onInput(dataTransfer.getData("text") || "");
    }
  }
  setDisabledState() {
    super.setDisabledState();
    this.open = false;
  }
  trackByFn(_, tag) {
    return tag.toString();
  }
  scrollTo(scrollLeft) {
    var _a;
    if (scrollLeft === void 0) {
      scrollLeft = (_a = this.scrollBar) === null || _a === void 0 ? void 0 : _a.nativeElement.scrollWidth;
    }
    timer(0).pipe(takeUntil(this.destroy$)).subscribe(() => {
      if (this.scrollBar) {
        this.scrollBar.nativeElement.scrollLeft = scrollLeft || 0;
      }
    });
  }
  filterValue(value) {
    const seen = /* @__PURE__ */ new Set();
    return value.reverse().filter((item) => !this.uniqueTags || item && !seen.has(item) && seen.add(item)).reverse();
  }
  onScrollKeyDown(currentIndex, flag) {
    const tag = this.tags.find((_item, index) => index === currentIndex + flag);
    if (!tag || !this.scrollBar) {
      return;
    }
    tag.nativeElement.focus();
    if (flag * this.scrollBar.nativeElement.clientWidth - flag * tag.nativeElement.offsetLeft - tag.nativeElement.clientWidth < 0) {
      this.scrollBar.nativeElement.scrollLeft += flag * tag.nativeElement.clientWidth;
    }
  }
  updateSearch(value) {
    if (this.focusableElement) {
      this.focusableElement.nativeElement.value = value;
    }
    this.search = value;
    this.searchChange.emit(value);
  }
  addTag() {
    var _a, _b;
    const inputValue = (_b = (_a = this.search) === null || _a === void 0 ? void 0 : _a.trim()) !== null && _b !== void 0 ? _b : "";
    if (!inputValue || this.disabledItemHandler(inputValue)) {
      return;
    }
    this.updateSearch("");
    this.value = this.filterValue(this.value.concat(inputValue));
  }
  deleteLastEnabledItem() {
    for (let index = this.value.length - 1; index >= 0; index--) {
      if (!this.disabledItemHandler(this.value[index])) {
        this.value = tuiArrayRemove(this.value, index);
        break;
      }
    }
  }
  focusInput(preventScroll = true) {
    var _a;
    (_a = this.nativeFocusableElement) === null || _a === void 0 ? void 0 : _a.focus({
      preventScroll
    });
  }
  clippedValue(value) {
    return value.slice(0, this.maxLength || value.length);
  }
  get lineHeight() {
    return this.labelOutside ? TAG_SIZE_REM[this.controller.size] + 2 * TAG_VERTICAL_SPACE_REM : LINE_HEIGHT_REM[this.controller.size];
  }
};
TuiInputTagComponent.ɵfac = function TuiInputTagComponent_Factory(t) {
  return new (t || TuiInputTagComponent)(ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(TuiModeDirective, 8), ɵɵdirectiveInject(TUI_MODE), ɵɵdirectiveInject(TuiHintOptionsDirective, 8), ɵɵdirectiveInject(TUI_TEXTFIELD_WATCHED_CONTROLLER), ɵɵdirectiveInject(TUI_INPUT_TAG_OPTIONS), ɵɵdirectiveInject(TUI_COMMON_ICONS));
};
TuiInputTagComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiInputTagComponent,
  selectors: [["tui-input-tag"]],
  contentQueries: function TuiInputTagComponent_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, TuiDataListDirective, 5, TemplateRef);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.datalist = _t.first);
    }
  },
  viewQuery: function TuiInputTagComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(TuiHostedDropdownComponent, 5);
      ɵɵviewQuery(_c020, 5);
      ɵɵviewQuery(_c112, 5);
      ɵɵviewQuery(_c26, 5, ElementRef);
      ɵɵviewQuery(TuiScrollbarComponent, 5, ElementRef);
      ɵɵviewQuery(_c32, 5);
      ɵɵviewQuery(_c42, 5, ElementRef);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.hostedDropdown = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.focusableElement = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.tagsContainer = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.cleanerSvg = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.scrollBar = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.errorIconTemplate = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.tags = _t);
    }
  },
  hostVars: 7,
  hostBindings: function TuiInputTagComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("focusin.capture.silent", function TuiInputTagComponent_focusin_capture_silent_HostBindingHandler() {
        return ctx.onFocusInOut();
      })("focusout.capture.silent", function TuiInputTagComponent_focusout_capture_silent_HostBindingHandler() {
        return ctx.onFocusInOut();
      });
    }
    if (rf & 2) {
      ɵɵattribute("data-size", ctx.size);
      ɵɵclassProp("_expandable", ctx.expandable)("_label-outside", ctx.labelOutside)("_icon-left", ctx.iconLeft);
    }
  },
  inputs: {
    separator: "separator",
    search: "search",
    editable: "editable",
    tagValidator: "tagValidator",
    expandable: "expandable",
    rows: "rows",
    inputHidden: "inputHidden",
    uniqueTags: "uniqueTags",
    autoColor: "autoColor",
    maxLength: "maxLength",
    placeholder: "placeholder",
    removable: "removable",
    disabledItemHandler: "disabledItemHandler",
    pseudoFocusedSetter: ["pseudoFocused", "pseudoFocusedSetter"]
  },
  outputs: {
    searchChange: "searchChange"
  },
  features: [ɵɵProvidersFeature([tuiAsFocusableItemAccessor(TuiInputTagComponent), tuiAsControl(TuiInputTagComponent), tuiAsDataListHost(TuiInputTagComponent), TEXTFIELD_CONTROLLER_PROVIDER, MODE_PROVIDER], [FIXED_DROPDOWN_CONTROLLER_PROVIDER]), ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c7,
  decls: 25,
  vars: 34,
  consts: [[4, "ngIf"], [1, "t-hosted", 3, "canOpen", "content", "open", "openChange", "tuiActiveZoneChange"], ["tuiWrapper", "", 3, "appearance", "disabled", "focus", "hover", "invalid", "readOnly", "click.prevent.silent", "mousedown"], [1, "t-content"], ["class", "t-icon t-icon_left t-textfield-icon t-icon-wrapper", 4, "ngIf"], [1, "t-wrapper"], [1, "t-absolute-wrapper"], ["automation-id", "tui-input-tag__placeholder", "class", "t-placeholder", 3, "t-placeholder_raised", 4, "ngIf"], [1, "t-scrollbar", 3, "hidden"], [1, "t-tags"], [4, "ngIf", "ngIfElse"], ["text", ""], [1, "t-input-wrapper"], [1, "t-ghost"], ["automation-id", "tui-input-tag__native", "type", "text", 1, "t-native", 3, "disabled", "id", "ngModel", "placeholder", "readOnly", "tuiFocusable", "drop.prevent", "keydown.arrowLeft", "keydown.backspace", "keydown.enter.prevent", "ngModelChange", "paste.prevent"], ["focusableElement", ""], [1, "t-value-content"], ["class", "t-icons t-icon-wrapper", 4, "ngIf"], ["errorIcon", ""], [1, "t-icon", "t-icon_left", "t-textfield-icon", "t-icon-wrapper"], ["appearance", "icon", "tuiWrapper", "", 3, "src", 4, "polymorpheusOutlet", "polymorpheusOutletContext"], ["appearance", "icon", "tuiWrapper", "", 3, "src"], ["automation-id", "tui-input-tag__placeholder", 1, "t-placeholder"], ["automation-id", "tui-input-tag__tag", "class", "t-tag", 3, "autoColor", "disabled", "editable", "hoverable", "leftContent", "maxLength", "removable", "separator", "size", "status", "tuiFocusable", "value", "edited", "keydown.arrowLeft.prevent", "keydown.arrowRight.prevent", 4, "ngFor", "ngForOf", "ngForTrackBy"], ["automation-id", "tui-input-tag__tag", 1, "t-tag", 3, "autoColor", "disabled", "editable", "hoverable", "leftContent", "maxLength", "removable", "separator", "size", "status", "tuiFocusable", "value", "edited", "keydown.arrowLeft.prevent", "keydown.arrowRight.prevent"], ["tag", ""], ["class", "t-text", 3, "t-text_comma", "t-text_disabled", "t-text_error", "textContent", 4, "ngFor", "ngForOf"], [1, "t-text", 3, "textContent"], [1, "t-icons", "t-icon-wrapper"], ["automation-id", "tui-input-tag__tooltip", "class", "t-tooltip", 3, "content", "describeId", 4, "ngIf"], ["class", "t-icon t-textfield-icon", 4, "ngIf"], ["appearance", "icon", "automation-id", "tui-input-tag__cleaner", "tuiWrapper", "", "class", "t-cleaner", 3, "src", "click.stop", 4, "polymorpheusOutlet", "polymorpheusOutletContext"], ["appearance", "icon", "automation-id", "tui-input-tag__cleaner", "tuiWrapper", "", 1, "t-cleaner", 3, "src", "click.stop"], ["cleaner", ""], ["automation-id", "tui-input-tag__tooltip", 1, "t-tooltip", 3, "content", "describeId"], [1, "t-icon", "t-textfield-icon"], [1, "t-error-icon", 3, "src"]],
  template: function TuiInputTagComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c6);
      ɵɵtemplate(0, TuiInputTagComponent_ng_container_0_Template, 1, 0, "ng-container", 0);
      ɵɵpipe(1, "async");
      ɵɵelementStart(2, "tui-hosted-dropdown", 1);
      ɵɵlistener("openChange", function TuiInputTagComponent_Template_tui_hosted_dropdown_openChange_2_listener($event) {
        return ctx.open = $event;
      })("tuiActiveZoneChange", function TuiInputTagComponent_Template_tui_hosted_dropdown_tuiActiveZoneChange_2_listener($event) {
        return ctx.onActiveZone($event);
      });
      ɵɵelementStart(3, "div", 2);
      ɵɵlistener("click.prevent.silent", function TuiInputTagComponent_Template_div_click_prevent_silent_3_listener($event) {
        return ctx.detectRetargetFromLabel($event);
      })("mousedown", function TuiInputTagComponent_Template_div_mousedown_3_listener($event) {
        return ctx.onMouseDown($event);
      });
      ɵɵelementStart(4, "div", 3);
      ɵɵtemplate(5, TuiInputTagComponent_div_5_Template, 2, 4, "div", 4);
      ɵɵelementStart(6, "div", 5)(7, "div", 6);
      ɵɵtemplate(8, TuiInputTagComponent_div_8_Template, 2, 2, "div", 7);
      ɵɵelementEnd();
      ɵɵelementStart(9, "tui-scrollbar", 8)(10, "div", 9);
      ɵɵtemplate(11, TuiInputTagComponent_ng_container_11_Template, 2, 2, "ng-container", 10);
      ɵɵtemplate(12, TuiInputTagComponent_ng_template_12_Template, 1, 1, "ng-template", null, 11, ɵɵtemplateRefExtractor);
      ɵɵelementStart(14, "div", 12)(15, "div", 13);
      ɵɵtext(16);
      ɵɵelementEnd();
      ɵɵelementStart(17, "input", 14, 15);
      ɵɵlistener("drop.prevent", function TuiInputTagComponent_Template_input_drop_prevent_17_listener($event) {
        return ctx.onDrop($event);
      })("keydown.arrowLeft", function TuiInputTagComponent_Template_input_keydown_arrowLeft_17_listener($event) {
        return ctx.onFieldKeyDownArrowLeft($event);
      })("keydown.backspace", function TuiInputTagComponent_Template_input_keydown_backspace_17_listener($event) {
        return ctx.onFieldKeyDownBackspace($event);
      })("keydown.enter.prevent", function TuiInputTagComponent_Template_input_keydown_enter_prevent_17_listener() {
        return ctx.onFieldKeyDownEnter();
      })("ngModelChange", function TuiInputTagComponent_Template_input_ngModelChange_17_listener($event) {
        return ctx.onInput($event);
      })("paste.prevent", function TuiInputTagComponent_Template_input_paste_prevent_17_listener($event) {
        return ctx.onPaste($event);
      });
      ɵɵelementEnd()()();
      ɵɵelementStart(19, "div", 16);
      ɵɵprojection(20);
      ɵɵelementEnd()()();
      ɵɵprojection(21, 1);
      ɵɵtemplate(22, TuiInputTagComponent_div_22_Template, 4, 3, "div", 17);
      ɵɵelementEnd();
      ɵɵtemplate(23, TuiInputTagComponent_ng_template_23_Template, 1, 1, "ng-template", null, 18, ɵɵtemplateRefExtractor);
      ɵɵelementEnd()();
    }
    if (rf & 2) {
      const _r4 = ɵɵreference(13);
      let tmp_14_0;
      ɵɵproperty("ngIf", ɵɵpipeBind1(1, 32, ctx.hintOptions == null ? null : ctx.hintOptions.change$));
      ɵɵadvance(2);
      ɵɵproperty("canOpen", ctx.canOpen)("content", ctx.datalist || "")("open", ctx.open);
      ɵɵadvance(1);
      ɵɵproperty("appearance", ctx.appearance)("disabled", ctx.computedDisabled)("focus", ctx.computedFocused)("hover", ctx.pseudoHover)("invalid", ctx.computedInvalid)("readOnly", ctx.readOnly);
      ɵɵadvance(2);
      ɵɵproperty("ngIf", ctx.iconLeft);
      ɵɵadvance(3);
      ɵɵproperty("ngIf", ctx.hasPlaceholder);
      ɵɵadvance(1);
      ɵɵstyleProp("max-height", ctx.computeMaxHeight, "rem");
      ɵɵproperty("hidden", !ctx.expandable);
      ɵɵadvance(1);
      ɵɵclassProp("t-tags_empty", (!ctx.focused || ctx.inputHidden) && !(ctx.value == null ? null : ctx.value.length) && !(ctx.search == null ? null : (tmp_14_0 = ctx.search.trim()) == null ? null : tmp_14_0.length));
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.labelOutside)("ngIfElse", _r4);
      ɵɵadvance(3);
      ɵɵclassProp("t-input-wrapper_collapsed", ctx.computedDisabled || ctx.readOnly || ctx.inputHidden);
      ɵɵadvance(2);
      ɵɵtextInterpolate(ctx.search);
      ɵɵadvance(1);
      ɵɵclassProp("t-native_hidden", ctx.inputHidden);
      ɵɵproperty("disabled", ctx.computedDisabled)("id", ctx.id)("ngModel", ctx.search)("placeholder", ctx.placeholder)("readOnly", ctx.readOnly || ctx.inputHidden)("tuiFocusable", ctx.computedFocusable);
      ɵɵattribute("maxLength", ctx.maxLength);
      ɵɵadvance(5);
      ɵɵproperty("ngIf", ctx.hasRightIcons);
    }
  },
  dependencies: [TuiHostedDropdownComponent, TuiSvgComponent, TuiScrollbarComponent, TuiTagComponent, TuiTooltipComponent, NgIf, TuiActiveZoneDirective, TuiWrapperDirective, PolymorpheusOutletDirective, NgForOf, TuiFocusableDirective, DefaultValueAccessor, NgControlStatus, NgModel, AsyncPipe],
  styles: ['[_nghost-%COMP%]{font:var(--tui-font-text-s);color:var(--tui-text-01);position:relative;display:block;text-align:left;border-radius:var(--tui-radius-m);height:var(--tui-height);min-height:var(--tui-height);max-height:var(--tui-height)}[data-size=s][_nghost-%COMP%]{--tui-height: var(--tui-height-s)}[data-size=m][_nghost-%COMP%]{--tui-height: var(--tui-height-m)}[data-size=l][_nghost-%COMP%]{--tui-height: var(--tui-height-l);font:var(--tui-font-text-m);line-height:1.25rem}.t-input[_ngcontent-%COMP%]{font:var(--tui-font-text-s);color:var(--tui-text-01);padding:0;margin:0;border-width:0;border-radius:inherit;background:none;font-size:inherit;line-height:inherit;font-weight:inherit;color:inherit;caret-color:currentColor;outline:none;-webkit-appearance:none;-moz-appearance:none;appearance:none;word-break:keep-all;-webkit-text-fill-color:currentColor;position:absolute;top:0;left:0;width:100%;height:100%;border-style:solid;border-color:transparent;border-inline-start-width:var(--border-start, 0);border-inline-end-width:var(--border-end, 0);text-indent:var(--text-indent);text-align:inherit;box-sizing:border-box;white-space:nowrap;overflow:hidden;text-transform:inherit;resize:none}.t-input[_ngcontent-%COMP%]:-webkit-autofill, .t-input[_ngcontent-%COMP%]:-webkit-autofill:hover, .t-input[_ngcontent-%COMP%]:-webkit-autofill:focus{caret-color:var(--tui-base-09);border-radius:inherit;color:inherit!important;background-color:transparent!important;-webkit-text-fill-color:var(--tui-text-01)!important;border-color:var(--tui-autofill);-webkit-box-shadow:0 0 0 100rem var(--tui-autofill) inset!important}@supports (-webkit-touch-callout: none){.t-input[_ngcontent-%COMP%]:active{font-size:1rem}}.t-input[inputMode=none][_ngcontent-%COMP%]{caret-color:transparent}.t-input[_ngcontent-%COMP%]:-webkit-autofill, .t-input[_ngcontent-%COMP%]:-webkit-autofill:first-line{font-size:inherit;line-height:inherit}.t-input[_ngcontent-%COMP%]::-webkit-caps-lock-indicator, .t-input[_ngcontent-%COMP%]::-webkit-contacts-auto-fill-button, .t-input[_ngcontent-%COMP%]::-webkit-credit-card-auto-fill-button, .t-input[_ngcontent-%COMP%]::-webkit-credentials-auto-fill-button, .t-input[_ngcontent-%COMP%]::-webkit-strong-password-auto-fill-button{content:none!important;position:absolute;left:-62.4375rem;top:-62.4375rem;z-index:-999;display:none!important;background:transparent!important;pointer-events:none!important}.t-input[_ngcontent-%COMP%]::placeholder{color:var(--tui-text-03);opacity:0}._focused[_nghost-%COMP%]:not(._readonly)   .t-input[_ngcontent-%COMP%]::placeholder, tui-primitive-textfield._focused:not(._readonly)[_nghost-%COMP%]   .t-input[_ngcontent-%COMP%]::placeholder, tui-primitive-textfield._focused:not(._readonly)   [_nghost-%COMP%]   .t-input[_ngcontent-%COMP%]::placeholder, tui-textarea._focused:not(._readonly)[_nghost-%COMP%]   .t-input[_ngcontent-%COMP%]::placeholder, tui-textarea._focused:not(._readonly)   [_nghost-%COMP%]   .t-input[_ngcontent-%COMP%]::placeholder, tui-text-area._focused:not(._readonly)[_nghost-%COMP%]   .t-input[_ngcontent-%COMP%]::placeholder, tui-text-area._focused:not(._readonly)   [_nghost-%COMP%]   .t-input[_ngcontent-%COMP%]::placeholder{opacity:1}[tuiWrapper][data-mode=onDark][_ngcontent-%COMP%]   .t-input[_ngcontent-%COMP%]:-webkit-autofill, .t-input   [tuiWrapper][data-mode="onDark"][_nghost-%COMP%]:-webkit-autofill, [tuiWrapper][data-mode="onDark"]   [_nghost-%COMP%]:-webkit-autofill, [tuiWrapper][data-mode=onDark][_ngcontent-%COMP%]   .t-input[_ngcontent-%COMP%]:-webkit-autofill:hover, .t-input   [tuiWrapper][data-mode="onDark"][_nghost-%COMP%]:-webkit-autofill:hover, [tuiWrapper][data-mode="onDark"]   [_nghost-%COMP%]:-webkit-autofill:hover, [tuiWrapper][data-mode=onDark][_ngcontent-%COMP%]   .t-input[_ngcontent-%COMP%]:-webkit-autofill:focus, .t-input   [tuiWrapper][data-mode="onDark"][_nghost-%COMP%]:-webkit-autofill:focus, [tuiWrapper][data-mode="onDark"]   [_nghost-%COMP%]:-webkit-autofill:focus{caret-color:var(--tui-base-09);border-radius:inherit;color:inherit!important;background-color:transparent!important;-webkit-text-fill-color:var(--tui-text-01-night)!important;border-color:var(--tui-autofill-night);-webkit-box-shadow:0 0 0 100rem var(--tui-autofill-night) inset!important}[tuiWrapper][data-mode=onDark][_ngcontent-%COMP%]   .t-input[_ngcontent-%COMP%]::placeholder, .t-input   [tuiWrapper][data-mode="onDark"][_nghost-%COMP%]::placeholder, [tuiWrapper][data-mode="onDark"]   [_nghost-%COMP%]::placeholder{color:var(--tui-text-03-night)}[data-size=s][_nghost-%COMP%]   .t-input[_ngcontent-%COMP%], .t-input   tui-primitive-textfield[data-size="s"][_nghost-%COMP%]:not(tui-primitive-textfield), tui-primitive-textfield[data-size="s"]   [_nghost-%COMP%]:not(tui-primitive-textfield), .t-input   tui-textarea[data-size="s"][_nghost-%COMP%]:not(tui-textarea), tui-textarea[data-size="s"]   [_nghost-%COMP%]:not(tui-textarea), .t-input   tui-text-area[data-size="s"][_nghost-%COMP%]:not(tui-text-area), tui-text-area[data-size="s"]   [_nghost-%COMP%]:not(tui-text-area){padding:0 var(--tui-padding-s)}[data-size=m][_nghost-%COMP%]   .t-input[_ngcontent-%COMP%], .t-input   tui-primitive-textfield[data-size="m"][_nghost-%COMP%]:not(tui-primitive-textfield), tui-primitive-textfield[data-size="m"]   [_nghost-%COMP%]:not(tui-primitive-textfield), .t-input   tui-textarea[data-size="m"][_nghost-%COMP%]:not(tui-textarea), tui-textarea[data-size="m"]   [_nghost-%COMP%]:not(tui-textarea), .t-input   tui-text-area[data-size="m"][_nghost-%COMP%]:not(tui-text-area), tui-text-area[data-size="m"]   [_nghost-%COMP%]:not(tui-text-area){padding:0 var(--tui-padding-m)}[data-size=l][_nghost-%COMP%]   .t-input[_ngcontent-%COMP%], .t-input   tui-primitive-textfield[data-size="l"][_nghost-%COMP%]:not(tui-primitive-textfield), tui-primitive-textfield[data-size="l"]   [_nghost-%COMP%]:not(tui-primitive-textfield), .t-input   tui-textarea[data-size="l"][_nghost-%COMP%]:not(tui-textarea), tui-textarea[data-size="l"]   [_nghost-%COMP%]:not(tui-textarea), .t-input   tui-text-area[data-size="l"][_nghost-%COMP%]:not(tui-text-area), tui-text-area[data-size="l"]   [_nghost-%COMP%]:not(tui-text-area){padding:0 var(--tui-padding-l)}._disabled[_nghost-%COMP%]   .t-input[_ngcontent-%COMP%], .t-input   tui-primitive-textfield._disabled[_nghost-%COMP%], tui-primitive-textfield._disabled   [_nghost-%COMP%], .t-input   tui-textarea._disabled[_nghost-%COMP%], tui-textarea._disabled   [_nghost-%COMP%], .t-input   tui-text-area._disabled[_nghost-%COMP%], tui-text-area._disabled   [_nghost-%COMP%]{pointer-events:none}[data-size=l][_nghost-%COMP%]:not(._label-outside)   .t-input[_ngcontent-%COMP%], .t-input   tui-primitive-textfield[data-size="l"]:not(._label-outside)[_nghost-%COMP%]:not(tui-primitive-textfield), tui-primitive-textfield[data-size="l"]:not(._label-outside)   [_nghost-%COMP%]:not(tui-primitive-textfield){padding-top:1.25rem}[data-size=m][_nghost-%COMP%]:not(._label-outside)   .t-input[_ngcontent-%COMP%], .t-input   tui-primitive-textfield[data-size="m"]:not(._label-outside)[_nghost-%COMP%]:not(tui-primitive-textfield), tui-primitive-textfield[data-size="m"]:not(._label-outside)   [_nghost-%COMP%]:not(tui-primitive-textfield){padding-top:1rem}[data-size=l][_nghost-%COMP%]:not(._label-outside)   .t-input[_ngcontent-%COMP%]{padding-top:1.25rem}[data-size=l][_nghost-%COMP%]:not(._label-outside)   .t-input[_ngcontent-%COMP%]:-webkit-autofill + .t-content[_ngcontent-%COMP%]   .t-placeholder[_ngcontent-%COMP%]{font-size:.8156rem;transform:translateY(-.625rem)}[data-size=m][_nghost-%COMP%]:not(._label-outside)   .t-input[_ngcontent-%COMP%]:-webkit-autofill + .t-content[_ngcontent-%COMP%]   .t-placeholder[_ngcontent-%COMP%]{font-size:.69rem;transform:translateY(-.5rem)}._hidden[_nghost-%COMP%]   input.t-input[_ngcontent-%COMP%], .t-input   tui-primitive-textfield._hidden[_nghost-%COMP%], tui-primitive-textfield._hidden   [_nghost-%COMP%]{opacity:0;text-indent:-10em;-webkit-user-select:none}.t-content[_ngcontent-%COMP%]{display:flex;height:100%;width:100%;box-sizing:border-box;align-items:center;overflow:hidden}[data-size=s][_nghost-%COMP%]   .t-content[_ngcontent-%COMP%]{padding:0 var(--tui-padding-s)}[data-size=m][_nghost-%COMP%]   .t-content[_ngcontent-%COMP%]{padding:0 var(--tui-padding-m)}[data-size=l][_nghost-%COMP%]   .t-content[_ngcontent-%COMP%]{padding:0 var(--tui-padding-l)}.t-wrapper[_ngcontent-%COMP%]{flex:1;min-width:0;-webkit-padding-end:.25rem;padding-inline-end:.25rem}.t-placeholder[_ngcontent-%COMP%]{transition-property:transform,font-size,color,letter-spacing;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;width:100%;-webkit-user-select:none;-moz-user-select:none;user-select:none;font:var(--tui-font-text-s);color:var(--tui-text-02);pointer-events:none;will-change:transform;transform:translateY(0)}@supports (-webkit-hyphens: none){.t-placeholder[_ngcontent-%COMP%]{will-change:unset;transition-property:transform,color,letter-spacing}}.t-placeholder_raised[_ngcontent-%COMP%]{transform:translateY(-.625rem)}[data-size=m][_nghost-%COMP%]   .t-placeholder_raised[_ngcontent-%COMP%]{font:var(--tui-font-text-xs);line-height:1.25rem;transform:translateY(-.5rem);letter-spacing:.025rem}._invalid[_nghost-%COMP%]:not(._focused)   .t-placeholder_raised[_ngcontent-%COMP%], ._invalid[_nghost-%COMP%]:not(._focused):hover   .t-placeholder_raised[_ngcontent-%COMP%]{color:var(--tui-error-fill)}._invalid[_nghost-%COMP%]:not(._focused)   [tuiWrapper][data-mode=onDark][_ngcontent-%COMP%]   .t-placeholder_raised[_ngcontent-%COMP%], ._invalid[_nghost-%COMP%]:not(._focused):hover   [tuiWrapper][data-mode=onDark][_ngcontent-%COMP%]   .t-placeholder_raised[_ngcontent-%COMP%]{color:var(--tui-error-fill-night)}._focused[_nghost-%COMP%]   .t-placeholder[_ngcontent-%COMP%], [data-size=m]._focused._label-outside[_nghost-%COMP%]   .t-placeholder[_ngcontent-%COMP%], [data-size=l]._focused._label-outside[_nghost-%COMP%]   .t-placeholder[_ngcontent-%COMP%]{color:var(--tui-text-03)}[data-size=l][_nghost-%COMP%]   .t-placeholder[_ngcontent-%COMP%]{font:var(--tui-font-text-m);line-height:1.25rem}[data-size=l][_nghost-%COMP%]   .t-placeholder_raised[_ngcontent-%COMP%]{font-size:.8156rem}[data-size=m]._focused[_nghost-%COMP%]:not(._label-outside)   .t-placeholder[_ngcontent-%COMP%], [data-size=l]._focused[_nghost-%COMP%]:not(._label-outside)   .t-placeholder[_ngcontent-%COMP%]{color:var(--tui-text-01)}[tuiWrapper][data-mode=onDark][_ngcontent-%COMP%]   .t-placeholder[_ngcontent-%COMP%]{color:var(--tui-text-02-night)}[data-size=m]._focused[_nghost-%COMP%]:not(._label-outside)   [tuiWrapper][data-mode=onDark][_ngcontent-%COMP%]   .t-placeholder[_ngcontent-%COMP%], [data-size=l]._focused[_nghost-%COMP%]:not(._label-outside)   [tuiWrapper][data-mode=onDark][_ngcontent-%COMP%]   .t-placeholder[_ngcontent-%COMP%]{color:var(--tui-text-01-night)}._focused[_nghost-%COMP%]   [tuiWrapper][data-mode=onDark][_ngcontent-%COMP%]   .t-placeholder[_ngcontent-%COMP%], [data-size=m]._focused._label-outside[_nghost-%COMP%]   [tuiWrapper][data-mode=onDark][_ngcontent-%COMP%]   .t-placeholder[_ngcontent-%COMP%], [data-size=l]._focused._label-outside[_nghost-%COMP%]   [tuiWrapper][data-mode=onDark][_ngcontent-%COMP%]   .t-placeholder[_ngcontent-%COMP%]{color:var(--tui-text-02-night)}.t-cleaner[_ngcontent-%COMP%]{position:relative;display:flex;width:1.5rem;height:1.5rem;align-items:center;justify-content:center;box-sizing:border-box;cursor:pointer;pointer-events:none;pointer-events:auto}._readonly[_nghost-%COMP%]   .t-cleaner[_ngcontent-%COMP%], ._disabled[_nghost-%COMP%]   .t-cleaner[_ngcontent-%COMP%]{pointer-events:none}.t-icon[_ngcontent-%COMP%]{position:relative;display:flex;width:1.5rem;height:1.5rem;align-items:center;justify-content:center;box-sizing:border-box;cursor:pointer;pointer-events:none}[data-size=s][_nghost-%COMP%]   .t-icon_left[_ngcontent-%COMP%]{-webkit-margin-start:-.375rem;margin-inline-start:-.375rem}[data-size=m][_nghost-%COMP%]   .t-icon_left[_ngcontent-%COMP%]{-webkit-margin-start:-.125rem;margin-inline-start:-.125rem;-webkit-margin-end:.375rem;margin-inline-end:.375rem}[data-size=l][_nghost-%COMP%]   .t-icon_left[_ngcontent-%COMP%]{-webkit-margin-end:.75rem;margin-inline-end:.75rem}.t-icons[_ngcontent-%COMP%]{display:flex;align-items:center}[data-size=m][_nghost-%COMP%]   .t-icons[_ngcontent-%COMP%]{-webkit-margin-end:-.125rem;margin-inline-end:-.125rem}[data-size=s][_nghost-%COMP%]   .t-icons[_ngcontent-%COMP%]{-webkit-margin-end:-.375rem;margin-inline-end:-.375rem}[_nghost-%COMP%]:not([data-size="s"])   .t-icons[_ngcontent-%COMP%] > [_ngcontent-%COMP%]:not(:first-child){-webkit-margin-start:.25rem;margin-inline-start:.25rem}[_nghost-%COMP%]{cursor:text}._expandable[_nghost-%COMP%]{height:auto;max-height:none}._disabled[_nghost-%COMP%]{pointer-events:none}._readonly[_nghost-%COMP%]{cursor:default}[data-size=m][_nghost-%COMP%]{line-height:1rem}.t-hosted[_ngcontent-%COMP%]{display:block;border-radius:inherit}.t-scrollbar[_ngcontent-%COMP%]{scroll-behavior:smooth;-webkit-margin-start:-.25rem;margin-inline-start:-.25rem;min-width:100%}tui-root._reduced-motion[_nghost-%COMP%]   .t-scrollbar[_ngcontent-%COMP%], tui-root._reduced-motion   [_nghost-%COMP%]   .t-scrollbar[_ngcontent-%COMP%]{scroll-behavior:auto}[_nghost-%COMP%]:not(._label-outside)   .t-scrollbar[_ngcontent-%COMP%], ._label-outside._icon-left[_nghost-%COMP%]   .t-scrollbar[_ngcontent-%COMP%]{margin:0}[data-size=s]._icon-left[_nghost-%COMP%]   .t-scrollbar[_ngcontent-%COMP%]{-webkit-margin-start:.25rem;margin-inline-start:.25rem}[data-size=m][_nghost-%COMP%]:not(._label-outside)   .t-scrollbar[_ngcontent-%COMP%]{border-top:1rem solid transparent}[data-size=l][_nghost-%COMP%]:not(._label-outside)   .t-scrollbar[_ngcontent-%COMP%]{border-top:1.25rem solid transparent}.t-tags[_ngcontent-%COMP%]{display:flex;-webkit-padding-start:.25rem;padding-inline-start:.25rem}.t-tags_expandable[_ngcontent-%COMP%]{overflow:hidden}.t-tags_empty[_ngcontent-%COMP%]{height:0}._expandable[_nghost-%COMP%]   .t-tags[_ngcontent-%COMP%]{flex-wrap:wrap;white-space:normal;overflow:hidden}._readonly[_nghost-%COMP%]   .t-tags[_ngcontent-%COMP%]{pointer-events:none}[data-size=m][_nghost-%COMP%]:not(._label-outside)   .t-tags[_ngcontent-%COMP%], [data-size=l][_nghost-%COMP%]:not(._label-outside)   .t-tags[_ngcontent-%COMP%]{padding:0}.t-content[_ngcontent-%COMP%]{align-items:flex-start}[data-size=s][_nghost-%COMP%]   .t-content[_ngcontent-%COMP%]{min-height:var(--tui-height-s)}[data-size=m][_nghost-%COMP%]   .t-content[_ngcontent-%COMP%]{min-height:var(--tui-height-m)}[data-size=l][_nghost-%COMP%]   .t-content[_ngcontent-%COMP%]{min-height:var(--tui-height-l)}[data-size=s][_nghost-%COMP%]   .t-icon-wrapper[_ngcontent-%COMP%]{height:var(--tui-height-s)}[data-size=m][_nghost-%COMP%]   .t-icon-wrapper[_ngcontent-%COMP%]{height:var(--tui-height-m)}[data-size=l][_nghost-%COMP%]   .t-icon-wrapper[_ngcontent-%COMP%]{height:var(--tui-height-l)}.t-absolute-wrapper[_ngcontent-%COMP%]{position:absolute;top:0;left:0;width:100%;height:100%;display:flex;flex-direction:column;justify-content:center}[data-size=m][_nghost-%COMP%]   .t-absolute-wrapper[_ngcontent-%COMP%]{height:var(--tui-height-m)}[data-size=l][_nghost-%COMP%]   .t-absolute-wrapper[_ngcontent-%COMP%]{height:var(--tui-height-l)}.t-wrapper[_ngcontent-%COMP%]{position:relative;display:flex;align-items:center;padding:0;box-sizing:border-box}[data-size=s][_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]{min-height:var(--tui-height-s);padding:calc((var(--tui-height-s) - 1.5rem) / 2) 0}[data-size=m][_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]{min-height:var(--tui-height-m);padding:calc((var(--tui-height-m) - var(--tui-height-xs) - .25rem) / 2) 0}[data-size=l][_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]{padding:calc((var(--tui-height-l) - var(--tui-height-s) - .25rem) / 2) 0}[data-size=m][_nghost-%COMP%]:not(._label-outside)   .t-wrapper[_ngcontent-%COMP%]{padding:calc((var(--tui-height-m) - 2rem) / 2) 0}[data-size=l][_nghost-%COMP%]:not(._label-outside)   .t-wrapper[_ngcontent-%COMP%]{padding:calc((var(--tui-height-l) - 2.5rem) / 2) 0}.t-tag[_ngcontent-%COMP%]{margin:.125rem .5rem .125rem -.25rem;-webkit-margin-start:-.25rem;margin-inline-start:-.25rem;-webkit-margin-end:.5rem;margin-inline-end:.5rem;max-width:100%;flex-shrink:0}[data-size=m][_nghost-%COMP%]   .t-tag[_ngcontent-%COMP%]{-webkit-margin-start:-.125rem;margin-inline-start:-.125rem;-webkit-margin-end:.375rem;margin-inline-end:.375rem}.t-text[_ngcontent-%COMP%]:after{content:",\\a0"}.t-text_disabled[_ngcontent-%COMP%]{color:var(--tui-text-03)}.t-text_error[_ngcontent-%COMP%]{color:var(--tui-negative)}.t-text[_ngcontent-%COMP%]:not(.t-text_comma):last-of-type:after{content:""}[_nghost-%COMP%]:not(._expandable)   .t-text[_ngcontent-%COMP%]{white-space:nowrap}.t-input-wrapper[_ngcontent-%COMP%], .t-value-content[_ngcontent-%COMP%]{position:relative;display:flex;flex:1;max-width:100%}[data-size=s][_nghost-%COMP%]   .t-input-wrapper[_ngcontent-%COMP%], [data-size=s][_nghost-%COMP%]   .t-value-content[_ngcontent-%COMP%]{min-height:1.5rem}[data-size=m][_nghost-%COMP%]   .t-input-wrapper[_ngcontent-%COMP%], [data-size=m][_nghost-%COMP%]   .t-value-content[_ngcontent-%COMP%]{min-height:calc(var(--tui-height-xs) + 2 * .125rem)}[data-size=l][_nghost-%COMP%]   .t-input-wrapper[_ngcontent-%COMP%], [data-size=l][_nghost-%COMP%]   .t-value-content[_ngcontent-%COMP%]{min-height:calc(var(--tui-height-s) + 2 * .125rem)}[_nghost-%COMP%]:not(._label-outside)   .t-input-wrapper[_ngcontent-%COMP%], [_nghost-%COMP%]:not(._label-outside)   .t-value-content[_ngcontent-%COMP%]{min-height:1rem}.t-input-wrapper_collapsed[_ngcontent-%COMP%]{flex:0;-webkit-margin-start:-.5rem;margin-inline-start:-.5rem}.t-value-content[_ngcontent-%COMP%]:empty{display:none}.t-ghost[_ngcontent-%COMP%]{visibility:hidden;white-space:pre;text-overflow:clip;min-width:.125rem}[_nghost-%COMP%]:not(._expandable)   .t-ghost[_ngcontent-%COMP%]{min-width:2rem}.t-native[_ngcontent-%COMP%]{margin:0;border-width:0;border-radius:inherit;background:none;font-size:inherit;line-height:inherit;font-weight:inherit;color:inherit;caret-color:currentColor;outline:none;-webkit-appearance:none;-moz-appearance:none;appearance:none;word-break:keep-all;-webkit-text-fill-color:currentColor;position:absolute;top:0;left:0;width:100%;height:100%;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;box-sizing:border-box;padding:0;cursor:inherit}.t-native[_ngcontent-%COMP%]:-webkit-autofill, .t-native[_ngcontent-%COMP%]:-webkit-autofill:hover, .t-native[_ngcontent-%COMP%]:-webkit-autofill:focus{caret-color:var(--tui-base-09);border-radius:inherit;color:inherit!important;background-color:transparent!important;-webkit-text-fill-color:var(--tui-text-01)!important;border-color:var(--tui-autofill);-webkit-box-shadow:0 0 0 100rem var(--tui-autofill) inset!important}@supports (-webkit-touch-callout: none){.t-native[_ngcontent-%COMP%]:active{font-size:1rem}}.t-native[inputMode=none][_ngcontent-%COMP%]{caret-color:transparent}.t-native_hidden[_ngcontent-%COMP%]{opacity:0;text-indent:-10em}.t-native[_ngcontent-%COMP%]::placeholder{color:var(--tui-text-03);opacity:0}[tuiWrapper][data-mode=onDark][_ngcontent-%COMP%]   .t-native[_ngcontent-%COMP%]::placeholder{color:var(--tui-text-03-night)}._focused[_nghost-%COMP%]   .t-native[_ngcontent-%COMP%]:not(:-moz-read-only)::placeholder{opacity:1}._focused[_nghost-%COMP%]   .t-native[_ngcontent-%COMP%]:not(:read-only)::placeholder{opacity:1}.t-error-icon[_ngcontent-%COMP%]{display:block;color:var(--tui-error-fill);width:1rem;height:1rem}'],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputTagComponent, [{
    type: Component,
    args: [{
      selector: "tui-input-tag",
      templateUrl: "./input-tag.template.html",
      styleUrls: ["./input-tag.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [tuiAsFocusableItemAccessor(TuiInputTagComponent), tuiAsControl(TuiInputTagComponent), tuiAsDataListHost(TuiInputTagComponent), TEXTFIELD_CONTROLLER_PROVIDER, MODE_PROVIDER],
      viewProviders: [FIXED_DROPDOWN_CONTROLLER_PROVIDER]
    }]
  }], function() {
    return [{
      type: NgControl,
      decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NgControl]
      }]
    }, {
      type: ChangeDetectorRef,
      decorators: [{
        type: Inject,
        args: [ChangeDetectorRef]
      }]
    }, {
      type: ElementRef,
      decorators: [{
        type: Inject,
        args: [ElementRef]
      }]
    }, {
      type: TuiModeDirective,
      decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [TuiModeDirective]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Inject,
        args: [TUI_MODE]
      }]
    }, {
      type: TuiHintOptionsDirective,
      decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [TuiHintOptionsDirective]
      }]
    }, {
      type: TuiTextfieldController,
      decorators: [{
        type: Inject,
        args: [TUI_TEXTFIELD_WATCHED_CONTROLLER]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_INPUT_TAG_OPTIONS]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_COMMON_ICONS]
      }]
    }];
  }, {
    hostedDropdown: [{
      type: ViewChild,
      args: [TuiHostedDropdownComponent]
    }],
    focusableElement: [{
      type: ViewChild,
      args: ["focusableElement"]
    }],
    tagsContainer: [{
      type: ViewChild,
      args: ["tagsContainer"]
    }],
    tags: [{
      type: ViewChildren,
      args: ["tag", {
        read: ElementRef
      }]
    }],
    cleanerSvg: [{
      type: ViewChild,
      args: ["cleaner", {
        read: ElementRef
      }]
    }],
    scrollBar: [{
      type: ViewChild,
      args: [TuiScrollbarComponent, {
        read: ElementRef
      }]
    }],
    separator: [{
      type: Input
    }],
    search: [{
      type: Input
    }],
    editable: [{
      type: Input
    }],
    tagValidator: [{
      type: Input
    }],
    expandable: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["class._expandable"]
    }],
    rows: [{
      type: Input
    }],
    inputHidden: [{
      type: Input
    }],
    uniqueTags: [{
      type: Input
    }],
    autoColor: [{
      type: Input
    }],
    maxLength: [{
      type: Input
    }],
    placeholder: [{
      type: Input
    }],
    removable: [{
      type: Input
    }],
    disabledItemHandler: [{
      type: Input
    }],
    pseudoFocusedSetter: [{
      type: Input,
      args: ["pseudoFocused"]
    }],
    searchChange: [{
      type: Output
    }],
    datalist: [{
      type: ContentChild,
      args: [TuiDataListDirective, {
        read: TemplateRef
      }]
    }],
    errorIconTemplate: [{
      type: ViewChild,
      args: ["errorIcon"]
    }],
    size: [{
      type: HostBinding,
      args: ["attr.data-size"]
    }],
    labelOutside: [{
      type: HostBinding,
      args: ["class._label-outside"]
    }],
    iconLeft: [{
      type: HostBinding,
      args: ["class._icon-left"]
    }],
    onFocusInOut: [{
      type: HostListener,
      args: ["focusin.capture.silent"]
    }, {
      type: HostListener,
      args: ["focusout.capture.silent"]
    }]
  });
})();
var TuiInputTagModule = class {
};
TuiInputTagModule.ɵfac = function TuiInputTagModule_Factory(t) {
  return new (t || TuiInputTagModule)();
};
TuiInputTagModule.ɵmod = ɵɵdefineNgModule({
  type: TuiInputTagModule,
  declarations: [TuiInputTagComponent],
  imports: [CommonModule, FormsModule, PolymorpheusModule, TuiFocusableModule, TuiHoveredModule, TuiActiveZoneModule, TuiSvgModule, TuiScrollbarModule, TuiTooltipModule, TuiHostedDropdownModule, TuiTagModule, TuiWrapperModule],
  exports: [TuiInputTagComponent]
});
TuiInputTagModule.ɵinj = ɵɵdefineInjector({
  providers: [TuiScrollService],
  imports: [[CommonModule, FormsModule, PolymorpheusModule, TuiFocusableModule, TuiHoveredModule, TuiActiveZoneModule, TuiSvgModule, TuiScrollbarModule, TuiTooltipModule, TuiHostedDropdownModule, TuiTagModule, TuiWrapperModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputTagModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, FormsModule, PolymorpheusModule, TuiFocusableModule, TuiHoveredModule, TuiActiveZoneModule, TuiSvgModule, TuiScrollbarModule, TuiTooltipModule, TuiHostedDropdownModule, TuiTagModule, TuiWrapperModule],
      declarations: [TuiInputTagComponent],
      providers: [TuiScrollService],
      exports: [TuiInputTagComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-input-date-multi.js
var _c021 = ["multiple", ""];
function TuiInputDateMultiComponent_ng_template_9_tui_svg_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r8 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "tui-svg", 6);
    ɵɵlistener("click", function TuiInputDateMultiComponent_ng_template_9_tui_svg_0_Template_tui_svg_click_0_listener() {
      ɵɵrestoreView(_r8);
      const ctx_r7 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r7.onIconClick());
    });
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const src_r6 = ctx.polymorpheusOutlet;
    const ctx_r5 = ɵɵnextContext(2);
    ɵɵclassProp("t-icon", !ctx_r5.computedDisabled);
    ɵɵproperty("src", src_r6);
  }
}
var _c113 = function(a0) {
  return {
    $implicit: a0
  };
};
function TuiInputDateMultiComponent_ng_template_9_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtemplate(0, TuiInputDateMultiComponent_ng_template_9_tui_svg_0_Template, 1, 3, "tui-svg", 5);
  }
  if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵproperty("polymorpheusOutlet", ctx_r2.calendarIcon)("polymorpheusOutletContext", ɵɵpureFunction1(2, _c113, ctx_r2.size));
  }
}
function TuiInputDateMultiComponent_ng_template_11_Template(rf, ctx) {
  if (rf & 1) {
    const _r10 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "tui-calendar", 7);
    ɵɵlistener("dayClick", function TuiInputDateMultiComponent_ng_template_11_Template_tui_calendar_dayClick_0_listener($event) {
      ɵɵrestoreView(_r10);
      const ctx_r9 = ɵɵnextContext();
      return ɵɵresetView(ctx_r9.onDayClick($event));
    })("monthChange", function TuiInputDateMultiComponent_ng_template_11_Template_tui_calendar_monthChange_0_listener($event) {
      ɵɵrestoreView(_r10);
      const ctx_r11 = ɵɵnextContext();
      return ɵɵresetView(ctx_r11.onMonthChange($event));
    })("mousedown.silent.prevent", function TuiInputDateMultiComponent_ng_template_11_Template_tui_calendar_mousedown_silent_prevent_0_listener() {
      return 0;
    });
    ɵɵelementEnd();
    ɵɵelementStart(1, "div", 8);
    ɵɵlistener("mousedown.silent.prevent", function TuiInputDateMultiComponent_ng_template_11_Template_div_mousedown_silent_prevent_1_listener() {
      return 0;
    });
    ɵɵelementStart(2, "button", 9);
    ɵɵlistener("click", function TuiInputDateMultiComponent_ng_template_11_Template_button_click_2_listener() {
      ɵɵrestoreView(_r10);
      const ctx_r14 = ɵɵnextContext();
      return ɵɵresetView(ctx_r14.done());
    });
    ɵɵtext(3);
    ɵɵpipe(4, "async");
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    const ctx_r4 = ɵɵnextContext();
    ɵɵproperty("disabledItemHandler", ctx_r4.disabledItemHandler)("markerHandler", ctx_r4.markerHandler)("max", ctx_r4.computedMax)("min", ctx_r4.computedMin)("month", ctx_r4.computedActiveYearMonth)("value", ctx_r4.value);
    ɵɵadvance(3);
    ɵɵtextInterpolate1(" ", ɵɵpipeBind1(4, 7, ctx_r4.doneWord$), " ");
  }
}
var _c27 = ["*", [["input"]]];
var _c33 = ["*", "input"];
var TuiInputDateMultiComponent = class extends AbstractTuiMultipleControl {
  constructor(control, cdr, isMobile, mobileCalendar, dateFormat, dateSeparator, dateTexts$, valueTransformer, options, textfieldSize, doneWord$) {
    var _a, _b;
    super(control, cdr, valueTransformer);
    this.isMobile = isMobile;
    this.mobileCalendar = mobileCalendar;
    this.dateFormat = dateFormat;
    this.dateSeparator = dateSeparator;
    this.dateTexts$ = dateTexts$;
    this.valueTransformer = valueTransformer;
    this.options = options;
    this.textfieldSize = textfieldSize;
    this.doneWord$ = doneWord$;
    this.month = null;
    this.min = this.options.min;
    this.max = this.options.max;
    this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
    this.markerHandler = TUI_DEFAULT_MARKER_HANDLER;
    this.defaultActiveYearMonth = TuiMonth.currentLocal();
    this.expandable = false;
    this.inputHidden = false;
    this.search = "";
    this.placeholder = "";
    this.rows = Infinity;
    this.maskitoOptions = maskitoDateOptionsGenerator({
      mode: "dd/mm/yyyy",
      separator: ".",
      min: (_a = this.min) === null || _a === void 0 ? void 0 : _a.toLocalNativeDate(),
      max: (_b = this.max) === null || _b === void 0 ? void 0 : _b.toLocalNativeDate()
    });
    this.open = false;
    this.filler$ = this.dateTexts$.pipe(map((dateTexts) => changeDateSeparator(dateTexts[this.dateFormat], this.dateSeparator)));
    this.tagValidator = (tag) => {
      var _a2, _b2, _c;
      const {
        year,
        month,
        day
      } = tuiIsString(tag) ? TuiDay.parseRawDateString(tag) : tag;
      const date = new TuiDay(year, month, day);
      return (_c = TuiDay.isValidDay(year, month, day) && ((_a2 = this.min) === null || _a2 === void 0 ? void 0 : _a2.dayBefore(date)) && ((_b2 = this.max) === null || _b2 === void 0 ? void 0 : _b2.dayAfter(date))) !== null && _c !== void 0 ? _c : false;
    };
    this.disabledItemHandlerWrapper = (handler) => (stringifiable) => tuiIsString(stringifiable) || handler(stringifiable.item);
    this.valueMapper = (value) => value.map((item) => new TuiStringifiableItem(item, (item2) => String(item2)));
  }
  onClick() {
    if (!this.isMobile && this.interactive) {
      this.open = !this.open;
    }
  }
  get size() {
    return this.textfieldSize.size;
  }
  get nativeDropdownMode() {
    return this.isMobile;
  }
  get computedMin() {
    var _a;
    return (_a = this.min) !== null && _a !== void 0 ? _a : this.options.min;
  }
  get computedMax() {
    var _a;
    return (_a = this.max) !== null && _a !== void 0 ? _a : this.options.max;
  }
  get nativeFocusableElement() {
    var _a;
    return ((_a = this.textfield) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) || null;
  }
  get focused() {
    var _a;
    return !!((_a = this.textfield) === null || _a === void 0 ? void 0 : _a.focused);
  }
  get computedMobile() {
    return this.isMobile && !!this.mobileCalendar;
  }
  get calendarIcon() {
    return this.options.icon;
  }
  get computedActiveYearMonth() {
    return this.month || this.value[this.value.length - 1] || tuiDateClamp(this.defaultActiveYearMonth, this.computedMin, this.computedMax);
  }
  onIconClick() {
    if (this.isMobile && this.interactive) {
      this.open = true;
    }
  }
  onEnter(search) {
    if (!this.tagValidator(search)) {
      return;
    }
    this.value = tuiImmutableUpdateInputDateMulti(this.value, TuiDay.normalizeParse(search));
    if (this.inputTag) {
      this.inputTag.search = "";
    }
    this.done();
  }
  onValueChange(value) {
    var _a;
    (_a = this.control) === null || _a === void 0 ? void 0 : _a.updateValueAndValidity({
      emitEvent: false
    });
    if (!value.length && !this.mobileCalendar) {
      this.onOpenChange(true);
    }
    this.value = value.map(({
      item
    }) => item);
  }
  onDayClick(value) {
    this.value = tuiImmutableUpdateInputDateMulti(this.value, value);
  }
  done() {
    this.open = false;
  }
  onMonthChange(month) {
    this.month = month;
  }
  onOpenChange(open) {
    this.open = open;
  }
  onFocused(focused) {
    this.updateFocused(focused);
  }
  setDisabledState() {
    super.setDisabledState();
    this.open = false;
  }
};
TuiInputDateMultiComponent.ɵfac = function TuiInputDateMultiComponent_Factory(t) {
  return new (t || TuiInputDateMultiComponent)(ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(TUI_IS_MOBILE), ɵɵdirectiveInject(TUI_MOBILE_CALENDAR, 8), ɵɵdirectiveInject(TUI_DATE_FORMAT), ɵɵdirectiveInject(TUI_DATE_SEPARATOR), ɵɵdirectiveInject(TUI_DATE_TEXTS), ɵɵdirectiveInject(TUI_DATE_VALUE_TRANSFORMER, 8), ɵɵdirectiveInject(TUI_INPUT_DATE_OPTIONS), ɵɵdirectiveInject(TUI_TEXTFIELD_SIZE), ɵɵdirectiveInject(TUI_DONE_WORD));
};
TuiInputDateMultiComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiInputDateMultiComponent,
  selectors: [["tui-input-date", "multiple", ""]],
  viewQuery: function TuiInputDateMultiComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(TuiPrimitiveTextfieldComponent, 5);
      ɵɵviewQuery(TuiInputTagComponent, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.textfield = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.inputTag = _t.first);
    }
  },
  hostVars: 1,
  hostBindings: function TuiInputDateMultiComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("click", function TuiInputDateMultiComponent_click_HostBindingHandler() {
        return ctx.onClick();
      });
    }
    if (rf & 2) {
      ɵɵattribute("data-size", ctx.size);
    }
  },
  inputs: {
    min: "min",
    max: "max",
    disabledItemHandler: "disabledItemHandler",
    markerHandler: "markerHandler",
    defaultActiveYearMonth: "defaultActiveYearMonth",
    expandable: "expandable",
    inputHidden: "inputHidden",
    search: "search",
    placeholder: "placeholder",
    rows: "rows",
    tagValidator: "tagValidator"
  },
  features: [ɵɵProvidersFeature([tuiAsFocusableItemAccessor(TuiInputDateMultiComponent), tuiAsControl(TuiInputDateMultiComponent), tuiDateStreamWithTransformer(TUI_DATE_VALUE_TRANSFORMER), {
    provide: TUI_DROPDOWN_COMPONENT,
    useFactory: () => inject(TUI_IS_MOBILE) && inject(TUI_MOBILE_CALENDAR, InjectFlags.Optional) || inject(TUI_DROPDOWN_COMPONENT, InjectFlags.SkipSelf)
  }]), ɵɵInheritDefinitionFeature],
  attrs: _c021,
  ngContentSelectors: _c33,
  decls: 13,
  vars: 32,
  consts: [[1, "t-hosted", 3, "canOpen", "content", "open", "openChange"], [1, "t-input", 3, "disabled", "disabledItemHandler", "editable", "expandable", "inputHidden", "maskito", "nativeId", "ngModel", "placeholder", "pseudoFocus", "pseudoHover", "pseudoInvalid", "readOnly", "removable", "rows", "tagValidator", "tuiTextfieldFiller", "tuiTextfieldIcon", "keydown.enter", "ngModelChange"], ["inputTag", ""], ["iconContent", ""], ["dropdown", ""], ["appearance", "icon", "tuiWrapper", "", 3, "t-icon", "src", "click", 4, "polymorpheusOutlet", "polymorpheusOutletContext"], ["appearance", "icon", "tuiWrapper", "", 3, "src", "click"], [3, "disabledItemHandler", "markerHandler", "max", "min", "month", "value", "dayClick", "monthChange", "mousedown.silent.prevent"], [1, "t-button", 3, "mousedown.silent.prevent"], ["tuiLink", "", "type", "button", 3, "click"]],
  template: function TuiInputDateMultiComponent_Template(rf, ctx) {
    if (rf & 1) {
      const _r15 = ɵɵgetCurrentView();
      ɵɵprojectionDef(_c27);
      ɵɵelementStart(0, "tui-hosted-dropdown", 0);
      ɵɵlistener("openChange", function TuiInputDateMultiComponent_Template_tui_hosted_dropdown_openChange_0_listener($event) {
        return ctx.onOpenChange($event);
      });
      ɵɵelementStart(1, "tui-input-tag", 1, 2);
      ɵɵlistener("keydown.enter", function TuiInputDateMultiComponent_Template_tui_input_tag_keydown_enter_1_listener() {
        ɵɵrestoreView(_r15);
        const _r0 = ɵɵreference(2);
        return ɵɵresetView(ctx.onEnter(_r0.search || ""));
      })("ngModelChange", function TuiInputDateMultiComponent_Template_tui_input_tag_ngModelChange_1_listener($event) {
        return ctx.onValueChange($event);
      });
      ɵɵpipe(3, "tuiMapper");
      ɵɵpipe(4, "tuiMapper");
      ɵɵpipe(5, "tuiMapper");
      ɵɵpipe(6, "async");
      ɵɵprojection(7);
      ɵɵprojection(8, 1, ["ngProjectAs", "input", 5, ["input"]]);
      ɵɵelementEnd();
      ɵɵtemplate(9, TuiInputDateMultiComponent_ng_template_9_Template, 1, 4, "ng-template", null, 3, ɵɵtemplateRefExtractor);
      ɵɵtemplate(11, TuiInputDateMultiComponent_ng_template_11_Template, 5, 9, "ng-template", null, 4, ɵɵtemplateRefExtractor);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      const _r1 = ɵɵreference(10);
      const _r3 = ɵɵreference(12);
      ɵɵproperty("canOpen", ctx.interactive)("content", _r3)("open", ctx.open && ctx.interactive);
      ɵɵadvance(1);
      ɵɵproperty("disabled", ctx.disabled)("disabledItemHandler", ɵɵpipeBind2(3, 21, ctx.disabledItemHandler, ctx.disabledItemHandlerWrapper))("editable", false)("expandable", ctx.expandable)("inputHidden", ctx.inputHidden)("maskito", ctx.maskitoOptions)("nativeId", ctx.nativeId)("ngModel", ɵɵpipeBind2(4, 24, ctx.value, ctx.valueMapper))("placeholder", ctx.placeholder)("pseudoFocus", ctx.pseudoFocus)("pseudoHover", ctx.pseudoHover)("pseudoInvalid", ctx.computedInvalid)("readOnly", ctx.readOnly)("removable", !ctx.nativeDropdownMode)("rows", ctx.rows)("tagValidator", ɵɵpipeBind2(5, 27, ctx.tagValidator, ctx.disabledItemHandlerWrapper))("tuiTextfieldFiller", ɵɵpipeBind1(6, 30, ctx.filler$) || "")("tuiTextfieldIcon", ctx.calendarIcon && _r1);
    }
  },
  dependencies: [TuiHostedDropdownComponent, TuiInputTagComponent, TuiSvgComponent, TuiCalendarComponent, TuiLinkComponent, MaskitoDirective, NgControlStatus, NgModel, TuiTextfieldFillerDirective, TuiTextfieldIconDirective, PolymorpheusOutletDirective, TuiWrapperDirective, TuiMapperPipe, AsyncPipe],
  styles: ["[_nghost-%COMP%]{display:block;border-radius:var(--tui-radius-m);text-align:left}.t-hosted[_ngcontent-%COMP%]{display:block;border-radius:inherit}.t-textfield[_ngcontent-%COMP%]{border-radius:inherit;text-align:inherit}.t-icon[_ngcontent-%COMP%]{pointer-events:auto}.t-button[_ngcontent-%COMP%]{display:flex;height:2.75rem;justify-content:center;box-shadow:inset 0 1px var(--tui-base-03)}.t-button[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{flex:1;text-align:center}.t-native-input[_ngcontent-%COMP%]{position:absolute;top:0;left:0;width:100%;height:100%;opacity:0;pointer-events:auto;font-size:2rem}"],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputDateMultiComponent, [{
    type: Component,
    args: [{
      selector: "tui-input-date[multiple]",
      templateUrl: "./input-date-multi.template.html",
      styleUrls: ["../input-date/input-date.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [tuiAsFocusableItemAccessor(TuiInputDateMultiComponent), tuiAsControl(TuiInputDateMultiComponent), tuiDateStreamWithTransformer(TUI_DATE_VALUE_TRANSFORMER), {
        provide: TUI_DROPDOWN_COMPONENT,
        useFactory: () => inject(TUI_IS_MOBILE) && inject(TUI_MOBILE_CALENDAR, InjectFlags.Optional) || inject(TUI_DROPDOWN_COMPONENT, InjectFlags.SkipSelf)
      }]
    }]
  }], function() {
    return [{
      type: NgControl,
      decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NgControl]
      }]
    }, {
      type: ChangeDetectorRef,
      decorators: [{
        type: Inject,
        args: [ChangeDetectorRef]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_IS_MOBILE]
      }]
    }, {
      type: Type,
      decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [TUI_MOBILE_CALENDAR]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_DATE_FORMAT]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_DATE_SEPARATOR]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Inject,
        args: [TUI_DATE_TEXTS]
      }]
    }, {
      type: AbstractTuiValueTransformer,
      decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [TUI_DATE_VALUE_TRANSFORMER]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_INPUT_DATE_OPTIONS]
      }]
    }, {
      type: TuiTextfieldSizeDirective,
      decorators: [{
        type: Inject,
        args: [TUI_TEXTFIELD_SIZE]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Inject,
        args: [TUI_DONE_WORD]
      }]
    }];
  }, {
    textfield: [{
      type: ViewChild,
      args: [TuiPrimitiveTextfieldComponent]
    }],
    inputTag: [{
      type: ViewChild,
      args: [TuiInputTagComponent]
    }],
    min: [{
      type: Input
    }],
    max: [{
      type: Input
    }],
    disabledItemHandler: [{
      type: Input
    }],
    markerHandler: [{
      type: Input
    }],
    defaultActiveYearMonth: [{
      type: Input
    }],
    expandable: [{
      type: Input
    }],
    inputHidden: [{
      type: Input
    }],
    search: [{
      type: Input
    }],
    placeholder: [{
      type: Input
    }],
    rows: [{
      type: Input
    }],
    tagValidator: [{
      type: Input
    }],
    onClick: [{
      type: HostListener,
      args: ["click"]
    }],
    size: [{
      type: HostBinding,
      args: ["attr.data-size"]
    }]
  });
})();
var TuiInputDateMultiModule = class {
};
TuiInputDateMultiModule.ɵfac = function TuiInputDateMultiModule_Factory(t) {
  return new (t || TuiInputDateMultiModule)();
};
TuiInputDateMultiModule.ɵmod = ɵɵdefineNgModule({
  type: TuiInputDateMultiModule,
  declarations: [TuiInputDateMultiComponent],
  imports: [CommonModule, MaskitoModule, PolymorpheusModule, TuiWrapperModule, TuiCalendarModule, TuiSvgModule, TuiLinkModule, TuiInputTagModule, FormsModule, TuiMapperPipeModule, TuiHostedDropdownModule, TuiTextfieldControllerModule, TuiPrimitiveTextfieldModule],
  exports: [TuiInputDateMultiComponent]
});
TuiInputDateMultiModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, MaskitoModule, PolymorpheusModule, TuiWrapperModule, TuiCalendarModule, TuiSvgModule, TuiLinkModule, TuiInputTagModule, FormsModule, TuiMapperPipeModule, TuiHostedDropdownModule, TuiTextfieldControllerModule, TuiPrimitiveTextfieldModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputDateMultiModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, MaskitoModule, PolymorpheusModule, TuiWrapperModule, TuiCalendarModule, TuiSvgModule, TuiLinkModule, TuiInputTagModule, FormsModule, TuiMapperPipeModule, TuiHostedDropdownModule, TuiTextfieldControllerModule, TuiPrimitiveTextfieldModule],
      declarations: [TuiInputDateMultiComponent],
      exports: [TuiInputDateMultiComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-input-date-range.js
function TuiInputDateRangeComponent_tui_primitive_textfield_1_div_3_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtext(1);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const text_r8 = ctx.polymorpheusOutlet;
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", text_r8, " ");
  }
}
var _c022 = function(a0) {
  return {
    $implicit: a0
  };
};
function TuiInputDateRangeComponent_tui_primitive_textfield_1_div_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 6);
    ɵɵtemplate(1, TuiInputDateRangeComponent_tui_primitive_textfield_1_div_3_ng_container_1_Template, 2, 1, "ng-container", 7);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r6 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("polymorpheusOutlet", ctx_r6.computedContent)("polymorpheusOutletContext", ɵɵpureFunction1(2, _c022, ctx_r6.value));
  }
}
function TuiInputDateRangeComponent_tui_primitive_textfield_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r10 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "tui-primitive-textfield", 4);
    ɵɵlistener("valueChange", function TuiInputDateRangeComponent_tui_primitive_textfield_1_Template_tui_primitive_textfield_valueChange_0_listener($event) {
      ɵɵrestoreView(_r10);
      const ctx_r9 = ɵɵnextContext();
      return ɵɵresetView(ctx_r9.onValueChange($event));
    });
    ɵɵprojection(1);
    ɵɵprojection(2, 1, ["ngProjectAs", "input", 5, ["input"]]);
    ɵɵtemplate(3, TuiInputDateRangeComponent_tui_primitive_textfield_1_div_3_Template, 2, 4, "div", 5);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const dateFiller_r5 = ctx.tuiLet;
    const ctx_r0 = ɵɵnextContext();
    const _r1 = ɵɵreference(4);
    ɵɵproperty("disabled", ctx_r0.computedDisabled)("invalid", ctx_r0.computedInvalid)("maskito", ctx_r0.computedMask)("nativeId", ctx_r0.nativeId)("pseudoActive", ctx_r0.pseudoActive)("pseudoFocus", ctx_r0.innerPseudoFocused)("pseudoHover", ctx_r0.pseudoHover)("readOnly", ctx_r0.readOnly)("tuiTextfieldFiller", ctx_r0.getComputedRangeFiller(dateFiller_r5 || ""))("tuiTextfieldIcon", ctx_r0.calendarIcon && _r1)("value", ctx_r0.computedValue);
    ɵɵadvance(3);
    ɵɵproperty("ngIf", ctx_r0.showValueTemplate);
  }
}
function TuiInputDateRangeComponent_ng_template_3_tui_svg_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r14 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "tui-svg", 9);
    ɵɵlistener("click", function TuiInputDateRangeComponent_ng_template_3_tui_svg_0_Template_tui_svg_click_0_listener() {
      ɵɵrestoreView(_r14);
      const ctx_r13 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r13.onIconClick());
    });
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const src_r12 = ctx.polymorpheusOutlet;
    const ctx_r11 = ɵɵnextContext(2);
    ɵɵclassProp("t-icon", !ctx_r11.computedDisabled);
    ɵɵproperty("src", src_r12);
  }
}
function TuiInputDateRangeComponent_ng_template_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtemplate(0, TuiInputDateRangeComponent_ng_template_3_tui_svg_0_Template, 1, 3, "tui-svg", 8);
  }
  if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵproperty("polymorpheusOutlet", ctx_r2.calendarIcon)("polymorpheusOutletContext", ɵɵpureFunction1(2, _c022, ctx_r2.size));
  }
}
function TuiInputDateRangeComponent_ng_template_5_Template(rf, ctx) {
  if (rf & 1) {
    const _r16 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "tui-calendar-range", 10);
    ɵɵlistener("valueChange", function TuiInputDateRangeComponent_ng_template_5_Template_tui_calendar_range_valueChange_0_listener($event) {
      ɵɵrestoreView(_r16);
      const ctx_r15 = ɵɵnextContext();
      return ɵɵresetView(ctx_r15.onRangeChange($event));
    });
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r4 = ɵɵnextContext();
    ɵɵproperty("defaultViewedMonth", ctx_r4.defaultViewedMonth)("disabledItemHandler", ctx_r4.disabledItemHandler)("items", ctx_r4.items)("markerHandler", ctx_r4.markerHandler)("max", ctx_r4.computedMax)("maxLength", ctx_r4.maxLength)("min", ctx_r4.computedMin)("minLength", ctx_r4.minLength)("value", ctx_r4.value);
  }
}
var _c114 = ["*", [["input"]]];
var _c28 = ["*", "input"];
var TuiInputDateRangeComponent = class extends AbstractTuiNullableControl {
  constructor(control, cdr, isMobile, mobileCalendar, dateFormat, dateSeparator, dateTexts$, valueTransformer, options, textfieldSize) {
    super(control, cdr, valueTransformer);
    this.isMobile = isMobile;
    this.mobileCalendar = mobileCalendar;
    this.dateFormat = dateFormat;
    this.dateSeparator = dateSeparator;
    this.dateTexts$ = dateTexts$;
    this.valueTransformer = valueTransformer;
    this.options = options;
    this.textfieldSize = textfieldSize;
    this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
    this.markerHandler = TUI_DEFAULT_MARKER_HANDLER;
    this.defaultViewedMonth = TuiMonth.currentLocal();
    this.items = [];
    this.min = this.options.min;
    this.max = this.options.max;
    this.minLength = null;
    this.maxLength = null;
    this.open = false;
    this.maxLengthMapper = MAX_DAY_RANGE_LENGTH_MAPPER;
    this.dateFiller$ = this.dateTexts$.pipe(map((dateTexts) => changeDateSeparator(dateTexts[this.dateFormat], this.dateSeparator)));
  }
  get size() {
    return this.textfieldSize.size;
  }
  get computedMin() {
    var _a;
    return (_a = this.min) !== null && _a !== void 0 ? _a : TUI_FIRST_DAY;
  }
  get computedMax() {
    var _a;
    return (_a = this.max) !== null && _a !== void 0 ? _a : TUI_LAST_DAY;
  }
  get nativeFocusableElement() {
    var _a, _b;
    return (_b = (_a = this.textfield) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) !== null && _b !== void 0 ? _b : null;
  }
  get focused() {
    var _a;
    return !!((_a = this.textfield) === null || _a === void 0 ? void 0 : _a.focused);
  }
  get computedMobile() {
    return this.isMobile && !!this.mobileCalendar;
  }
  get calendarIcon() {
    return this.options.icon;
  }
  get computedExampleText() {
    var _a, _b;
    return this.items.length ? ((_b = (_a = this.textfield) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) === null || _b === void 0 ? void 0 : _b.placeholder) || "" : "";
  }
  get computedMask() {
    var _a, _b;
    const nativeValueIsNotSynced = ((_b = (_a = this.textfield) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) === null || _b === void 0 ? void 0 : _b.value) !== this.computedValue;
    return this.activePeriod || nativeValueIsNotSynced ? MASKITO_DEFAULT_OPTIONS : this.calculateMask(this.dateFormat, this.dateSeparator, this.computedMin, this.computedMax, this.minLength, this.maxLength);
  }
  get activePeriod() {
    return this.items.find((item) => tuiNullableSame(this.value, item.range, (a, b) => a.from.daySame(b.from.dayLimit(this.min, this.max)) && a.to.daySame(b.to.dayLimit(this.min, this.max)))) || null;
  }
  get computedValue() {
    const {
      value,
      nativeValue,
      activePeriod
    } = this;
    if (activePeriod) {
      return String(activePeriod);
    }
    return value ? value.getFormattedDayRange(this.dateFormat, this.dateSeparator) : nativeValue;
  }
  get showValueTemplate() {
    return tuiIsPresent(this.value) && !this.focused;
  }
  get computedContent() {
    var _a;
    return ((_a = this.activePeriod) === null || _a === void 0 ? void 0 : _a.content) || this.computedValue;
  }
  get innerPseudoFocused() {
    if (this.pseudoFocus === false) {
      return false;
    }
    if (this.open || this.computedFocused) {
      return true;
    }
    return null;
  }
  get nativeValue() {
    var _a;
    return ((_a = this.nativeFocusableElement) === null || _a === void 0 ? void 0 : _a.value) || "";
  }
  set nativeValue(value) {
    if (this.nativeFocusableElement) {
      this.nativeFocusableElement.value = value;
    }
  }
  onClick() {
    if (!this.isMobile && this.interactive) {
      this.open = !this.open;
    }
  }
  getComputedRangeFiller(dateFiller) {
    return this.activePeriod ? "" : this.getDateRangeFiller(dateFiller);
  }
  onIconClick() {
    if (this.isMobile && this.interactive) {
      this.open = true;
    }
  }
  onOpenChange(open) {
    this.open = open;
  }
  onValueChange(value) {
    if (this.control) {
      this.control.updateValueAndValidity({
        emitEvent: false
      });
    }
    if (!value && !this.mobileCalendar) {
      this.onOpenChange(true);
    }
    this.value = value.length === DATE_RANGE_FILLER_LENGTH ? TuiDayRange.normalizeParse(value, this.dateFormat) : null;
  }
  onRangeChange(range) {
    this.toggle();
    this.focusInput();
    if (!range) {
      this.nativeValue = "";
    }
    this.value = range;
  }
  // TODO: investigate if it is used anywhere and (if not) delete it in v4.0
  onItemSelect(item) {
    this.toggle();
    this.focusInput();
    if (typeof item !== "string") {
      this.value = item.range.dayLimit(this.min, this.max);
      return;
    }
    if (this.activePeriod === null) {
      return;
    }
    this.value = null;
    this.nativeValue = "";
  }
  onActiveZone(focused) {
    this.updateFocused(focused);
    if (!focused && !this.itemSelected && (this.nativeValue.length === DATE_FILLER_LENGTH || this.nativeValue.length === DATE_FILLER_LENGTH + RANGE_SEPARATOR_CHAR.length)) {
      this.value = TuiDayRange.normalizeParse(this.nativeValue, this.dateFormat);
    }
  }
  writeValue(value) {
    super.writeValue(value);
    this.nativeValue = value ? this.computedValue : "";
  }
  valueIdenticalComparator(oldValue, newValue) {
    return tuiNullableSame(oldValue, newValue, (a, b) => a.daySame(b));
  }
  calculateMask(dateFormat, separator, min, max, minLength, maxLength) {
    return maskitoDateRangeOptionsGenerator({
      separator,
      mode: TUI_DATE_MODE_MASKITO_ADAPTER[dateFormat],
      min: min.toLocalNativeDate(),
      max: max.toLocalNativeDate(),
      minLength: minLength || {},
      maxLength: maxLength || {}
    });
  }
  get itemSelected() {
    return this.items.findIndex((item) => String(item) === this.nativeValue) !== -1;
  }
  toggle() {
    this.open = !this.open;
  }
  focusInput(preventScroll = false) {
    if (this.nativeFocusableElement) {
      this.nativeFocusableElement.focus({
        preventScroll
      });
    }
  }
  getDateRangeFiller(dateFiller) {
    return `${dateFiller}${RANGE_SEPARATOR_CHAR}${dateFiller}`;
  }
};
TuiInputDateRangeComponent.ɵfac = function TuiInputDateRangeComponent_Factory(t) {
  return new (t || TuiInputDateRangeComponent)(ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(TUI_IS_MOBILE), ɵɵdirectiveInject(TUI_MOBILE_CALENDAR, 8), ɵɵdirectiveInject(TUI_DATE_FORMAT), ɵɵdirectiveInject(TUI_DATE_SEPARATOR), ɵɵdirectiveInject(TUI_DATE_TEXTS), ɵɵdirectiveInject(TUI_DATE_RANGE_VALUE_TRANSFORMER, 8), ɵɵdirectiveInject(TUI_INPUT_DATE_OPTIONS), ɵɵdirectiveInject(TUI_TEXTFIELD_SIZE));
};
TuiInputDateRangeComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiInputDateRangeComponent,
  selectors: [["tui-input-date-range"]],
  viewQuery: function TuiInputDateRangeComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(TuiPrimitiveTextfieldComponent, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.textfield = _t.first);
    }
  },
  hostVars: 1,
  hostBindings: function TuiInputDateRangeComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("click", function TuiInputDateRangeComponent_click_HostBindingHandler() {
        return ctx.onClick();
      });
    }
    if (rf & 2) {
      ɵɵattribute("data-size", ctx.size);
    }
  },
  inputs: {
    disabledItemHandler: "disabledItemHandler",
    markerHandler: "markerHandler",
    defaultViewedMonth: "defaultViewedMonth",
    items: "items",
    min: "min",
    max: "max",
    minLength: "minLength",
    maxLength: "maxLength"
  },
  features: [ɵɵProvidersFeature([tuiAsFocusableItemAccessor(TuiInputDateRangeComponent), tuiAsControl(TuiInputDateRangeComponent), tuiDateStreamWithTransformer(TUI_DATE_RANGE_VALUE_TRANSFORMER), {
    provide: TUI_DROPDOWN_COMPONENT,
    useFactory: () => inject(TUI_IS_MOBILE) && inject(TUI_MOBILE_CALENDAR, InjectFlags.Optional) || inject(TUI_DROPDOWN_COMPONENT, InjectFlags.SkipSelf)
  }]), ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c28,
  decls: 7,
  vars: 6,
  consts: [[1, "t-hosted", 3, "canOpen", "content", "open", "openChange", "tuiActiveZoneChange"], ["automation-id", "tui-input-date-range__textfield", "tuiValueAccessor", "", "class", "t-textfield", 3, "disabled", "invalid", "maskito", "nativeId", "pseudoActive", "pseudoFocus", "pseudoHover", "readOnly", "tuiTextfieldFiller", "tuiTextfieldIcon", "value", "valueChange", 4, "tuiLet"], ["iconContent", ""], ["dropdown", ""], ["automation-id", "tui-input-date-range__textfield", "tuiValueAccessor", "", 1, "t-textfield", 3, "disabled", "invalid", "maskito", "nativeId", "pseudoActive", "pseudoFocus", "pseudoHover", "readOnly", "tuiTextfieldFiller", "tuiTextfieldIcon", "value", "valueChange"], ["ngProjectAs", "tuiContent", "class", "t-value", 5, ["tuiContent"], 4, "ngIf"], ["ngProjectAs", "tuiContent", 5, ["tuiContent"], 1, "t-value"], [4, "polymorpheusOutlet", "polymorpheusOutletContext"], ["appearance", "icon", "automation-id", "tui-input-date-range__icon", "tuiWrapper", "", 3, "t-icon", "src", "click", 4, "polymorpheusOutlet", "polymorpheusOutletContext"], ["appearance", "icon", "automation-id", "tui-input-date-range__icon", "tuiWrapper", "", 3, "src", "click"], [3, "defaultViewedMonth", "disabledItemHandler", "items", "markerHandler", "max", "maxLength", "min", "minLength", "value", "valueChange"]],
  template: function TuiInputDateRangeComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c114);
      ɵɵelementStart(0, "tui-hosted-dropdown", 0);
      ɵɵlistener("openChange", function TuiInputDateRangeComponent_Template_tui_hosted_dropdown_openChange_0_listener($event) {
        return ctx.onOpenChange($event);
      })("tuiActiveZoneChange", function TuiInputDateRangeComponent_Template_tui_hosted_dropdown_tuiActiveZoneChange_0_listener($event) {
        return ctx.onActiveZone($event);
      });
      ɵɵtemplate(1, TuiInputDateRangeComponent_tui_primitive_textfield_1_Template, 4, 12, "tui-primitive-textfield", 1);
      ɵɵpipe(2, "async");
      ɵɵtemplate(3, TuiInputDateRangeComponent_ng_template_3_Template, 1, 4, "ng-template", null, 2, ɵɵtemplateRefExtractor);
      ɵɵtemplate(5, TuiInputDateRangeComponent_ng_template_5_Template, 1, 9, "ng-template", null, 3, ɵɵtemplateRefExtractor);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      const _r3 = ɵɵreference(6);
      ɵɵproperty("canOpen", ctx.interactive)("content", _r3)("open", ctx.open && ctx.interactive);
      ɵɵadvance(1);
      ɵɵproperty("tuiLet", ɵɵpipeBind1(2, 4, ctx.dateFiller$));
    }
  },
  dependencies: [TuiHostedDropdownComponent, TuiPrimitiveTextfieldComponent, TuiSvgComponent, TuiCalendarRangeComponent, TuiActiveZoneDirective, TuiLetDirective, TuiPrimitiveTextfieldDirective, TuiValueAccessorDirective, MaskitoDirective, TuiTextfieldFillerDirective, TuiTextfieldIconDirective, NgIf, PolymorpheusOutletDirective, TuiWrapperDirective, AsyncPipe],
  styles: ["[_nghost-%COMP%]{display:block;border-radius:var(--tui-radius-m);text-align:left}._disabled[_nghost-%COMP%]{pointer-events:none}.t-hosted[_ngcontent-%COMP%]{display:block;border-radius:inherit}.t-textfield[_ngcontent-%COMP%]{border-radius:inherit;text-align:inherit}.t-icon[_ngcontent-%COMP%]{pointer-events:auto}.t-value[_ngcontent-%COMP%]{display:flex;width:100%;align-items:center}"],
  changeDetection: 0
});
__decorate([tuiPure], TuiInputDateRangeComponent.prototype, "calculateMask", null);
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputDateRangeComponent, [{
    type: Component,
    args: [{
      selector: "tui-input-date-range",
      templateUrl: "./input-date-range.template.html",
      styleUrls: ["./input-date-range.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [tuiAsFocusableItemAccessor(TuiInputDateRangeComponent), tuiAsControl(TuiInputDateRangeComponent), tuiDateStreamWithTransformer(TUI_DATE_RANGE_VALUE_TRANSFORMER), {
        provide: TUI_DROPDOWN_COMPONENT,
        useFactory: () => inject(TUI_IS_MOBILE) && inject(TUI_MOBILE_CALENDAR, InjectFlags.Optional) || inject(TUI_DROPDOWN_COMPONENT, InjectFlags.SkipSelf)
      }]
    }]
  }], function() {
    return [{
      type: NgControl,
      decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NgControl]
      }]
    }, {
      type: ChangeDetectorRef,
      decorators: [{
        type: Inject,
        args: [ChangeDetectorRef]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_IS_MOBILE]
      }]
    }, {
      type: Type,
      decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [TUI_MOBILE_CALENDAR]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_DATE_FORMAT]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_DATE_SEPARATOR]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Inject,
        args: [TUI_DATE_TEXTS]
      }]
    }, {
      type: AbstractTuiValueTransformer,
      decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [TUI_DATE_RANGE_VALUE_TRANSFORMER]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_INPUT_DATE_OPTIONS]
      }]
    }, {
      type: TuiTextfieldSizeDirective,
      decorators: [{
        type: Inject,
        args: [TUI_TEXTFIELD_SIZE]
      }]
    }];
  }, {
    textfield: [{
      type: ViewChild,
      args: [TuiPrimitiveTextfieldComponent]
    }],
    disabledItemHandler: [{
      type: Input
    }],
    markerHandler: [{
      type: Input
    }],
    defaultViewedMonth: [{
      type: Input
    }],
    items: [{
      type: Input
    }],
    min: [{
      type: Input
    }],
    max: [{
      type: Input
    }],
    minLength: [{
      type: Input
    }],
    maxLength: [{
      type: Input
    }],
    size: [{
      type: HostBinding,
      args: ["attr.data-size"]
    }],
    onClick: [{
      type: HostListener,
      args: ["click"]
    }],
    calculateMask: []
  });
})();
var TuiInputDateRangeDirective = class extends AbstractTuiTextfieldHost {
  get value() {
    return this.host.computedValue;
  }
  onValueChange(value) {
    this.host.onValueChange(value);
  }
  process(input) {
    input.inputMode = "numeric";
  }
  ngDoCheck() {
    if (this.host.nativeFocusableElement) {
      this.host.nativeFocusableElement.placeholder = this.host.computedExampleText;
    }
  }
};
TuiInputDateRangeDirective.ɵfac = function() {
  let ɵTuiInputDateRangeDirective_BaseFactory;
  return function TuiInputDateRangeDirective_Factory(t) {
    return (ɵTuiInputDateRangeDirective_BaseFactory || (ɵTuiInputDateRangeDirective_BaseFactory = ɵɵgetInheritedFactory(TuiInputDateRangeDirective)))(t || TuiInputDateRangeDirective);
  };
}();
TuiInputDateRangeDirective.ɵdir = ɵɵdefineDirective({
  type: TuiInputDateRangeDirective,
  selectors: [["tui-input-date-range"]],
  features: [ɵɵProvidersFeature([tuiAsTextfieldHost(TuiInputDateRangeDirective)]), ɵɵInheritDefinitionFeature]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputDateRangeDirective, [{
    type: Directive,
    args: [{
      selector: "tui-input-date-range",
      providers: [tuiAsTextfieldHost(TuiInputDateRangeDirective)]
    }]
  }], null, null);
})();
var TuiInputDateRangeModule = class {
};
TuiInputDateRangeModule.ɵfac = function TuiInputDateRangeModule_Factory(t) {
  return new (t || TuiInputDateRangeModule)();
};
TuiInputDateRangeModule.ɵmod = ɵɵdefineNgModule({
  type: TuiInputDateRangeModule,
  declarations: [TuiInputDateRangeComponent, TuiInputDateRangeDirective],
  imports: [CommonModule, MaskitoModule, TuiActiveZoneModule, TuiLetModule, PolymorpheusModule, TuiWrapperModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiHostedDropdownModule, TuiSvgModule, TuiCalendarRangeModule, TuiValueAccessorModule],
  exports: [TuiInputDateRangeComponent, TuiInputDateRangeDirective, TuiTextfieldComponent]
});
TuiInputDateRangeModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, MaskitoModule, TuiActiveZoneModule, TuiLetModule, PolymorpheusModule, TuiWrapperModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiHostedDropdownModule, TuiSvgModule, TuiCalendarRangeModule, TuiValueAccessorModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputDateRangeModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, MaskitoModule, TuiActiveZoneModule, TuiLetModule, PolymorpheusModule, TuiWrapperModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiHostedDropdownModule, TuiSvgModule, TuiCalendarRangeModule, TuiValueAccessorModule],
      declarations: [TuiInputDateRangeComponent, TuiInputDateRangeDirective],
      exports: [TuiInputDateRangeComponent, TuiInputDateRangeDirective, TuiTextfieldComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-input-date-time.js
function TuiInputDateTimeComponent_ng_template_5_tui_svg_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "tui-svg", 7);
  }
  if (rf & 2) {
    const src_r6 = ctx.polymorpheusOutlet;
    const ctx_r4 = ɵɵnextContext(2);
    ɵɵclassProp("t-icon", !ctx_r4.computedDisabled);
    ɵɵproperty("src", src_r6);
  }
}
function TuiInputDateTimeComponent_ng_template_5_input_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "input", 8);
  }
}
var _c023 = function(a0) {
  return {
    $implicit: a0
  };
};
function TuiInputDateTimeComponent_ng_template_5_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtemplate(0, TuiInputDateTimeComponent_ng_template_5_tui_svg_0_Template, 1, 3, "tui-svg", 5);
    ɵɵtemplate(1, TuiInputDateTimeComponent_ng_template_5_input_1_Template, 1, 0, "input", 6);
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵproperty("polymorpheusOutlet", ctx_r1.calendarIcon)("polymorpheusOutletContext", ɵɵpureFunction1(3, _c023, ctx_r1.size));
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r1.showNativePicker);
  }
}
function TuiInputDateTimeComponent_ng_template_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r8 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "tui-calendar", 9);
    ɵɵlistener("dayClick", function TuiInputDateTimeComponent_ng_template_7_Template_tui_calendar_dayClick_0_listener($event) {
      ɵɵrestoreView(_r8);
      const ctx_r7 = ɵɵnextContext();
      return ɵɵresetView(ctx_r7.onDayClick($event));
    })("monthChange", function TuiInputDateTimeComponent_ng_template_7_Template_tui_calendar_monthChange_0_listener($event) {
      ɵɵrestoreView(_r8);
      const ctx_r9 = ɵɵnextContext();
      return ɵɵresetView(ctx_r9.onMonthChange($event));
    });
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r3 = ɵɵnextContext();
    ɵɵproperty("disabledItemHandler", ctx_r3.disabledItemHandler)("max", ctx_r3.calendarMaxDay)("min", ctx_r3.calendarMinDay)("month", ctx_r3.computedActiveYearMonth)("value", ctx_r3.calendarValue);
  }
}
var _c115 = ["*", [["input"]]];
var _c29 = ["*", "input"];
var TuiNativeDateTimeDirective = class {
  constructor(host) {
    this.host = host;
  }
  get value() {
    var _a, _b;
    if (!this.host.rawValue[0] || !this.host.rawValue[1]) {
      return "";
    }
    return `${(_a = this.host.rawValue[0]) === null || _a === void 0 ? void 0 : _a.toString("YMD", "-")}T${(_b = this.host.rawValue[1]) === null || _b === void 0 ? void 0 : _b.toString("HH:MM")}`;
  }
  onChange(value) {
    if (!value) {
      this.host.writeValue([null, null]);
      return;
    }
    const date = new Date(value);
    const day = TuiDay.fromLocalNativeDate(date);
    const time = TuiTime.fromLocalNativeDate(date);
    this.host.writeValue([day, time]);
  }
};
TuiNativeDateTimeDirective.ɵfac = function TuiNativeDateTimeDirective_Factory(t) {
  return new (t || TuiNativeDateTimeDirective)(ɵɵdirectiveInject(TUI_TEXTFIELD_HOST));
};
TuiNativeDateTimeDirective.ɵdir = ɵɵdefineDirective({
  type: TuiNativeDateTimeDirective,
  selectors: [["input", "tuiDateTime", ""]],
  hostAttrs: ["type", "datetime-local"],
  hostVars: 2,
  hostBindings: function TuiNativeDateTimeDirective_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("change.stop", function TuiNativeDateTimeDirective_change_stop_HostBindingHandler($event) {
        return ctx.onChange($event.target.value);
      })("input.stop", function TuiNativeDateTimeDirective_input_stop_HostBindingHandler($event) {
        return ctx.onChange($event.target.value);
      })("click.stop.silent", function TuiNativeDateTimeDirective_click_stop_silent_HostBindingHandler() {
        return 0;
      })("mousedown.stop.silent", function TuiNativeDateTimeDirective_mousedown_stop_silent_HostBindingHandler() {
        return 0;
      });
    }
    if (rf & 2) {
      ɵɵhostProperty("tabIndex", -1)("value", ctx.value);
    }
  }
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiNativeDateTimeDirective, [{
    type: Directive,
    args: [{
      selector: "input[tuiDateTime]",
      host: {
        type: "datetime-local",
        "[tabIndex]": "-1",
        "[value]": "value",
        "(change.stop)": "onChange($event.target.value)",
        "(input.stop)": "onChange($event.target.value)",
        "(click.stop.silent)": "0",
        "(mousedown.stop.silent)": "0"
      }
    }]
  }], function() {
    return [{
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_TEXTFIELD_HOST]
      }]
    }];
  }, null);
})();
var TuiInputDateTimeComponent = class extends AbstractTuiControl {
  constructor(control, cdr, dateFormat, dateSeparator, timeTexts$, dateTexts$, valueTransformer, options, isMobile, isIos, textfieldSize) {
    super(control, cdr, valueTransformer);
    this.dateFormat = dateFormat;
    this.dateSeparator = dateSeparator;
    this.timeTexts$ = timeTexts$;
    this.dateTexts$ = dateTexts$;
    this.valueTransformer = valueTransformer;
    this.options = options;
    this.isMobile = isMobile;
    this.isIos = isIos;
    this.textfieldSize = textfieldSize;
    this.month = null;
    this.timeMode$ = new BehaviorSubject("HH:MM");
    this.min = this.options.min;
    this.max = this.options.max;
    this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
    this.defaultActiveYearMonth = TuiMonth.currentLocal();
    this.open = false;
    this.filler$ = combineLatest([this.dateTexts$.pipe(map((dateTexts) => changeDateSeparator(dateTexts[this.dateFormat], this.dateSeparator))), this.timeTexts$, this.timeMode$]).pipe(map(([dateFiller, timeTexts, timeMode]) => this.getDateTimeString(dateFiller, timeTexts[timeMode])));
  }
  set timeMode(value) {
    this.timeMode$.next(value);
  }
  get timeMode() {
    return this.timeMode$.value;
  }
  get size() {
    return this.textfieldSize.size;
  }
  get computedMin() {
    return this.toTuiDay(this.min, this.options.min);
  }
  get computedMax() {
    return this.toTuiDay(this.max, this.options.max);
  }
  get fillerLength() {
    return DATE_FILLER_LENGTH + DATE_TIME_SEPARATOR.length + this.timeMode.length;
  }
  get maskOptions() {
    return this.calculateMask(this.computedMin, this.computedMax, this.timeMode, this.dateFormat, this.dateSeparator);
  }
  get nativeFocusableElement() {
    var _a, _b;
    return (_b = (_a = this.textfield) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) !== null && _b !== void 0 ? _b : null;
  }
  get focused() {
    var _a;
    return !!((_a = this.textfield) === null || _a === void 0 ? void 0 : _a.focused);
  }
  get calendarIcon() {
    return this.options.icon;
  }
  get nativePicker() {
    return this.options.nativePicker && this.isMobile;
  }
  get showNativePicker() {
    return this.nativePicker && this.timeMode === "HH:MM";
  }
  get computedValue() {
    const {
      value,
      nativeValue,
      timeMode
    } = this;
    const [date, time] = value;
    const hasTimeInputChars = nativeValue.length > DATE_FILLER_LENGTH;
    if (!date || !time && hasTimeInputChars) {
      return nativeValue;
    }
    return this.getDateTimeString(date, time, timeMode);
  }
  get calendarValue() {
    return this.value[0];
  }
  get calendarMinDay() {
    const min = this.computedMin;
    return Array.isArray(min) ? min[0] : min;
  }
  get calendarMaxDay() {
    const max = this.computedMax;
    return Array.isArray(max) ? max[0] : max;
  }
  get computedActiveYearMonth() {
    const {
      computedMin,
      computedMax
    } = this;
    return this.month || this.value[0] || tuiDateClamp(this.defaultActiveYearMonth, Array.isArray(computedMin) ? computedMin[0] : computedMin, Array.isArray(computedMax) ? computedMax[0] : computedMax);
  }
  get nativeValue() {
    var _a;
    return ((_a = this.nativeFocusableElement) === null || _a === void 0 ? void 0 : _a.value) || "";
  }
  set nativeValue(value) {
    if (!this.nativeFocusableElement) {
      return;
    }
    this.nativeFocusableElement.value = value;
  }
  onClick() {
    this.open = !this.open;
  }
  onValueChange(value) {
    if (!value) {
      this.onOpenChange(true);
    }
    if (value.length < DATE_FILLER_LENGTH) {
      this.value = [null, null];
      return;
    }
    const [date, time] = value.split(DATE_TIME_SEPARATOR);
    const parsedDate = TuiDay.normalizeParse(date, this.dateFormat);
    const parsedTime = time && time.length === this.timeMode.length ? TuiTime.fromString(time) : null;
    this.open = false;
    this.value = [parsedDate, parsedTime];
  }
  onDayClick(day) {
    var _a;
    const modifiedTime = this.value[1] && this.clampTime(this.value[1], day);
    const newCaretIndex = DATE_FILLER_LENGTH + DATE_TIME_SEPARATOR.length;
    this.value = [day, modifiedTime];
    this.updateNativeValue(day);
    (_a = this.nativeFocusableElement) === null || _a === void 0 ? void 0 : _a.setSelectionRange(newCaretIndex, newCaretIndex);
    this.open = false;
  }
  onMonthChange(month) {
    this.month = month;
  }
  onOpenChange(open) {
    this.open = open;
  }
  onFocused(focused) {
    this.updateFocused(focused);
    if (focused) {
      return;
    }
    timer(0).pipe(takeUntil(this.destroy$)).subscribe(() => {
      this.nativeValue = this.trimTrailingSeparator(this.nativeValue);
    });
    if (this.value[0] === null || this.value[1] !== null || this.nativeValue.length <= this.fillerLength + DATE_TIME_SEPARATOR.length || this.timeMode === "HH:MM") {
      return;
    }
    const [, time] = this.nativeValue.split(DATE_TIME_SEPARATOR);
    if (!time) {
      return;
    }
    const parsedTime = TuiTime.fromString(time);
    this.value = [this.value[0], parsedTime];
  }
  setDisabledState() {
    super.setDisabledState();
    this.open = false;
  }
  writeValue(value) {
    super.writeValue(value);
    this.nativeValue = this.value && (this.value[0] || this.value[1]) ? this.computedValue : "";
  }
  getFallbackValue() {
    return [null, null];
  }
  valueIdenticalComparator(oldValue, newValue) {
    return tuiNullableSame(oldValue[0], newValue[0], (a, b) => a.daySame(b)) && tuiNullableSame(oldValue[1], newValue[1], (a, b) => String(a) === String(b));
  }
  calculateMask(min, max, timeMode, dateFormat, dateSeparator) {
    return maskitoDateTimeOptionsGenerator({
      timeMode,
      dateSeparator,
      dateMode: TUI_DATE_MODE_MASKITO_ADAPTER[dateFormat],
      min: this.toNativeDate(min),
      max: this.toNativeDate(max)
    });
  }
  getDateTimeString(date, time, timeMode = "HH:MM") {
    const dateString = date instanceof TuiDay ? date.toString(this.dateFormat, this.dateSeparator) : date;
    const timeString = time instanceof TuiTime ? time.toString(timeMode) : time || "";
    return timeString ? `${dateString}${DATE_TIME_SEPARATOR}${timeString}` : dateString;
  }
  updateNativeValue(day) {
    const time = this.nativeValue.split(DATE_TIME_SEPARATOR)[1] || "";
    this.nativeValue = this.getDateTimeString(day, time);
  }
  clampTime(time, day) {
    const {
      computedMin,
      computedMax
    } = this;
    const ms = time.toAbsoluteMilliseconds();
    const min = Array.isArray(computedMin) && day.daySame(this.calendarMinDay) ? computedMin[1].toAbsoluteMilliseconds() : -Infinity;
    const max = Array.isArray(computedMax) && day.daySame(this.calendarMaxDay) ? computedMax[1].toAbsoluteMilliseconds() : Infinity;
    return TuiTime.fromAbsoluteMilliseconds(tuiClamp(ms, min, max));
  }
  trimTrailingSeparator(value) {
    return value.replace(new RegExp(`(\\${this.dateSeparator}|${DATE_TIME_SEPARATOR}|\\.)$`), "");
  }
  toNativeDate(value) {
    if (!Array.isArray(value)) {
      return value.toLocalNativeDate();
    }
    const [{
      year,
      month,
      day
    }, {
      hours,
      minutes,
      seconds,
      ms
    }] = value;
    return new Date(year, month, day, hours, minutes, seconds, ms);
  }
  toTuiDay(value, fallback) {
    if (!value) {
      return fallback;
    }
    if (!Array.isArray(value)) {
      return value;
    }
    const [tuiDay, tuiTime] = value;
    if (!tuiDay) {
      return fallback;
    }
    if (!tuiTime) {
      return tuiDay;
    }
    return [tuiDay, tuiTime];
  }
};
TuiInputDateTimeComponent.ɵfac = function TuiInputDateTimeComponent_Factory(t) {
  return new (t || TuiInputDateTimeComponent)(ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(TUI_DATE_FORMAT), ɵɵdirectiveInject(TUI_DATE_SEPARATOR), ɵɵdirectiveInject(TUI_TIME_TEXTS), ɵɵdirectiveInject(TUI_DATE_TEXTS), ɵɵdirectiveInject(TUI_DATE_TIME_VALUE_TRANSFORMER, 8), ɵɵdirectiveInject(TUI_INPUT_DATE_OPTIONS), ɵɵdirectiveInject(TUI_IS_MOBILE), ɵɵdirectiveInject(TUI_IS_IOS), ɵɵdirectiveInject(TUI_TEXTFIELD_SIZE));
};
TuiInputDateTimeComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiInputDateTimeComponent,
  selectors: [["tui-input-date-time"]],
  viewQuery: function TuiInputDateTimeComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(TuiPrimitiveTextfieldComponent, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.textfield = _t.first);
    }
  },
  hostVars: 1,
  hostBindings: function TuiInputDateTimeComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("click", function TuiInputDateTimeComponent_click_HostBindingHandler() {
        return ctx.onClick();
      });
    }
    if (rf & 2) {
      ɵɵattribute("data-size", ctx.size);
    }
  },
  inputs: {
    min: "min",
    max: "max",
    disabledItemHandler: "disabledItemHandler",
    defaultActiveYearMonth: "defaultActiveYearMonth",
    timeMode: "timeMode"
  },
  features: [ɵɵProvidersFeature([tuiAsFocusableItemAccessor(TuiInputDateTimeComponent), tuiAsControl(TuiInputDateTimeComponent), tuiDateStreamWithTransformer(TUI_DATE_TIME_VALUE_TRANSFORMER)]), ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c29,
  decls: 9,
  vars: 16,
  consts: [[1, "t-hosted", 3, "canOpen", "content", "open", "openChange"], ["automation-id", "tui-input-date-time__textfield", "tuiValueAccessor", "", 1, "t-textfield", 3, "disabled", "invalid", "maskito", "nativeId", "pseudoFocus", "pseudoHover", "readOnly", "tuiTextfieldFiller", "tuiTextfieldIcon", "value", "focusedChange", "valueChange"], ["iconContent", ""], [3, "polymorpheus"], ["dropdown", "polymorpheus"], ["appearance", "icon", "tuiWrapper", "", 3, "t-icon", "src", 4, "polymorpheusOutlet", "polymorpheusOutletContext"], ["tuiDateTime", "", "class", "t-native-input", 4, "ngIf"], ["appearance", "icon", "tuiWrapper", "", 3, "src"], ["tuiDateTime", "", 1, "t-native-input"], ["automation-id", "tui-input-date-time__calendar", "tuiPreventDefault", "mousedown", 3, "disabledItemHandler", "max", "min", "month", "value", "dayClick", "monthChange"]],
  template: function TuiInputDateTimeComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c115);
      ɵɵelementStart(0, "tui-hosted-dropdown", 0);
      ɵɵlistener("openChange", function TuiInputDateTimeComponent_Template_tui_hosted_dropdown_openChange_0_listener($event) {
        return ctx.onOpenChange($event);
      });
      ɵɵelementStart(1, "tui-primitive-textfield", 1);
      ɵɵlistener("focusedChange", function TuiInputDateTimeComponent_Template_tui_primitive_textfield_focusedChange_1_listener($event) {
        return ctx.onFocused($event);
      })("valueChange", function TuiInputDateTimeComponent_Template_tui_primitive_textfield_valueChange_1_listener($event) {
        return ctx.onValueChange($event);
      });
      ɵɵpipe(2, "async");
      ɵɵprojection(3);
      ɵɵprojection(4, 1, ["ngProjectAs", "input", 5, ["input"]]);
      ɵɵelementEnd();
      ɵɵtemplate(5, TuiInputDateTimeComponent_ng_template_5_Template, 2, 5, "ng-template", null, 2, ɵɵtemplateRefExtractor);
      ɵɵtemplate(7, TuiInputDateTimeComponent_ng_template_7_Template, 1, 5, "ng-template", 3, 4, ɵɵtemplateRefExtractor);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      const _r0 = ɵɵreference(6);
      const _r2 = ɵɵreference(8);
      ɵɵproperty("canOpen", ctx.interactive && !ctx.showNativePicker)("content", _r2)("open", ctx.open && ctx.interactive);
      ɵɵadvance(1);
      ɵɵproperty("disabled", ctx.computedDisabled)("invalid", ctx.computedInvalid)("maskito", ctx.maskOptions)("nativeId", ctx.nativeId)("pseudoFocus", ctx.pseudoFocus)("pseudoHover", ctx.pseudoHover)("readOnly", ctx.readOnly)("tuiTextfieldFiller", ɵɵpipeBind1(2, 14, ctx.filler$) || "")("tuiTextfieldIcon", ctx.calendarIcon && _r0)("value", ctx.computedValue);
      ɵɵadvance(6);
      ɵɵproperty("polymorpheus", ctx.type);
    }
  },
  dependencies: [TuiHostedDropdownComponent, TuiPrimitiveTextfieldComponent, TuiSvgComponent, TuiCalendarComponent, TuiPrimitiveTextfieldDirective, TuiValueAccessorDirective, MaskitoDirective, TuiTextfieldFillerDirective, TuiTextfieldIconDirective, PolymorpheusOutletDirective, TuiWrapperDirective, NgIf, TuiNativeDateTimeDirective, PolymorpheusTemplate, TuiPreventDefaultDirective, AsyncPipe],
  styles: ["[_nghost-%COMP%]{display:block;border-radius:var(--tui-radius-m);text-align:left}.t-hosted[_ngcontent-%COMP%]{display:block;border-radius:inherit}.t-textfield[_ngcontent-%COMP%]{border-radius:inherit;text-align:inherit}.t-icon[_ngcontent-%COMP%]{pointer-events:auto}.t-button[_ngcontent-%COMP%]{display:flex;height:2.75rem;justify-content:center;box-shadow:inset 0 1px var(--tui-base-03)}.t-native-input[_ngcontent-%COMP%]{position:absolute;top:0;left:0;width:100%;height:100%;opacity:0;pointer-events:auto;font-size:2rem}"],
  changeDetection: 0
});
__decorate([tuiPure], TuiInputDateTimeComponent.prototype, "calculateMask", null);
__decorate([tuiPure], TuiInputDateTimeComponent.prototype, "getDateTimeString", null);
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputDateTimeComponent, [{
    type: Component,
    args: [{
      selector: "tui-input-date-time",
      templateUrl: "./input-date-time.template.html",
      styleUrls: ["./input-date-time.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [tuiAsFocusableItemAccessor(TuiInputDateTimeComponent), tuiAsControl(TuiInputDateTimeComponent), tuiDateStreamWithTransformer(TUI_DATE_TIME_VALUE_TRANSFORMER)]
    }]
  }], function() {
    return [{
      type: NgControl,
      decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NgControl]
      }]
    }, {
      type: ChangeDetectorRef,
      decorators: [{
        type: Inject,
        args: [ChangeDetectorRef]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_DATE_FORMAT]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_DATE_SEPARATOR]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Inject,
        args: [TUI_TIME_TEXTS]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Inject,
        args: [TUI_DATE_TEXTS]
      }]
    }, {
      type: AbstractTuiValueTransformer,
      decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [TUI_DATE_TIME_VALUE_TRANSFORMER]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_INPUT_DATE_OPTIONS]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_IS_MOBILE]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_IS_IOS]
      }]
    }, {
      type: TuiTextfieldSizeDirective,
      decorators: [{
        type: Inject,
        args: [TUI_TEXTFIELD_SIZE]
      }]
    }];
  }, {
    textfield: [{
      type: ViewChild,
      args: [TuiPrimitiveTextfieldComponent]
    }],
    min: [{
      type: Input
    }],
    max: [{
      type: Input
    }],
    disabledItemHandler: [{
      type: Input
    }],
    defaultActiveYearMonth: [{
      type: Input
    }],
    timeMode: [{
      type: Input
    }],
    size: [{
      type: HostBinding,
      args: ["attr.data-size"]
    }],
    onClick: [{
      type: HostListener,
      args: ["click"]
    }],
    calculateMask: [],
    getDateTimeString: []
  });
})();
var TuiInputDateTimeDirective = class extends AbstractTuiTextfieldHost {
  get value() {
    return this.host.computedValue;
  }
  get rawValue() {
    return this.host.value;
  }
  onValueChange(value) {
    this.host.onValueChange(value);
  }
  writeValue(value) {
    this.host.writeValue(value);
  }
  process(input) {
    input.inputMode = "numeric";
  }
};
TuiInputDateTimeDirective.ɵfac = function() {
  let ɵTuiInputDateTimeDirective_BaseFactory;
  return function TuiInputDateTimeDirective_Factory(t) {
    return (ɵTuiInputDateTimeDirective_BaseFactory || (ɵTuiInputDateTimeDirective_BaseFactory = ɵɵgetInheritedFactory(TuiInputDateTimeDirective)))(t || TuiInputDateTimeDirective);
  };
}();
TuiInputDateTimeDirective.ɵdir = ɵɵdefineDirective({
  type: TuiInputDateTimeDirective,
  selectors: [["tui-input-date-time"]],
  features: [ɵɵProvidersFeature([tuiAsTextfieldHost(TuiInputDateTimeDirective)]), ɵɵInheritDefinitionFeature]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputDateTimeDirective, [{
    type: Directive,
    args: [{
      selector: "tui-input-date-time",
      providers: [tuiAsTextfieldHost(TuiInputDateTimeDirective)]
    }]
  }], null, null);
})();
var TuiInputDateTimeModule = class {
};
TuiInputDateTimeModule.ɵfac = function TuiInputDateTimeModule_Factory(t) {
  return new (t || TuiInputDateTimeModule)();
};
TuiInputDateTimeModule.ɵmod = ɵɵdefineNgModule({
  type: TuiInputDateTimeModule,
  declarations: [TuiInputDateTimeComponent, TuiInputDateTimeDirective, TuiNativeDateTimeDirective],
  imports: [CommonModule, MaskitoModule, PolymorpheusModule, TuiWrapperModule, TuiPreventDefaultModule, TuiCalendarModule, TuiSvgModule, TuiLinkModule, TuiHostedDropdownModule, TuiPrimitiveTextfieldModule, TuiValueAccessorModule, TuiTextfieldControllerModule],
  exports: [TuiInputDateTimeComponent, TuiInputDateTimeDirective, TuiTextfieldComponent]
});
TuiInputDateTimeModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, MaskitoModule, PolymorpheusModule, TuiWrapperModule, TuiPreventDefaultModule, TuiCalendarModule, TuiSvgModule, TuiLinkModule, TuiHostedDropdownModule, TuiPrimitiveTextfieldModule, TuiValueAccessorModule, TuiTextfieldControllerModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputDateTimeModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, MaskitoModule, PolymorpheusModule, TuiWrapperModule, TuiPreventDefaultModule, TuiCalendarModule, TuiSvgModule, TuiLinkModule, TuiHostedDropdownModule, TuiPrimitiveTextfieldModule, TuiValueAccessorModule, TuiTextfieldControllerModule],
      declarations: [TuiInputDateTimeComponent, TuiInputDateTimeDirective, TuiNativeDateTimeDirective],
      exports: [TuiInputDateTimeComponent, TuiInputDateTimeDirective, TuiTextfieldComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-input-files.js
var _c024 = ["input"];
var _c116 = ["formatRejection"];
var _c210 = ["maxSizeRejection"];
function TuiInputFilesComponent_ng_container_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function TuiInputFilesComponent_div_4_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtext(1);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const text_r9 = ctx.polymorpheusOutlet;
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", text_r9, " ");
  }
}
function TuiInputFilesComponent_div_4_span_4_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "span", 10);
  }
  if (rf & 2) {
    const text_r10 = ctx.polymorpheusOutlet;
    ɵɵproperty("textContent", text_r10);
  }
}
function TuiInputFilesComponent_div_4_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div")(1, "a", 7);
    ɵɵtemplate(2, TuiInputFilesComponent_div_4_ng_container_2_Template, 2, 1, "ng-container", 8);
    ɵɵpipe(3, "async");
    ɵɵelementEnd();
    ɵɵtemplate(4, TuiInputFilesComponent_div_4_span_4_Template, 1, 1, "span", 9);
    ɵɵpipe(5, "async");
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵproperty("polymorpheusOutlet", ɵɵpipeBind1(3, 2, ctx_r1.computedLink$));
    ɵɵadvance(2);
    ɵɵproperty("polymorpheusOutlet", ɵɵpipeBind1(5, 4, ctx_r1.computedLabel$));
  }
}
function TuiInputFilesComponent_ng_container_5_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵprojection(1);
    ɵɵelement(2, "input", 11, 12);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵproperty("accept", ctx_r2.accept)("id", ctx_r2.id)("multiple", ctx_r2.multiple)("tuiFocusable", ctx_r2.focusable);
  }
}
function TuiInputFilesComponent_ng_template_6_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtext(0);
    ɵɵpipe(1, "async");
  }
  if (rf & 2) {
    const ctx_r4 = ɵɵnextContext();
    let tmp_0_0;
    ɵɵtextInterpolate1(" ", ((tmp_0_0 = ɵɵpipeBind1(1, 1, ctx_r4.inputFileTexts$)) == null ? null : tmp_0_0.formatRejectionReason) || "", "\n");
  }
}
function TuiInputFilesComponent_ng_template_8_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtext(0);
    ɵɵpipe(1, "async");
    ɵɵpipe(2, "tuiMaxSizeRejectionError");
  }
  if (rf & 2) {
    const ctx_r6 = ɵɵnextContext();
    ɵɵtextInterpolate1(" ", ɵɵpipeBind1(1, 1, ɵɵpipeBind1(2, 3, ctx_r6.maxFileSize)), "\n");
  }
}
var _c34 = [[["input"]]];
var _c43 = function(a0) {
  return {
    $implicit: a0
  };
};
var TUI_INPUT_FILES_DEFAULT_OPTIONS = {
  capture: null,
  accepts: "",
  multiple: false,
  size: "m",
  maxFileSize: 30 * 1024 * 1024
  // 30 MiB
};
var TUI_INPUT_FILES_OPTIONS = tuiCreateToken(TUI_INPUT_FILES_DEFAULT_OPTIONS);
function tuiInputFilesOptionsProvider(options) {
  return tuiProvideOptions(TUI_INPUT_FILES_OPTIONS, options, TUI_INPUT_FILES_DEFAULT_OPTIONS);
}
var TuiInputFilesDirective = class {
  constructor(host, el, idService, options) {
    this.host = host;
    this.el = el;
    this.idService = idService;
    this.options = options;
  }
  get tabIndex() {
    return this.host.focusable ? 0 : -1;
  }
  get id() {
    return this.el.nativeElement.id || this.idService.generate();
  }
  get accept() {
    var _a;
    return (_a = this.el.nativeElement.accept) !== null && _a !== void 0 ? _a : this.options.accepts;
  }
  get multiple() {
    var _a;
    return (_a = this.el.nativeElement.multiple) !== null && _a !== void 0 ? _a : this.options.multiple;
  }
  get capture() {
    var _a;
    return (_a = this.el.nativeElement.getAttribute("capture")) !== null && _a !== void 0 ? _a : this.options.capture;
  }
  get input() {
    return this.el.nativeElement;
  }
};
TuiInputFilesDirective.ɵfac = function TuiInputFilesDirective_Factory(t) {
  return new (t || TuiInputFilesDirective)(ɵɵdirectiveInject(forwardRef(() => TuiInputFilesComponent)), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(TuiIdService), ɵɵdirectiveInject(TUI_INPUT_FILES_OPTIONS));
};
TuiInputFilesDirective.ɵdir = ɵɵdefineDirective({
  type: TuiInputFilesDirective,
  selectors: [["input", "tuiInputFiles", ""]],
  hostAttrs: ["type", "file", 1, "t-native"],
  hostVars: 5,
  hostBindings: function TuiInputFilesDirective_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵhostProperty("tabIndex", ctx.tabIndex)("id", ctx.id)("accept", ctx.accept)("multiple", ctx.multiple);
      ɵɵattribute("capture", ctx.capture);
    }
  }
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputFilesDirective, [{
    type: Directive,
    args: [{
      selector: "input[tuiInputFiles]",
      host: {
        type: "file",
        class: "t-native"
      }
    }]
  }], function() {
    return [{
      type: TuiInputFilesComponent,
      decorators: [{
        type: Inject,
        args: [forwardRef(() => TuiInputFilesComponent)]
      }]
    }, {
      type: ElementRef,
      decorators: [{
        type: Inject,
        args: [ElementRef]
      }]
    }, {
      type: TuiIdService,
      decorators: [{
        type: Inject,
        args: [TuiIdService]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_INPUT_FILES_OPTIONS]
      }]
    }];
  }, {
    tabIndex: [{
      type: HostBinding,
      args: ["tabIndex"]
    }],
    id: [{
      type: HostBinding,
      args: ["id"]
    }],
    accept: [{
      type: HostBinding,
      args: ["accept"]
    }],
    multiple: [{
      type: HostBinding,
      args: ["multiple"]
    }],
    capture: [{
      type: HostBinding,
      args: ["attr.capture"]
    }]
  });
})();
var TuiMaxSizeRejectionErrorPipe = class {
  constructor(inputFileTexts$, units$) {
    this.inputFileTexts$ = inputFileTexts$;
    this.units$ = units$;
  }
  transform(maxFileSize) {
    return combineLatest([this.inputFileTexts$, this.units$]).pipe(map(([{
      maxSizeRejectionReason
    }, units]) => `${maxSizeRejectionReason}${tuiFormatSize(units, maxFileSize)}`));
  }
};
TuiMaxSizeRejectionErrorPipe.ɵfac = function TuiMaxSizeRejectionErrorPipe_Factory(t) {
  return new (t || TuiMaxSizeRejectionErrorPipe)(ɵɵdirectiveInject(TUI_INPUT_FILE_TEXTS, 16), ɵɵdirectiveInject(TUI_DIGITAL_INFORMATION_UNITS, 16));
};
TuiMaxSizeRejectionErrorPipe.ɵpipe = ɵɵdefinePipe({
  name: "tuiMaxSizeRejectionError",
  type: TuiMaxSizeRejectionErrorPipe,
  pure: true
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiMaxSizeRejectionErrorPipe, [{
    type: Pipe,
    args: [{
      name: "tuiMaxSizeRejectionError"
    }]
  }], function() {
    return [{
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_INPUT_FILE_TEXTS]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_DIGITAL_INFORMATION_UNITS]
      }]
    }];
  }, null);
})();
var TuiInputFilesComponent = class extends AbstractTuiNullableControl {
  constructor(control, cdr, isMobile, inputFileTexts$, options) {
    super(control, cdr);
    this.isMobile = isMobile;
    this.inputFileTexts$ = inputFileTexts$;
    this.options = options;
    this.files = null;
    this.accept = this.options.accepts;
    this.multiple = this.options.multiple;
    this.size = this.options.size;
    this.maxFileSize = this.options.maxFileSize;
    this.reject = new EventEmitter();
  }
  get computedMultiple() {
    var _a, _b;
    return (_b = (_a = this.nativeInput) === null || _a === void 0 ? void 0 : _a.multiple) !== null && _b !== void 0 ? _b : this.multiple;
  }
  get computedAccept() {
    var _a, _b;
    return (_b = (_a = this.nativeInput) === null || _a === void 0 ? void 0 : _a.accept) !== null && _b !== void 0 ? _b : this.accept;
  }
  get nativeFocusableElement() {
    var _a;
    return ((_a = this.input) === null || _a === void 0 ? void 0 : _a.nativeElement) || null;
  }
  get focused() {
    return tuiIsNativeFocused(this.nativeFocusableElement);
  }
  get computedPseudoHovered() {
    var _a;
    return (_a = this.pseudoHover) !== null && _a !== void 0 ? _a : this.fileDragged || null;
  }
  get computedLink$() {
    return this.computeLink$(this.fileDragged, this.computedMultiple, this.link);
  }
  get computedLabel$() {
    return this.computeLabel$(this.isMobile, this.fileDragged, this.computedMultiple, this.label);
  }
  get fileDragged() {
    return !!this.files && !this.computedDisabled;
  }
  get arrayValue() {
    return this.getValueArray(this.value);
  }
  onFocused(focused) {
    this.updateFocused(focused);
  }
  onFilesSelected() {
    var _a, _b, _c;
    const input = (_b = (_a = this.nativeInput) === null || _a === void 0 ? void 0 : _a.input) !== null && _b !== void 0 ? _b : (_c = this.input) === null || _c === void 0 ? void 0 : _c.nativeElement;
    if (!input) {
      return;
    }
    this.processSelectedFiles(input.files);
    input.value = "";
  }
  onDropped(event) {
    this.files = null;
    this.processSelectedFiles(event.files);
  }
  onDragOver(dataTransfer) {
    this.files = dataTransfer === null || dataTransfer === void 0 ? void 0 : dataTransfer.files;
  }
  removeFile(removedFile) {
    this.value = this.computedMultiple ? this.arrayValue.filter((file) => file !== removedFile) : null;
  }
  computeLink$(fileDragged, multiple, link) {
    return fileDragged ? of("") : this.inputFileTexts$.pipe(map((texts) => multiple && !link ? texts.defaultLinkMultiple : link || texts.defaultLinkSingle));
  }
  computeLabel$(isMobile, fileDragged, multiple, label) {
    if (isMobile) {
      return of("");
    }
    if (fileDragged) {
      return this.inputFileTexts$.pipe(map((texts) => multiple ? texts.dropMultiple : texts.drop));
    }
    return this.inputFileTexts$.pipe(map((texts) => multiple && !label ? texts.defaultLabelMultiple : label || texts.defaultLabelSingle));
  }
  getValueArray(value) {
    if (!value) {
      return EMPTY_ARRAY;
    }
    return Array.isArray(value) ? value : [value];
  }
  processSelectedFiles(files) {
    if (!(files === null || files === void 0 ? void 0 : files.length)) {
      return;
    }
    const errors = {
      formatRejection: this.formatRejection,
      maxSizeRejection: this.maxSizeRejection
    };
    const newFiles = this.computedMultiple ? Array.from(files) : [files[0]];
    const tooBigFiles = newFiles.filter((file) => file.size > this.maxFileSize);
    const wrongFormatFiles = newFiles.filter((file) => !this.isFormatAcceptable(file) && !tooBigFiles.includes(file));
    const acceptedFiles = newFiles.filter((file) => !tooBigFiles.includes(file) && !wrongFormatFiles.includes(file));
    if (tooBigFiles.length || wrongFormatFiles.length) {
      this.rejectFiles([...tooBigFiles.map((file) => ({
        name: file.name,
        type: file.type,
        size: file.size,
        content: errors.maxSizeRejection
      })), ...wrongFormatFiles.map((file) => ({
        name: file.name,
        type: file.type,
        size: file.size,
        content: errors.formatRejection
      }))]);
    }
    this.value = this.computedMultiple ? [...this.arrayValue, ...acceptedFiles] : acceptedFiles[0] || null;
  }
  isFormatAcceptable(file) {
    if (!this.computedAccept) {
      return true;
    }
    const extension = `.${(file.name.split(".").pop() || "").toLowerCase()}`;
    return tuiGetAcceptArray(this.computedAccept).some((format) => format === extension || format === file.type || format.split("/")[1] === "*" && file.type.split("/")[0] === format.split("/")[0]);
  }
  rejectFiles(rejectedFiles) {
    this.reject.emit(this.computedMultiple ? rejectedFiles : rejectedFiles[0]);
  }
};
TuiInputFilesComponent.ɵfac = function TuiInputFilesComponent_Factory(t) {
  return new (t || TuiInputFilesComponent)(ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(TUI_IS_MOBILE), ɵɵdirectiveInject(TUI_INPUT_FILE_TEXTS), ɵɵdirectiveInject(TUI_INPUT_FILES_OPTIONS));
};
TuiInputFilesComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiInputFilesComponent,
  selectors: [["tui-input-files"]],
  contentQueries: function TuiInputFilesComponent_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, TuiInputFilesDirective, 5);
      ɵɵcontentQuery(dirIndex, TemplateRef, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.nativeInput = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.template = _t.first);
    }
  },
  viewQuery: function TuiInputFilesComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(_c024, 5);
      ɵɵviewQuery(_c116, 5);
      ɵɵviewQuery(_c210, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.input = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.formatRejection = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.maxSizeRejection = _t.first);
    }
  },
  hostBindings: function TuiInputFilesComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("focusin", function TuiInputFilesComponent_focusin_HostBindingHandler() {
        return ctx.onFocused(true);
      })("focusout", function TuiInputFilesComponent_focusout_HostBindingHandler() {
        return ctx.onFocused(false);
      })("change", function TuiInputFilesComponent_change_HostBindingHandler() {
        return ctx.onFilesSelected();
      });
    }
  },
  inputs: {
    link: "link",
    label: "label",
    accept: "accept",
    multiple: "multiple",
    size: "size",
    maxFileSize: "maxFileSize"
  },
  outputs: {
    reject: "reject"
  },
  features: [ɵɵProvidersFeature([MODE_PROVIDER, tuiAsFocusableItemAccessor(TuiInputFilesComponent)]), ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c024,
  decls: 10,
  vars: 12,
  consts: [["appearance", "input-file", "tuiWrapper", "", 1, "t-wrapper", 3, "active", "disabled", "focus", "hover"], ["automation-id", "tui-input-file__label", 1, "t-label", 3, "mousedown.prevent.silent", "tuiDroppableDragOverChange", "tuiDroppableDropped"], [1, "t-description"], [4, "ngTemplateOutlet", "ngTemplateOutletContext"], [4, "ngIf"], ["formatRejection", ""], ["maxSizeRejection", ""], ["tuiLink", ""], [4, "polymorpheusOutlet"], [3, "textContent", 4, "polymorpheusOutlet"], [3, "textContent"], ["title", "", "type", "file", 1, "t-native", 3, "accept", "id", "multiple", "tuiFocusable"], ["input", ""]],
  template: function TuiInputFilesComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c34);
      ɵɵelementStart(0, "div", 0)(1, "label", 1);
      ɵɵlistener("mousedown.prevent.silent", function TuiInputFilesComponent_Template_label_mousedown_prevent_silent_1_listener() {
        return 0;
      })("tuiDroppableDragOverChange", function TuiInputFilesComponent_Template_label_tuiDroppableDragOverChange_1_listener($event) {
        return ctx.onDragOver($event);
      })("tuiDroppableDropped", function TuiInputFilesComponent_Template_label_tuiDroppableDropped_1_listener($event) {
        return ctx.onDropped($event);
      });
      ɵɵelementStart(2, "div", 2);
      ɵɵtemplate(3, TuiInputFilesComponent_ng_container_3_Template, 1, 0, "ng-container", 3);
      ɵɵtemplate(4, TuiInputFilesComponent_div_4_Template, 6, 6, "div", 4);
      ɵɵelementEnd();
      ɵɵtemplate(5, TuiInputFilesComponent_ng_container_5_Template, 4, 4, "ng-container", 4);
      ɵɵelementEnd()();
      ɵɵtemplate(6, TuiInputFilesComponent_ng_template_6_Template, 2, 3, "ng-template", null, 5, ɵɵtemplateRefExtractor);
      ɵɵtemplate(8, TuiInputFilesComponent_ng_template_8_Template, 3, 5, "ng-template", null, 6, ɵɵtemplateRefExtractor);
    }
    if (rf & 2) {
      ɵɵclassProp("_mobile", ctx.isMobile);
      ɵɵproperty("active", ctx.pseudoActive)("disabled", ctx.computedDisabled)("focus", ctx.computedFocused)("hover", ctx.pseudoHover || ctx.fileDragged || null);
      ɵɵadvance(3);
      ɵɵproperty("ngTemplateOutlet", ctx.template || null)("ngTemplateOutletContext", ɵɵpureFunction1(10, _c43, ctx.fileDragged));
      ɵɵadvance(1);
      ɵɵproperty("ngIf", !ctx.template);
      ɵɵadvance(1);
      ɵɵproperty("ngIf", !ctx.readOnly && !ctx.computedDisabled);
    }
  },
  dependencies: [TuiLinkComponent, TuiWrapperDirective, TuiDroppableDirective, NgTemplateOutlet, NgIf, PolymorpheusOutletDirective, TuiFocusableDirective, AsyncPipe, TuiMaxSizeRejectionErrorPipe],
  styles: ['tui-input-files{display:block;min-height:var(--tui-height-l);border-radius:var(--tui-radius-m);font:var(--tui-font-text-m)}tui-input-files .t-native{position:absolute;top:0;left:0;width:100%;height:100%;opacity:0;cursor:pointer}tui-input-files .t-native::-webkit-file-upload-button{display:none}tui-input-files .t-native+.t-native{display:none}tui-input-files .t-label{width:100%;min-height:inherit;text-align:center}tui-input-files .t-description{display:flex;justify-content:center;align-items:center;height:100%;min-height:inherit;padding:1rem 0;box-sizing:border-box}[tuiWrapper][data-appearance=input-file]{background:transparent;word-wrap:break-word;color:var(--tui-text-02);min-height:inherit;border-radius:inherit;padding:0 .5rem;box-sizing:border-box}[tuiWrapper][data-appearance=input-file]:after{border:1px dashed;color:var(--tui-link)}[tuiWrapper][data-appearance=input-file]._mobile:after{border:1px solid}[tuiWrapper][data-appearance=input-file]:disabled:disabled:after,[tuiWrapper][data-appearance=input-file][data-state=disabled][data-state=disabled]:after{color:var(--tui-text-03)}:focus-visible:not([data-focused="false"])>[tuiWrapper][data-appearance=input-file]:after,[data-focused=true]>[tuiWrapper][data-appearance=input-file]:after{border-style:solid;border-width:2px;color:var(--tui-focus)}[tuiWrapper][data-appearance=input-file]:focus-visible:focus-visible:after{border-style:solid;border-width:2px;color:var(--tui-focus)}[tuiWrapper][data-appearance=input-file]._focused._focused:after{border-style:solid;border-width:2px;color:var(--tui-focus)}[tuiWrapper][data-appearance=input-file][data-mode=onDark]{color:var(--tui-text-01-night)}[tuiWrapper][data-appearance=input-file][data-mode=onDark]:after{color:var(--tui-text-01-night)}:focus-visible:not([data-focused="false"])>[tuiWrapper][data-appearance=input-file][data-mode=onDark]:after,[data-focused=true]>[tuiWrapper][data-appearance=input-file][data-mode=onDark]:after{color:var(--tui-text-01-night)}[tuiWrapper][data-appearance=input-file][data-mode=onDark]:focus-visible:focus-visible:after{color:var(--tui-text-01-night)}[tuiWrapper][data-appearance=input-file][data-mode=onDark]._focused._focused:after{color:var(--tui-text-01-night)}@media (hover: hover){[tuiWrapper][data-appearance=input-file][data-mode=onDark]:hover:not(._no-hover),[tuiWrapper][data-appearance=input-file][data-mode=onDark][data-state=hover]{background:var(--tui-clear-inverse-hover)}[tuiWrapper][data-appearance=input-file][data-mode=onDark]:hover:not(._no-hover):after,[tuiWrapper][data-appearance=input-file][data-mode=onDark][data-state=hover]:after{color:var(--tui-text-03-night)}}[tuiWrapper][data-appearance=input-file][data-mode=onDark]:active:not(._no-active),[tuiWrapper][data-appearance=input-file][data-mode=onDark][data-state=active],[tuiWrapper][data-appearance=input-file][data-mode=onDark][data-state=active]:hover{background:var(--tui-clear-inverse-active)}[tuiWrapper][data-appearance=input-file][data-mode=onDark]:active:not(._no-active):after,[tuiWrapper][data-appearance=input-file][data-mode=onDark][data-state=active]:after,[tuiWrapper][data-appearance=input-file][data-mode=onDark][data-state=active]:hover:after{color:var(--tui-text-03-night)}[tuiWrapper][data-appearance=input-file][data-mode=onLight]{color:var(--tui-text-01)}[tuiWrapper][data-appearance=input-file][data-mode=onLight]:after{color:var(--tui-text-01)}@media (hover: hover){[tuiWrapper][data-appearance=input-file][data-mode=onLight]:hover:not(._no-hover),[tuiWrapper][data-appearance=input-file][data-mode=onLight][data-state=hover]{background:var(--tui-clear-hover)}[tuiWrapper][data-appearance=input-file][data-mode=onLight]:hover:not(._no-hover):after,[tuiWrapper][data-appearance=input-file][data-mode=onLight][data-state=hover]:after{color:var(--tui-text-03)}}[tuiWrapper][data-appearance=input-file][data-mode=onLight]:active:not(._no-active),[tuiWrapper][data-appearance=input-file][data-mode=onLight][data-state=active],[tuiWrapper][data-appearance=input-file][data-mode=onLight][data-state=active]:hover{background:var(--tui-clear-active)}[tuiWrapper][data-appearance=input-file][data-mode=onLight]:active:not(._no-active):after,[tuiWrapper][data-appearance=input-file][data-mode=onLight][data-state=active]:after,[tuiWrapper][data-appearance=input-file][data-mode=onLight][data-state=active]:hover:after{color:var(--tui-text-03)}@media (hover: hover){[tuiWrapper][data-appearance=input-file]:hover:not(._no-hover),[tuiWrapper][data-appearance=input-file][data-state=hover]{background:var(--tui-secondary)}[tuiWrapper][data-appearance=input-file]:hover:not(._no-hover):after,[tuiWrapper][data-appearance=input-file][data-state=hover]:after{color:var(--tui-link-hover)}}[tuiWrapper][data-appearance=input-file]:active:not(._no-active),[tuiWrapper][data-appearance=input-file][data-state=active],[tuiWrapper][data-appearance=input-file][data-state=active]:hover{background:var(--tui-secondary-hover)}\n'],
  encapsulation: 2,
  changeDetection: 0
});
__decorate([tuiPure], TuiInputFilesComponent.prototype, "computeLink$", null);
__decorate([tuiPure], TuiInputFilesComponent.prototype, "computeLabel$", null);
__decorate([tuiPure], TuiInputFilesComponent.prototype, "getValueArray", null);
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputFilesComponent, [{
    type: Component,
    args: [{
      selector: "tui-input-files",
      templateUrl: "./input-files.template.html",
      styleUrls: ["./input-files.style.less"],
      encapsulation: ViewEncapsulation$1.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [MODE_PROVIDER, tuiAsFocusableItemAccessor(TuiInputFilesComponent)]
    }]
  }], function() {
    return [{
      type: NgControl,
      decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NgControl]
      }]
    }, {
      type: ChangeDetectorRef,
      decorators: [{
        type: Inject,
        args: [ChangeDetectorRef]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_IS_MOBILE]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Inject,
        args: [TUI_INPUT_FILE_TEXTS]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_INPUT_FILES_OPTIONS]
      }]
    }];
  }, {
    input: [{
      type: ViewChild,
      args: ["input"]
    }],
    nativeInput: [{
      type: ContentChild,
      args: [forwardRef(() => TuiInputFilesDirective)]
    }],
    template: [{
      type: ContentChild,
      args: [TemplateRef]
    }],
    formatRejection: [{
      type: ViewChild,
      args: ["formatRejection"]
    }],
    maxSizeRejection: [{
      type: ViewChild,
      args: ["maxSizeRejection"]
    }],
    link: [{
      type: Input
    }],
    label: [{
      type: Input
    }],
    accept: [{
      type: Input
    }],
    multiple: [{
      type: Input
    }],
    size: [{
      type: Input
    }],
    maxFileSize: [{
      type: Input
    }],
    reject: [{
      type: Output
    }],
    onFocused: [{
      type: HostListener,
      args: ["focusin", ["true"]]
    }, {
      type: HostListener,
      args: ["focusout", ["false"]]
    }],
    onFilesSelected: [{
      type: HostListener,
      args: ["change"]
    }],
    computeLink$: [],
    computeLabel$: [],
    getValueArray: []
  });
})();
var TuiInputFilesModule = class {
};
TuiInputFilesModule.ɵfac = function TuiInputFilesModule_Factory(t) {
  return new (t || TuiInputFilesModule)();
};
TuiInputFilesModule.ɵmod = ɵɵdefineNgModule({
  type: TuiInputFilesModule,
  declarations: [TuiInputFilesComponent, TuiInputFilesDirective, TuiMaxSizeRejectionErrorPipe],
  imports: [CommonModule, PolymorpheusModule, TuiLetModule, TuiFocusedModule, TuiFocusVisibleModule, TuiPressedModule, TuiHoveredModule, TuiFocusableModule, TuiDroppableModule, TuiWrapperModule, TuiSvgModule, TuiLinkModule, TuiLoaderModule, TuiButtonModule, TuiGroupModule, TuiFilesModule],
  exports: [TuiInputFilesComponent, TuiInputFilesDirective, TuiFilesComponent, TuiFileComponent, TuiItemDirective]
});
TuiInputFilesModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, PolymorpheusModule, TuiLetModule, TuiFocusedModule, TuiFocusVisibleModule, TuiPressedModule, TuiHoveredModule, TuiFocusableModule, TuiDroppableModule, TuiWrapperModule, TuiSvgModule, TuiLinkModule, TuiLoaderModule, TuiButtonModule, TuiGroupModule, TuiFilesModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputFilesModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, PolymorpheusModule, TuiLetModule, TuiFocusedModule, TuiFocusVisibleModule, TuiPressedModule, TuiHoveredModule, TuiFocusableModule, TuiDroppableModule, TuiWrapperModule, TuiSvgModule, TuiLinkModule, TuiLoaderModule, TuiButtonModule, TuiGroupModule, TuiFilesModule],
      declarations: [TuiInputFilesComponent, TuiInputFilesDirective, TuiMaxSizeRejectionErrorPipe],
      exports: [TuiInputFilesComponent, TuiInputFilesDirective, TuiFilesComponent, TuiFileComponent, TuiItemDirective]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-input-inline.js
var _c025 = ["native"];
var _c117 = ["text"];
function TuiInputInlineComponent_span_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "span", 5);
    ɵɵprojection(1);
    ɵɵelementEnd();
  }
}
var _c211 = ["*"];
var TuiInputInlineComponent = class extends AbstractTuiControl {
  constructor(control, cdr) {
    super(control, cdr);
    this.maxLength = null;
    this.indent = -1;
  }
  get nativeFocusableElement() {
    return !this.native ? null : this.native.nativeElement;
  }
  get focused() {
    return tuiIsNativeFocused(this.nativeFocusableElement);
  }
  get hasValue() {
    return this.value !== "";
  }
  onValueChange(value) {
    if (!this.text) {
      return;
    }
    this.text.nativeElement.textContent = value;
    this.text.nativeElement.style.textIndent = "";
    this.value = value;
  }
  onFocused(focused) {
    this.updateFocused(focused);
  }
  onScroll() {
    var _a;
    const indent = ((_a = this.native) === null || _a === void 0 ? void 0 : _a.nativeElement.scrollLeft) || 0;
    this.indent = -1 - indent;
  }
  getFallbackValue() {
    return "";
  }
};
TuiInputInlineComponent.ɵfac = function TuiInputInlineComponent_Factory(t) {
  return new (t || TuiInputInlineComponent)(ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(ChangeDetectorRef));
};
TuiInputInlineComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiInputInlineComponent,
  selectors: [["tui-input-inline"]],
  viewQuery: function TuiInputInlineComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(_c025, 5);
      ɵɵviewQuery(_c117, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.native = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.text = _t.first);
    }
  },
  inputs: {
    maxLength: "maxLength"
  },
  features: [ɵɵProvidersFeature([TUI_VALUE_ACCESSOR_PROVIDER, tuiAsFocusableItemAccessor(TuiInputInlineComponent)]), ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c211,
  decls: 5,
  vars: 10,
  consts: [[1, "t-before", 3, "textContent"], ["text", ""], ["automation-id", "tui-input-inline__placeholder", "class", "t-placeholder", 4, "ngIf"], ["automation-id", "tui-input-inline__native", "tuiMaskAccessor", "", "type", "text", 1, "t-native", 3, "disabled", "id", "ngModel", "readOnly", "tuiFocusable", "ngModelChange", "scroll", "tuiFocusedChange"], ["native", ""], ["automation-id", "tui-input-inline__placeholder", 1, "t-placeholder"]],
  template: function TuiInputInlineComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵelement(0, "span", 0, 1);
      ɵɵtemplate(2, TuiInputInlineComponent_span_2_Template, 2, 0, "span", 2);
      ɵɵelementStart(3, "input", 3, 4);
      ɵɵlistener("ngModelChange", function TuiInputInlineComponent_Template_input_ngModelChange_3_listener($event) {
        return ctx.onValueChange($event);
      })("scroll", function TuiInputInlineComponent_Template_input_scroll_3_listener() {
        return ctx.onScroll();
      })("tuiFocusedChange", function TuiInputInlineComponent_Template_input_tuiFocusedChange_3_listener($event) {
        return ctx.onFocused($event);
      });
      ɵɵelementEnd();
    }
    if (rf & 2) {
      ɵɵstyleProp("text-indent", ctx.indent, "px");
      ɵɵproperty("textContent", ctx.value);
      ɵɵadvance(2);
      ɵɵproperty("ngIf", !ctx.hasValue);
      ɵɵadvance(1);
      ɵɵproperty("disabled", ctx.computedDisabled)("id", ctx.id)("ngModel", ctx.value)("readOnly", ctx.readOnly)("tuiFocusable", ctx.focusable);
      ɵɵattribute("maxLength", ctx.maxLength);
    }
  },
  dependencies: [NgIf, TuiMaskAccessorDirective, DefaultValueAccessor, NgControlStatus, NgModel, TuiFocusableDirective, TuiFocusedDirective],
  styles: ["[_nghost-%COMP%]{position:relative;display:inline-block;overflow:hidden;white-space:nowrap;box-sizing:border-box}.t-before[_ngcontent-%COMP%]{display:block;padding-right:.02em;margin-left:1px;white-space:pre}.t-placeholder[_ngcontent-%COMP%]{display:inline-block;min-width:1px}.t-native[_ngcontent-%COMP%]{position:absolute;top:0;left:0;background-color:transparent;padding:inherit;font:inherit;-webkit-text-fill-color:transparent;box-sizing:border-box;width:100%;height:100%;border-width:0;text-align:inherit;letter-spacing:inherit;text-indent:inherit;text-transform:inherit;outline:none}"],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputInlineComponent, [{
    type: Component,
    args: [{
      selector: "tui-input-inline",
      templateUrl: "./input-inline.template.html",
      styleUrls: ["./input-inline.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [TUI_VALUE_ACCESSOR_PROVIDER, tuiAsFocusableItemAccessor(TuiInputInlineComponent)]
    }]
  }], function() {
    return [{
      type: NgControl,
      decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NgControl]
      }]
    }, {
      type: ChangeDetectorRef,
      decorators: [{
        type: Inject,
        args: [ChangeDetectorRef]
      }]
    }];
  }, {
    native: [{
      type: ViewChild,
      args: ["native"]
    }],
    text: [{
      type: ViewChild,
      args: ["text"]
    }],
    maxLength: [{
      type: Input
    }]
  });
})();
var TuiInputInlineModule = class {
};
TuiInputInlineModule.ɵfac = function TuiInputInlineModule_Factory(t) {
  return new (t || TuiInputInlineModule)();
};
TuiInputInlineModule.ɵmod = ɵɵdefineNgModule({
  type: TuiInputInlineModule,
  declarations: [TuiInputInlineComponent],
  imports: [CommonModule, FormsModule, TuiFocusableModule, TuiFocusedModule, TuiMaskAccessorModule],
  exports: [TuiInputInlineComponent]
});
TuiInputInlineModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, FormsModule, TuiFocusableModule, TuiFocusedModule, TuiMaskAccessorModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputInlineModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, FormsModule, TuiFocusableModule, TuiFocusedModule, TuiMaskAccessorModule],
      declarations: [TuiInputInlineComponent],
      exports: [TuiInputInlineComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-input-month.js
function TuiInputMonthComponent_input_6_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "input", 4);
    ɵɵlistener("click.stop.silent", function TuiInputMonthComponent_input_6_Template_input_click_stop_silent_0_listener() {
      return 0;
    })("mousedown.stop.silent", function TuiInputMonthComponent_input_6_Template_input_mousedown_stop_silent_0_listener() {
      return 0;
    })("ngModelChange", function TuiInputMonthComponent_input_6_Template_input_ngModelChange_0_listener($event) {
      ɵɵrestoreView(_r6);
      const ctx_r5 = ɵɵnextContext();
      return ɵɵresetView(ctx_r5.onNativeChange($event));
    });
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵproperty("max", ctx_r0.nativePickerMax)("min", ctx_r0.nativePickerMin)("ngModel", ctx_r0.nativeValue);
  }
}
function TuiInputMonthComponent_ng_template_7_Template(rf, ctx) {
  if (rf & 1) {
    const _r8 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "tui-calendar-month", 5);
    ɵɵlistener("monthClick", function TuiInputMonthComponent_ng_template_7_Template_tui_calendar_month_monthClick_0_listener($event) {
      ɵɵrestoreView(_r8);
      const ctx_r7 = ɵɵnextContext();
      return ɵɵresetView(ctx_r7.onMonthClick($event));
    })("yearChange", function TuiInputMonthComponent_ng_template_7_Template_tui_calendar_month_yearChange_0_listener($event) {
      ɵɵrestoreView(_r8);
      const ctx_r9 = ɵɵnextContext();
      return ɵɵresetView(ctx_r9.activeYear = $event);
    });
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵproperty("disabledItemHandler", ctx_r2.disabledItemHandler)("max", ctx_r2.computedMax)("min", ctx_r2.computedMin)("value", ctx_r2.value)("year", ctx_r2.computedDefaultActiveYear);
  }
}
var _c026 = ["*", [["input"]]];
var _c118 = ["*", "input"];
var TuiInputMonthComponent = class extends AbstractTuiNullableControl {
  constructor(control, cdr, formatter, isMobile, options, textfieldSize) {
    super(control, cdr);
    this.formatter = formatter;
    this.isMobile = isMobile;
    this.options = options;
    this.textfieldSize = textfieldSize;
    this.min = this.options.min;
    this.max = this.options.max;
    this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
    this.defaultActiveYear = TuiDay.currentLocal();
    this.open = false;
  }
  get size() {
    return this.textfieldSize.size;
  }
  get computedMin() {
    var _a;
    return (_a = this.min) !== null && _a !== void 0 ? _a : this.options.min;
  }
  get computedMax() {
    var _a;
    return (_a = this.max) !== null && _a !== void 0 ? _a : this.options.max;
  }
  get nativeFocusableElement() {
    var _a;
    return ((_a = this.textfield) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) || null;
  }
  get computedDefaultActiveYear() {
    return this.activeYear || this.value || tuiDateClamp(this.defaultActiveYear, this.computedMin, this.computedMax);
  }
  get focused() {
    var _a;
    return !!((_a = this.textfield) === null || _a === void 0 ? void 0 : _a.focused);
  }
  get calendarIcon() {
    return this.options.icon;
  }
  get nativePicker() {
    return this.isMobile && this.options.nativePicker;
  }
  get nativePickerMin() {
    return this.computedMin.toJSON();
  }
  get nativePickerMax() {
    return this.computedMax.toJSON();
  }
  get nativeValue() {
    var _a;
    return ((_a = this.value) === null || _a === void 0 ? void 0 : _a.toJSON()) || "";
  }
  onNativeChange(value) {
    const [year, month] = value.split("-").map(Number);
    this.value = value ? tuiDateClamp(new TuiMonth(year, month - 1), this.computedMin, this.computedMax) : null;
  }
  onValueChange(value) {
    if (value) {
      return;
    }
    this.value = null;
    this.onOpenChange(!this.nativePicker);
  }
  onMonthClick(month) {
    this.value = month;
    this.close();
  }
  onFocused(focused) {
    this.updateFocused(focused);
  }
  onOpenChange(open) {
    if (open && this.value) {
      this.activeYear = this.value;
    }
    this.open = open;
  }
  setDisabledState() {
    super.setDisabledState();
    this.close();
  }
  close() {
    this.open = false;
  }
};
TuiInputMonthComponent.ɵfac = function TuiInputMonthComponent_Factory(t) {
  return new (t || TuiInputMonthComponent)(ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(TUI_MONTH_FORMATTER), ɵɵdirectiveInject(TUI_IS_MOBILE), ɵɵdirectiveInject(TUI_INPUT_DATE_OPTIONS), ɵɵdirectiveInject(TUI_TEXTFIELD_SIZE));
};
TuiInputMonthComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiInputMonthComponent,
  selectors: [["tui-input-month"]],
  viewQuery: function TuiInputMonthComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(TuiPrimitiveTextfieldComponent, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.textfield = _t.first);
    }
  },
  hostVars: 1,
  hostBindings: function TuiInputMonthComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("data-size", ctx.size);
    }
  },
  inputs: {
    min: "min",
    max: "max",
    disabledItemHandler: "disabledItemHandler",
    defaultActiveYear: "defaultActiveYear"
  },
  features: [ɵɵProvidersFeature([tuiAsFocusableItemAccessor(TuiInputMonthComponent), tuiAsControl(TuiInputMonthComponent), TUI_MONTH_FORMATTER_PROVIDER, TuiMonthPipe]), ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c118,
  decls: 9,
  vars: 18,
  consts: [[1, "t-hosted", 3, "canOpen", "content", "open", "openChange"], [1, "t-textfield", 3, "disabled", "editable", "invalid", "nativeId", "pseudoFocus", "pseudoHover", "readOnly", "tuiTextfieldIcon", "value", "focusedChange", "valueChange"], ["type", "month", "class", "t-mobile", 3, "max", "min", "ngModel", "click.stop.silent", "mousedown.stop.silent", "ngModelChange", 4, "ngIf"], ["dropdown", ""], ["type", "month", 1, "t-mobile", 3, "max", "min", "ngModel", "click.stop.silent", "mousedown.stop.silent", "ngModelChange"], ["tuiPreventDefault", "mousedown", 3, "disabledItemHandler", "max", "min", "value", "year", "monthClick", "yearChange"]],
  template: function TuiInputMonthComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c026);
      ɵɵelementStart(0, "tui-hosted-dropdown", 0);
      ɵɵlistener("openChange", function TuiInputMonthComponent_Template_tui_hosted_dropdown_openChange_0_listener($event) {
        return ctx.onOpenChange($event);
      });
      ɵɵelementStart(1, "tui-primitive-textfield", 1);
      ɵɵlistener("focusedChange", function TuiInputMonthComponent_Template_tui_primitive_textfield_focusedChange_1_listener($event) {
        return ctx.onFocused($event);
      })("valueChange", function TuiInputMonthComponent_Template_tui_primitive_textfield_valueChange_1_listener($event) {
        return ctx.onValueChange($event);
      });
      ɵɵpipe(2, "async");
      ɵɵpipe(3, "tuiMapper");
      ɵɵprojection(4);
      ɵɵprojection(5, 1, ["ngProjectAs", "input", 5, ["input"]]);
      ɵɵtemplate(6, TuiInputMonthComponent_input_6_Template, 1, 3, "input", 2);
      ɵɵelementEnd();
      ɵɵtemplate(7, TuiInputMonthComponent_ng_template_7_Template, 1, 5, "ng-template", null, 3, ɵɵtemplateRefExtractor);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      const _r1 = ɵɵreference(8);
      ɵɵproperty("canOpen", ctx.interactive && !ctx.nativePicker)("content", _r1)("open", ctx.open && ctx.interactive);
      ɵɵadvance(1);
      ɵɵproperty("disabled", ctx.computedDisabled)("editable", false)("invalid", ctx.computedInvalid)("nativeId", ctx.nativeId)("pseudoFocus", ctx.pseudoFocus)("pseudoHover", ctx.pseudoHover)("readOnly", ctx.readOnly)("tuiTextfieldIcon", ctx.calendarIcon)("value", ɵɵpipeBind1(2, 13, ɵɵpipeBind2(3, 15, ctx.value, ctx.formatter)) || "");
      ɵɵadvance(5);
      ɵɵproperty("ngIf", ctx.nativePicker);
    }
  },
  dependencies: [TuiHostedDropdownComponent, TuiPrimitiveTextfieldComponent, TuiCalendarMonthComponent, TuiPrimitiveTextfieldDirective, TuiTextfieldIconDirective, NgIf, DefaultValueAccessor, NgControlStatus, NgModel, TuiPreventDefaultDirective, AsyncPipe, TuiMapperPipe],
  styles: ["[_nghost-%COMP%]{display:block;border-radius:var(--tui-radius-m);text-align:left}.t-hosted[_ngcontent-%COMP%]{display:block;border-radius:inherit}.t-textfield[_ngcontent-%COMP%]{border-radius:inherit;text-align:inherit}.t-mobile[_ngcontent-%COMP%]{position:absolute;top:0;left:0;width:100%;height:100%;opacity:0;border:0}"],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputMonthComponent, [{
    type: Component,
    args: [{
      selector: "tui-input-month",
      templateUrl: "./input-month.template.html",
      styleUrls: ["./input-month.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [tuiAsFocusableItemAccessor(TuiInputMonthComponent), tuiAsControl(TuiInputMonthComponent), TUI_MONTH_FORMATTER_PROVIDER, TuiMonthPipe]
    }]
  }], function() {
    return [{
      type: NgControl,
      decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NgControl]
      }]
    }, {
      type: ChangeDetectorRef,
      decorators: [{
        type: Inject,
        args: [ChangeDetectorRef]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_MONTH_FORMATTER]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_IS_MOBILE]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_INPUT_DATE_OPTIONS]
      }]
    }, {
      type: TuiTextfieldSizeDirective,
      decorators: [{
        type: Inject,
        args: [TUI_TEXTFIELD_SIZE]
      }]
    }];
  }, {
    textfield: [{
      type: ViewChild,
      args: [TuiPrimitiveTextfieldComponent]
    }],
    min: [{
      type: Input
    }],
    max: [{
      type: Input
    }],
    disabledItemHandler: [{
      type: Input
    }],
    defaultActiveYear: [{
      type: Input
    }],
    size: [{
      type: HostBinding,
      args: ["attr.data-size"]
    }]
  });
})();
var TuiInputMonthDirective = class extends AbstractTuiTextfieldHost {
  constructor(host, formatter, destroy$) {
    super(host);
    this.value$ = new Subject();
    this.localizedValue = "";
    this.value$.pipe(distinctUntilChanged(), switchMap(formatter), takeUntil(destroy$)).subscribe((localizedValue) => {
      this.localizedValue = localizedValue;
    });
  }
  get readOnly() {
    return true;
  }
  get value() {
    return this.localizedValue;
  }
  ngDoCheck() {
    this.value$.next(this.host.value);
  }
  onValueChange(value) {
    this.host.onValueChange(value);
  }
};
TuiInputMonthDirective.ɵfac = function TuiInputMonthDirective_Factory(t) {
  return new (t || TuiInputMonthDirective)(ɵɵdirectiveInject(AbstractTuiControl), ɵɵdirectiveInject(TUI_MONTH_FORMATTER), ɵɵdirectiveInject(TuiDestroyService, 2));
};
TuiInputMonthDirective.ɵdir = ɵɵdefineDirective({
  type: TuiInputMonthDirective,
  selectors: [["tui-input-month"]],
  features: [ɵɵProvidersFeature([tuiAsTextfieldHost(TuiInputMonthDirective), TuiDestroyService]), ɵɵInheritDefinitionFeature]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputMonthDirective, [{
    type: Directive,
    args: [{
      selector: "tui-input-month",
      providers: [tuiAsTextfieldHost(TuiInputMonthDirective), TuiDestroyService]
    }]
  }], function() {
    return [{
      type: TuiInputMonthComponent,
      decorators: [{
        type: Inject,
        args: [AbstractTuiControl]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_MONTH_FORMATTER]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Self
      }, {
        type: Inject,
        args: [TuiDestroyService]
      }]
    }];
  }, null);
})();
var TuiInputMonthModule = class {
};
TuiInputMonthModule.ɵfac = function TuiInputMonthModule_Factory(t) {
  return new (t || TuiInputMonthModule)();
};
TuiInputMonthModule.ɵmod = ɵɵdefineNgModule({
  type: TuiInputMonthModule,
  declarations: [TuiInputMonthComponent, TuiInputMonthDirective],
  imports: [CommonModule, TuiCalendarMonthModule, TuiHostedDropdownModule, TuiPrimitiveTextfieldModule, TuiSvgModule, TuiPreventDefaultModule, TuiMapperPipeModule, TuiTextfieldControllerModule, FormsModule],
  exports: [TuiInputMonthComponent, TuiInputMonthDirective, TuiTextfieldComponent]
});
TuiInputMonthModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, TuiCalendarMonthModule, TuiHostedDropdownModule, TuiPrimitiveTextfieldModule, TuiSvgModule, TuiPreventDefaultModule, TuiMapperPipeModule, TuiTextfieldControllerModule, FormsModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputMonthModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, TuiCalendarMonthModule, TuiHostedDropdownModule, TuiPrimitiveTextfieldModule, TuiSvgModule, TuiPreventDefaultModule, TuiMapperPipeModule, TuiTextfieldControllerModule, FormsModule],
      declarations: [TuiInputMonthComponent, TuiInputMonthDirective],
      exports: [TuiInputMonthComponent, TuiInputMonthDirective, TuiTextfieldComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-input-month-range.js
function TuiInputMonthRangeComponent_ng_template_8_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "tui-calendar-month", 3);
    ɵɵlistener("monthClick", function TuiInputMonthRangeComponent_ng_template_8_Template_tui_calendar_month_monthClick_0_listener($event) {
      ɵɵrestoreView(_r3);
      const ctx_r2 = ɵɵnextContext();
      return ɵɵresetView(ctx_r2.onMonthClick($event));
    });
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵproperty("disabledItemHandler", ctx_r1.disabledItemHandler)("max", ctx_r1.max)("min", ctx_r1.min)("value", ctx_r1.value)("year", ctx_r1.computedDefaultActiveYear);
  }
}
var _c027 = ["*", [["input"]]];
var _c119 = ["*", "input"];
var TuiInputMonthRangeComponent = class extends AbstractTuiNullableControl {
  constructor(control, cdr, formatter, options, textfieldSize) {
    super(control, cdr);
    this.formatter = formatter;
    this.options = options;
    this.textfieldSize = textfieldSize;
    this.min = this.options.min;
    this.max = this.options.max;
    this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
    this.defaultActiveYear = TuiDay.currentLocal();
    this.open = false;
  }
  get size() {
    return this.textfieldSize.size;
  }
  get nativeFocusableElement() {
    var _a, _b;
    return (_b = (_a = this.textfield) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) !== null && _b !== void 0 ? _b : null;
  }
  get computedDefaultActiveYear() {
    var _a;
    return ((_a = this.value) === null || _a === void 0 ? void 0 : _a.from) || tuiDateClamp(this.defaultActiveYear, this.min, this.max);
  }
  get focused() {
    var _a;
    return !!((_a = this.textfield) === null || _a === void 0 ? void 0 : _a.focused);
  }
  get calendarIcon() {
    return this.options.icon;
  }
  computeValue(from, to) {
    const formattedTo = from === to && this.focused && !this.readOnly ? "" : to;
    return `${from} ${CHAR_EN_DASH} ${formattedTo}`;
  }
  onValueChange(value) {
    if (value) {
      return;
    }
    this.value = null;
    this.onOpenChange(true);
  }
  onMonthClick(month) {
    if (this.value === null || !this.value.isSingleMonth) {
      this.writeValue(new TuiMonthRange(month, month));
      return;
    }
    this.value = TuiMonthRange.sort(this.value.from, month);
    this.close();
  }
  onOpenChange(open) {
    this.open = open;
  }
  onActiveZone(focused) {
    var _a;
    this.updateFocused(focused);
    if (focused) {
      return;
    }
    if ((_a = this.value) === null || _a === void 0 ? void 0 : _a.isSingleMonth) {
      this.value = new TuiMonthRange(this.value.from, this.value.from);
    }
  }
  setDisabledState() {
    super.setDisabledState();
    this.close();
  }
  close() {
    this.open = false;
  }
};
TuiInputMonthRangeComponent.ɵfac = function TuiInputMonthRangeComponent_Factory(t) {
  return new (t || TuiInputMonthRangeComponent)(ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(TUI_MONTH_FORMATTER), ɵɵdirectiveInject(TUI_INPUT_DATE_OPTIONS), ɵɵdirectiveInject(TUI_TEXTFIELD_SIZE));
};
TuiInputMonthRangeComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiInputMonthRangeComponent,
  selectors: [["tui-input-month-range"]],
  viewQuery: function TuiInputMonthRangeComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(TuiPrimitiveTextfieldComponent, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.textfield = _t.first);
    }
  },
  hostVars: 1,
  hostBindings: function TuiInputMonthRangeComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("data-size", ctx.size);
    }
  },
  inputs: {
    min: "min",
    max: "max",
    disabledItemHandler: "disabledItemHandler",
    defaultActiveYear: "defaultActiveYear"
  },
  features: [ɵɵProvidersFeature([tuiAsFocusableItemAccessor(TuiInputMonthRangeComponent), tuiAsControl(TuiInputMonthRangeComponent), TUI_MONTH_FORMATTER_PROVIDER, TuiMonthPipe]), ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c119,
  decls: 10,
  vars: 22,
  consts: [[1, "t-hosted", 3, "canOpen", "content", "open", "openChange", "tuiActiveZoneChange"], [1, "t-textfield", 3, "disabled", "editable", "invalid", "nativeId", "pseudoFocus", "pseudoHover", "readOnly", "tuiTextfieldIcon", "value", "valueChange"], ["dropdown", ""], ["tuiPreventDefault", "mousedown", 3, "disabledItemHandler", "max", "min", "value", "year", "monthClick"]],
  template: function TuiInputMonthRangeComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c027);
      ɵɵelementStart(0, "tui-hosted-dropdown", 0);
      ɵɵlistener("openChange", function TuiInputMonthRangeComponent_Template_tui_hosted_dropdown_openChange_0_listener($event) {
        return ctx.onOpenChange($event);
      })("tuiActiveZoneChange", function TuiInputMonthRangeComponent_Template_tui_hosted_dropdown_tuiActiveZoneChange_0_listener($event) {
        return ctx.onActiveZone($event);
      });
      ɵɵelementStart(1, "tui-primitive-textfield", 1);
      ɵɵlistener("valueChange", function TuiInputMonthRangeComponent_Template_tui_primitive_textfield_valueChange_1_listener($event) {
        return ctx.onValueChange($event);
      });
      ɵɵpipe(2, "async");
      ɵɵpipe(3, "tuiMapper");
      ɵɵpipe(4, "async");
      ɵɵpipe(5, "tuiMapper");
      ɵɵprojection(6);
      ɵɵprojection(7, 1, ["ngProjectAs", "input", 5, ["input"]]);
      ɵɵelementEnd();
      ɵɵtemplate(8, TuiInputMonthRangeComponent_ng_template_8_Template, 1, 5, "ng-template", null, 2, ɵɵtemplateRefExtractor);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      const _r0 = ɵɵreference(9);
      ɵɵproperty("canOpen", ctx.interactive)("content", _r0)("open", ctx.open && ctx.interactive);
      ɵɵadvance(1);
      ɵɵproperty("disabled", ctx.computedDisabled)("editable", false)("invalid", ctx.computedInvalid)("nativeId", ctx.nativeId)("pseudoFocus", ctx.pseudoFocus)("pseudoHover", ctx.pseudoHover)("readOnly", ctx.readOnly)("tuiTextfieldIcon", ctx.calendarIcon)("value", ctx.value ? ctx.computeValue(ɵɵpipeBind1(2, 12, ɵɵpipeBind2(3, 14, ctx.value.from, ctx.formatter)), ɵɵpipeBind1(4, 17, ɵɵpipeBind2(5, 19, ctx.value.to, ctx.formatter))) : "");
    }
  },
  dependencies: [TuiHostedDropdownComponent, TuiPrimitiveTextfieldComponent, TuiCalendarMonthComponent, TuiActiveZoneDirective, TuiPrimitiveTextfieldDirective, TuiTextfieldIconDirective, TuiPreventDefaultDirective, AsyncPipe, TuiMapperPipe],
  styles: ["[_nghost-%COMP%]{display:block;border-radius:var(--tui-radius-m);text-align:left}.t-hosted[_ngcontent-%COMP%]{display:block;border-radius:inherit}.t-textfield[_ngcontent-%COMP%]{border-radius:inherit;text-align:inherit}"],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputMonthRangeComponent, [{
    type: Component,
    args: [{
      selector: "tui-input-month-range",
      templateUrl: "./input-month-range.template.html",
      styleUrls: ["./input-month-range.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [tuiAsFocusableItemAccessor(TuiInputMonthRangeComponent), tuiAsControl(TuiInputMonthRangeComponent), TUI_MONTH_FORMATTER_PROVIDER, TuiMonthPipe]
    }]
  }], function() {
    return [{
      type: NgControl,
      decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NgControl]
      }]
    }, {
      type: ChangeDetectorRef,
      decorators: [{
        type: Inject,
        args: [ChangeDetectorRef]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_MONTH_FORMATTER]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_INPUT_DATE_OPTIONS]
      }]
    }, {
      type: TuiTextfieldSizeDirective,
      decorators: [{
        type: Inject,
        args: [TUI_TEXTFIELD_SIZE]
      }]
    }];
  }, {
    textfield: [{
      type: ViewChild,
      args: [TuiPrimitiveTextfieldComponent]
    }],
    min: [{
      type: Input
    }],
    max: [{
      type: Input
    }],
    disabledItemHandler: [{
      type: Input
    }],
    defaultActiveYear: [{
      type: Input
    }],
    size: [{
      type: HostBinding,
      args: ["attr.data-size"]
    }]
  });
})();
var TuiInputMonthRangeDirective = class extends AbstractTuiTextfieldHost {
  constructor(host, formatter, destroy$) {
    super(host);
    this.value$ = new Subject();
    this.localizedValue = ["", ""];
    this.value$.pipe(distinctUntilChanged(), switchMap((value) => combineLatest([formatter((value === null || value === void 0 ? void 0 : value.from) || null), formatter((value === null || value === void 0 ? void 0 : value.to) || null)])), takeUntil(destroy$)).subscribe((localizedValue) => {
      this.localizedValue = localizedValue;
    });
  }
  get readOnly() {
    return true;
  }
  get value() {
    return this.localizedValue[0] ? this.host.computeValue(...this.localizedValue) : "";
  }
  ngDoCheck() {
    this.value$.next(this.host.value);
  }
  onValueChange(value) {
    this.host.onValueChange(value);
  }
};
TuiInputMonthRangeDirective.ɵfac = function TuiInputMonthRangeDirective_Factory(t) {
  return new (t || TuiInputMonthRangeDirective)(ɵɵdirectiveInject(AbstractTuiControl), ɵɵdirectiveInject(TUI_MONTH_FORMATTER), ɵɵdirectiveInject(TuiDestroyService, 2));
};
TuiInputMonthRangeDirective.ɵdir = ɵɵdefineDirective({
  type: TuiInputMonthRangeDirective,
  selectors: [["tui-input-month-range"]],
  features: [ɵɵProvidersFeature([tuiAsTextfieldHost(TuiInputMonthRangeDirective), TuiDestroyService]), ɵɵInheritDefinitionFeature]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputMonthRangeDirective, [{
    type: Directive,
    args: [{
      selector: "tui-input-month-range",
      providers: [tuiAsTextfieldHost(TuiInputMonthRangeDirective), TuiDestroyService]
    }]
  }], function() {
    return [{
      type: TuiInputMonthRangeComponent,
      decorators: [{
        type: Inject,
        args: [AbstractTuiControl]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_MONTH_FORMATTER]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Self
      }, {
        type: Inject,
        args: [TuiDestroyService]
      }]
    }];
  }, null);
})();
var TuiInputMonthRangeModule = class {
};
TuiInputMonthRangeModule.ɵfac = function TuiInputMonthRangeModule_Factory(t) {
  return new (t || TuiInputMonthRangeModule)();
};
TuiInputMonthRangeModule.ɵmod = ɵɵdefineNgModule({
  type: TuiInputMonthRangeModule,
  declarations: [TuiInputMonthRangeComponent, TuiInputMonthRangeDirective],
  imports: [CommonModule, TuiCalendarMonthModule, TuiHostedDropdownModule, TuiPrimitiveTextfieldModule, TuiSvgModule, TuiPreventDefaultModule, TuiActiveZoneModule, TuiMapperPipeModule, TuiTextfieldControllerModule],
  exports: [TuiInputMonthRangeComponent, TuiInputMonthRangeDirective, TuiTextfieldComponent]
});
TuiInputMonthRangeModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, TuiCalendarMonthModule, TuiHostedDropdownModule, TuiPrimitiveTextfieldModule, TuiSvgModule, TuiPreventDefaultModule, TuiActiveZoneModule, TuiMapperPipeModule, TuiTextfieldControllerModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputMonthRangeModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, TuiCalendarMonthModule, TuiHostedDropdownModule, TuiPrimitiveTextfieldModule, TuiSvgModule, TuiPreventDefaultModule, TuiActiveZoneModule, TuiMapperPipeModule, TuiTextfieldControllerModule],
      declarations: [TuiInputMonthRangeComponent, TuiInputMonthRangeDirective],
      exports: [TuiInputMonthRangeComponent, TuiInputMonthRangeDirective, TuiTextfieldComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-input-password.js
function TuiInputPasswordComponent_ng_template_3_ng_container_0_tui_svg_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r9 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "tui-svg", 7);
    ɵɵlistener("click", function TuiInputPasswordComponent_ng_template_3_ng_container_0_tui_svg_1_Template_tui_svg_click_0_listener() {
      ɵɵrestoreView(_r9);
      const ctx_r8 = ɵɵnextContext(3);
      return ɵɵresetView(ctx_r8.togglePasswordVisibility());
    });
    ɵɵpipe(1, "async");
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const src_r7 = ctx.polymorpheusOutlet;
    const texts_r3 = ɵɵnextContext().ngIf;
    const _r5 = ɵɵreference(3);
    const ctx_r4 = ɵɵnextContext(2);
    ɵɵproperty("src", src_r7)("tuiHint", texts_r3[0] && texts_r3[1] && _r5)("tuiHintAppearance", ɵɵpipeBind1(1, 4, ctx_r4.computedAppearance$) || "")("tuiHintDirection", (ctx_r4.hintOptions == null ? null : ctx_r4.hintOptions.direction) || "bottom-left");
  }
}
function TuiInputPasswordComponent_ng_template_3_ng_container_0_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtext(0);
  }
  if (rf & 2) {
    const texts_r3 = ɵɵnextContext().ngIf;
    const ctx_r6 = ɵɵnextContext(2);
    ɵɵtextInterpolate1(" ", ctx_r6.isPasswordHidden ? texts_r3[0] : texts_r3[1], " ");
  }
}
var _c028 = function(a0) {
  return {
    $implicit: a0
  };
};
function TuiInputPasswordComponent_ng_template_3_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, TuiInputPasswordComponent_ng_template_3_ng_container_0_tui_svg_1_Template, 2, 6, "tui-svg", 4);
    ɵɵtemplate(2, TuiInputPasswordComponent_ng_template_3_ng_container_0_ng_template_2_Template, 1, 1, "ng-template", 5, 6, ɵɵtemplateRefExtractor);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r2 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("polymorpheusOutlet", ctx_r2.icon)("polymorpheusOutletContext", ɵɵpureFunction1(2, _c028, ctx_r2.size));
  }
}
function TuiInputPasswordComponent_ng_template_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtemplate(0, TuiInputPasswordComponent_ng_template_3_ng_container_0_Template, 4, 4, "ng-container", 3);
    ɵɵpipe(1, "async");
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵproperty("ngIf", ɵɵpipeBind1(1, 1, ctx_r1.passwordTexts$));
  }
}
var _c120 = ["*", [["input"]]];
var _c212 = ["*", "input"];
var TUI_INPUT_PASSWORD_DEFAULT_OPTIONS = {
  icons: {
    hide: ({
      $implicit
    }) => $implicit === "s" ? "tuiIconEyeOff" : "tuiIconEyeOffLarge",
    show: ({
      $implicit
    }) => $implicit === "s" ? "tuiIconEye" : "tuiIconEyeLarge"
  }
};
var TUI_INPUT_PASSWORD_OPTIONS = tuiCreateToken(TUI_INPUT_PASSWORD_DEFAULT_OPTIONS);
function tuiInputPasswordOptionsProvider(options) {
  return tuiProvideOptions(TUI_INPUT_PASSWORD_OPTIONS, options, TUI_INPUT_PASSWORD_DEFAULT_OPTIONS);
}
var TuiInputPasswordComponent = class extends AbstractTuiControl {
  constructor(control, cdr, textfieldSize, passwordTexts$, options, hintOptions, mode$) {
    var _a;
    super(control, cdr);
    this.textfieldSize = textfieldSize;
    this.passwordTexts$ = passwordTexts$;
    this.options = options;
    this.hintOptions = hintOptions;
    this.mode$ = mode$;
    this.directive$ = ((_a = this.hintOptions) === null || _a === void 0 ? void 0 : _a.change$) || EMPTY;
    this.isPasswordHidden = true;
    this.computedAppearance$ = combineLatest([this.mode$.pipe(map((val) => val === "onDark" ? "onDark" : "")), this.directive$.pipe(startWith(null), map(() => {
      var _a2;
      return ((_a2 = this.hintOptions) === null || _a2 === void 0 ? void 0 : _a2.appearance) || "";
    }))]).pipe(map(([mode, controller]) => controller || mode), startWith(""));
  }
  get size() {
    return this.textfieldSize.size;
  }
  get nativeFocusableElement() {
    return this.computedDisabled || !this.textfield ? null : this.textfield.nativeFocusableElement;
  }
  get focused() {
    var _a;
    return !!((_a = this.textfield) === null || _a === void 0 ? void 0 : _a.focused);
  }
  get icon() {
    return this.isPasswordHidden ? this.options.icons.hide : this.options.icons.show;
  }
  get inputType() {
    return this.isPasswordHidden || !this.interactive ? "password" : "text";
  }
  onValueChange(textValue) {
    this.value = textValue;
  }
  onFocused(focused) {
    this.updateFocused(focused);
  }
  togglePasswordVisibility() {
    this.isPasswordHidden = !this.isPasswordHidden;
  }
  getFallbackValue() {
    return "";
  }
};
TuiInputPasswordComponent.ɵfac = function TuiInputPasswordComponent_Factory(t) {
  return new (t || TuiInputPasswordComponent)(ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(TUI_TEXTFIELD_SIZE), ɵɵdirectiveInject(TUI_PASSWORD_TEXTS), ɵɵdirectiveInject(TUI_INPUT_PASSWORD_OPTIONS), ɵɵdirectiveInject(TuiHintOptionsDirective, 8), ɵɵdirectiveInject(TUI_MODE));
};
TuiInputPasswordComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiInputPasswordComponent,
  selectors: [["tui-input-password"]],
  viewQuery: function TuiInputPasswordComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(TuiPrimitiveTextfieldComponent, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.textfield = _t.first);
    }
  },
  hostVars: 1,
  hostBindings: function TuiInputPasswordComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("data-size", ctx.size);
    }
  },
  features: [ɵɵProvidersFeature([tuiAsFocusableItemAccessor(TuiInputPasswordComponent), tuiAsControl(TuiInputPasswordComponent), MODE_PROVIDER]), ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c212,
  decls: 5,
  vars: 11,
  consts: [[1, "t-textfield", 3, "disabled", "focusable", "invalid", "nativeId", "pseudoActive", "pseudoFocus", "pseudoHover", "readOnly", "tuiTextfieldIcon", "value", "valueChange", "focusedChange"], [3, "polymorpheus"], ["iconContent", "polymorpheus"], [4, "ngIf"], ["appearance", "icon", "automation-id", "tui-password__icon", "tuiWrapper", "", "class", "t-icon", 3, "src", "tuiHint", "tuiHintAppearance", "tuiHintDirection", "click", 4, "polymorpheusOutlet", "polymorpheusOutletContext"], ["polymorpheus", ""], ["hintContent", "polymorpheus"], ["appearance", "icon", "automation-id", "tui-password__icon", "tuiWrapper", "", 1, "t-icon", 3, "src", "tuiHint", "tuiHintAppearance", "tuiHintDirection", "click"]],
  template: function TuiInputPasswordComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c120);
      ɵɵelementStart(0, "tui-primitive-textfield", 0);
      ɵɵlistener("valueChange", function TuiInputPasswordComponent_Template_tui_primitive_textfield_valueChange_0_listener($event) {
        return ctx.value = $event;
      })("focusedChange", function TuiInputPasswordComponent_Template_tui_primitive_textfield_focusedChange_0_listener($event) {
        return ctx.onFocused($event);
      });
      ɵɵprojection(1);
      ɵɵprojection(2, 1, ["ngProjectAs", "input", 5, ["input"]]);
      ɵɵelementEnd();
      ɵɵtemplate(3, TuiInputPasswordComponent_ng_template_3_Template, 2, 3, "ng-template", 1, 2, ɵɵtemplateRefExtractor);
    }
    if (rf & 2) {
      const _r0 = ɵɵreference(4);
      ɵɵproperty("disabled", ctx.computedDisabled)("focusable", ctx.focusable)("invalid", ctx.computedInvalid)("nativeId", ctx.nativeId)("pseudoActive", ctx.pseudoActive)("pseudoFocus", ctx.pseudoFocus)("pseudoHover", ctx.pseudoHover)("readOnly", ctx.readOnly)("tuiTextfieldIcon", ctx.interactive ? _r0 : "")("value", ctx.value);
      ɵɵadvance(3);
      ɵɵproperty("polymorpheus", ctx.type);
    }
  },
  dependencies: [TuiPrimitiveTextfieldComponent, TuiSvgComponent, TuiPrimitiveTextfieldDirective, TuiTextfieldIconDirective, PolymorpheusTemplate, NgIf, PolymorpheusOutletDirective, TuiWrapperDirective, TuiHintDirective, TuiHintDriverDirective, TuiHintHoverDirective, TuiHintPositionDirective, AsyncPipe],
  styles: ["[_nghost-%COMP%]{display:block;border-radius:var(--tui-radius-m);text-align:left}.t-icon[_ngcontent-%COMP%]{cursor:pointer;pointer-events:auto}.t-textfield[_ngcontent-%COMP%]{border-radius:inherit;text-align:inherit}"],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputPasswordComponent, [{
    type: Component,
    args: [{
      selector: "tui-input-password",
      templateUrl: "./input-password.template.html",
      styleUrls: ["./input-password.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [tuiAsFocusableItemAccessor(TuiInputPasswordComponent), tuiAsControl(TuiInputPasswordComponent), MODE_PROVIDER]
    }]
  }], function() {
    return [{
      type: NgControl,
      decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NgControl]
      }]
    }, {
      type: ChangeDetectorRef,
      decorators: [{
        type: Inject,
        args: [ChangeDetectorRef]
      }]
    }, {
      type: TuiTextfieldSizeDirective,
      decorators: [{
        type: Inject,
        args: [TUI_TEXTFIELD_SIZE]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Inject,
        args: [TUI_PASSWORD_TEXTS]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_INPUT_PASSWORD_OPTIONS]
      }]
    }, {
      type: TuiHintOptionsDirective,
      decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [TuiHintOptionsDirective]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Inject,
        args: [TUI_MODE]
      }]
    }];
  }, {
    textfield: [{
      type: ViewChild,
      args: [TuiPrimitiveTextfieldComponent]
    }],
    size: [{
      type: HostBinding,
      args: ["attr.data-size"]
    }]
  });
})();
var TuiInputPasswordDirective = class extends AbstractTuiTextfieldHost {
  onValueChange(value) {
    this.host.onValueChange(value);
  }
  process(input) {
    this.input = input;
  }
  ngDoCheck() {
    if (this.host.nativeFocusableElement && tuiIsInput(this.host.nativeFocusableElement)) {
      this.host.nativeFocusableElement.type = this.host.inputType;
    }
  }
};
TuiInputPasswordDirective.ɵfac = function() {
  let ɵTuiInputPasswordDirective_BaseFactory;
  return function TuiInputPasswordDirective_Factory(t) {
    return (ɵTuiInputPasswordDirective_BaseFactory || (ɵTuiInputPasswordDirective_BaseFactory = ɵɵgetInheritedFactory(TuiInputPasswordDirective)))(t || TuiInputPasswordDirective);
  };
}();
TuiInputPasswordDirective.ɵdir = ɵɵdefineDirective({
  type: TuiInputPasswordDirective,
  selectors: [["tui-input-password"]],
  features: [ɵɵProvidersFeature([tuiAsTextfieldHost(TuiInputPasswordDirective)]), ɵɵInheritDefinitionFeature]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputPasswordDirective, [{
    type: Directive,
    args: [{
      selector: "tui-input-password",
      providers: [tuiAsTextfieldHost(TuiInputPasswordDirective)]
    }]
  }], null, null);
})();
var TuiInputPasswordModule = class {
};
TuiInputPasswordModule.ɵfac = function TuiInputPasswordModule_Factory(t) {
  return new (t || TuiInputPasswordModule)();
};
TuiInputPasswordModule.ɵmod = ɵɵdefineNgModule({
  type: TuiInputPasswordModule,
  declarations: [TuiInputPasswordComponent, TuiInputPasswordDirective],
  imports: [CommonModule, FormsModule, PolymorpheusModule, TuiWrapperModule, TuiSvgModule, TuiHintModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule],
  exports: [TuiInputPasswordComponent, TuiInputPasswordDirective, TuiTextfieldComponent]
});
TuiInputPasswordModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, FormsModule, PolymorpheusModule, TuiWrapperModule, TuiSvgModule, TuiHintModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputPasswordModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, FormsModule, PolymorpheusModule, TuiWrapperModule, TuiSvgModule, TuiHintModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule],
      declarations: [TuiInputPasswordComponent, TuiInputPasswordDirective],
      exports: [TuiInputPasswordComponent, TuiInputPasswordDirective, TuiTextfieldComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-input-phone.js
var _c029 = ["*", [["input"]]];
var _c121 = ["*", "input"];
var TUI_INPUT_PHONE_DEFAULT_OPTIONS = {
  phoneMaskAfterCountryCode: "### ###-##-##",
  allowText: false,
  countryCode: "+7"
};
var TUI_INPUT_PHONE_OPTIONS = tuiCreateToken(TUI_INPUT_PHONE_DEFAULT_OPTIONS);
function tuiInputPhoneOptionsProvider(options) {
  return tuiProvideOptions(TUI_INPUT_PHONE_OPTIONS, options, TUI_INPUT_PHONE_DEFAULT_OPTIONS);
}
var countDigits = (value) => value.replace(/\D/g, "").length;
function tuiCreateCompletePhoneInsertionPreprocessor(countryCode, phoneMaskAfterCountryCode) {
  const completePhoneLength = (countryCode + phoneMaskAfterCountryCode).replace(/[^#\d]+/g, "").length;
  const trimCountryPrefix = (value) => countryCode === "+7" ? value.replace(/^(\+?7?\s?8?)\s?/, "") : value.replace(new RegExp(`^(\\+?${countryCode.replace("+", "")}?)\\s?`), "");
  return ({
    elementState,
    data
  }) => {
    const {
      value,
      selection
    } = elementState;
    return {
      elementState: {
        selection,
        value: (
          /**
           * The only possible case when `value` includes digits more
           * than mask expression allows – browser autofill.
           * It means that we are inside `input`-event
           * and mask are ready to reject "extra" characters.
           * We should cut leading country prefix to save trailing characters!
           */
          countDigits(value) > completePhoneLength ? trimCountryPrefix(value) : value
        )
      },
      data: countDigits(data) >= completePhoneLength ? (
        /**
         * User tries to insert/drop the complete phone number (with country prefix).
         * We should drop already existing non-removable prefix.
         */
        trimCountryPrefix(data)
      ) : data
    };
  };
}
function tuiCreatePhoneMaskExpression(countryCode, phoneMaskAfterCountryCode) {
  return [...countryCode.split(""), " ", ...phoneMaskAfterCountryCode.replace(/[^#\- ()]+/g, "").split("").map((item) => item === "#" ? /\d/ : item)];
}
function isText(value) {
  return Number.isNaN(parseInt(value.replace(TUI_MASK_SYMBOLS_REGEXP, ""), 10));
}
var TuiInputPhoneComponent = class extends AbstractTuiControl {
  constructor(control, cdr, textfieldCleaner, options, textfieldSize) {
    super(control, cdr);
    this.textfieldCleaner = textfieldCleaner;
    this.options = options;
    this.textfieldSize = textfieldSize;
    this.phoneMaskAfterCountryCode = this.options.phoneMaskAfterCountryCode;
    this.allowText = this.options.allowText;
    this.search = "";
    this.searchChange = new EventEmitter();
    this.countryCode = this.options.countryCode;
    this.open = false;
  }
  set countryCodeSetter(newCountryCode) {
    const prevCountryCode = this.countryCode;
    this.countryCode = newCountryCode;
    this.updateValueWithNewCountryCode(prevCountryCode, newCountryCode);
  }
  get size() {
    return this.textfieldSize.size;
  }
  get nativeFocusableElement() {
    return !this.textfield || this.computedDisabled ? null : this.textfield.nativeFocusableElement;
  }
  get focused() {
    return tuiIsNativeFocused(this.nativeFocusableElement) || !!this.dropdown && this.dropdown.focused;
  }
  get nativeValue() {
    var _a;
    return ((_a = this.nativeFocusableElement) === null || _a === void 0 ? void 0 : _a.value) || maskitoTransform(this.value, this.maskOptions);
  }
  set nativeValue(value) {
    if (this.nativeFocusableElement) {
      this.nativeFocusableElement.value = value;
    }
  }
  get inputMode() {
    return this.allowText ? "text" : "numeric";
  }
  get canOpen() {
    return this.interactive && !!this.datalist;
  }
  get canClean() {
    return this.nativeValue !== this.nonRemovablePrefix && this.textfieldCleaner.cleaner;
  }
  get maskOptions() {
    return this.calculateMask(this.countryCode, this.phoneMaskAfterCountryCode, this.nonRemovablePrefix, this.allowText);
  }
  onActiveZone(active) {
    this.updateFocused(active);
    if (active && !this.nativeValue && !this.readOnly && !this.allowText) {
      this.updateSearch(this.nonRemovablePrefix);
      this.nativeValue = this.nonRemovablePrefix;
      return;
    }
    if (this.nativeValue === this.nonRemovablePrefix || this.isTextValue) {
      this.updateSearch("");
      this.nativeValue = "";
      return;
    }
    if (!active && !this.allowText && this.nativeFocusableElement) {
      this.nativeValue = this.nativeValue.replace(/\D$/, "");
    }
  }
  onValueChange(value) {
    const parsed = isText(value) ? value : value.replace(TUI_MASK_SYMBOLS_REGEXP, "").slice(0, this.maxPhoneLength);
    this.updateSearch(parsed);
    this.value = parsed === this.countryCode || isText(parsed) ? "" : parsed;
    this.open = true;
    if (!this.value && !this.allowText) {
      this.nativeValue = this.nonRemovablePrefix;
    }
  }
  handleOption(item) {
    this.focusInput();
    this.value = item;
    this.nativeValue = maskitoTransform(this.value, this.maskOptions);
    this.updateSearch("");
    this.open = false;
  }
  setDisabledState() {
    super.setDisabledState();
    this.open = false;
  }
  writeValue(value) {
    super.writeValue(value);
    this.nativeValue = maskitoTransform(value || "", this.maskOptions);
    this.updateSearch("");
  }
  getFallbackValue() {
    return "";
  }
  get nonRemovablePrefix() {
    return `${this.countryCode} `;
  }
  get maxPhoneLength() {
    return this.countryCode.length + this.phoneMaskAfterCountryCode.replace(/[^#]+/g, "").length;
  }
  get isTextValue() {
    return !!this.search && isText(this.search);
  }
  calculateMask(countryCode, phoneMaskAfterCountryCode, nonRemovablePrefix, allowText) {
    const mask = tuiCreatePhoneMaskExpression(countryCode, phoneMaskAfterCountryCode);
    const preprocessors = [tuiCreateCompletePhoneInsertionPreprocessor(countryCode, phoneMaskAfterCountryCode)];
    return allowText ? {
      mask: ({
        value
      }) => isText(value) && value !== "+" ? MASKITO_DEFAULT_OPTIONS.mask : mask,
      preprocessors
    } : {
      mask,
      preprocessors,
      postprocessors: [maskitoPrefixPostprocessorGenerator(nonRemovablePrefix)],
      plugins: [maskitoCaretGuard((value, [from, to]) => [from === to ? nonRemovablePrefix.length : 0, value.length])]
    };
  }
  focusInput() {
    if (this.nativeFocusableElement) {
      this.nativeFocusableElement.focus({
        preventScroll: true
      });
    }
  }
  updateSearch(search) {
    if (this.search === search) {
      return;
    }
    this.search = search;
    this.searchChange.emit(search);
  }
  updateValueWithNewCountryCode(prevCountryCode, newCountryCode) {
    if (!this.isTextValue) {
      this.value = this.value.replace(prevCountryCode, newCountryCode);
      this.nativeValue = maskitoTransform(this.value, this.maskOptions);
    }
  }
};
TuiInputPhoneComponent.ɵfac = function TuiInputPhoneComponent_Factory(t) {
  return new (t || TuiInputPhoneComponent)(ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(TUI_TEXTFIELD_CLEANER), ɵɵdirectiveInject(TUI_INPUT_PHONE_OPTIONS), ɵɵdirectiveInject(TUI_TEXTFIELD_SIZE));
};
TuiInputPhoneComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiInputPhoneComponent,
  selectors: [["tui-input-phone"]],
  contentQueries: function TuiInputPhoneComponent_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, TuiDataListDirective, 5, TemplateRef);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.datalist = _t.first);
    }
  },
  viewQuery: function TuiInputPhoneComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(TuiHostedDropdownComponent, 5);
      ɵɵviewQuery(TuiPrimitiveTextfieldComponent, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.dropdown = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.textfield = _t.first);
    }
  },
  hostVars: 1,
  hostBindings: function TuiInputPhoneComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("data-size", ctx.size);
    }
  },
  inputs: {
    countryCodeSetter: ["countryCode", "countryCodeSetter"],
    phoneMaskAfterCountryCode: "phoneMaskAfterCountryCode",
    allowText: "allowText",
    search: "search"
  },
  outputs: {
    searchChange: "searchChange"
  },
  features: [ɵɵProvidersFeature([tuiAsFocusableItemAccessor(TuiInputPhoneComponent), tuiAsControl(TuiInputPhoneComponent), tuiAsDataListHost(TuiInputPhoneComponent)], [FIXED_DROPDOWN_CONTROLLER_PROVIDER]), ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c121,
  decls: 4,
  vars: 13,
  consts: [[1, "t-hosted", 3, "canOpen", "content", "open", "openChange", "tuiActiveZoneChange"], ["tuiValueAccessor", "", 1, "t-textfield", 3, "disabled", "focusable", "invalid", "maskito", "nativeId", "pseudoFocus", "pseudoHover", "readOnly", "tuiTextfieldCleaner", "value", "valueChange"]],
  template: function TuiInputPhoneComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c029);
      ɵɵelementStart(0, "tui-hosted-dropdown", 0);
      ɵɵlistener("openChange", function TuiInputPhoneComponent_Template_tui_hosted_dropdown_openChange_0_listener($event) {
        return ctx.open = $event;
      })("tuiActiveZoneChange", function TuiInputPhoneComponent_Template_tui_hosted_dropdown_tuiActiveZoneChange_0_listener($event) {
        return ctx.onActiveZone($event);
      });
      ɵɵelementStart(1, "tui-primitive-textfield", 1);
      ɵɵlistener("valueChange", function TuiInputPhoneComponent_Template_tui_primitive_textfield_valueChange_1_listener($event) {
        return ctx.nativeValue = $event;
      })("valueChange", function TuiInputPhoneComponent_Template_tui_primitive_textfield_valueChange_1_listener($event) {
        return ctx.onValueChange($event);
      });
      ɵɵprojection(2);
      ɵɵprojection(3, 1, ["ngProjectAs", "input", 5, ["input"]]);
      ɵɵelementEnd()();
    }
    if (rf & 2) {
      ɵɵproperty("canOpen", ctx.canOpen)("content", ctx.datalist || "")("open", ctx.open);
      ɵɵadvance(1);
      ɵɵproperty("disabled", ctx.computedDisabled)("focusable", ctx.focusable)("invalid", ctx.computedInvalid)("maskito", ctx.maskOptions)("nativeId", ctx.nativeId)("pseudoFocus", ctx.computedFocused)("pseudoHover", ctx.pseudoHover)("readOnly", ctx.readOnly)("tuiTextfieldCleaner", ctx.canClean)("value", ctx.nativeValue);
    }
  },
  dependencies: [TuiHostedDropdownComponent, TuiPrimitiveTextfieldComponent, TuiActiveZoneDirective, TuiPrimitiveTextfieldDirective, TuiValueAccessorDirective, MaskitoDirective, TuiTextfieldCleanerDirective],
  styles: ["[_nghost-%COMP%]{display:block;border-radius:var(--tui-radius-m);text-align:left}._disabled[_nghost-%COMP%]{pointer-events:none}.t-hosted[_ngcontent-%COMP%]{display:block;border-radius:inherit}.t-textfield[_ngcontent-%COMP%]{border-radius:inherit;text-align:inherit}"],
  changeDetection: 0
});
__decorate([tuiPure], TuiInputPhoneComponent.prototype, "calculateMask", null);
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputPhoneComponent, [{
    type: Component,
    args: [{
      selector: "tui-input-phone",
      templateUrl: "./input-phone.template.html",
      styleUrls: ["./input-phone.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [tuiAsFocusableItemAccessor(TuiInputPhoneComponent), tuiAsControl(TuiInputPhoneComponent), tuiAsDataListHost(TuiInputPhoneComponent)],
      viewProviders: [FIXED_DROPDOWN_CONTROLLER_PROVIDER]
    }]
  }], function() {
    return [{
      type: NgControl,
      decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NgControl]
      }]
    }, {
      type: ChangeDetectorRef,
      decorators: [{
        type: Inject,
        args: [ChangeDetectorRef]
      }]
    }, {
      type: TuiTextfieldCleanerDirective,
      decorators: [{
        type: Inject,
        args: [TUI_TEXTFIELD_CLEANER]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_INPUT_PHONE_OPTIONS]
      }]
    }, {
      type: TuiTextfieldSizeDirective,
      decorators: [{
        type: Inject,
        args: [TUI_TEXTFIELD_SIZE]
      }]
    }];
  }, {
    dropdown: [{
      type: ViewChild,
      args: [TuiHostedDropdownComponent]
    }],
    textfield: [{
      type: ViewChild,
      args: [TuiPrimitiveTextfieldComponent]
    }],
    countryCodeSetter: [{
      type: Input,
      args: ["countryCode"]
    }],
    phoneMaskAfterCountryCode: [{
      type: Input
    }],
    allowText: [{
      type: Input
    }],
    search: [{
      type: Input
    }],
    searchChange: [{
      type: Output
    }],
    datalist: [{
      type: ContentChild,
      args: [TuiDataListDirective, {
        read: TemplateRef
      }]
    }],
    size: [{
      type: HostBinding,
      args: ["attr.data-size"]
    }],
    calculateMask: []
  });
})();
var TuiInputPhoneDirective = class extends AbstractTuiTextfieldHost {
  get value() {
    return this.host.nativeValue;
  }
  onValueChange(value) {
    this.host.onValueChange(value);
  }
  process(input) {
    this.input = input;
  }
  ngDoCheck() {
    if (!this.input) {
      return;
    }
    this.input.type = "tel";
    this.input.inputMode = this.host.inputMode;
  }
};
TuiInputPhoneDirective.ɵfac = function() {
  let ɵTuiInputPhoneDirective_BaseFactory;
  return function TuiInputPhoneDirective_Factory(t) {
    return (ɵTuiInputPhoneDirective_BaseFactory || (ɵTuiInputPhoneDirective_BaseFactory = ɵɵgetInheritedFactory(TuiInputPhoneDirective)))(t || TuiInputPhoneDirective);
  };
}();
TuiInputPhoneDirective.ɵdir = ɵɵdefineDirective({
  type: TuiInputPhoneDirective,
  selectors: [["tui-input-phone"]],
  features: [ɵɵProvidersFeature([tuiAsTextfieldHost(TuiInputPhoneDirective)]), ɵɵInheritDefinitionFeature]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputPhoneDirective, [{
    type: Directive,
    args: [{
      selector: "tui-input-phone",
      providers: [tuiAsTextfieldHost(TuiInputPhoneDirective)]
    }]
  }], null, null);
})();
var TuiInputPhoneModule = class {
};
TuiInputPhoneModule.ɵfac = function TuiInputPhoneModule_Factory(t) {
  return new (t || TuiInputPhoneModule)();
};
TuiInputPhoneModule.ɵmod = ɵɵdefineNgModule({
  type: TuiInputPhoneModule,
  declarations: [TuiInputPhoneComponent, TuiInputPhoneDirective],
  imports: [MaskitoModule, TuiPrimitiveTextfieldModule, TuiHostedDropdownModule, TuiTextfieldControllerModule, TuiActiveZoneModule, TuiValueAccessorModule],
  exports: [TuiInputPhoneComponent, TuiInputPhoneDirective, TuiTextfieldComponent]
});
TuiInputPhoneModule.ɵinj = ɵɵdefineInjector({
  imports: [[MaskitoModule, TuiPrimitiveTextfieldModule, TuiHostedDropdownModule, TuiTextfieldControllerModule, TuiActiveZoneModule, TuiValueAccessorModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputPhoneModule, [{
    type: NgModule,
    args: [{
      imports: [MaskitoModule, TuiPrimitiveTextfieldModule, TuiHostedDropdownModule, TuiTextfieldControllerModule, TuiActiveZoneModule, TuiValueAccessorModule],
      declarations: [TuiInputPhoneComponent, TuiInputPhoneDirective],
      exports: [TuiInputPhoneComponent, TuiInputPhoneDirective, TuiTextfieldComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-pipes-field-error.js
var EMPTY_RECORD = {};
function unwrapObservable(content, context) {
  return content.pipe(map((error) => new TuiValidationError(error || "", context)));
}
function defaultError(content, context) {
  return of(new TuiValidationError(content || "", context));
}
var TuiFieldErrorPipe = class {
  constructor(parent, self, container, validationErrors) {
    this.parent = parent;
    this.self = self;
    this.container = container;
    this.validationErrors = validationErrors;
    this.order = [];
    if (this.self && !this.self.valueAccessor) {
      this.self.valueAccessor = this;
    }
  }
  transform(order) {
    this.order = order;
    return this.computedError;
  }
  get computedError() {
    return this.invalid && this.touched && this.error || of(null);
  }
  registerOnChange() {
  }
  registerOnTouched() {
  }
  setDisabledState() {
  }
  writeValue() {
  }
  get error() {
    const {
      errorId
    } = this;
    if (!errorId) {
      return null;
    }
    const firstError = this.controlErrors[errorId];
    const errorContent = this.validationErrors[errorId];
    return this.getError(firstError, errorContent);
  }
  get invalid() {
    var _a;
    return !!((_a = this.control) === null || _a === void 0 ? void 0 : _a.invalid);
  }
  get touched() {
    var _a;
    return !!((_a = this.control) === null || _a === void 0 ? void 0 : _a.touched);
  }
  get control() {
    var _a, _b, _c;
    return ((_a = this.self) === null || _a === void 0 ? void 0 : _a.control) || ((_b = this.parent) === null || _b === void 0 ? void 0 : _b.control) || ((_c = this.container) === null || _c === void 0 ? void 0 : _c.control);
  }
  get errorId() {
    return this.getErrorId(this.order, this.controlErrors);
  }
  get controlErrors() {
    var _a;
    return ((_a = this.control) === null || _a === void 0 ? void 0 : _a.errors) || EMPTY_RECORD;
  }
  getErrorId(order, controlErrors) {
    const id = order === null || order === void 0 ? void 0 : order.find((errorId) => controlErrors[errorId]);
    const fallback = Object.keys(controlErrors)[0];
    return id || fallback || "";
  }
  getError(context, content) {
    if (context instanceof TuiValidationError) {
      return of(context);
    }
    if (content === void 0 && tuiIsString(context)) {
      return of(new TuiValidationError(context));
    }
    if (isObservable(content)) {
      return unwrapObservable(content, context);
    }
    if (content instanceof Function) {
      const message = content(context);
      return isObservable(message) ? unwrapObservable(message, context) : defaultError(message, context);
    }
    return defaultError(content, context);
  }
};
TuiFieldErrorPipe.ɵfac = function TuiFieldErrorPipe_Factory(t) {
  return new (t || TuiFieldErrorPipe)(ɵɵdirectiveInject(NgControl, 28), ɵɵdirectiveInject(NgControl, 26), ɵɵdirectiveInject(ControlContainer, 24), ɵɵdirectiveInject(TUI_VALIDATION_ERRORS, 16));
};
TuiFieldErrorPipe.ɵpipe = ɵɵdefinePipe({
  name: "tuiFieldError",
  type: TuiFieldErrorPipe,
  pure: false
});
__decorate([tuiPure], TuiFieldErrorPipe.prototype, "getErrorId", null);
__decorate([tuiPure], TuiFieldErrorPipe.prototype, "getError", null);
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiFieldErrorPipe, [{
    type: Pipe,
    args: [{
      name: "tuiFieldError",
      pure: false
    }]
  }], function() {
    return [{
      type: NgControl,
      decorators: [{
        type: Optional
      }, {
        type: SkipSelf
      }, {
        type: Inject,
        args: [NgControl]
      }]
    }, {
      type: NgControl,
      decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NgControl]
      }]
    }, {
      type: ControlContainer,
      decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [ControlContainer]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_VALIDATION_ERRORS]
      }]
    }];
  }, {
    getErrorId: [],
    getError: []
  });
})();
var TuiFieldErrorContentPipe = class {
  constructor(injector) {
    this.injector = injector;
    this.localInjector = Injector.create({
      providers: [{
        provide: AsyncPipe
      }, {
        provide: TuiFieldErrorPipe
      }],
      parent: this.injector
    });
    this.asyncPipe = this.localInjector.get(AsyncPipe);
    this.fieldErrorPipe = this.localInjector.get(TuiFieldErrorPipe);
  }
  transform(order) {
    return this.getErrorContent(order);
  }
  ngOnDestroy() {
    this.asyncPipe.ngOnDestroy();
  }
  getErrorContent(order) {
    const error = this.asyncPipe.transform(this.fieldErrorPipe.transform(order));
    if (!error) {
      return "";
    }
    return typeof error.message === "function" ? error.message(error.context) : error.message;
  }
};
TuiFieldErrorContentPipe.ɵfac = function TuiFieldErrorContentPipe_Factory(t) {
  return new (t || TuiFieldErrorContentPipe)(ɵɵdirectiveInject(Injector, 16));
};
TuiFieldErrorContentPipe.ɵpipe = ɵɵdefinePipe({
  name: "tuiFieldErrorContent",
  type: TuiFieldErrorContentPipe,
  pure: false
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiFieldErrorContentPipe, [{
    type: Pipe,
    args: [{
      name: "tuiFieldErrorContent",
      pure: false
    }]
  }], function() {
    return [{
      type: Injector,
      decorators: [{
        type: Inject,
        args: [Injector]
      }]
    }];
  }, null);
})();
var TuiFieldErrorPipeModule = class {
};
TuiFieldErrorPipeModule.ɵfac = function TuiFieldErrorPipeModule_Factory(t) {
  return new (t || TuiFieldErrorPipeModule)();
};
TuiFieldErrorPipeModule.ɵmod = ɵɵdefineNgModule({
  type: TuiFieldErrorPipeModule,
  declarations: [TuiFieldErrorPipe, TuiFieldErrorContentPipe],
  exports: [TuiFieldErrorPipe, TuiFieldErrorContentPipe]
});
TuiFieldErrorPipeModule.ɵinj = ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiFieldErrorPipeModule, [{
    type: NgModule,
    args: [{
      declarations: [TuiFieldErrorPipe, TuiFieldErrorContentPipe],
      exports: [TuiFieldErrorPipe, TuiFieldErrorContentPipe]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-multi-select-option.js
var TuiMultiSelectOptionComponent = class extends TuiSelectOptionComponent {
  get size() {
    var _a;
    return this.option.size === "l" || ((_a = this.dataList) === null || _a === void 0 ? void 0 : _a.size) === "l" && !this.option.size ? "l" : "m";
  }
  get selected() {
    const {
      value
    } = this.option;
    return tuiIsPresent(value) && tuiIsPresent(this.value) && this.value.some((item) => this.matcher(item, value));
  }
};
TuiMultiSelectOptionComponent.ɵfac = function() {
  let ɵTuiMultiSelectOptionComponent_BaseFactory;
  return function TuiMultiSelectOptionComponent_Factory(t) {
    return (ɵTuiMultiSelectOptionComponent_BaseFactory || (ɵTuiMultiSelectOptionComponent_BaseFactory = ɵɵgetInheritedFactory(TuiMultiSelectOptionComponent)))(t || TuiMultiSelectOptionComponent);
  };
}();
TuiMultiSelectOptionComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiMultiSelectOptionComponent,
  selectors: [["tui-multi-select-option"]],
  features: [ɵɵInheritDefinitionFeature],
  decls: 3,
  vars: 5,
  consts: [[1, "t-checkbox", 3, "size", "value"], [3, "ngTemplateOutlet"]],
  template: function TuiMultiSelectOptionComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵelement(0, "tui-primitive-checkbox", 0);
      ɵɵpipe(1, "async");
      ɵɵelementContainer(2, 1);
    }
    if (rf & 2) {
      ɵɵproperty("size", ctx.size)("value", ɵɵpipeBind1(1, 3, ctx.selected$));
      ɵɵadvance(2);
      ɵɵproperty("ngTemplateOutlet", ctx.context.$implicit);
    }
  },
  dependencies: [TuiPrimitiveCheckboxComponent, NgTemplateOutlet, AsyncPipe],
  styles: ["@keyframes _ngcontent-%COMP%_retrigger{0%{left:1px}to{left:2px}}[_nghost-%COMP%]{display:flex;flex:1;align-items:center;animation:_ngcontent-%COMP%_retrigger 1s}.t-checkbox[_ngcontent-%COMP%]{margin-right:.75rem}"],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiMultiSelectOptionComponent, [{
    type: Component,
    args: [{
      selector: "tui-multi-select-option",
      templateUrl: "./multi-select-option.template.html",
      styleUrls: ["./multi-select-option.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush
    }]
  }], null, null);
})();
var TuiMultiSelectOptionModule = class {
};
TuiMultiSelectOptionModule.ɵfac = function TuiMultiSelectOptionModule_Factory(t) {
  return new (t || TuiMultiSelectOptionModule)();
};
TuiMultiSelectOptionModule.ɵmod = ɵɵdefineNgModule({
  type: TuiMultiSelectOptionModule,
  declarations: [TuiMultiSelectOptionComponent],
  imports: [CommonModule, TuiPrimitiveCheckboxModule],
  exports: [TuiMultiSelectOptionComponent]
});
TuiMultiSelectOptionModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, TuiPrimitiveCheckboxModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiMultiSelectOptionModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, TuiPrimitiveCheckboxModule],
      declarations: [TuiMultiSelectOptionComponent],
      exports: [TuiMultiSelectOptionComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-pipes-stringify-content.js
var TuiStringifyContentPipe = class {
  transform(stringify) {
    return ({
      $implicit
    }) => stringify($implicit);
  }
};
TuiStringifyContentPipe.ɵfac = function TuiStringifyContentPipe_Factory(t) {
  return new (t || TuiStringifyContentPipe)();
};
TuiStringifyContentPipe.ɵpipe = ɵɵdefinePipe({
  name: "tuiStringifyContent",
  type: TuiStringifyContentPipe,
  pure: true
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiStringifyContentPipe, [{
    type: Pipe,
    args: [{
      name: "tuiStringifyContent"
    }]
  }], null, null);
})();
var TuiStringifyContentPipeModule = class {
};
TuiStringifyContentPipeModule.ɵfac = function TuiStringifyContentPipeModule_Factory(t) {
  return new (t || TuiStringifyContentPipeModule)();
};
TuiStringifyContentPipeModule.ɵmod = ɵɵdefineNgModule({
  type: TuiStringifyContentPipeModule,
  declarations: [TuiStringifyContentPipe],
  exports: [TuiStringifyContentPipe]
});
TuiStringifyContentPipeModule.ɵinj = ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiStringifyContentPipeModule, [{
    type: NgModule,
    args: [{
      declarations: [TuiStringifyContentPipe],
      exports: [TuiStringifyContentPipe]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-multi-select.js
function TuiMultiSelectComponent_ng_template_7_ng_content_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0, 1, ["*ngIf", "isMobile"]);
  }
}
function TuiMultiSelectComponent_ng_template_7_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtemplate(0, TuiMultiSelectComponent_ng_template_7_ng_content_0_Template, 1, 0, "ng-content", 7);
  }
  if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵproperty("ngIf", ctx_r2.isMobile);
  }
}
function TuiMultiSelectComponent_ng_container_9_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0, 8);
  }
}
function TuiMultiSelectComponent_div_10_span_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "span", 11);
    ɵɵtext(1);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const text_r9 = ctx.polymorpheusOutlet;
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", text_r9, " ");
  }
}
var _c030 = function(a0) {
  return {
    $implicit: a0
  };
};
function TuiMultiSelectComponent_div_10_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 9);
    ɵɵtemplate(1, TuiMultiSelectComponent_div_10_span_1_Template, 2, 1, "span", 10);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r4 = ɵɵnextContext();
    const _r0 = ɵɵreference(2);
    ɵɵclassProp("t-content_fullsize", _r0.labelOutside);
    ɵɵadvance(1);
    ɵɵproperty("polymorpheusOutlet", ctx_r4.valueContent)("polymorpheusOutletContext", ɵɵpureFunction1(4, _c030, ctx_r4.value));
  }
}
function TuiMultiSelectComponent_ng_template_11_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtext(1);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const text_r11 = ctx.polymorpheusOutlet;
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", text_r11, " ");
  }
}
function TuiMultiSelectComponent_ng_template_11_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 12);
    ɵɵtemplate(1, TuiMultiSelectComponent_ng_template_11_ng_container_1_Template, 2, 1, "ng-container", 13);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r6 = ɵɵnextContext();
    ɵɵclassProp("t-arrow_native-dropdown", ctx_r6.nativeDropdownMode);
    ɵɵadvance(1);
    ɵɵproperty("polymorpheusOutlet", ctx_r6.arrow);
  }
}
var _c122 = ["*", [["select"]]];
var _c213 = ["*", "select"];
var _c35 = ["tuiMultiSelectGroup", ""];
function TuiMultiSelectGroupComponent_span_0_button_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 4);
    ɵɵlistener("click", function TuiMultiSelectGroupComponent_span_0_button_3_Template_button_click_0_listener() {
      ɵɵrestoreView(_r5);
      const value_r1 = ɵɵnextContext().tuiLet;
      const ctx_r3 = ɵɵnextContext();
      return ɵɵresetView(ctx_r3.onClick(value_r1));
    });
    ɵɵpipe(1, "async");
    ɵɵtext(2);
    ɵɵpipe(3, "async");
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const value_r1 = ɵɵnextContext().tuiLet;
    const ctx_r2 = ɵɵnextContext();
    let tmp_1_0;
    ɵɵproperty("disabled", !!ɵɵpipeBind1(1, 2, ctx_r2.disabled$));
    ɵɵadvance(2);
    ɵɵtextInterpolate1(" ", (tmp_1_0 = ɵɵpipeBind1(3, 4, ctx_r2.multiSelectTexts$)) == null ? null : tmp_1_0[value_r1 ? "none" : "all"], " ");
  }
}
function TuiMultiSelectGroupComponent_span_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "span", 1)(1, "span", 2);
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵtemplate(3, TuiMultiSelectGroupComponent_span_0_button_3_Template, 4, 6, "button", 3);
    ɵɵpipe(4, "async");
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵtextInterpolate(ctx_r0.label);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.label && !ɵɵpipeBind1(4, 2, ctx_r0.empty$));
  }
}
var _c44 = ["*"];
var _c52 = ["multiple", "", "tuiSelect", ""];
function TuiNativeMultiSelectComponent_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function TuiNativeMultiSelectComponent_tui_data_list_wrapper_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "tui-data-list-wrapper", 3);
    ɵɵpipe(1, "tuiStringifyContent");
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵproperty("disabledItemHandler", ctx_r1.disabledItemHandler || ctx_r1.host.disableItemHandler)("itemContent", ɵɵpipeBind1(1, 3, ctx_r1.stringify))("items", ctx_r1.items);
  }
}
function TuiNativeMultiSelectComponent_option_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "option", 4);
    ɵɵpipe(1, "tuiMapper");
    ɵɵtext(2);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const option_r3 = ctx.$implicit;
    const ctx_r2 = ɵɵnextContext();
    ɵɵproperty("disabled", ctx_r2.disabledItemHandler ? ctx_r2.disabledItemHandler(option_r3) : ctx_r2.host.disableItemHandler(option_r3))("selected", ɵɵpipeBind3(1, 4, option_r3, ctx_r2.selectedMapper, ctx_r2.control.value))("value", ctx_r2.stringify(option_r3));
    ɵɵadvance(2);
    ɵɵtextInterpolate1(" ", ctx_r2.stringify(option_r3), "\n");
  }
}
var _c62 = ["multiple", "", "tuiSelect", "", "labels", ""];
function TuiNativeMultiSelectGroupComponent_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function TuiNativeMultiSelectGroupComponent_tui_data_list_wrapper_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "tui-data-list-wrapper", 3);
    ɵɵpipe(1, "tuiStringifyContent");
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵproperty("disabledItemHandler", ctx_r1.disabledItemHandler || ctx_r1.host.disableItemHandler)("itemContent", ɵɵpipeBind1(1, 4, ctx_r1.stringify))("items", ctx_r1.items)("labels", ctx_r1.labels);
  }
}
function TuiNativeMultiSelectGroupComponent_optgroup_3_option_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "option", 6);
    ɵɵpipe(1, "tuiMapper");
    ɵɵtext(2);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const option_r6 = ctx.$implicit;
    const ctx_r5 = ɵɵnextContext(2);
    ɵɵproperty("disabled", ctx_r5.disabledItemHandler ? ctx_r5.disabledItemHandler(option_r6) : ctx_r5.host.disableItemHandler(option_r6))("selected", ɵɵpipeBind3(1, 4, option_r6, ctx_r5.selectedMapper, ctx_r5.control.value))("value", ctx_r5.stringify(option_r6));
    ɵɵadvance(2);
    ɵɵtextInterpolate1(" ", ctx_r5.stringify(option_r6), " ");
  }
}
function TuiNativeMultiSelectGroupComponent_optgroup_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "optgroup", 4);
    ɵɵtemplate(1, TuiNativeMultiSelectGroupComponent_optgroup_3_option_1_Template, 3, 8, "option", 5);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const group_r3 = ctx.$implicit;
    const index_r4 = ctx.index;
    const ctx_r2 = ɵɵnextContext();
    ɵɵproperty("label", ctx_r2.labels[index_r4]);
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", group_r3);
  }
}
var _c72 = "[_nghost-%COMP%]{position:absolute;top:0;left:0;width:100%;height:100%;opacity:0}";
var TUI_MULTI_SELECT_DEFAULT_OPTIONS = {
  expandable: true,
  valueContent: ""
};
var TUI_MULTI_SELECT_OPTIONS = tuiCreateToken(TUI_MULTI_SELECT_DEFAULT_OPTIONS);
function tuiMultiSelectOptionsProvider(options) {
  return tuiProvideOptions(TUI_MULTI_SELECT_OPTIONS, options, TUI_MULTI_SELECT_DEFAULT_OPTIONS);
}
var AbstractTuiNativeMultiSelect = class extends AbstractTuiNativeSelect {
  constructor() {
    super(...arguments);
    this.selectedMapper = (option, value) => value.includes(option);
  }
  get stringify() {
    return this.host.stringify;
  }
};
AbstractTuiNativeMultiSelect.ɵfac = function() {
  let ɵAbstractTuiNativeMultiSelect_BaseFactory;
  return function AbstractTuiNativeMultiSelect_Factory(t) {
    return (ɵAbstractTuiNativeMultiSelect_BaseFactory || (ɵAbstractTuiNativeMultiSelect_BaseFactory = ɵɵgetInheritedFactory(AbstractTuiNativeMultiSelect)))(t || AbstractTuiNativeMultiSelect);
  };
}();
AbstractTuiNativeMultiSelect.ɵdir = ɵɵdefineDirective({
  type: AbstractTuiNativeMultiSelect,
  features: [ɵɵInheritDefinitionFeature]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AbstractTuiNativeMultiSelect, [{
    type: Directive
  }], null, null);
})();
var TuiMultiSelectComponent = class extends AbstractTuiMultipleControl {
  constructor(control, cdr, arrowMode, itemsHandlers, options, controller, isMobile) {
    super(control, cdr);
    this.arrowMode = arrowMode;
    this.itemsHandlers = itemsHandlers;
    this.options = options;
    this.controller = controller;
    this.isMobile = isMobile;
    this.stringify = this.itemsHandlers.stringify;
    this.identityMatcher = this.itemsHandlers.identityMatcher;
    this.expandable = this.options.expandable;
    this.search = "";
    this.placeholder = "";
    this.editable = true;
    this.disabledItemHandler = this.itemsHandlers.disabledItemHandler;
    this.valueContent = this.options.valueContent;
    this.tagValidator = ALWAYS_TRUE_HANDLER;
    this.rows = Infinity;
    this.autoColor = false;
    this.searchChange = new EventEmitter();
    this.open = false;
    this.valueMapper = (value, stringify, group) => group ? EMPTY_ARRAY : value.map((item) => new TuiStringifiableItem(item, stringify));
    this.disabledItemHandlerWrapper = (handler) => (stringifiable) => tuiIsString(stringifiable) || handler(stringifiable.item);
  }
  get size() {
    return this.controller.size;
  }
  get arrow() {
    return this.interactive ? this.arrowMode.interactive : this.arrowMode.disabled;
  }
  get nativeFocusableElement() {
    var _a, _b;
    return (_b = (_a = this.input) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) !== null && _b !== void 0 ? _b : null;
  }
  get focused() {
    var _a, _b;
    return !!((_a = this.input) === null || _a === void 0 ? void 0 : _a.focused) || !!((_b = this.hostedDropdown) === null || _b === void 0 ? void 0 : _b.focused);
  }
  get nativeDropdownMode() {
    return !!this.nativeSelect && this.isMobile && !this.editable;
  }
  get computedValue() {
    return this.computedGroup ? EMPTY_ARRAY : this.value;
  }
  // @bad TODO: think of a better way
  get searchOrSpace() {
    return this.computedGroup ? " " : this.searchString;
  }
  get searchString() {
    return this.search === null ? "" : this.search;
  }
  get computedGroup() {
    return !!this.valueContent && this.value.length > 0 && (!this.focused || !this.editable);
  }
  getStringifier(stringify) {
    return ({
      $implicit
    }) => stringify($implicit);
  }
  onSpace(event) {
    var _a;
    if (!this.editable) {
      event.preventDefault();
    }
    if (!this.readOnly) {
      (_a = this.hostedDropdown) === null || _a === void 0 ? void 0 : _a.updateOpen(true);
    }
  }
  handleOption(option) {
    const {
      value,
      identityMatcher
    } = this;
    const index = value.findIndex((item) => identityMatcher(item, option));
    this.value = index === -1 ? [...value, option] : value.filter((_, i) => i !== index);
    this.updateSearch(null);
  }
  onEnter(event) {
    const {
      value
    } = this;
    const options = this.accessor ? this.accessor.getOptions() : [];
    if (options.length !== 1) {
      return;
    }
    event.preventDefault();
    this.value = tuiArrayToggle(value, options[0]);
    this.updateSearch(null);
  }
  onClick({
    nativeFocusableElement
  }) {
    var _a;
    if (this.interactive && nativeFocusableElement && tuiIsNativeFocused(nativeFocusableElement)) {
      (_a = this.hostedDropdown) === null || _a === void 0 ? void 0 : _a.updateOpen(!this.open);
    }
  }
  onInput(value) {
    this.value = value.map(({
      item
    }) => item);
  }
  onValueChange(value) {
    this.value = value;
  }
  onSearch(search) {
    var _a;
    if (search !== "") {
      (_a = this.hostedDropdown) === null || _a === void 0 ? void 0 : _a.updateOpen(true);
    }
    this.updateSearch(search);
  }
  onActiveZone(active) {
    this.updateFocused(active);
  }
  setDisabledState() {
    var _a;
    super.setDisabledState();
    (_a = this.hostedDropdown) === null || _a === void 0 ? void 0 : _a.updateOpen(false);
  }
  updateSearch(search) {
    if (this.search === search) {
      return;
    }
    this.search = search;
    this.searchChange.emit(search);
  }
};
TuiMultiSelectComponent.ɵfac = function TuiMultiSelectComponent_Factory(t) {
  return new (t || TuiMultiSelectComponent)(ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(TUI_ARROW_MODE), ɵɵdirectiveInject(TUI_ITEMS_HANDLERS), ɵɵdirectiveInject(TUI_MULTI_SELECT_OPTIONS), ɵɵdirectiveInject(TUI_TEXTFIELD_WATCHED_CONTROLLER), ɵɵdirectiveInject(TUI_IS_MOBILE));
};
TuiMultiSelectComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiMultiSelectComponent,
  selectors: [["tui-multi-select"]],
  contentQueries: function TuiMultiSelectComponent_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, TUI_DATA_LIST_ACCESSOR, 5);
      ɵɵcontentQuery(dirIndex, AbstractTuiNativeMultiSelect, 7);
      ɵɵcontentQuery(dirIndex, TuiDataListDirective, 5, TemplateRef);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.accessor = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.nativeSelect = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.datalist = _t.first);
    }
  },
  viewQuery: function TuiMultiSelectComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(TuiHostedDropdownComponent, 5);
      ɵɵviewQuery(TuiInputTagComponent, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.hostedDropdown = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.input = _t.first);
    }
  },
  hostVars: 3,
  hostBindings: function TuiMultiSelectComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("data-size", ctx.size);
      ɵɵclassProp("_editable", ctx.editable);
    }
  },
  inputs: {
    stringify: "stringify",
    identityMatcher: "identityMatcher",
    expandable: "expandable",
    search: "search",
    placeholder: "placeholder",
    editable: "editable",
    disabledItemHandler: "disabledItemHandler",
    valueContent: "valueContent",
    tagValidator: "tagValidator",
    rows: "rows",
    autoColor: "autoColor"
  },
  outputs: {
    searchChange: "searchChange"
  },
  features: [ɵɵProvidersFeature([tuiAsFocusableItemAccessor(TuiMultiSelectComponent), tuiAsControl(TuiMultiSelectComponent), tuiAsDataListHost(TuiMultiSelectComponent), TEXTFIELD_CONTROLLER_PROVIDER], [FIXED_DROPDOWN_CONTROLLER_PROVIDER]), ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c213,
  decls: 13,
  vars: 33,
  consts: [[1, "t-hosted", 3, "canOpen", "content", "open", "openChange", "tuiActiveZoneChange"], ["automation-id", "tui-multi-select__input", 1, "t-input", 3, "autoColor", "disabled", "disabledItemHandler", "editable", "expandable", "inputHidden", "nativeId", "ngModel", "placeholder", "pseudoFocus", "pseudoHover", "pseudoInvalid", "readOnly", "removable", "rows", "search", "tagValidator", "tuiTextfieldIcon", "click.prevent", "keydown.enter", "keydown.space", "ngModelChange", "searchChange"], ["inputTag", ""], ["select", ""], ["ngProjectAs", "select", 5, ["select"], 4, "ngTemplateOutlet"], ["ngProjectAs", "tuiContent", "class", "t-content", 5, ["tuiContent"], 3, "t-content_fullsize", 4, "ngIf"], ["icon", ""], [4, "ngIf"], ["ngProjectAs", "select", 5, ["select"]], ["ngProjectAs", "tuiContent", 5, ["tuiContent"], 1, "t-content"], ["class", "t-primitive", 4, "polymorpheusOutlet", "polymorpheusOutletContext"], [1, "t-primitive"], ["appearance", "icon", "automation-id", "tui-multi-select__arrow", "tuiPreventDefault", "mousedown", "tuiWrapper", "", 1, "t-arrow"], [4, "polymorpheusOutlet"]],
  template: function TuiMultiSelectComponent_Template(rf, ctx) {
    if (rf & 1) {
      const _r12 = ɵɵgetCurrentView();
      ɵɵprojectionDef(_c122);
      ɵɵelementStart(0, "tui-hosted-dropdown", 0);
      ɵɵlistener("openChange", function TuiMultiSelectComponent_Template_tui_hosted_dropdown_openChange_0_listener($event) {
        return ctx.open = $event;
      })("tuiActiveZoneChange", function TuiMultiSelectComponent_Template_tui_hosted_dropdown_tuiActiveZoneChange_0_listener($event) {
        return ctx.onActiveZone($event);
      });
      ɵɵelementStart(1, "tui-input-tag", 1, 2);
      ɵɵlistener("click.prevent", function TuiMultiSelectComponent_Template_tui_input_tag_click_prevent_1_listener() {
        ɵɵrestoreView(_r12);
        const _r0 = ɵɵreference(2);
        return ɵɵresetView(ctx.onClick(_r0));
      })("keydown.enter", function TuiMultiSelectComponent_Template_tui_input_tag_keydown_enter_1_listener($event) {
        return ctx.onEnter($event);
      })("keydown.space", function TuiMultiSelectComponent_Template_tui_input_tag_keydown_space_1_listener($event) {
        return ctx.onSpace($event);
      })("ngModelChange", function TuiMultiSelectComponent_Template_tui_input_tag_ngModelChange_1_listener($event) {
        return ctx.onInput($event);
      })("searchChange", function TuiMultiSelectComponent_Template_tui_input_tag_searchChange_1_listener($event) {
        return ctx.onSearch($event);
      });
      ɵɵpipe(3, "tuiMapper");
      ɵɵpipe(4, "tuiMapper");
      ɵɵpipe(5, "tuiMapper");
      ɵɵprojection(6);
      ɵɵtemplate(7, TuiMultiSelectComponent_ng_template_7_Template, 1, 1, "ng-template", null, 3, ɵɵtemplateRefExtractor);
      ɵɵtemplate(9, TuiMultiSelectComponent_ng_container_9_Template, 1, 0, "ng-container", 4);
      ɵɵtemplate(10, TuiMultiSelectComponent_div_10_Template, 2, 6, "div", 5);
      ɵɵelementEnd();
      ɵɵtemplate(11, TuiMultiSelectComponent_ng_template_11_Template, 2, 3, "ng-template", null, 6, ɵɵtemplateRefExtractor);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      const _r1 = ɵɵreference(8);
      const _r5 = ɵɵreference(12);
      ɵɵproperty("canOpen", ctx.interactive && !ctx.nativeDropdownMode)("content", ctx.datalist || "")("open", ctx.open);
      ɵɵadvance(1);
      ɵɵproperty("autoColor", ctx.autoColor)("disabled", ctx.disabled)("disabledItemHandler", ɵɵpipeBind2(3, 23, ctx.disabledItemHandler, ctx.disabledItemHandlerWrapper))("editable", false)("expandable", ctx.expandable)("inputHidden", !ctx.editable)("nativeId", ctx.nativeId)("ngModel", ɵɵpipeBind3(4, 26, ctx.computedValue, ctx.valueMapper, ctx.stringify))("placeholder", ctx.placeholder)("pseudoFocus", ctx.computedFocused)("pseudoHover", ctx.pseudoHover)("pseudoInvalid", ctx.computedInvalid)("readOnly", ctx.readOnly)("removable", !ctx.nativeDropdownMode)("rows", ctx.rows)("search", ctx.searchOrSpace)("tagValidator", ɵɵpipeBind2(5, 30, ctx.tagValidator, ctx.disabledItemHandlerWrapper))("tuiTextfieldIcon", ctx.arrow ? _r5 : "");
      ɵɵadvance(8);
      ɵɵproperty("ngTemplateOutlet", _r1);
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.computedGroup);
    }
  },
  dependencies: [TuiHostedDropdownComponent, TuiInputTagComponent, TuiActiveZoneDirective, NgControlStatus, NgModel, TuiTextfieldIconDirective, NgIf, NgTemplateOutlet, PolymorpheusOutletDirective, TuiPreventDefaultDirective, TuiWrapperDirective, TuiMapperPipe],
  styles: ["[_nghost-%COMP%]{position:relative;display:block;border-radius:var(--tui-radius-m)}._disabled[_nghost-%COMP%]{pointer-events:none}.t-hosted[_ngcontent-%COMP%]{display:block;border-radius:inherit}.t-input[_ngcontent-%COMP%]{border-radius:inherit}[_nghost-%COMP%]:not(._editable):not(._readonly)   .t-input[_ngcontent-%COMP%]{cursor:pointer}.t-content[_ngcontent-%COMP%]{display:flex;align-items:center;pointer-events:none;box-sizing:border-box}.t-primitive[_ngcontent-%COMP%]{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.t-arrow[_ngcontent-%COMP%]{pointer-events:auto;cursor:pointer}.t-arrow_native-dropdown[_ngcontent-%COMP%]{pointer-events:none}"],
  changeDetection: 0
});
__decorate([tuiPure], TuiMultiSelectComponent.prototype, "getStringifier", null);
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiMultiSelectComponent, [{
    type: Component,
    args: [{
      selector: "tui-multi-select",
      templateUrl: "./multi-select.template.html",
      styleUrls: ["./multi-select.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [tuiAsFocusableItemAccessor(TuiMultiSelectComponent), tuiAsControl(TuiMultiSelectComponent), tuiAsDataListHost(TuiMultiSelectComponent), TEXTFIELD_CONTROLLER_PROVIDER],
      viewProviders: [FIXED_DROPDOWN_CONTROLLER_PROVIDER]
    }]
  }], function() {
    return [{
      type: NgControl,
      decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NgControl]
      }]
    }, {
      type: ChangeDetectorRef,
      decorators: [{
        type: Inject,
        args: [ChangeDetectorRef]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_ARROW_MODE]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_ITEMS_HANDLERS]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_MULTI_SELECT_OPTIONS]
      }]
    }, {
      type: TuiTextfieldController,
      decorators: [{
        type: Inject,
        args: [TUI_TEXTFIELD_WATCHED_CONTROLLER]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_IS_MOBILE]
      }]
    }];
  }, {
    accessor: [{
      type: ContentChild,
      args: [TUI_DATA_LIST_ACCESSOR]
    }],
    nativeSelect: [{
      type: ContentChild,
      args: [AbstractTuiNativeMultiSelect, {
        static: true
      }]
    }],
    hostedDropdown: [{
      type: ViewChild,
      args: [TuiHostedDropdownComponent]
    }],
    input: [{
      type: ViewChild,
      args: [TuiInputTagComponent]
    }],
    stringify: [{
      type: Input
    }],
    identityMatcher: [{
      type: Input
    }],
    expandable: [{
      type: Input
    }],
    search: [{
      type: Input
    }],
    placeholder: [{
      type: Input
    }],
    editable: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["class._editable"]
    }],
    disabledItemHandler: [{
      type: Input
    }],
    valueContent: [{
      type: Input
    }],
    tagValidator: [{
      type: Input
    }],
    rows: [{
      type: Input
    }],
    autoColor: [{
      type: Input
    }],
    searchChange: [{
      type: Output
    }],
    datalist: [{
      type: ContentChild,
      args: [TuiDataListDirective, {
        read: TemplateRef
      }]
    }],
    size: [{
      type: HostBinding,
      args: ["attr.data-size"]
    }],
    getStringifier: []
  });
})();
var TuiHideSelectedPipe = class {
  constructor(component) {
    this.component = component;
  }
  transform(items) {
    const {
      value,
      identityMatcher
    } = this.component;
    if (!items) {
      return null;
    }
    return tuiIsFlat(items) ? this.filter(items, value, identityMatcher) : this.filter2d(items, value, identityMatcher);
  }
  filter2d(items, value, matcher) {
    return items.map((subItems) => this.filter(subItems, value, matcher));
  }
  filter(items, value, matcher) {
    return items.filter((item) => value.every((selected) => !matcher(selected, item)));
  }
};
TuiHideSelectedPipe.ɵfac = function TuiHideSelectedPipe_Factory(t) {
  return new (t || TuiHideSelectedPipe)(ɵɵdirectiveInject(TuiMultiSelectComponent, 16));
};
TuiHideSelectedPipe.ɵpipe = ɵɵdefinePipe({
  name: "tuiHideSelected",
  type: TuiHideSelectedPipe,
  pure: false
});
__decorate([tuiPure], TuiHideSelectedPipe.prototype, "filter2d", null);
__decorate([tuiPure], TuiHideSelectedPipe.prototype, "filter", null);
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiHideSelectedPipe, [{
    type: Pipe,
    args: [{
      name: "tuiHideSelected",
      pure: false
    }]
  }], function() {
    return [{
      type: TuiMultiSelectComponent,
      decorators: [{
        type: Inject,
        args: [TuiMultiSelectComponent]
      }]
    }];
  }, {
    filter2d: [],
    filter: []
  });
})();
var TuiMultiSelectDirective = class extends AbstractTuiTextfieldHost {
  constructor() {
    super(...arguments);
    this.disableItemHandler = (item) => this.host.disabledItemHandler(item);
  }
  get readOnly() {
    return true;
  }
  onValueChange() {
  }
  get stringify() {
    return this.host.stringify;
  }
  onSelectionChange(value) {
    this.host.onValueChange(value);
  }
};
TuiMultiSelectDirective.ɵfac = function() {
  let ɵTuiMultiSelectDirective_BaseFactory;
  return function TuiMultiSelectDirective_Factory(t) {
    return (ɵTuiMultiSelectDirective_BaseFactory || (ɵTuiMultiSelectDirective_BaseFactory = ɵɵgetInheritedFactory(TuiMultiSelectDirective)))(t || TuiMultiSelectDirective);
  };
}();
TuiMultiSelectDirective.ɵdir = ɵɵdefineDirective({
  type: TuiMultiSelectDirective,
  selectors: [["tui-multi-select"]],
  features: [ɵɵProvidersFeature([tuiAsTextfieldHost(TuiMultiSelectDirective)]), ɵɵInheritDefinitionFeature]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiMultiSelectDirective, [{
    type: Directive,
    args: [{
      selector: "tui-multi-select",
      providers: [tuiAsTextfieldHost(TuiMultiSelectDirective)]
    }]
  }], null, null);
})();
var TuiMultiSelectGroupComponent = class {
  constructor(multiSelectTexts$, host, control) {
    this.multiSelectTexts$ = multiSelectTexts$;
    this.host = host;
    this.control = control;
    this.options = EMPTY_QUERY;
    this.label = "";
  }
  get size() {
    var _a;
    return ((_a = this.options.first) === null || _a === void 0 ? void 0 : _a.size) || "m";
  }
  get empty$() {
    return tuiQueryListChanges(this.options).pipe(map(({
      length
    }) => !length));
  }
  get disabled$() {
    return tuiQueryListChanges(this.options).pipe(map((items) => items.every(({
      disabled
    }) => disabled)));
  }
  get value$() {
    return combineLatest([this.items$, this.valueChanges$]).pipe(map(([items, current]) => {
      let result = false;
      for (let i = 0; i < items.length; i++) {
        const selected = current.some((selected2) => this.matcher(selected2, items[i]));
        if (!selected && result || selected && !result && i) {
          return null;
        }
        result = selected;
      }
      return result;
    }));
  }
  onClick(checked) {
    if (!this.control.control) {
      return;
    }
    const controlValue = this.control.value || [];
    const {
      values
    } = this;
    const filtered = controlValue.filter((current) => values.every((item) => !this.matcher(current, item)));
    this.control.control.setValue(checked ? filtered : [...filtered, ...values]);
  }
  get values() {
    return this.filter(tuiGetOriginalArrayFromQueryList(this.options));
  }
  get matcher() {
    return this.host.identityMatcher || TUI_DEFAULT_IDENTITY_MATCHER;
  }
  get items$() {
    return tuiQueryListChanges(this.options).pipe(map((options) => options.map(({
      value
    }) => value).filter(tuiIsPresent)));
  }
  get valueChanges$() {
    return tuiControlValue(this.control).pipe(map((value) => value || []));
  }
  filter(items) {
    return items.map(({
      value
    }) => value).filter(tuiIsPresent);
  }
};
TuiMultiSelectGroupComponent.ɵfac = function TuiMultiSelectGroupComponent_Factory(t) {
  return new (t || TuiMultiSelectGroupComponent)(ɵɵdirectiveInject(TUI_MULTI_SELECT_TEXTS), ɵɵdirectiveInject(TUI_DATA_LIST_HOST), ɵɵdirectiveInject(NgControl));
};
TuiMultiSelectGroupComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiMultiSelectGroupComponent,
  selectors: [["tui-opt-group", "tuiMultiSelectGroup", ""]],
  contentQueries: function TuiMultiSelectGroupComponent_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, TuiOptionComponent, 4);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.options = _t);
    }
  },
  hostVars: 2,
  hostBindings: function TuiMultiSelectGroupComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("_label", ctx.label);
    }
  },
  inputs: {
    label: "label"
  },
  attrs: _c35,
  ngContentSelectors: _c44,
  decls: 3,
  vars: 3,
  consts: [["class", "t-wrapper", 4, "tuiLet"], [1, "t-wrapper"], [1, "t-label"], ["tuiLink", "", "type", "button", "class", "t-button", 3, "disabled", "click", 4, "ngIf"], ["tuiLink", "", "type", "button", 1, "t-button", 3, "disabled", "click"]],
  template: function TuiMultiSelectGroupComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵtemplate(0, TuiMultiSelectGroupComponent_span_0_Template, 5, 4, "span", 0);
      ɵɵpipe(1, "async");
      ɵɵprojection(2);
    }
    if (rf & 2) {
      ɵɵproperty("tuiLet", ɵɵpipeBind1(1, 1, ctx.value$));
    }
  },
  dependencies: [TuiLinkComponent, TuiLetDirective, NgIf, AsyncPipe],
  styles: ["._label[_nghost-%COMP%]:before{display:none}[_nghost-%COMP%]:not(:first-of-type)   .t-label[_ngcontent-%COMP%]:not(:empty){padding-top:1.25rem}[_nghost-%COMP%]:not(:first-of-type)   .t-button[_ngcontent-%COMP%]{margin-top:1.25rem}.t-wrapper[_ngcontent-%COMP%]{display:flex;align-items:flex-start}.t-label[_ngcontent-%COMP%]:not(:empty){flex:1;padding:.75rem 1rem .25rem .625rem}.t-button[_ngcontent-%COMP%]{margin:.75rem 1rem 0 auto}"],
  changeDetection: 0
});
__decorate([tuiPure], TuiMultiSelectGroupComponent.prototype, "empty$", null);
__decorate([tuiPure], TuiMultiSelectGroupComponent.prototype, "disabled$", null);
__decorate([tuiPure], TuiMultiSelectGroupComponent.prototype, "value$", null);
__decorate([tuiPure], TuiMultiSelectGroupComponent.prototype, "items$", null);
__decorate([tuiPure], TuiMultiSelectGroupComponent.prototype, "valueChanges$", null);
__decorate([tuiPure], TuiMultiSelectGroupComponent.prototype, "filter", null);
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiMultiSelectGroupComponent, [{
    type: Component,
    args: [{
      selector: "tui-opt-group[tuiMultiSelectGroup]",
      templateUrl: "./multi-select-group.template.html",
      styleUrls: ["./multi-select-group.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush
    }]
  }], function() {
    return [{
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_MULTI_SELECT_TEXTS]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_DATA_LIST_HOST]
      }]
    }, {
      type: NgControl,
      decorators: [{
        type: Inject,
        args: [NgControl]
      }]
    }];
  }, {
    options: [{
      type: ContentChildren,
      args: [TuiOptionComponent]
    }],
    label: [{
      type: HostBinding,
      args: ["class._label"]
    }, {
      type: Input
    }],
    empty$: [],
    disabled$: [],
    value$: [],
    items$: [],
    valueChanges$: [],
    filter: []
  });
})();
var TUI_MULTI_SELECT_OPTION = new PolymorpheusComponent(TuiMultiSelectOptionComponent);
var TuiMultiSelectGroupDirective = class {
};
TuiMultiSelectGroupDirective.ɵfac = function TuiMultiSelectGroupDirective_Factory(t) {
  return new (t || TuiMultiSelectGroupDirective)();
};
TuiMultiSelectGroupDirective.ɵdir = ɵɵdefineDirective({
  type: TuiMultiSelectGroupDirective,
  selectors: [["", "tuiMultiSelectGroup", ""]],
  features: [ɵɵProvidersFeature([tuiAsOptionContent(TUI_MULTI_SELECT_OPTION), {
    provide: TUI_DATA_LIST_HOST,
    deps: [NgControl, [new Optional(), forwardRef(() => TuiMultiSelectComponent)]],
    useFactory: (control, host) => host || {
      handleOption: (option) => {
        var _a;
        return (_a = control.control) === null || _a === void 0 ? void 0 : _a.setValue(tuiArrayToggle(control.value || [], option));
      }
    }
  }, {
    provide: NG_VALUE_ACCESSOR,
    multi: true,
    useValue: {
      writeValue: EMPTY_FUNCTION,
      registerOnChange: EMPTY_FUNCTION,
      registerOnTouched: EMPTY_FUNCTION
    }
  }])]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiMultiSelectGroupDirective, [{
    type: Directive,
    args: [{
      selector: "[tuiMultiSelectGroup]",
      providers: [tuiAsOptionContent(TUI_MULTI_SELECT_OPTION), {
        provide: TUI_DATA_LIST_HOST,
        deps: [NgControl, [new Optional(), forwardRef(() => TuiMultiSelectComponent)]],
        useFactory: (control, host) => host || {
          handleOption: (option) => {
            var _a;
            return (_a = control.control) === null || _a === void 0 ? void 0 : _a.setValue(tuiArrayToggle(control.value || [], option));
          }
        }
      }, {
        provide: NG_VALUE_ACCESSOR,
        multi: true,
        useValue: {
          writeValue: EMPTY_FUNCTION,
          registerOnChange: EMPTY_FUNCTION,
          registerOnTouched: EMPTY_FUNCTION
        }
      }]
    }]
  }], null, null);
})();
var TuiNativeMultiSelectComponent = class extends AbstractTuiNativeMultiSelect {
  constructor() {
    super(...arguments);
    this.items = [];
  }
  onValueChange(selectedOptions) {
    var _a;
    const selected = Array.from(selectedOptions).map((option) => option.index);
    const value = ((_a = this.items) === null || _a === void 0 ? void 0 : _a.filter((_, index) => selected.includes(index))) || [];
    this.host.onSelectionChange(value);
  }
};
TuiNativeMultiSelectComponent.ɵfac = function() {
  let ɵTuiNativeMultiSelectComponent_BaseFactory;
  return function TuiNativeMultiSelectComponent_Factory(t) {
    return (ɵTuiNativeMultiSelectComponent_BaseFactory || (ɵTuiNativeMultiSelectComponent_BaseFactory = ɵɵgetInheritedFactory(TuiNativeMultiSelectComponent)))(t || TuiNativeMultiSelectComponent);
  };
}();
TuiNativeMultiSelectComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiNativeMultiSelectComponent,
  selectors: [["select", "multiple", "", "tuiSelect", "", 3, "labels", ""]],
  hostVars: 3,
  hostBindings: function TuiNativeMultiSelectComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("change", function TuiNativeMultiSelectComponent_change_HostBindingHandler($event) {
        return ctx.onValueChange($event.target.selectedOptions);
      })("click.stop.silent", function TuiNativeMultiSelectComponent_click_stop_silent_HostBindingHandler() {
        return 0;
      })("mousedown.stop.silent", function TuiNativeMultiSelectComponent_mousedown_stop_silent_HostBindingHandler() {
        return 0;
      });
    }
    if (rf & 2) {
      ɵɵhostProperty("disabled", ctx.host.disabled || ctx.control.readOnly)("tabIndex", ctx.host.focusable ? 0 : -1);
      ɵɵattribute("aria-invalid", ctx.host.invalid);
    }
  },
  inputs: {
    items: "items"
  },
  features: [ɵɵProvidersFeature([tuiAsDataList(TuiNativeMultiSelectComponent), {
    provide: TemplateRef,
    deps: [TuiNativeMultiSelectComponent],
    useFactory: ({
      datalist
    }) => datalist
  }, {
    provide: AbstractTuiNativeMultiSelect,
    useExisting: TuiNativeMultiSelectComponent
  }]), ɵɵInheritDefinitionFeature],
  attrs: _c52,
  decls: 4,
  vars: 4,
  consts: [[4, "ngIf"], ["tuiMultiSelectGroup", "", 3, "disabledItemHandler", "itemContent", "items", 4, "tuiDataList"], [3, "disabled", "selected", "value", 4, "ngFor", "ngForOf"], ["tuiMultiSelectGroup", "", 3, "disabledItemHandler", "itemContent", "items"], [3, "disabled", "selected", "value"]],
  template: function TuiNativeMultiSelectComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵtemplate(0, TuiNativeMultiSelectComponent_ng_container_0_Template, 1, 0, "ng-container", 0);
      ɵɵpipe(1, "async");
      ɵɵtemplate(2, TuiNativeMultiSelectComponent_tui_data_list_wrapper_2_Template, 2, 5, "tui-data-list-wrapper", 1);
      ɵɵtemplate(3, TuiNativeMultiSelectComponent_option_3_Template, 3, 8, "option", 2);
    }
    if (rf & 2) {
      ɵɵproperty("ngIf", ɵɵpipeBind1(1, 2, ctx.control.control == null ? null : ctx.control.control.valueChanges));
      ɵɵadvance(3);
      ɵɵproperty("ngForOf", ctx.items);
    }
  },
  dependencies: [TuiDataListWrapperComponent, NgIf, TuiDataListDirective, TuiMultiSelectGroupDirective, NgForOf, NgSelectOption, ɵNgSelectMultipleOption, AsyncPipe, TuiStringifyContentPipe, TuiMapperPipe],
  styles: ["[_nghost-%COMP%]{position:absolute;top:0;left:0;width:100%;height:100%;opacity:0}"],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiNativeMultiSelectComponent, [{
    type: Component,
    args: [{
      selector: "select[multiple][tuiSelect]:not([labels])",
      templateUrl: "./native-multi-select.template.html",
      styleUrls: ["./native-multi-select.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [tuiAsDataList(TuiNativeMultiSelectComponent), {
        provide: TemplateRef,
        deps: [TuiNativeMultiSelectComponent],
        useFactory: ({
          datalist
        }) => datalist
      }, {
        provide: AbstractTuiNativeMultiSelect,
        useExisting: TuiNativeMultiSelectComponent
      }],
      host: {
        "[attr.aria-invalid]": "host.invalid",
        "[disabled]": "host.disabled || control.readOnly",
        "[tabIndex]": "host.focusable ? 0 : -1",
        "(change)": "onValueChange($event.target.selectedOptions)",
        "(click.stop.silent)": "0",
        "(mousedown.stop.silent)": "0"
      }
    }]
  }], null, {
    items: [{
      type: Input
    }]
  });
})();
var TuiNativeMultiSelectGroupComponent = class extends AbstractTuiNativeMultiSelect {
  constructor() {
    super(...arguments);
    this.items = [];
    this.labels = [];
  }
  onValueChange(selectedOptions) {
    var _a;
    const selected = Array.from(selectedOptions).map((option) => option.index);
    const flatItems = ((_a = this.items) === null || _a === void 0 ? void 0 : _a.reduce((acc, val) => acc.concat(val), [])) || [];
    const value = flatItems.filter((_, index) => selected.includes(index));
    this.host.onSelectionChange(value);
  }
};
TuiNativeMultiSelectGroupComponent.ɵfac = function() {
  let ɵTuiNativeMultiSelectGroupComponent_BaseFactory;
  return function TuiNativeMultiSelectGroupComponent_Factory(t) {
    return (ɵTuiNativeMultiSelectGroupComponent_BaseFactory || (ɵTuiNativeMultiSelectGroupComponent_BaseFactory = ɵɵgetInheritedFactory(TuiNativeMultiSelectGroupComponent)))(t || TuiNativeMultiSelectGroupComponent);
  };
}();
TuiNativeMultiSelectGroupComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiNativeMultiSelectGroupComponent,
  selectors: [["select", "multiple", "", "tuiSelect", "", "labels", ""]],
  hostVars: 3,
  hostBindings: function TuiNativeMultiSelectGroupComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("change", function TuiNativeMultiSelectGroupComponent_change_HostBindingHandler($event) {
        return ctx.onValueChange($event.target.selectedOptions);
      })("click.stop.silent", function TuiNativeMultiSelectGroupComponent_click_stop_silent_HostBindingHandler() {
        return 0;
      })("mousedown.stop.silent", function TuiNativeMultiSelectGroupComponent_mousedown_stop_silent_HostBindingHandler() {
        return 0;
      });
    }
    if (rf & 2) {
      ɵɵhostProperty("disabled", ctx.host.disabled || ctx.control.readOnly)("tabIndex", ctx.host.focusable ? 0 : -1);
      ɵɵattribute("aria-invalid", ctx.host.invalid);
    }
  },
  inputs: {
    items: "items",
    labels: "labels"
  },
  features: [ɵɵProvidersFeature([tuiAsDataList(TuiNativeMultiSelectGroupComponent), {
    provide: TemplateRef,
    deps: [TuiNativeMultiSelectGroupComponent],
    useFactory: ({
      datalist
    }) => datalist
  }, {
    provide: AbstractTuiNativeMultiSelect,
    useExisting: TuiNativeMultiSelectGroupComponent
  }]), ɵɵInheritDefinitionFeature],
  attrs: _c62,
  decls: 4,
  vars: 4,
  consts: [[4, "ngIf"], ["tuiMultiSelectGroup", "", 3, "disabledItemHandler", "itemContent", "items", "labels", 4, "tuiDataList"], [3, "label", 4, "ngFor", "ngForOf"], ["tuiMultiSelectGroup", "", 3, "disabledItemHandler", "itemContent", "items", "labels"], [3, "label"], [3, "disabled", "selected", "value", 4, "ngFor", "ngForOf"], [3, "disabled", "selected", "value"]],
  template: function TuiNativeMultiSelectGroupComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵtemplate(0, TuiNativeMultiSelectGroupComponent_ng_container_0_Template, 1, 0, "ng-container", 0);
      ɵɵpipe(1, "async");
      ɵɵtemplate(2, TuiNativeMultiSelectGroupComponent_tui_data_list_wrapper_2_Template, 2, 6, "tui-data-list-wrapper", 1);
      ɵɵtemplate(3, TuiNativeMultiSelectGroupComponent_optgroup_3_Template, 2, 2, "optgroup", 2);
    }
    if (rf & 2) {
      ɵɵproperty("ngIf", ɵɵpipeBind1(1, 2, ctx.control.control == null ? null : ctx.control.control.valueChanges));
      ɵɵadvance(3);
      ɵɵproperty("ngForOf", ctx.items);
    }
  },
  dependencies: [TuiDataListGroupWrapperComponent, NgIf, TuiDataListDirective, TuiMultiSelectGroupDirective, NgForOf, NgSelectOption, ɵNgSelectMultipleOption, AsyncPipe, TuiStringifyContentPipe, TuiMapperPipe],
  styles: [_c72],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiNativeMultiSelectGroupComponent, [{
    type: Component,
    args: [{
      selector: "select[multiple][tuiSelect][labels]",
      templateUrl: "./native-multi-select-group.template.html",
      styleUrls: ["./native-multi-select.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [tuiAsDataList(TuiNativeMultiSelectGroupComponent), {
        provide: TemplateRef,
        deps: [TuiNativeMultiSelectGroupComponent],
        useFactory: ({
          datalist
        }) => datalist
      }, {
        provide: AbstractTuiNativeMultiSelect,
        useExisting: TuiNativeMultiSelectGroupComponent
      }],
      host: {
        "[attr.aria-invalid]": "host.invalid",
        "[disabled]": "host.disabled || control.readOnly",
        "[tabIndex]": "host.focusable ? 0 : -1",
        "(change)": "onValueChange($event.target.selectedOptions)",
        "(click.stop.silent)": "0",
        "(mousedown.stop.silent)": "0"
      }
    }]
  }], null, {
    items: [{
      type: Input
    }],
    labels: [{
      type: Input
    }]
  });
})();
var TuiMultiSelectModule = class {
};
TuiMultiSelectModule.ɵfac = function TuiMultiSelectModule_Factory(t) {
  return new (t || TuiMultiSelectModule)();
};
TuiMultiSelectModule.ɵmod = ɵɵdefineNgModule({
  type: TuiMultiSelectModule,
  declarations: [TuiMultiSelectComponent, TuiMultiSelectGroupComponent, TuiMultiSelectGroupDirective, TuiHideSelectedPipe, TuiNativeMultiSelectComponent, TuiNativeMultiSelectGroupComponent, TuiMultiSelectDirective],
  imports: [CommonModule, FormsModule, PolymorpheusModule, TuiWrapperModule, TuiPreventDefaultModule, TuiActiveZoneModule, TuiArrowModule, TuiLetModule, TuiMapperPipeModule, TuiSvgModule, TuiHostedDropdownModule, TuiInputTagModule, TuiMultiSelectOptionModule, TuiDataListWrapperModule, TuiMapperPipeModule, TuiLinkModule, TuiDataListModule, TuiTextfieldControllerModule, TuiStringifyContentPipeModule],
  exports: [TuiMultiSelectComponent, TuiMultiSelectGroupComponent, TuiMultiSelectGroupDirective, TuiHideSelectedPipe, TuiMultiSelectDirective, TuiNativeMultiSelectComponent, TuiNativeMultiSelectGroupComponent]
});
TuiMultiSelectModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, FormsModule, PolymorpheusModule, TuiWrapperModule, TuiPreventDefaultModule, TuiActiveZoneModule, TuiArrowModule, TuiLetModule, TuiMapperPipeModule, TuiSvgModule, TuiHostedDropdownModule, TuiInputTagModule, TuiMultiSelectOptionModule, TuiDataListWrapperModule, TuiMapperPipeModule, TuiLinkModule, TuiDataListModule, TuiTextfieldControllerModule, TuiStringifyContentPipeModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiMultiSelectModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, FormsModule, PolymorpheusModule, TuiWrapperModule, TuiPreventDefaultModule, TuiActiveZoneModule, TuiArrowModule, TuiLetModule, TuiMapperPipeModule, TuiSvgModule, TuiHostedDropdownModule, TuiInputTagModule, TuiMultiSelectOptionModule, TuiDataListWrapperModule, TuiMapperPipeModule, TuiLinkModule, TuiDataListModule, TuiTextfieldControllerModule, TuiStringifyContentPipeModule],
      declarations: [TuiMultiSelectComponent, TuiMultiSelectGroupComponent, TuiMultiSelectGroupDirective, TuiHideSelectedPipe, TuiNativeMultiSelectComponent, TuiNativeMultiSelectGroupComponent, TuiMultiSelectDirective],
      exports: [TuiMultiSelectComponent, TuiMultiSelectGroupComponent, TuiMultiSelectGroupDirective, TuiHideSelectedPipe, TuiMultiSelectDirective, TuiNativeMultiSelectComponent, TuiNativeMultiSelectGroupComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-pipes-filter-by-input.js
var AbstractTuiFilterByInput = class {
  get query() {
    return this.accessor.nativeFocusableElement ? this.accessor.nativeFocusableElement.value || "" : "";
  }
  filter(items, matcher, stringify, query) {
    if (!items) {
      return null;
    }
    return tuiIsFlat(items) ? this.filterFlat(items, matcher, stringify, query) : this.filter2d(items, matcher, stringify, query);
  }
  filterFlat(items, matcher, stringify, query) {
    const match = this.getMatch(items, stringify, query);
    return tuiIsPresent(match) && !this.multiSelect ? items : items.filter((item) => matcher(item, query, stringify));
  }
  filter2d(items, matcher, stringify, query) {
    const match = items.find((item) => tuiIsPresent(this.getMatch(item, stringify, query)));
    return tuiIsPresent(match) && !this.multiSelect ? items : items.map((inner) => this.filterFlat(inner, matcher, stringify, query));
  }
  getMatch(items, stringify, query) {
    return items.find((item) => stringify(item).toLocaleLowerCase() === query.toLocaleLowerCase());
  }
};
__decorate([tuiPure], AbstractTuiFilterByInput.prototype, "filter", null);
var TuiFilterByInputPipe = class extends AbstractTuiFilterByInput {
  constructor(accessor, host, multiSelect) {
    super();
    this.accessor = accessor;
    this.host = host;
    this.multiSelect = multiSelect;
  }
  transform(items, matcher = TUI_DEFAULT_MATCHER) {
    return this.filter(items, matcher, this.host.stringify || TUI_DEFAULT_STRINGIFY, this.query);
  }
};
TuiFilterByInputPipe.ɵfac = function TuiFilterByInputPipe_Factory(t) {
  return new (t || TuiFilterByInputPipe)(ɵɵdirectiveInject(TUI_FOCUSABLE_ITEM_ACCESSOR, 16), ɵɵdirectiveInject(TUI_DATA_LIST_HOST, 16), ɵɵdirectiveInject(TuiMultiSelectDirective, 24));
};
TuiFilterByInputPipe.ɵpipe = ɵɵdefinePipe({
  name: "tuiFilterByInput",
  type: TuiFilterByInputPipe,
  pure: false
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiFilterByInputPipe, [{
    type: Pipe,
    args: [{
      name: "tuiFilterByInput",
      pure: false
    }]
  }], function() {
    return [{
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_FOCUSABLE_ITEM_ACCESSOR]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_DATA_LIST_HOST]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [TuiMultiSelectDirective]
      }]
    }];
  }, null);
})();
var TuiFilterByInputWithPipe = class extends AbstractTuiFilterByInput {
  constructor(accessor, multiSelect) {
    super();
    this.accessor = accessor;
    this.multiSelect = multiSelect;
  }
  transform(items, stringify) {
    return this.filter(items, TUI_DEFAULT_MATCHER, stringify, this.query);
  }
};
TuiFilterByInputWithPipe.ɵfac = function TuiFilterByInputWithPipe_Factory(t) {
  return new (t || TuiFilterByInputWithPipe)(ɵɵdirectiveInject(TUI_FOCUSABLE_ITEM_ACCESSOR, 16), ɵɵdirectiveInject(TuiMultiSelectDirective, 24));
};
TuiFilterByInputWithPipe.ɵpipe = ɵɵdefinePipe({
  name: "tuiFilterByInputWith",
  type: TuiFilterByInputWithPipe,
  pure: false
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiFilterByInputWithPipe, [{
    type: Pipe,
    args: [{
      name: "tuiFilterByInputWith",
      pure: false
    }]
  }], function() {
    return [{
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_FOCUSABLE_ITEM_ACCESSOR]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [TuiMultiSelectDirective]
      }]
    }];
  }, null);
})();
var TuiFilterByInputPipeModule = class {
};
TuiFilterByInputPipeModule.ɵfac = function TuiFilterByInputPipeModule_Factory(t) {
  return new (t || TuiFilterByInputPipeModule)();
};
TuiFilterByInputPipeModule.ɵmod = ɵɵdefineNgModule({
  type: TuiFilterByInputPipeModule,
  declarations: [TuiFilterByInputPipe, TuiFilterByInputWithPipe],
  exports: [TuiFilterByInputPipe, TuiFilterByInputWithPipe]
});
TuiFilterByInputPipeModule.ɵinj = ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiFilterByInputPipeModule, [{
    type: NgModule,
    args: [{
      declarations: [TuiFilterByInputPipe, TuiFilterByInputWithPipe],
      exports: [TuiFilterByInputPipe, TuiFilterByInputWithPipe]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-pipes-iso-to-country-code.js
var TuiIsoToCountryCodePipe = class {
  constructor(countriesMasks) {
    this.countriesMasks = countriesMasks;
  }
  transform(isoCode) {
    return tuiIsoToCountryCode(this.countriesMasks, isoCode);
  }
};
TuiIsoToCountryCodePipe.ɵfac = function TuiIsoToCountryCodePipe_Factory(t) {
  return new (t || TuiIsoToCountryCodePipe)(ɵɵdirectiveInject(TUI_COUNTRIES_MASKS, 16));
};
TuiIsoToCountryCodePipe.ɵpipe = ɵɵdefinePipe({
  name: "tuiIsoToCountryCode",
  type: TuiIsoToCountryCodePipe,
  pure: true
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiIsoToCountryCodePipe, [{
    type: Pipe,
    args: [{
      name: "tuiIsoToCountryCode"
    }]
  }], function() {
    return [{
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_COUNTRIES_MASKS]
      }]
    }];
  }, null);
})();
var TuiIsoToCountryCodeModule = class {
};
TuiIsoToCountryCodeModule.ɵfac = function TuiIsoToCountryCodeModule_Factory(t) {
  return new (t || TuiIsoToCountryCodeModule)();
};
TuiIsoToCountryCodeModule.ɵmod = ɵɵdefineNgModule({
  type: TuiIsoToCountryCodeModule,
  declarations: [TuiIsoToCountryCodePipe],
  exports: [TuiIsoToCountryCodePipe]
});
TuiIsoToCountryCodeModule.ɵinj = ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiIsoToCountryCodeModule, [{
    type: NgModule,
    args: [{
      declarations: [TuiIsoToCountryCodePipe],
      exports: [TuiIsoToCountryCodePipe]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-pipes-sort-countries.js
var TuiSortCountriesPipe = class {
  constructor(countriesNames$) {
    this.countriesNames$ = countriesNames$;
  }
  transform(countries) {
    return this.countriesNames$.pipe(map((names) => [...countries].sort((a, b) => names[a].localeCompare(names[b]))));
  }
};
TuiSortCountriesPipe.ɵfac = function TuiSortCountriesPipe_Factory(t) {
  return new (t || TuiSortCountriesPipe)(ɵɵdirectiveInject(TUI_COUNTRIES, 16));
};
TuiSortCountriesPipe.ɵpipe = ɵɵdefinePipe({
  name: "tuiSortCountries",
  type: TuiSortCountriesPipe,
  pure: true
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiSortCountriesPipe, [{
    type: Pipe,
    args: [{
      name: "tuiSortCountries"
    }]
  }], function() {
    return [{
      type: Observable,
      decorators: [{
        type: Inject,
        args: [TUI_COUNTRIES]
      }]
    }];
  }, null);
})();
var TuiSortCountriesPipeModule = class {
};
TuiSortCountriesPipeModule.ɵfac = function TuiSortCountriesPipeModule_Factory(t) {
  return new (t || TuiSortCountriesPipeModule)();
};
TuiSortCountriesPipeModule.ɵmod = ɵɵdefineNgModule({
  type: TuiSortCountriesPipeModule,
  declarations: [TuiSortCountriesPipe],
  exports: [TuiSortCountriesPipe]
});
TuiSortCountriesPipeModule.ɵinj = ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiSortCountriesPipeModule, [{
    type: NgModule,
    args: [{
      declarations: [TuiSortCountriesPipe],
      exports: [TuiSortCountriesPipe]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-pipes-stringify.js
var TuiStringifyPipe = class {
  transform(key) {
    return (value) => {
      var _a;
      return String((_a = value[key]) !== null && _a !== void 0 ? _a : "");
    };
  }
};
TuiStringifyPipe.ɵfac = function TuiStringifyPipe_Factory(t) {
  return new (t || TuiStringifyPipe)();
};
TuiStringifyPipe.ɵpipe = ɵɵdefinePipe({
  name: "tuiStringify",
  type: TuiStringifyPipe,
  pure: true
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiStringifyPipe, [{
    type: Pipe,
    args: [{
      name: "tuiStringify"
    }]
  }], null, null);
})();
var TuiStringifyPipeModule = class {
};
TuiStringifyPipeModule.ɵfac = function TuiStringifyPipeModule_Factory(t) {
  return new (t || TuiStringifyPipeModule)();
};
TuiStringifyPipeModule.ɵmod = ɵɵdefineNgModule({
  type: TuiStringifyPipeModule,
  declarations: [TuiStringifyPipe],
  exports: [TuiStringifyPipe]
});
TuiStringifyPipeModule.ɵinj = ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiStringifyPipeModule, [{
    type: NgModule,
    args: [{
      declarations: [TuiStringifyPipe],
      exports: [TuiStringifyPipe]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-pipes-to-country-code.js
var TuiToCountryCodePipe = class {
  constructor(countriesMasks) {
    this.countriesMasks = countriesMasks;
  }
  transform(value, countries) {
    return countries.find((countryIsoCode) => {
      const ruCodeTest = countryIsoCode === TuiCountryIsoCode.RU && /^[78]/.test(value) && /^(?!880[1-9 ])/.test(value) && value.length + 1 === tuiGetMaxAllowedPhoneLength(this.countriesMasks, TuiCountryIsoCode.RU);
      const matched = ruCodeTest || value.startsWith(tuiIsoToCountryCode(this.countriesMasks, countryIsoCode).replace(CHAR_PLUS, "")) && value.length + 1 === tuiGetMaxAllowedPhoneLength(this.countriesMasks, countryIsoCode);
      if (matched) {
        switch (countryIsoCode) {
          case TuiCountryIsoCode.RU:
            return tuiNotKzRegion(value);
          case TuiCountryIsoCode.KZ:
            return !tuiNotKzRegion(value);
          default:
            return true;
        }
      }
      return false;
    });
  }
};
TuiToCountryCodePipe.ɵfac = function TuiToCountryCodePipe_Factory(t) {
  return new (t || TuiToCountryCodePipe)(ɵɵdirectiveInject(TUI_COUNTRIES_MASKS, 16));
};
TuiToCountryCodePipe.ɵpipe = ɵɵdefinePipe({
  name: "tuiToCountryCode",
  type: TuiToCountryCodePipe,
  pure: true
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiToCountryCodePipe, [{
    type: Pipe,
    args: [{
      name: "tuiToCountryCode"
    }]
  }], function() {
    return [{
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_COUNTRIES_MASKS]
      }]
    }];
  }, null);
})();
var TuiExtractCountryCodeModule = class {
};
TuiExtractCountryCodeModule.ɵfac = function TuiExtractCountryCodeModule_Factory(t) {
  return new (t || TuiExtractCountryCodeModule)();
};
TuiExtractCountryCodeModule.ɵmod = ɵɵdefineNgModule({
  type: TuiExtractCountryCodeModule,
  declarations: [TuiToCountryCodePipe],
  exports: [TuiToCountryCodePipe]
});
TuiExtractCountryCodeModule.ɵinj = ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiExtractCountryCodeModule, [{
    type: NgModule,
    args: [{
      declarations: [TuiToCountryCodePipe],
      exports: [TuiToCountryCodePipe]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-pipes-to-year.js
var TuiToYearPipe = class {
  transform(value) {
    return new TuiYear(value);
  }
};
TuiToYearPipe.ɵfac = function TuiToYearPipe_Factory(t) {
  return new (t || TuiToYearPipe)();
};
TuiToYearPipe.ɵpipe = ɵɵdefinePipe({
  name: "tuiToYear",
  type: TuiToYearPipe,
  pure: true
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiToYearPipe, [{
    type: Pipe,
    args: [{
      name: "tuiToYear"
    }]
  }], null, null);
})();
var TuiToYearPipeModule = class {
};
TuiToYearPipeModule.ɵfac = function TuiToYearPipeModule_Factory(t) {
  return new (t || TuiToYearPipeModule)();
};
TuiToYearPipeModule.ɵmod = ɵɵdefineNgModule({
  type: TuiToYearPipeModule,
  declarations: [TuiToYearPipe],
  exports: [TuiToYearPipe]
});
TuiToYearPipeModule.ɵinj = ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiToYearPipeModule, [{
    type: NgModule,
    args: [{
      declarations: [TuiToYearPipe],
      exports: [TuiToYearPipe]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-input-phone-international.js
function TuiInputPhoneInternationalComponent_tui_hosted_dropdown_0_ng_template_6_button_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r11 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 10);
    ɵɵlistener("click", function TuiInputPhoneInternationalComponent_tui_hosted_dropdown_0_ng_template_6_button_1_Template_button_click_0_listener() {
      const restoredCtx = ɵɵrestoreView(_r11);
      const item_r9 = restoredCtx.$implicit;
      const ctx_r10 = ɵɵnextContext(3);
      return ɵɵresetView(ctx_r10.onItemClick(item_r9));
    });
    ɵɵelement(1, "img", 11);
    ɵɵpipe(2, "tuiFlag");
    ɵɵelementStart(3, "span", 12);
    ɵɵtext(4);
    ɵɵelementEnd();
    ɵɵelementStart(5, "span", 13);
    ɵɵtext(6);
    ɵɵpipe(7, "tuiMapper");
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    const item_r9 = ctx.$implicit;
    const countriesNames_r1 = ɵɵnextContext(2).ngIf;
    const ctx_r8 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("src", ɵɵpipeBind1(2, 3, item_r9), ɵɵsanitizeUrl);
    ɵɵadvance(3);
    ɵɵtextInterpolate1(" ", countriesNames_r1[item_r9], " ");
    ɵɵadvance(2);
    ɵɵtextInterpolate1(" ", ɵɵpipeBind2(7, 5, item_r9, ctx_r8.isoToCountryCodeMapper), " ");
  }
}
function TuiInputPhoneInternationalComponent_tui_hosted_dropdown_0_ng_template_6_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "tui-data-list");
    ɵɵtemplate(1, TuiInputPhoneInternationalComponent_tui_hosted_dropdown_0_ng_template_6_button_1_Template, 8, 8, "button", 9);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r3 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r3.countries);
  }
}
function TuiInputPhoneInternationalComponent_tui_hosted_dropdown_0_ng_template_8_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "img", 14);
    ɵɵpipe(1, "tuiFlag");
  }
  if (rf & 2) {
    const countriesNames_r1 = ɵɵnextContext().ngIf;
    const ctx_r5 = ɵɵnextContext();
    ɵɵproperty("alt", countriesNames_r1[ctx_r5.countryIsoCode])("src", ɵɵpipeBind1(1, 2, ctx_r5.countryIsoCode), ɵɵsanitizeUrl);
  }
}
function TuiInputPhoneInternationalComponent_tui_hosted_dropdown_0_ng_template_10_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function TuiInputPhoneInternationalComponent_tui_hosted_dropdown_0_ng_template_10_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 15);
    ɵɵtemplate(1, TuiInputPhoneInternationalComponent_tui_hosted_dropdown_0_ng_template_10_ng_container_1_Template, 1, 0, "ng-container", 16);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r7 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("polymorpheusOutlet", ctx_r7.arrow);
  }
}
function TuiInputPhoneInternationalComponent_tui_hosted_dropdown_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r16 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "tui-hosted-dropdown", 1);
    ɵɵlistener("openChange", function TuiInputPhoneInternationalComponent_tui_hosted_dropdown_0_Template_tui_hosted_dropdown_openChange_0_listener($event) {
      ɵɵrestoreView(_r16);
      const ctx_r15 = ɵɵnextContext();
      return ɵɵresetView(ctx_r15.open = $event);
    })("tuiActiveZoneChange", function TuiInputPhoneInternationalComponent_tui_hosted_dropdown_0_Template_tui_hosted_dropdown_tuiActiveZoneChange_0_listener($event) {
      ɵɵrestoreView(_r16);
      const ctx_r17 = ɵɵnextContext();
      return ɵɵresetView(ctx_r17.onActiveZone($event));
    });
    ɵɵelementStart(1, "div", 2);
    ɵɵelement(2, "tui-primitive-textfield", 3);
    ɵɵelementStart(3, "tui-input-phone", 4);
    ɵɵlistener("ngModelChange", function TuiInputPhoneInternationalComponent_tui_hosted_dropdown_0_Template_tui_input_phone_ngModelChange_3_listener($event) {
      ɵɵrestoreView(_r16);
      const ctx_r18 = ɵɵnextContext();
      return ɵɵresetView(ctx_r18.value = $event);
    });
    ɵɵprojection(4);
    ɵɵelement(5, "input", 5);
    ɵɵelementEnd()();
    ɵɵtemplate(6, TuiInputPhoneInternationalComponent_tui_hosted_dropdown_0_ng_template_6_Template, 2, 1, "ng-template", null, 6, ɵɵtemplateRefExtractor);
    ɵɵtemplate(8, TuiInputPhoneInternationalComponent_tui_hosted_dropdown_0_ng_template_8_Template, 2, 4, "ng-template", null, 7, ɵɵtemplateRefExtractor);
    ɵɵtemplate(10, TuiInputPhoneInternationalComponent_tui_hosted_dropdown_0_ng_template_10_Template, 2, 1, "ng-template", null, 8, ɵɵtemplateRefExtractor);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const _r2 = ɵɵreference(7);
    const _r4 = ɵɵreference(9);
    const _r6 = ɵɵreference(11);
    const ctx_r0 = ɵɵnextContext();
    ɵɵproperty("canOpen", !ctx_r0.readOnly)("content", _r2)("open", ctx_r0.open);
    ɵɵadvance(2);
    ɵɵproperty("disabled", ctx_r0.disabled)("editable", false)("focusable", ctx_r0.focusable)("pseudoFocus", ctx_r0.open || null)("readOnly", ctx_r0.readOnly)("tuiTextfieldCustomContent", _r4)("tuiTextfieldIcon", _r6)("tuiTextfieldLabelOutside", true);
    ɵɵadvance(1);
    ɵɵproperty("countryCode", ctx_r0.inputPhoneCountryCode)("disabled", ctx_r0.disabled)("focusable", ctx_r0.focusable)("phoneMaskAfterCountryCode", ctx_r0.phoneMaskAfterCountryCode)("pseudoFocus", ctx_r0.pseudoFocus)("pseudoHover", ctx_r0.pseudoHover)("pseudoInvalid", ctx_r0.computedInvalid)("readOnly", ctx_r0.readOnly)("ngModel", ctx_r0.value);
  }
}
var _c031 = ["*"];
var TUI_INPUT_PHONE_INTERNATIONAL_DEFAULT_OPTIONS = {
  countries: [],
  countryIsoCode: TuiCountryIsoCode.RU
};
var TUI_INPUT_PHONE_INTERNATIONAL_OPTIONS = tuiCreateToken(TUI_INPUT_PHONE_INTERNATIONAL_DEFAULT_OPTIONS);
function tuiInputPhoneInternationalOptionsProvider(options) {
  return tuiProvideOptions(TUI_INPUT_PHONE_INTERNATIONAL_OPTIONS, options, TUI_INPUT_PHONE_INTERNATIONAL_DEFAULT_OPTIONS);
}
function tuiExtractValueFromEvent(event) {
  var _a;
  return "dataTransfer" in event ? ((_a = event.dataTransfer) === null || _a === void 0 ? void 0 : _a.getData("text/plain")) || "" : tuiGetClipboardDataText(event);
}
var TuiInputPhoneInternationalComponent = class extends AbstractTuiControl {
  constructor(control, cdr, countriesNames$, countriesMasks, options, flagPipe, extractCountryCodePipe, textfieldSize) {
    super(control, cdr);
    this.countriesNames$ = countriesNames$;
    this.countriesMasks = countriesMasks;
    this.options = options;
    this.flagPipe = flagPipe;
    this.extractCountryCodePipe = extractCountryCodePipe;
    this.textfieldSize = textfieldSize;
    this.countries = this.options.countries;
    this.countryIsoCodeChange = new EventEmitter();
    this.countryIsoCode = this.options.countryIsoCode;
    this.open = false;
    this.arrow = TUI_ARROW;
    this.isoToCountryCodeMapper = (item) => tuiIsoToCountryCode(this.countriesMasks, item);
  }
  set isoCode(code) {
    var _a;
    if (this.countryIsoCode === code) {
      return;
    }
    (_a = this.inputPhoneComponent) === null || _a === void 0 ? void 0 : _a.writeValue(this.value);
    this.countryIsoCode = code;
  }
  get size() {
    return this.textfieldSize.size;
  }
  get nativeFocusableElement() {
    return this.inputPhoneComponent && !this.computedDisabled ? this.inputPhoneComponent.nativeFocusableElement : null;
  }
  get focused() {
    return !!this.primitiveTextfield && this.primitiveTextfield.focused || !!this.inputPhoneComponent && this.inputPhoneComponent.focused;
  }
  get inputPhoneCountryCode() {
    return tuiIsoToCountryCode(this.countriesMasks, this.countryIsoCode);
  }
  get phoneMaskAfterCountryCode() {
    const countryCode = this.inputPhoneCountryCode;
    return this.calculateMaskAfterCountryCode(this.countriesMasks[this.countryIsoCode], countryCode);
  }
  /**
   * @deprecated use `<img [src]="countryIsoCode | tuiFlagPipe" />`
   * TODO drop in v4.0
   */
  get countryFlagPath() {
    return this.getFlagPath(this.countryIsoCode);
  }
  onPaste(event) {
    let value = tuiExtractValueFromEvent(event).replace(TUI_NON_DIGITS_REGEXP, "");
    const countryIsoCode = this.extractCountryCodePipe.transform(value, this.countries);
    if (!countryIsoCode) {
      this.value = `${this.inputPhoneCountryCode}${value}`.replace(TUI_MASK_SYMBOLS_REGEXP, "").slice(0, tuiGetMaxAllowedPhoneLength(this.countriesMasks, this.countryIsoCode));
      return;
    }
    if (countryIsoCode === TuiCountryIsoCode.RU) {
      value = value.replace(/^8/, "7");
    }
    this.updateCountryIsoCode(countryIsoCode);
    this.value = `${CHAR_PLUS}${value}`;
  }
  /**
   * @deprecated use `<img [src]="countryIsoCode | tuiFlagPipe" />`
   * TODO drop in v4.0
   */
  getFlagPath(code) {
    return this.flagPipe.transform(code);
  }
  onItemClick(isoCode) {
    this.open = false;
    this.updateCountryIsoCode(isoCode);
    this.cdr.detectChanges();
    const maxLength = tuiGetMaxAllowedPhoneLength(this.countriesMasks, isoCode);
    if (this.value.length > maxLength) {
      this.value = this.value.slice(0, maxLength);
    }
    if (this.nativeFocusableElement) {
      this.nativeFocusableElement.focus();
    }
  }
  setDisabledState() {
    super.setDisabledState();
    this.close();
  }
  /**
   * @deprecated use `{{ countryIsoCode | tuiIsoToCountryCode }}`
   * TODO drop in v4.0
   */
  isoToCountryCode(isoCode) {
    return tuiIsoToCountryCode(this.countriesMasks, isoCode);
  }
  /** @deprecated use 'value' setter */
  onModelChange(value) {
    this.value = value;
  }
  onActiveZone(active) {
    this.updateFocused(active);
  }
  getFallbackValue() {
    return "";
  }
  calculateMaskAfterCountryCode(mask, countryCode) {
    return mask.replace(countryCode, "").trim();
  }
  close() {
    this.open = false;
  }
  updateCountryIsoCode(code) {
    this.countryIsoCode = code;
    this.countryIsoCodeChange.emit(code);
  }
};
TuiInputPhoneInternationalComponent.ɵfac = function TuiInputPhoneInternationalComponent_Factory(t) {
  return new (t || TuiInputPhoneInternationalComponent)(ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(TUI_COUNTRIES), ɵɵdirectiveInject(TUI_COUNTRIES_MASKS), ɵɵdirectiveInject(TUI_INPUT_PHONE_INTERNATIONAL_OPTIONS), ɵɵdirectiveInject(TuiFlagPipe), ɵɵdirectiveInject(TuiToCountryCodePipe), ɵɵdirectiveInject(TUI_TEXTFIELD_SIZE));
};
TuiInputPhoneInternationalComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiInputPhoneInternationalComponent,
  selectors: [["tui-input-phone-international"]],
  viewQuery: function TuiInputPhoneInternationalComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(TuiInputPhoneComponent, 5);
      ɵɵviewQuery(TuiPrimitiveTextfieldComponent, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.inputPhoneComponent = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.primitiveTextfield = _t.first);
    }
  },
  hostVars: 1,
  hostBindings: function TuiInputPhoneInternationalComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("paste.capture.prevent.stop", function TuiInputPhoneInternationalComponent_paste_capture_prevent_stop_HostBindingHandler($event) {
        return ctx.onPaste($event);
      })("drop.capture.prevent.stop", function TuiInputPhoneInternationalComponent_drop_capture_prevent_stop_HostBindingHandler($event) {
        return ctx.onPaste($event);
      });
    }
    if (rf & 2) {
      ɵɵattribute("data-size", ctx.size);
    }
  },
  inputs: {
    isoCode: ["countryIsoCode", "isoCode"],
    countries: "countries"
  },
  outputs: {
    countryIsoCodeChange: "countryIsoCodeChange"
  },
  features: [ɵɵProvidersFeature([
    tuiAsFocusableItemAccessor(TuiInputPhoneInternationalComponent),
    tuiAsControl(TuiInputPhoneInternationalComponent),
    // TODO: for backward compatibility only. Drop in v4.0
    TuiFlagPipe,
    TuiToCountryCodePipe
  ], [FIXED_DROPDOWN_CONTROLLER_PROVIDER]), ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c031,
  decls: 2,
  vars: 3,
  consts: [["class", "t-hosted-dropdown", 3, "canOpen", "content", "open", "openChange", "tuiActiveZoneChange", 4, "ngIf"], [1, "t-hosted-dropdown", 3, "canOpen", "content", "open", "openChange", "tuiActiveZoneChange"], ["tuiGroup", ""], ["tuiHintContent", "", "tuiTextfieldPostfix", "", "tuiTextfieldPrefix", "", 1, "t-country-select", "tui-group__auto-width-item", 3, "disabled", "editable", "focusable", "pseudoFocus", "readOnly", "tuiTextfieldCustomContent", "tuiTextfieldIcon", "tuiTextfieldLabelOutside"], [1, "t-input-phone", "tui-group__auto-width-item", 3, "countryCode", "disabled", "focusable", "phoneMaskAfterCountryCode", "pseudoFocus", "pseudoHover", "pseudoInvalid", "readOnly", "ngModel", "ngModelChange"], ["autocomplete", "new-password", "tuiTextfield", ""], ["dropdown", ""], ["countryValueContent", ""], ["icon", ""], ["tuiOption", "", 3, "click", 4, "ngFor", "ngForOf"], ["tuiOption", "", 3, "click"], ["alt", "", 1, "t-country-item-flag", 3, "src"], [1, "t-country-item-name"], [1, "t-country-item-code"], [1, "t-flag", 3, "alt", "src"], ["appearance", "icon", "tuiWrapper", ""], [4, "polymorpheusOutlet"]],
  template: function TuiInputPhoneInternationalComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵtemplate(0, TuiInputPhoneInternationalComponent_tui_hosted_dropdown_0_Template, 12, 20, "tui-hosted-dropdown", 0);
      ɵɵpipe(1, "async");
    }
    if (rf & 2) {
      ɵɵproperty("ngIf", ɵɵpipeBind1(1, 1, ctx.countriesNames$));
    }
  },
  dependencies: [TuiHostedDropdownComponent, TuiPrimitiveTextfieldComponent, TuiInputPhoneComponent, TuiTextfieldComponent, TuiDataListComponent, TuiOptionComponent, NgIf, TuiActiveZoneDirective, TuiGroupDirective, TuiPrimitiveTextfieldDirective, TuiHintOptionsDirective, TuiTextfieldPostfixDirective, TuiTextfieldPrefixDirective, TuiTextfieldCustomContentDirective, TuiTextfieldIconDirective, TuiTextfieldLabelOutsideDirective, TuiInputPhoneDirective, NgControlStatus, NgModel, NgForOf, TuiWrapperDirective, PolymorpheusOutletDirective, AsyncPipe, TuiFlagPipe, TuiMapperPipe],
  styles: ["[_nghost-%COMP%]{display:block}._disabled[_nghost-%COMP%]{pointer-events:none}.t-hosted-dropdown[_ngcontent-%COMP%]{display:block}.t-country-select[_ngcontent-%COMP%]{width:5.625rem}.t-country-select[_ngcontent-%COMP%]:not(._readonly)     input:not(:disabled){cursor:pointer}.t-country-select._readonly[_ngcontent-%COMP%]     input{cursor:default}.t-country-select[data-size=m][_ngcontent-%COMP%]{width:5.5rem}.t-country-select[data-size=s][_ngcontent-%COMP%]{width:2rem}.t-country-select[data-size=s][_ngcontent-%COMP%]   .t-flag[_ngcontent-%COMP%]{margin-left:-1rem}.t-arrow-icon[_ngcontent-%COMP%]{position:relative;display:flex;width:1.5rem;height:1.5rem;align-items:center;justify-content:center;box-sizing:border-box;cursor:pointer;pointer-events:none;pointer-events:auto}._readonly[_nghost-%COMP%]   .t-arrow-icon[_ngcontent-%COMP%], ._disabled[_nghost-%COMP%]   .t-arrow-icon[_ngcontent-%COMP%]{pointer-events:none}.t-arrow-icon_open[_ngcontent-%COMP%]{transform:rotate(180deg)}.t-input-phone[_ngcontent-%COMP%]{flex:1}.t-flag[_ngcontent-%COMP%]{width:1.75rem;height:1.25rem;margin-left:-.5rem}.t-country-item-flag[_ngcontent-%COMP%]{width:1.75rem;height:1.25rem}.t-country-item-name[_ngcontent-%COMP%]{margin-left:.75rem;margin-right:auto}.t-country-item-code[_ngcontent-%COMP%]{color:var(--tui-text-02);margin-right:.25rem}"],
  changeDetection: 0
});
__decorate([tuiPure], TuiInputPhoneInternationalComponent.prototype, "calculateMaskAfterCountryCode", null);
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputPhoneInternationalComponent, [{
    type: Component,
    args: [{
      selector: "tui-input-phone-international",
      templateUrl: "./input-phone-international.template.html",
      styleUrls: ["./input-phone-international.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [
        tuiAsFocusableItemAccessor(TuiInputPhoneInternationalComponent),
        tuiAsControl(TuiInputPhoneInternationalComponent),
        // TODO: for backward compatibility only. Drop in v4.0
        TuiFlagPipe,
        TuiToCountryCodePipe
      ],
      viewProviders: [FIXED_DROPDOWN_CONTROLLER_PROVIDER]
    }]
  }], function() {
    return [{
      type: NgControl,
      decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NgControl]
      }]
    }, {
      type: ChangeDetectorRef,
      decorators: [{
        type: Inject,
        args: [ChangeDetectorRef]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Inject,
        args: [TUI_COUNTRIES]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_COUNTRIES_MASKS]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_INPUT_PHONE_INTERNATIONAL_OPTIONS]
      }]
    }, {
      type: TuiFlagPipe,
      decorators: [{
        type: Inject,
        args: [TuiFlagPipe]
      }]
    }, {
      type: TuiToCountryCodePipe,
      decorators: [{
        type: Inject,
        args: [TuiToCountryCodePipe]
      }]
    }, {
      type: TuiTextfieldSizeDirective,
      decorators: [{
        type: Inject,
        args: [TUI_TEXTFIELD_SIZE]
      }]
    }];
  }, {
    inputPhoneComponent: [{
      type: ViewChild,
      args: [TuiInputPhoneComponent]
    }],
    primitiveTextfield: [{
      type: ViewChild,
      args: [TuiPrimitiveTextfieldComponent]
    }],
    isoCode: [{
      type: Input,
      args: ["countryIsoCode"]
    }],
    countries: [{
      type: Input
    }],
    countryIsoCodeChange: [{
      type: Output
    }],
    size: [{
      type: HostBinding,
      args: ["attr.data-size"]
    }],
    onPaste: [{
      type: HostListener,
      args: ["paste.capture.prevent.stop", ["$event"]]
    }, {
      type: HostListener,
      args: ["drop.capture.prevent.stop", ["$event"]]
    }],
    calculateMaskAfterCountryCode: []
  });
})();
var TuiInputPhoneInternationalModule = class {
};
TuiInputPhoneInternationalModule.ɵfac = function TuiInputPhoneInternationalModule_Factory(t) {
  return new (t || TuiInputPhoneInternationalModule)();
};
TuiInputPhoneInternationalModule.ɵmod = ɵɵdefineNgModule({
  type: TuiInputPhoneInternationalModule,
  declarations: [TuiInputPhoneInternationalComponent],
  imports: [CommonModule, FormsModule, PolymorpheusModule, TuiSvgModule, TuiInputPhoneModule, TuiGroupModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiHintModule, TuiHostedDropdownModule, TuiDataListModule, TuiArrowModule, TuiWrapperModule, TuiLetModule, TuiMapperPipeModule, TuiActiveZoneModule, TuiFlagPipeModule],
  exports: [TuiInputPhoneInternationalComponent]
});
TuiInputPhoneInternationalModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, FormsModule, PolymorpheusModule, TuiSvgModule, TuiInputPhoneModule, TuiGroupModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiHintModule, TuiHostedDropdownModule, TuiDataListModule, TuiArrowModule, TuiWrapperModule, TuiLetModule, TuiMapperPipeModule, TuiActiveZoneModule, TuiFlagPipeModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputPhoneInternationalModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, FormsModule, PolymorpheusModule, TuiSvgModule, TuiInputPhoneModule, TuiGroupModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiHintModule, TuiHostedDropdownModule, TuiDataListModule, TuiArrowModule, TuiWrapperModule, TuiLetModule, TuiMapperPipeModule, TuiActiveZoneModule, TuiFlagPipeModule],
      declarations: [TuiInputPhoneInternationalComponent],
      exports: [TuiInputPhoneInternationalComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-slider.js
var _c032 = ["type", "range", "tuiSlider", ""];
var _c123 = ["tuiSliderThumbLabel", ""];
function TuiSliderThumbLabelComponent_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
var _c214 = ["*", [["input", "type", "range"]]];
var _c36 = ["*", "input[type=range]"];
var TUI_SLIDER_DEFAULT_OPTIONS = {
  size: "m",
  trackColor: "var(--tui-base-03)"
};
var TUI_SLIDER_OPTIONS = tuiCreateToken(TUI_SLIDER_DEFAULT_OPTIONS);
function tuiSliderOptionsProvider(options) {
  return tuiProvideOptions(TUI_SLIDER_OPTIONS, options, TUI_SLIDER_DEFAULT_OPTIONS);
}
var TuiSliderComponent = class {
  constructor(control, cdr, options, el, userAgent, injector) {
    var _a;
    this.control = control;
    this.options = options;
    this.el = el;
    this.userAgent = userAgent;
    this.injector = injector;
    this.size = this.options.size;
    this.segments = 1;
    if (control instanceof NgModel) {
      (_a = control.valueChanges) === null || _a === void 0 ? void 0 : _a.pipe(tuiWatch(cdr), take(1)).subscribe();
    }
  }
  get min() {
    return Number(this.el.nativeElement.min);
  }
  get max() {
    return Number(this.el.nativeElement.max || 100);
  }
  get step() {
    return Number(this.el.nativeElement.step) || 1;
  }
  get value() {
    const {
      el,
      control,
      hasKeySteps
    } = this;
    if (!hasKeySteps && control instanceof NgModel) {
      return control.viewModel;
    }
    return Number(el.nativeElement.value) || 0;
  }
  set value(newValue) {
    this.el.nativeElement.value = `${newValue}`;
  }
  get valueRatio() {
    return (this.value - this.min) / (this.max - this.min) || 0;
  }
  get valuePercentage() {
    return 100 * this.valueRatio;
  }
  get segmentWidth() {
    return 100 / Math.max(1, this.segments);
  }
  // TODO: drop support of legacy Edge (EdgeHTML) in v4.x
  get isOldEdge() {
    return tuiIsEdgeOlderThan(CHROMIUM_EDGE_START_VERSION, this.userAgent);
  }
  get hasKeySteps() {
    return Boolean(this.injector.get(TuiSliderKeyStepsDirective, null));
  }
};
TuiSliderComponent.ɵfac = function TuiSliderComponent_Factory(t) {
  return new (t || TuiSliderComponent)(ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(TUI_SLIDER_OPTIONS), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(USER_AGENT), ɵɵdirectiveInject(Injector));
};
TuiSliderComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiSliderComponent,
  selectors: [["input", "type", "range", "tuiSlider", ""]],
  hostVars: 11,
  hostBindings: function TuiSliderComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("input", function TuiSliderComponent_input_HostBindingHandler() {
        return 0;
      });
    }
    if (rf & 2) {
      ɵɵattribute("data-size", ctx.size);
      ɵɵstyleProp("--tui-slider-track-color", ctx.options.trackColor)("--tui-slider-fill-ratio", ctx.valueRatio)("--tui-slider-fill-percentage", ctx.valuePercentage, "%")("--tui-slider-segment-width", ctx.segmentWidth, "%");
      ɵɵclassProp("_old-edge", ctx.isOldEdge);
    }
  },
  inputs: {
    size: "size",
    segments: "segments"
  },
  attrs: _c032,
  decls: 0,
  vars: 0,
  template: function TuiSliderComponent_Template(rf, ctx) {
  },
  styles: ['[_nghost-%COMP%]{position:relative;display:block;width:100%;color:var(--tui-primary);cursor:pointer}[_nghost-%COMP%]:active{cursor:ew-resize}[_nghost-%COMP%]:disabled{opacity:var(--tui-disabled-opacity);cursor:auto}[data-size=s][_nghost-%COMP%]:not(:disabled):before{transition-property:transform,opacity;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;position:absolute;top:.25rem;left:calc(var(--tui-slider-fill-percentage) - var(--tui-slider-fill-ratio) * .5rem);width:.5rem;height:.5rem;border-radius:50%;transform:var(--tui-slider-thumb-transform, scale(1));content:"";cursor:ew-resize;background:currentColor;opacity:0}[data-size=s][_nghost-%COMP%]:active:before{opacity:.2;transform:var(--tui-slider-thumb-transform, scale(1)) scale(2.33)}[data-size=m][_nghost-%COMP%]:not(:disabled):before{transition-property:transform,opacity;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;position:absolute;top:.125rem;left:calc(var(--tui-slider-fill-percentage) - var(--tui-slider-fill-ratio) * .75rem);width:.75rem;height:.75rem;border-radius:50%;transform:var(--tui-slider-thumb-transform, scale(1));content:"";cursor:ew-resize;background:currentColor;opacity:0}[data-size=m][_nghost-%COMP%]:active:before{opacity:.2;transform:var(--tui-slider-thumb-transform, scale(1)) scale(2.33)}[_nghost-%COMP%]:not(._old-edge){-webkit-appearance:none;-moz-appearance:none;appearance:none;height:.125rem;padding:.4375rem 0;background-color:transparent;background-clip:content-box;outline:none;border-radius:var(--tui-radius-m)}[_nghost-%COMP%]:not(._old-edge)::-webkit-slider-container{border-radius:inherit}[_nghost-%COMP%]:not(._old-edge)[data-size=m]::-webkit-slider-runnable-track{height:.125rem;border-radius:inherit;background-repeat:no-repeat;background-color:var(--tui-slider-track-color);background-image:linear-gradient(to right,currentColor 0px .5rem,transparent .25rem),repeating-linear-gradient(to right,var(--tui-base-06) 0 .25rem,transparent 0 var(--tui-slider-segment-width)),linear-gradient(to right,currentColor var(--tui-slider-fill-percentage),transparent var(--tui-slider-fill-percentage));background-position-x:0,.25rem,0;background-size:calc(100% - .75rem),calc(100% - .75rem),auto}[_nghost-%COMP%]:not(._old-edge)[data-size=s]::-webkit-slider-runnable-track{height:.125rem;border-radius:inherit;background-repeat:no-repeat;background-color:var(--tui-slider-track-color);background-image:linear-gradient(to right,currentColor 0px .375rem,transparent .25rem),repeating-linear-gradient(to right,var(--tui-base-06) 0 .25rem,transparent 0 var(--tui-slider-segment-width)),linear-gradient(to right,currentColor var(--tui-slider-fill-percentage),transparent var(--tui-slider-fill-percentage));background-position-x:0,.125rem,0;background-size:calc(100% - .5rem),calc(100% - .5rem),auto}[_nghost-%COMP%]:not(._old-edge)[data-size=m]::-moz-range-track{height:.125rem;border-radius:inherit;background-repeat:no-repeat;background-color:var(--tui-slider-track-color);background-image:linear-gradient(to right,currentColor 0px .5rem,transparent .25rem),repeating-linear-gradient(to right,var(--tui-base-06) 0 .25rem,transparent 0 var(--tui-slider-segment-width));background-position-x:0,.25rem;background-size:calc(100% - .75rem)}[_nghost-%COMP%]:not(._old-edge)[data-size=s]::-moz-range-track{height:.125rem;border-radius:inherit;background-repeat:no-repeat;background-color:var(--tui-slider-track-color);background-image:linear-gradient(to right,currentColor 0px .375rem,transparent .25rem),repeating-linear-gradient(to right,var(--tui-base-06) 0 .25rem,transparent 0 var(--tui-slider-segment-width));background-position-x:0,.125rem;background-size:calc(100% - .5rem)}[_nghost-%COMP%]:not(._old-edge)[data-size=m]::-webkit-slider-thumb{-webkit-transition-property:transform;transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;isolation:isolate;-webkit-appearance:none;appearance:none;background-color:currentColor;box-shadow:none;border-radius:50%;height:.75rem;width:.75rem;box-sizing:content-box;background-clip:content-box;border:.125rem solid transparent;border-left:0;border-right:0;transform:var(--tui-slider-thumb-transform, scale(1));margin-top:-.4375rem}:not(:disabled)[_nghost-%COMP%]:not(._old-edge)[data-size=m]::-webkit-slider-thumb{cursor:ew-resize}:not(:disabled)[_nghost-%COMP%]:not(._old-edge)[data-size=m]::-webkit-slider-thumb:hover{background-color:var(--tui-primary-hover)}:active:not(:disabled)[_nghost-%COMP%]:not(._old-edge)[data-size=m]::-webkit-slider-thumb{background-color:var(--tui-primary-active)}:not(:disabled)[_nghost-%COMP%]:not(._old-edge)[data-size=m]::-webkit-slider-thumb:hover, :active:not(:disabled)[_nghost-%COMP%]:not(._old-edge)[data-size=m]::-webkit-slider-thumb{transform:var(--tui-slider-thumb-transform, scale(1)) scale(1.333)}:focus-visible[_nghost-%COMP%]:not(._old-edge)[data-size=m]::-webkit-slider-thumb{box-shadow:0 0 0 2px inset var(--tui-focus)}[_nghost-%COMP%]:not(._old-edge)[data-size=s]::-webkit-slider-thumb{-webkit-transition-property:transform;transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;isolation:isolate;-webkit-appearance:none;appearance:none;background-color:currentColor;box-shadow:none;border-radius:50%;height:.5rem;width:.5rem;box-sizing:content-box;background-clip:content-box;border:.25rem solid transparent;border-left:0;border-right:0;transform:var(--tui-slider-thumb-transform, scale(1));margin-top:-.4375rem}:not(:disabled)[_nghost-%COMP%]:not(._old-edge)[data-size=s]::-webkit-slider-thumb{cursor:ew-resize}:not(:disabled)[_nghost-%COMP%]:not(._old-edge)[data-size=s]::-webkit-slider-thumb:hover{background-color:var(--tui-primary-hover)}:active:not(:disabled)[_nghost-%COMP%]:not(._old-edge)[data-size=s]::-webkit-slider-thumb{background-color:var(--tui-primary-active)}:not(:disabled)[_nghost-%COMP%]:not(._old-edge)[data-size=s]::-webkit-slider-thumb:hover, :active:not(:disabled)[_nghost-%COMP%]:not(._old-edge)[data-size=s]::-webkit-slider-thumb{transform:var(--tui-slider-thumb-transform, scale(1)) scale(1.5)}:focus-visible[_nghost-%COMP%]:not(._old-edge)[data-size=s]::-webkit-slider-thumb{box-shadow:0 0 0 2px inset var(--tui-focus)}[_nghost-%COMP%]:not(._old-edge)[data-size=m]::-moz-range-thumb{-moz-transition-property:transform;transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;isolation:isolate;-moz-appearance:none;appearance:none;background-color:currentColor;box-shadow:none;border-radius:50%;height:.75rem;width:.75rem;box-sizing:content-box;background-clip:content-box;border:.125rem solid transparent;border-left:0;border-right:0;transform:var(--tui-slider-thumb-transform, scale(1))}:not(:disabled)[_nghost-%COMP%]:not(._old-edge)[data-size=m]::-moz-range-thumb{cursor:ew-resize}:not(:disabled)[_nghost-%COMP%]:not(._old-edge)[data-size=m]::-moz-range-thumb:hover{background-color:var(--tui-primary-hover)}:active:not(:disabled)[_nghost-%COMP%]:not(._old-edge)[data-size=m]::-moz-range-thumb{background-color:var(--tui-primary-active)}:not(:disabled)[_nghost-%COMP%]:not(._old-edge)[data-size=m]::-moz-range-thumb:hover, :active:not(:disabled)[_nghost-%COMP%]:not(._old-edge)[data-size=m]::-moz-range-thumb{transform:var(--tui-slider-thumb-transform, scale(1)) scale(1.333)}:focus-visible[_nghost-%COMP%]:not(._old-edge)[data-size=m]::-moz-range-thumb{box-shadow:0 0 0 2px inset var(--tui-focus)}[_nghost-%COMP%]:not(._old-edge)[data-size=s]::-moz-range-thumb{-moz-transition-property:transform;transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;isolation:isolate;-moz-appearance:none;appearance:none;background-color:currentColor;box-shadow:none;border-radius:50%;height:.5rem;width:.5rem;box-sizing:content-box;background-clip:content-box;border:.25rem solid transparent;border-left:0;border-right:0;transform:var(--tui-slider-thumb-transform, scale(1))}:not(:disabled)[_nghost-%COMP%]:not(._old-edge)[data-size=s]::-moz-range-thumb{cursor:ew-resize}:not(:disabled)[_nghost-%COMP%]:not(._old-edge)[data-size=s]::-moz-range-thumb:hover{background-color:var(--tui-primary-hover)}:active:not(:disabled)[_nghost-%COMP%]:not(._old-edge)[data-size=s]::-moz-range-thumb{background-color:var(--tui-primary-active)}:not(:disabled)[_nghost-%COMP%]:not(._old-edge)[data-size=s]::-moz-range-thumb:hover, :active:not(:disabled)[_nghost-%COMP%]:not(._old-edge)[data-size=s]::-moz-range-thumb{transform:var(--tui-slider-thumb-transform, scale(1)) scale(1.5)}:focus-visible[_nghost-%COMP%]:not(._old-edge)[data-size=s]::-moz-range-thumb{box-shadow:0 0 0 2px inset var(--tui-focus)}[_nghost-%COMP%]:not(._old-edge)::-moz-range-progress{border-radius:inherit}[_nghost-%COMP%]:not(._old-edge)::-moz-range-progress{height:.125rem;background:currentColor;border-top-right-radius:0;border-bottom-right-radius:0}._old-edge[_nghost-%COMP%]::-ms-thumb{background:currentColor;border-radius:50%}._old-edge[_nghost-%COMP%]::-ms-fill-lower{background:currentColor}._old-edge[_nghost-%COMP%]::-ms-track{background:var(--tui-slider-track-color);border:none}'],
  changeDetection: 0
});
__decorate([tuiPure], TuiSliderComponent.prototype, "hasKeySteps", null);
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiSliderComponent, [{
    type: Component,
    args: [{
      /**
       * We have to call our component as `<input tuiSlider type="range" ... />`
       * because otherwise built-in angular
       * {@link https://github.com/angular/angular/blob/master/packages/forms/src/directives/range_value_accessor.ts#L45 RangeValueAccessor}
       * cannot be matched by its CSS selector.
       */
      selector: "input[type=range][tuiSlider]",
      template: "",
      styleUrls: ["./slider.style.less"],
      host: {
        /**
         * For change detection.
         * Webkit does not have built-in method for customization of filling progress (as Firefox).
         * We draw filling of progress by `background: linear-gradient(...)` of the track.
         * This function triggers change detection (for {@link valuePercentage} function) when we drag thumb of the input.
         */
        "(input)": "0",
        "[style.--tui-slider-track-color]": "options.trackColor"
      },
      changeDetection: ChangeDetectionStrategy.OnPush
    }]
  }], function() {
    return [{
      type: NgControl,
      decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NgControl]
      }]
    }, {
      type: ChangeDetectorRef,
      decorators: [{
        type: Inject,
        args: [ChangeDetectorRef]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_SLIDER_OPTIONS]
      }]
    }, {
      type: ElementRef,
      decorators: [{
        type: Inject,
        args: [ElementRef]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [USER_AGENT]
      }]
    }, {
      type: Injector,
      decorators: [{
        type: Inject,
        args: [Injector]
      }]
    }];
  }, {
    size: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["attr.data-size"]
    }],
    segments: [{
      type: Input
    }],
    valueRatio: [{
      type: HostBinding,
      args: ["style.--tui-slider-fill-ratio"]
    }],
    valuePercentage: [{
      type: HostBinding,
      args: ["style.--tui-slider-fill-percentage.%"]
    }],
    segmentWidth: [{
      type: HostBinding,
      args: ["style.--tui-slider-segment-width.%"]
    }],
    isOldEdge: [{
      type: HostBinding,
      args: ["class._old-edge"]
    }],
    hasKeySteps: []
  });
})();
var TuiSliderKeyStepsDirective = class extends AbstractTuiControl {
  constructor(control, cdr, el, slider) {
    super(control, cdr);
    this.el = el;
    this.slider = slider;
  }
  get nativeFocusableElement() {
    return this.computedDisabled ? null : this.el.nativeElement;
  }
  get focused() {
    return tuiIsNativeFocused(this.nativeFocusableElement);
  }
  get min() {
    return this.keySteps[0][1];
  }
  get max() {
    return this.keySteps[this.keySteps.length - 1][1];
  }
  updateControlValue() {
    this.value = tuiPercentageToKeyStepValue(this.slider.valuePercentage, this.keySteps);
  }
  writeValue(controlValue) {
    if (controlValue === null) {
      return;
    }
    const clampedControlValue = tuiClamp(controlValue, this.min, this.max);
    ngDevMode && tuiAssert.assert(controlValue === clampedControlValue, "\n[SliderKeySteps]: You cannot programmatically set value which is less/more than min/max");
    this.slider.value = this.transformToNativeValue(clampedControlValue);
  }
  getFallbackValue() {
    return 0;
  }
  transformToNativeValue(controlValue) {
    const {
      min,
      max
    } = this.slider;
    const newValuePercentage = tuiKeyStepValueToPercentage(controlValue, this.keySteps);
    return newValuePercentage * (max - min) / 100 + min;
  }
};
TuiSliderKeyStepsDirective.ɵfac = function TuiSliderKeyStepsDirective_Factory(t) {
  return new (t || TuiSliderKeyStepsDirective)(ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(forwardRef(() => TuiSliderComponent)));
};
TuiSliderKeyStepsDirective.ɵdir = ɵɵdefineDirective({
  type: TuiSliderKeyStepsDirective,
  selectors: [["input", "tuiSlider", "", "keySteps", ""]],
  hostVars: 4,
  hostBindings: function TuiSliderKeyStepsDirective_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("input", function TuiSliderKeyStepsDirective_input_HostBindingHandler() {
        return ctx.updateControlValue();
      })("change", function TuiSliderKeyStepsDirective_change_HostBindingHandler() {
        return ctx.updateControlValue();
      });
    }
    if (rf & 2) {
      ɵɵhostProperty("disabled", ctx.computedDisabled);
      ɵɵattribute("aria-valuenow", ctx.safeCurrentValue)("aria-valuemin", ctx.min)("aria-valuemax", ctx.max);
    }
  },
  inputs: {
    keySteps: "keySteps"
  },
  features: [ɵɵInheritDefinitionFeature]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiSliderKeyStepsDirective, [{
    type: Directive,
    args: [{
      selector: "input[tuiSlider][keySteps]",
      host: {
        "[attr.aria-valuenow]": "safeCurrentValue",
        "[attr.aria-valuemin]": "min",
        "[attr.aria-valuemax]": "max",
        "[disabled]": "computedDisabled"
      }
    }]
  }], function() {
    return [{
      type: NgControl,
      decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NgControl]
      }]
    }, {
      type: ChangeDetectorRef,
      decorators: [{
        type: Inject,
        args: [ChangeDetectorRef]
      }]
    }, {
      type: ElementRef,
      decorators: [{
        type: Inject,
        args: [ElementRef]
      }]
    }, {
      type: TuiSliderComponent,
      decorators: [{
        type: Inject,
        args: [forwardRef(() => TuiSliderComponent)]
      }]
    }];
  }, {
    keySteps: [{
      type: Input
    }],
    updateControlValue: [{
      type: HostListener,
      args: ["input"]
    }, {
      type: HostListener,
      args: ["change"]
    }]
  });
})();
var SLIDER_INTERACTION_KEYS = /* @__PURE__ */ new Set(["ArrowLeft", "ArrowRight", "ArrowUp", "ArrowDown", "Home", "End", "PageUp", "PageDown"]);
var TuiSliderReadonlyDirective = class {
  constructor(el, doc, destroy$) {
    this.readonly = true;
    const touchStart$ = tuiTypedFromEvent(el.nativeElement, "touchstart", {
      passive: false
    });
    const touchMove$ = tuiTypedFromEvent(doc, "touchmove", {
      passive: false
    });
    const touchEnd$ = tuiTypedFromEvent(doc, "touchend", {
      passive: true
    });
    const shouldPreventMove$ = merge(touchStart$.pipe(tap((e) => this.preventEvent(e)), map(ALWAYS_TRUE_HANDLER)), touchEnd$.pipe(map(ALWAYS_FALSE_HANDLER)));
    combineLatest([touchMove$, shouldPreventMove$]).pipe(filter(([_, shouldPreventMove]) => shouldPreventMove), takeUntil(destroy$)).subscribe(([moveEvent]) => this.preventEvent(moveEvent));
  }
  preventEvent(event) {
    if (event.cancelable && tuiCoerceBooleanProperty(this.readonly)) {
      event.preventDefault();
    }
  }
  preventKeyboardInteraction(event) {
    if (SLIDER_INTERACTION_KEYS.has(event.key)) {
      this.preventEvent(event);
    }
  }
};
TuiSliderReadonlyDirective.ɵfac = function TuiSliderReadonlyDirective_Factory(t) {
  return new (t || TuiSliderReadonlyDirective)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(DOCUMENT), ɵɵdirectiveInject(TuiDestroyService, 2));
};
TuiSliderReadonlyDirective.ɵdir = ɵɵdefineDirective({
  type: TuiSliderReadonlyDirective,
  selectors: [["input", "tuiSlider", "", "readonly", ""]],
  hostBindings: function TuiSliderReadonlyDirective_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("mousedown", function TuiSliderReadonlyDirective_mousedown_HostBindingHandler($event) {
        return ctx.preventEvent($event);
      })("keydown", function TuiSliderReadonlyDirective_keydown_HostBindingHandler($event) {
        return ctx.preventKeyboardInteraction($event);
      });
    }
  },
  inputs: {
    readonly: "readonly"
  },
  features: [ɵɵProvidersFeature([TuiDestroyService])]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiSliderReadonlyDirective, [{
    type: Directive,
    args: [{
      selector: "input[tuiSlider][readonly]",
      providers: [TuiDestroyService]
    }]
  }], function() {
    return [{
      type: ElementRef,
      decorators: [{
        type: Inject,
        args: [ElementRef]
      }]
    }, {
      type: Document,
      decorators: [{
        type: Inject,
        args: [DOCUMENT]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Self
      }, {
        type: Inject,
        args: [TuiDestroyService]
      }]
    }];
  }, {
    readonly: [{
      type: Input
    }],
    preventEvent: [{
      type: HostListener,
      args: ["mousedown", ["$event"]]
    }],
    preventKeyboardInteraction: [{
      type: HostListener,
      args: ["keydown", ["$event"]]
    }]
  });
})();
var TuiSliderThumbLabelComponent = class {
  get size() {
    var _a;
    return ((_a = this.slider) === null || _a === void 0 ? void 0 : _a.size) || "m";
  }
  get ratio() {
    var _a;
    return ((_a = this.slider) === null || _a === void 0 ? void 0 : _a.valueRatio) || 0;
  }
  get ghostLeft() {
    var _a;
    return this.ratio * (((_a = this.slider) === null || _a === void 0 ? void 0 : _a.el.nativeElement.offsetWidth) || 0);
  }
  ngAfterContentInit() {
    var _a;
    ngDevMode && tuiAssert.assert(Boolean((_a = this.control) === null || _a === void 0 ? void 0 : _a.valueChanges), '\n[tuiSliderThumbLabel] expected <input tuiSlider type="range" /> to use Angular Forms.\nUse [(ngModel)] or [formControl] or formControlName for correct work.');
  }
};
TuiSliderThumbLabelComponent.ɵfac = function TuiSliderThumbLabelComponent_Factory(t) {
  return new (t || TuiSliderThumbLabelComponent)();
};
TuiSliderThumbLabelComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiSliderThumbLabelComponent,
  selectors: [["", "tuiSliderThumbLabel", ""]],
  contentQueries: function TuiSliderThumbLabelComponent_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, TuiSliderComponent, 5);
      ɵɵcontentQuery(dirIndex, NgControl, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.slider = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.control = _t.first);
    }
  },
  attrs: _c123,
  ngContentSelectors: _c36,
  decls: 5,
  vars: 8,
  consts: [[4, "ngIf"], [1, "t-ghost"]],
  template: function TuiSliderThumbLabelComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c214);
      ɵɵtemplate(0, TuiSliderThumbLabelComponent_ng_container_0_Template, 1, 0, "ng-container", 0);
      ɵɵpipe(1, "async");
      ɵɵelementStart(2, "div", 1);
      ɵɵprojection(3);
      ɵɵelementEnd();
      ɵɵprojection(4, 1);
    }
    if (rf & 2) {
      ɵɵproperty("ngIf", ɵɵpipeBind1(1, 6, ctx.control == null ? null : ctx.control.valueChanges));
      ɵɵadvance(2);
      ɵɵstyleProp("--tui-slider-thumb-ratio", ctx.ratio)("left", ctx.ghostLeft, "px");
      ɵɵattribute("data-size", ctx.size);
    }
  },
  dependencies: [NgIf, AsyncPipe],
  styles: ["[_nghost-%COMP%]{position:relative}.t-ghost[_ngcontent-%COMP%]{position:absolute;top:0;bottom:0;margin:auto;border-radius:50%;pointer-events:none}.t-ghost[data-size=s][_ngcontent-%COMP%]{width:.5rem;height:.5rem;transform:translate(calc(var(--tui-slider-thumb-ratio) * -.5rem))}.t-ghost[data-size=m][_ngcontent-%COMP%]{width:.75rem;height:.75rem;transform:translate(calc(var(--tui-slider-thumb-ratio) * -.75rem))}"],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiSliderThumbLabelComponent, [{
    type: Component,
    args: [{
      selector: "[tuiSliderThumbLabel]",
      templateUrl: "./slider-thumb-label.template.html",
      styleUrls: ["./slider-thumb-label.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush
    }]
  }], null, {
    slider: [{
      type: ContentChild,
      args: [TuiSliderComponent]
    }],
    control: [{
      type: ContentChild,
      args: [NgControl]
    }]
  });
})();
var TuiSliderModule = class {
};
TuiSliderModule.ɵfac = function TuiSliderModule_Factory(t) {
  return new (t || TuiSliderModule)();
};
TuiSliderModule.ɵmod = ɵɵdefineNgModule({
  type: TuiSliderModule,
  declarations: [TuiSliderComponent, TuiSliderThumbLabelComponent, TuiSliderKeyStepsDirective, TuiSliderReadonlyDirective],
  imports: [CommonModule],
  exports: [TuiSliderComponent, TuiSliderThumbLabelComponent, TuiSliderKeyStepsDirective, TuiSliderReadonlyDirective]
});
TuiSliderModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiSliderModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule],
      declarations: [TuiSliderComponent, TuiSliderThumbLabelComponent, TuiSliderKeyStepsDirective, TuiSliderReadonlyDirective],
      exports: [TuiSliderComponent, TuiSliderThumbLabelComponent, TuiSliderKeyStepsDirective, TuiSliderReadonlyDirective]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-range.js
var TuiRangeComponent = class extends AbstractTuiControl {
  constructor(control, cdr, el) {
    super(control, cdr);
    this.el = el;
    this.min = 0;
    this.max = 100;
    this.step = 1;
    this.size = "m";
    this.segments = 1;
    this.keySteps = null;
    this.slidersRefs = EMPTY_QUERY;
    this.lastActiveThumb = "right";
  }
  get nativeFocusableElement() {
    const [sliderLeftRef, sliderRightRef] = this.slidersRefs;
    if (this.computedDisabled || !this.focusable || !sliderLeftRef || !sliderRightRef) {
      return null;
    }
    const isLeftThumbLocked = this.right === 100;
    return isLeftThumbLocked ? sliderRightRef.nativeElement : sliderLeftRef.nativeElement;
  }
  get focused() {
    return tuiIsNativeFocusedIn(this.el.nativeElement);
  }
  get fractionStep() {
    return this.step / (this.max - this.min);
  }
  get computedKeySteps() {
    return this.computePureKeySteps(this.keySteps, this.min, this.max);
  }
  get segmentWidthRatio() {
    return 1 / this.segments;
  }
  get left() {
    return this.getPercentageFromValue(this.value[0]);
  }
  get right() {
    return 100 - this.getPercentageFromValue(this.value[1]);
  }
  onFocused(focused) {
    this.updateFocused(focused);
  }
  changeByStep(coefficient, target) {
    const [sliderLeftRef, sliderRightRef] = this.slidersRefs;
    const leftThumbElement = sliderLeftRef.nativeElement;
    const rightThumbElement = sliderRightRef.nativeElement;
    const isRightThumb = target === this.el.nativeElement ? this.lastActiveThumb === "right" : target === rightThumbElement;
    const activeThumbElement = isRightThumb ? rightThumbElement : leftThumbElement;
    const previousValue = isRightThumb ? this.value[1] : this.value[0];
    const previousFraction = this.getPercentageFromValue(previousValue) / 100;
    const newFractionValue = previousFraction + coefficient * this.fractionStep;
    this.processValue(this.getValueFromFraction(newFractionValue), isRightThumb);
    if (activeThumbElement) {
      activeThumbElement.focus();
    }
  }
  processValue(value, right) {
    if (right) {
      this.updateEnd(value);
    } else {
      this.updateStart(value);
    }
    this.lastActiveThumb = right ? "right" : "left";
  }
  getValueFromFraction(fraction) {
    const guardedFraction = tuiClamp(tuiQuantize(fraction, this.fractionStep), 0, 1);
    return tuiPercentageToKeyStepValue(guardedFraction * 100, this.computedKeySteps);
  }
  getPercentageFromValue(value) {
    return tuiKeyStepValueToPercentage(value, this.computedKeySteps);
  }
  getFallbackValue() {
    return [0, 0];
  }
  computePureKeySteps(keySteps, min, max) {
    return keySteps || [[0, min], [100, max]];
  }
  updateStart(value) {
    this.value = [Math.min(value, this.value[1]), this.value[1]];
  }
  updateEnd(value) {
    this.value = [this.value[0], Math.max(value, this.value[0])];
  }
};
TuiRangeComponent.ɵfac = function TuiRangeComponent_Factory(t) {
  return new (t || TuiRangeComponent)(ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(ElementRef));
};
TuiRangeComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiRangeComponent,
  selectors: [["tui-range"]],
  viewQuery: function TuiRangeComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(TuiSliderComponent, 5, ElementRef);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.slidersRefs = _t);
    }
  },
  hostVars: 7,
  hostBindings: function TuiRangeComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("focusin", function TuiRangeComponent_focusin_HostBindingHandler() {
        return ctx.onFocused(true);
      })("focusout", function TuiRangeComponent_focusout_HostBindingHandler() {
        return ctx.onFocused(false);
      })("keydown.arrowUp.prevent", function TuiRangeComponent_keydown_arrowUp_prevent_HostBindingHandler($event) {
        return ctx.changeByStep(1, $event.target);
      })("keydown.arrowRight.prevent", function TuiRangeComponent_keydown_arrowRight_prevent_HostBindingHandler($event) {
        return ctx.changeByStep(1, $event.target);
      })("keydown.arrowLeft.prevent", function TuiRangeComponent_keydown_arrowLeft_prevent_HostBindingHandler($event) {
        return ctx.changeByStep(-1, $event.target);
      })("keydown.arrowDown.prevent", function TuiRangeComponent_keydown_arrowDown_prevent_HostBindingHandler($event) {
        return ctx.changeByStep(-1, $event.target);
      });
    }
    if (rf & 2) {
      ɵɵattribute("tabindex", -1)("aria-disabled", ctx.computedDisabled)("data-size", ctx.size);
      ɵɵstyleProp("--left", ctx.left, "%")("--right", ctx.right, "%");
    }
  },
  inputs: {
    min: "min",
    max: "max",
    step: "step",
    size: "size",
    segments: "segments",
    keySteps: "keySteps"
  },
  features: [ɵɵInheritDefinitionFeature],
  decls: 3,
  vars: 18,
  consts: [[1, "t-track"], ["automation-id", "tui-range__left", "readonly", "", "step", "any", "tuiSlider", "", "type", "range", 1, "t-thumb", 3, "disabled", "keySteps", "max", "min", "ngModel", "size", "tuiFocusable"], ["automation-id", "tui-range__right", "readonly", "", "step", "any", "tuiSlider", "", "type", "range", 1, "t-thumb", 3, "disabled", "keySteps", "max", "min", "ngModel", "size", "tuiFocusable"]],
  template: function TuiRangeComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵelementStart(0, "div", 0);
      ɵɵelement(1, "input", 1)(2, "input", 2);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      ɵɵstyleProp("--bg-size-ratio", 1 - ctx.segmentWidthRatio)("--segment-width", ctx.segmentWidthRatio * 100, "%");
      ɵɵadvance(1);
      ɵɵproperty("disabled", ctx.computedDisabled)("keySteps", ctx.computedKeySteps)("max", ctx.max)("min", ctx.min)("ngModel", ctx.value[0])("size", ctx.size)("tuiFocusable", ctx.focusable);
      ɵɵadvance(1);
      ɵɵproperty("disabled", ctx.computedDisabled)("keySteps", ctx.computedKeySteps)("max", ctx.max)("min", ctx.min)("ngModel", ctx.value[1])("size", ctx.size)("tuiFocusable", ctx.focusable);
    }
  },
  dependencies: [TuiSliderComponent, TuiSliderReadonlyDirective, TuiSliderKeyStepsDirective, RangeValueAccessor, DefaultValueAccessor, NgControlStatus, NgModel, TuiFocusableDirective],
  styles: ['[_nghost-%COMP%]{position:relative;display:block;height:.125rem;border-radius:var(--tui-radius-m);background:var(--tui-base-03);cursor:pointer;outline:none;margin:.4375rem 0;touch-action:pan-x}[_nghost-%COMP%]:active{cursor:ew-resize}[_nghost-%COMP%]:after{content:"";position:absolute;top:-.4375rem;bottom:-.4375rem;width:100%}._disabled[_nghost-%COMP%]{opacity:var(--tui-disabled-opacity);cursor:auto}[data-size=s][_nghost-%COMP%]   .t-track[_ngcontent-%COMP%]{position:relative;margin:0 .25rem;height:100%}[data-size=s][_nghost-%COMP%]   .t-track[_ngcontent-%COMP%]:before{content:"";position:absolute;top:0;left:var(--left);right:var(--right);height:100%;background:var(--tui-primary);margin:0 calc(-.5rem / 2 - 1px)}[data-size=s][_nghost-%COMP%]   .t-track[_ngcontent-%COMP%]:after{position:absolute;top:0;left:0;bottom:0;right:0;content:"";left:.125rem;right:.375rem;background-image:repeating-linear-gradient(to right,var(--tui-base-06) 0 .25rem,transparent 0 calc(var(--segment-width) / var(--bg-size-ratio)));background-position-x:right;background-repeat:no-repeat;background-size:calc(100% * var(--bg-size-ratio))}[data-size=m][_nghost-%COMP%]   .t-track[_ngcontent-%COMP%]{position:relative;margin:0 .375rem;height:100%}[data-size=m][_nghost-%COMP%]   .t-track[_ngcontent-%COMP%]:before{content:"";position:absolute;top:0;left:var(--left);right:var(--right);height:100%;background:var(--tui-primary);margin:0 calc(-.75rem / 2 - 1px)}[data-size=m][_nghost-%COMP%]   .t-track[_ngcontent-%COMP%]:after{position:absolute;top:0;left:0;bottom:0;right:0;content:"";left:.25rem;right:.5rem;background-image:repeating-linear-gradient(to right,var(--tui-base-06) 0 .25rem,transparent 0 calc(var(--segment-width) / var(--bg-size-ratio)));background-position-x:right;background-repeat:no-repeat;background-size:calc(100% * var(--bg-size-ratio))}.t-thumb[_ngcontent-%COMP%]{pointer-events:none;position:absolute;top:.0625rem;left:0;right:0;z-index:1;transform:translateY(-50%);margin:0}.t-thumb[_ngcontent-%COMP%]::-webkit-slider-thumb{pointer-events:all}.t-thumb[_ngcontent-%COMP%]::-moz-range-thumb{pointer-events:all}input[type=range].t-thumb[_ngcontent-%COMP%]::-webkit-slider-runnable-track{background:transparent}input[type=range].t-thumb[_ngcontent-%COMP%]::-moz-range-track{background:transparent}input[type=range].t-thumb[_ngcontent-%COMP%]::-moz-range-progress{background:transparent}input[type=range].t-thumb[_ngcontent-%COMP%]::-ms-track{background:transparent}input[type=range].t-thumb[_ngcontent-%COMP%]::-ms-fill-lower{background:transparent}.t-thumb[_ngcontent-%COMP%]:last-of-type{--tui-slider-thumb-transform: translateX(50%) translateX(1px)}.t-thumb[_ngcontent-%COMP%]:first-of-type{--tui-slider-thumb-transform: translateX(-50%) translateX(-1px)}._disabled[_nghost-%COMP%]   .t-thumb[_ngcontent-%COMP%]{opacity:1}'],
  changeDetection: 0
});
__decorate([tuiPure], TuiRangeComponent.prototype, "computePureKeySteps", null);
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiRangeComponent, [{
    type: Component,
    args: [{
      selector: "tui-range",
      templateUrl: "./range.template.html",
      styleUrls: ["./range.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      host: {
        "[attr.tabindex]": "-1",
        "[attr.aria-disabled]": "computedDisabled"
      }
    }]
  }], function() {
    return [{
      type: NgControl,
      decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NgControl]
      }]
    }, {
      type: ChangeDetectorRef,
      decorators: [{
        type: Inject,
        args: [ChangeDetectorRef]
      }]
    }, {
      type: ElementRef,
      decorators: [{
        type: Inject,
        args: [ElementRef]
      }]
    }];
  }, {
    min: [{
      type: Input
    }],
    max: [{
      type: Input
    }],
    step: [{
      type: Input
    }],
    size: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["attr.data-size"]
    }],
    segments: [{
      type: Input
    }],
    keySteps: [{
      type: Input
    }],
    slidersRefs: [{
      type: ViewChildren,
      args: [TuiSliderComponent, {
        read: ElementRef
      }]
    }],
    left: [{
      type: HostBinding,
      args: ["style.--left.%"]
    }],
    right: [{
      type: HostBinding,
      args: ["style.--right.%"]
    }],
    onFocused: [{
      type: HostListener,
      args: ["focusin", ["true"]]
    }, {
      type: HostListener,
      args: ["focusout", ["false"]]
    }],
    changeByStep: [{
      type: HostListener,
      args: ["keydown.arrowUp.prevent", ["1", "$event.target"]]
    }, {
      type: HostListener,
      args: ["keydown.arrowRight.prevent", ["1", "$event.target"]]
    }, {
      type: HostListener,
      args: ["keydown.arrowLeft.prevent", ["-1", "$event.target"]]
    }, {
      type: HostListener,
      args: ["keydown.arrowDown.prevent", ["-1", "$event.target"]]
    }],
    computePureKeySteps: []
  });
})();
var TuiRangeChangeDirective = class {
  constructor(doc, el, range, destroy$) {
    this.doc = doc;
    this.el = el;
    this.range = range;
    this.pointerDown$ = merge(tuiTypedFromEvent(this.el.nativeElement, "touchstart", {
      passive: true
    }).pipe(filter(({
      touches
    }) => touches.length === 1), map(({
      touches
    }) => touches[0])), tuiTypedFromEvent(this.el.nativeElement, "mousedown", {
      passive: true
    }));
    this.pointerMove$ = merge(tuiTypedFromEvent(this.doc, "touchmove").pipe(filter(({
      touches
    }) => touches.length === 1), map(({
      touches
    }) => touches[0])), tuiTypedFromEvent(this.doc, "mousemove"));
    this.pointerUp$ = merge(tuiTypedFromEvent(this.doc, "touchend", {
      passive: true
    }), tuiTypedFromEvent(this.doc, "mouseup", {
      passive: true
    }));
    this.activeThumbChange = new EventEmitter();
    let activeThumb;
    this.pointerDown$.pipe(tap(({
      clientX,
      target
    }) => {
      activeThumb = this.detectActiveThumb(clientX, target);
      this.activeThumbChange.emit(activeThumb);
      if (this.range.focusable) {
        el.nativeElement.focus();
      }
    }), switchMap((event) => this.pointerMove$.pipe(startWith(event))), map(({
      clientX
    }) => this.getFractionFromEvents(clientX)), takeUntil(this.pointerUp$), repeat(), takeUntil(destroy$)).subscribe((fraction) => {
      const value = this.range.getValueFromFraction(fraction);
      this.range.processValue(value, activeThumb === "right");
    });
  }
  getFractionFromEvents(clickClientX) {
    const hostRect = this.el.nativeElement.getBoundingClientRect();
    const value = clickClientX - hostRect.left;
    const total = hostRect.width;
    return tuiClamp(tuiRound(value / total, TUI_FLOATING_PRECISION), 0, 1);
  }
  detectActiveThumb(clientX, target) {
    const [leftSliderRef, rightSliderRef] = this.range.slidersRefs;
    switch (target) {
      case leftSliderRef.nativeElement:
        return "left";
      case rightSliderRef.nativeElement:
        return "right";
      default:
        return this.findNearestActiveThumb(clientX);
    }
  }
  findNearestActiveThumb(clientX) {
    const fraction = this.getFractionFromEvents(clientX);
    const deltaLeft = fraction * 100 - this.range.left;
    const deltaRight = fraction * 100 - 100 + this.range.right;
    return Math.abs(deltaLeft) > Math.abs(deltaRight) || deltaRight > 0 || this.range.left === 0 && this.range.right === 100 ? "right" : "left";
  }
};
TuiRangeChangeDirective.ɵfac = function TuiRangeChangeDirective_Factory(t) {
  return new (t || TuiRangeChangeDirective)(ɵɵdirectiveInject(DOCUMENT), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(TuiRangeComponent), ɵɵdirectiveInject(TuiDestroyService, 2));
};
TuiRangeChangeDirective.ɵdir = ɵɵdefineDirective({
  type: TuiRangeChangeDirective,
  selectors: [["tui-range"]],
  outputs: {
    activeThumbChange: "activeThumbChange"
  },
  features: [ɵɵProvidersFeature([TuiDestroyService])]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiRangeChangeDirective, [{
    type: Directive,
    args: [{
      selector: "tui-range",
      providers: [TuiDestroyService]
    }]
  }], function() {
    return [{
      type: Document,
      decorators: [{
        type: Inject,
        args: [DOCUMENT]
      }]
    }, {
      type: ElementRef,
      decorators: [{
        type: Inject,
        args: [ElementRef]
      }]
    }, {
      type: TuiRangeComponent,
      decorators: [{
        type: Inject,
        args: [TuiRangeComponent]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Self
      }, {
        type: Inject,
        args: [TuiDestroyService]
      }]
    }];
  }, {
    activeThumbChange: [{
      type: Output
    }]
  });
})();
var TuiRangeModule = class {
};
TuiRangeModule.ɵfac = function TuiRangeModule_Factory(t) {
  return new (t || TuiRangeModule)();
};
TuiRangeModule.ɵmod = ɵɵdefineNgModule({
  type: TuiRangeModule,
  declarations: [TuiRangeComponent, TuiRangeChangeDirective],
  imports: [CommonModule, TuiFocusableModule, TuiSliderModule, FormsModule],
  exports: [TuiRangeComponent, TuiRangeChangeDirective]
});
TuiRangeModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, TuiFocusableModule, TuiSliderModule, FormsModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiRangeModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, TuiFocusableModule, TuiSliderModule, FormsModule],
      declarations: [TuiRangeComponent, TuiRangeChangeDirective],
      exports: [TuiRangeComponent, TuiRangeChangeDirective]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-input-range.js
function TuiInputRangeComponent_div_4_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtext(1);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const text_r3 = ctx.polymorpheusOutlet;
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", text_r3, " ");
  }
}
var _c033 = function(a0) {
  return {
    $implicit: a0
  };
};
function TuiInputRangeComponent_div_4_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 5);
    ɵɵtemplate(1, TuiInputRangeComponent_div_4_ng_container_1_Template, 2, 1, "ng-container", 6);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("polymorpheusOutlet", ctx_r0.leftValueContent)("polymorpheusOutletContext", ɵɵpureFunction1(2, _c033, ctx_r0.value[0]));
  }
}
function TuiInputRangeComponent_div_7_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtext(1);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const text_r5 = ctx.polymorpheusOutlet;
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", text_r5, " ");
  }
}
function TuiInputRangeComponent_div_7_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 5);
    ɵɵtemplate(1, TuiInputRangeComponent_div_7_ng_container_1_Template, 2, 1, "ng-container", 6);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("polymorpheusOutlet", ctx_r1.rightValueContent)("polymorpheusOutletContext", ɵɵpureFunction1(2, _c033, ctx_r1.value[1]));
  }
}
var _c124 = ["*"];
var TuiInputRangeComponent = class extends AbstractTuiControl {
  constructor(control, cdr, isMobile, el, controller) {
    super(control, cdr);
    this.isMobile = isMobile;
    this.el = el;
    this.controller = controller;
    this.inputNumberRefs = EMPTY_QUERY;
    this.rangeRef = null;
    this.min = 0;
    this.max = 100;
    this.quantum = 1;
    this.steps = 0;
    this.segments = 1;
    this.keySteps = null;
    this.pluralize = null;
    this.leftTextfieldValue = this.safeCurrentValue[0];
    this.rightTextfieldValue = this.safeCurrentValue[1];
    this.lastActiveSide = "left";
  }
  get leftFocusableElement() {
    var _a;
    return ((_a = this.inputNumberRefs.first) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) || null;
  }
  get rightFocusableElement() {
    var _a;
    return ((_a = this.inputNumberRefs.last) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) || null;
  }
  get nativeFocusableElement() {
    return this.disabled ? null : this.leftFocusableElement || this.rightFocusableElement;
  }
  get focused() {
    return tuiIsNativeFocusedIn(this.el.nativeElement);
  }
  get appearance() {
    return this.controller.appearance;
  }
  get showLeftValueContent() {
    var _a;
    return Boolean(this.leftValueContent && !tuiIsNativeFocused(this.leftFocusableElement) && !(((_a = this.rangeRef) === null || _a === void 0 ? void 0 : _a.focused) && this.lastActiveSide === "left"));
  }
  get showRightValueContent() {
    var _a;
    return Boolean(this.rightValueContent && !tuiIsNativeFocused(this.rightFocusableElement) && !(((_a = this.rangeRef) === null || _a === void 0 ? void 0 : _a.focused) && this.lastActiveSide === "right"));
  }
  get precision() {
    return tuiGetFractionPartPadded(this.quantum).length;
  }
  get decimal() {
    return this.precision ? "not-zero" : "never";
  }
  get computedSteps() {
    return this.steps || (this.max - this.min) / this.quantum;
  }
  get step() {
    return (this.max - this.min) / this.computedSteps;
  }
  computeKeySteps(keySteps, min, max) {
    return keySteps || [[0, min], [100, max]];
  }
  onActiveZone(active) {
    this.updateFocused(active);
  }
  onTextInputFocused(focused) {
    if (!focused) {
      this.updateTextfieldValues(this.value);
    }
  }
  changeByStep(event, [leftCoefficient, rightCoefficient]) {
    if (this.readOnly) {
      return;
    }
    event.preventDefault();
    const newValue = this.valueGuard([this.value[0] + leftCoefficient * this.step, this.value[1] + rightCoefficient * this.step]);
    if (newValue[0] !== this.value[0] || newValue[1] !== this.value[1]) {
      this.onExternalValueUpdate(newValue);
    }
  }
  onInputLeft(value) {
    this.safelyUpdateValue([value !== null && value !== void 0 ? value : this.safeCurrentValue[0], this.value[1]]);
  }
  onInputRight(value) {
    this.safelyUpdateValue([this.value[0], value !== null && value !== void 0 ? value : this.safeCurrentValue[1]]);
  }
  onExternalValueUpdate(value) {
    this.safelyUpdateValue(value);
    this.updateTextfieldValues(this.value);
  }
  focusToTextInput() {
    const element = this.lastActiveSide === "left" ? this.leftFocusableElement : this.rightFocusableElement;
    if (!this.isMobile && element) {
      element.focus();
    }
  }
  onActiveThumbChange(activeThumb) {
    this.lastActiveSide = activeThumb;
  }
  writeValue(value) {
    super.writeValue(value);
    this.updateTextfieldValues(this.value);
  }
  getFallbackValue() {
    return [0, 0];
  }
  safelyUpdateValue(value) {
    this.value = this.valueGuard(value);
  }
  valueGuard([leftValue, rightValue]) {
    const leftCalibratedValue = this.calibrate(leftValue);
    const rightCalibratedValue = this.calibrate(rightValue);
    return [Math.min(leftCalibratedValue, this.value[1]), Math.max(rightCalibratedValue, this.value[0])];
  }
  calibrate(value) {
    const roundedValue = tuiRound(Math.round(value / this.quantum) * this.quantum, TUI_FLOATING_PRECISION);
    return tuiClamp(roundedValue, this.min, this.max);
  }
  updateTextfieldValues([leftValue, rightValue]) {
    this.leftTextfieldValue = leftValue;
    this.rightTextfieldValue = rightValue;
  }
};
TuiInputRangeComponent.ɵfac = function TuiInputRangeComponent_Factory(t) {
  return new (t || TuiInputRangeComponent)(ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(TUI_IS_MOBILE), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(TUI_TEXTFIELD_WATCHED_CONTROLLER));
};
TuiInputRangeComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiInputRangeComponent,
  selectors: [["tui-input-range"]],
  viewQuery: function TuiInputRangeComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(TuiRangeComponent, 5);
      ɵɵviewQuery(TuiInputNumberComponent, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.rangeRef = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.inputNumberRefs = _t);
    }
  },
  hostVars: 3,
  hostBindings: function TuiInputRangeComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("data-size", ctx.controller.size);
      ɵɵclassProp("_label-outside", ctx.controller.labelOutside);
    }
  },
  inputs: {
    min: "min",
    max: "max",
    quantum: "quantum",
    steps: "steps",
    segments: "segments",
    keySteps: "keySteps",
    leftValueContent: "leftValueContent",
    rightValueContent: "rightValueContent",
    pluralize: "pluralize"
  },
  features: [ɵɵProvidersFeature([tuiAsFocusableItemAccessor(TuiInputRangeComponent), tuiAsControl(TuiInputRangeComponent), TEXTFIELD_CONTROLLER_PROVIDER]), ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c124,
  decls: 9,
  vars: 38,
  consts: [["tuiWrapper", "", 1, "t-wrapper", 3, "appearance", "disabled", "focus", "hover", "invalid", "readOnly", "tuiActiveZoneChange"], ["automation-id", "tui-input-range__left-input", "tuiTextfieldAppearance", "none", 1, "t-left", 3, "decimal", "disabled", "max", "min", "precision", "readOnly", "tuiTextfieldPostfix", "ngModel", "ngModelChange", "focusedChange", "keydown.arrowDown", "keydown.arrowUp"], ["ngProjectAs", "tuiContent", 5, ["tuiContent"], 4, "ngIf"], ["automation-id", "tui-input-range__right-input", "tuiTextfieldAppearance", "none", 1, "t-right", 3, "decimal", "disabled", "max", "min", "precision", "readOnly", "tuiTextfieldPostfix", "ngModel", "ngModelChange", "focusedChange", "keydown.arrowDown", "keydown.arrowUp"], [1, "t-range", 3, "disabled", "focusable", "keySteps", "max", "min", "ngModel", "segments", "step", "activeThumbChange", "ngModelChange", "tuiPressedChange"], ["ngProjectAs", "tuiContent", 5, ["tuiContent"]], [4, "polymorpheusOutlet", "polymorpheusOutletContext"]],
  template: function TuiInputRangeComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵelementStart(0, "div", 0);
      ɵɵlistener("tuiActiveZoneChange", function TuiInputRangeComponent_Template_div_tuiActiveZoneChange_0_listener($event) {
        return ctx.onActiveZone($event);
      });
      ɵɵelementStart(1, "tui-input-number", 1);
      ɵɵlistener("ngModelChange", function TuiInputRangeComponent_Template_tui_input_number_ngModelChange_1_listener($event) {
        return ctx.leftTextfieldValue = $event;
      })("focusedChange", function TuiInputRangeComponent_Template_tui_input_number_focusedChange_1_listener($event) {
        return ctx.onTextInputFocused($event);
      })("keydown.arrowDown", function TuiInputRangeComponent_Template_tui_input_number_keydown_arrowDown_1_listener($event) {
        return ctx.changeByStep($event, [-1, 0]);
      })("keydown.arrowUp", function TuiInputRangeComponent_Template_tui_input_number_keydown_arrowUp_1_listener($event) {
        return ctx.changeByStep($event, [1, 0]);
      })("ngModelChange", function TuiInputRangeComponent_Template_tui_input_number_ngModelChange_1_listener($event) {
        return ctx.onInputLeft($event);
      });
      ɵɵpipe(2, "i18nPlural");
      ɵɵprojection(3);
      ɵɵtemplate(4, TuiInputRangeComponent_div_4_Template, 2, 4, "div", 2);
      ɵɵelementEnd();
      ɵɵelementStart(5, "tui-input-number", 3);
      ɵɵlistener("ngModelChange", function TuiInputRangeComponent_Template_tui_input_number_ngModelChange_5_listener($event) {
        return ctx.rightTextfieldValue = $event;
      })("focusedChange", function TuiInputRangeComponent_Template_tui_input_number_focusedChange_5_listener($event) {
        return ctx.onTextInputFocused($event);
      })("keydown.arrowDown", function TuiInputRangeComponent_Template_tui_input_number_keydown_arrowDown_5_listener($event) {
        return ctx.changeByStep($event, [0, -1]);
      })("keydown.arrowUp", function TuiInputRangeComponent_Template_tui_input_number_keydown_arrowUp_5_listener($event) {
        return ctx.changeByStep($event, [0, 1]);
      })("ngModelChange", function TuiInputRangeComponent_Template_tui_input_number_ngModelChange_5_listener($event) {
        return ctx.onInputRight($event);
      });
      ɵɵpipe(6, "i18nPlural");
      ɵɵtemplate(7, TuiInputRangeComponent_div_7_Template, 2, 4, "div", 2);
      ɵɵelementEnd();
      ɵɵelementStart(8, "tui-range", 4);
      ɵɵlistener("activeThumbChange", function TuiInputRangeComponent_Template_tui_range_activeThumbChange_8_listener($event) {
        return ctx.onActiveThumbChange($event);
      })("ngModelChange", function TuiInputRangeComponent_Template_tui_range_ngModelChange_8_listener($event) {
        return ctx.onExternalValueUpdate($event);
      })("tuiPressedChange", function TuiInputRangeComponent_Template_tui_range_tuiPressedChange_8_listener() {
        return ctx.focusToTextInput();
      });
      ɵɵelementEnd()();
    }
    if (rf & 2) {
      ɵɵproperty("appearance", ctx.appearance)("disabled", ctx.disabled)("focus", ctx.computedFocused)("hover", ctx.pseudoHover)("invalid", ctx.computedInvalid)("readOnly", ctx.readOnly);
      ɵɵadvance(1);
      ɵɵproperty("decimal", ctx.decimal)("disabled", ctx.computedDisabled)("max", ctx.value[1])("min", ctx.min)("precision", ctx.precision)("readOnly", ctx.readOnly)("tuiTextfieldPostfix", ctx.pluralize && !ctx.showLeftValueContent ? ɵɵpipeBind2(2, 32, ctx.value[0], ctx.pluralize) : "")("ngModel", ctx.leftTextfieldValue);
      ɵɵadvance(3);
      ɵɵproperty("ngIf", ctx.showLeftValueContent);
      ɵɵadvance(1);
      ɵɵproperty("decimal", ctx.decimal)("disabled", ctx.computedDisabled)("max", ctx.max)("min", ctx.value[0])("precision", ctx.precision)("readOnly", ctx.readOnly)("tuiTextfieldPostfix", ctx.pluralize && !ctx.showRightValueContent ? ɵɵpipeBind2(6, 35, ctx.value[1], ctx.pluralize) : "")("ngModel", ctx.rightTextfieldValue);
      ɵɵadvance(2);
      ɵɵproperty("ngIf", ctx.showRightValueContent);
      ɵɵadvance(1);
      ɵɵproperty("disabled", ctx.readOnly || ctx.disabled)("focusable", false)("keySteps", ctx.computeKeySteps(ctx.keySteps, ctx.min, ctx.max))("max", ctx.max)("min", ctx.min)("ngModel", ctx.value)("segments", ctx.segments)("step", ctx.step);
    }
  },
  dependencies: [TuiInputNumberComponent, TuiRangeComponent, TuiWrapperDirective, TuiActiveZoneDirective, TuiInputNumberDirective, TuiTextfieldAppearanceDirective, TuiTextfieldPostfixDirective, NgControlStatus, NgModel, NgIf, PolymorpheusOutletDirective, TuiRangeChangeDirective, TuiPressedDirective, I18nPluralPipe],
  styles: [".t-wrapper[_ngcontent-%COMP%]{position:relative}.t-left[_ngcontent-%COMP%]{width:100%}.t-right[_ngcontent-%COMP%]{position:absolute;right:0;top:0;display:flex;width:50%;height:100%;text-align:right}[_nghost-%COMP%]{display:block;border-radius:var(--tui-radius-m)}.t-range[_ngcontent-%COMP%]{position:absolute;top:100%;left:0;right:0;z-index:1;margin:-.125rem 0 0;background:transparent}"],
  changeDetection: 0
});
__decorate([tuiPure], TuiInputRangeComponent.prototype, "computeKeySteps", null);
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputRangeComponent, [{
    type: Component,
    args: [{
      selector: "tui-input-range",
      templateUrl: "./input-range.template.html",
      styleUrls: ["./input-range.style.less"],
      host: {
        "[attr.data-size]": "controller.size",
        "[class._label-outside]": "controller.labelOutside"
      },
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [tuiAsFocusableItemAccessor(TuiInputRangeComponent), tuiAsControl(TuiInputRangeComponent), TEXTFIELD_CONTROLLER_PROVIDER]
    }]
  }], function() {
    return [{
      type: NgControl,
      decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NgControl]
      }]
    }, {
      type: ChangeDetectorRef,
      decorators: [{
        type: Inject,
        args: [ChangeDetectorRef]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_IS_MOBILE]
      }]
    }, {
      type: ElementRef,
      decorators: [{
        type: Inject,
        args: [ElementRef]
      }]
    }, {
      type: TuiTextfieldController,
      decorators: [{
        type: Inject,
        args: [TUI_TEXTFIELD_WATCHED_CONTROLLER]
      }]
    }];
  }, {
    inputNumberRefs: [{
      type: ViewChildren,
      args: [TuiInputNumberComponent]
    }],
    rangeRef: [{
      type: ViewChild,
      args: [TuiRangeComponent]
    }],
    min: [{
      type: Input
    }],
    max: [{
      type: Input
    }],
    quantum: [{
      type: Input
    }],
    steps: [{
      type: Input
    }],
    segments: [{
      type: Input
    }],
    keySteps: [{
      type: Input
    }],
    leftValueContent: [{
      type: Input
    }],
    rightValueContent: [{
      type: Input
    }],
    pluralize: [{
      type: Input
    }],
    computeKeySteps: []
  });
})();
var TuiInputRangeModule = class {
};
TuiInputRangeModule.ɵfac = function TuiInputRangeModule_Factory(t) {
  return new (t || TuiInputRangeModule)();
};
TuiInputRangeModule.ɵmod = ɵɵdefineNgModule({
  type: TuiInputRangeModule,
  declarations: [TuiInputRangeComponent],
  imports: [CommonModule, FormsModule, PolymorpheusModule, TuiActiveZoneModule, TuiInputNumberModule, TuiPressedModule, TuiRangeModule, TuiWrapperModule, TuiTextfieldControllerModule],
  exports: [TuiInputRangeComponent]
});
TuiInputRangeModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, FormsModule, PolymorpheusModule, TuiActiveZoneModule, TuiInputNumberModule, TuiPressedModule, TuiRangeModule, TuiWrapperModule, TuiTextfieldControllerModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputRangeModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, FormsModule, PolymorpheusModule, TuiActiveZoneModule, TuiInputNumberModule, TuiPressedModule, TuiRangeModule, TuiWrapperModule, TuiTextfieldControllerModule],
      declarations: [TuiInputRangeComponent],
      exports: [TuiInputRangeComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-input-slider.js
function TuiInputSliderComponent_div_2_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtext(1);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const text_r2 = ctx.polymorpheusOutlet;
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", text_r2, " ");
  }
}
var _c034 = function(a0) {
  return {
    $implicit: a0
  };
};
function TuiInputSliderComponent_div_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 3);
    ɵɵtemplate(1, TuiInputSliderComponent_div_2_ng_container_1_Template, 2, 1, "ng-container", 4);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("polymorpheusOutlet", ctx_r0.valueContent)("polymorpheusOutletContext", ɵɵpureFunction1(2, _c034, ctx_r0.value));
  }
}
var _c125 = ["*"];
var TuiInputSliderComponent = class extends AbstractTuiControl {
  constructor(control, cdr, controller) {
    super(control, cdr);
    this.controller = controller;
    this.min = 0;
    this.max = 100;
    this.quantum = 1;
    this.steps = 0;
    this.segments = 1;
    this.keySteps = null;
    this.textfieldPrefix = "";
    this.textfieldPostfix = "";
    this.textfieldValue = this.safeCurrentValue;
  }
  get prefix() {
    return this.textfieldPrefix || this.controller.prefix;
  }
  get postfix() {
    return this.textfieldPostfix || this.controller.postfix;
  }
  get nativeFocusableElement() {
    var _a;
    return !((_a = this.inputNumberRef) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) || this.computedDisabled ? null : this.inputNumberRef.nativeFocusableElement;
  }
  get focused() {
    var _a;
    return tuiIsNativeFocused(this.nativeFocusableElement) || tuiIsNativeFocused(((_a = this.sliderRef) === null || _a === void 0 ? void 0 : _a.nativeElement) || null);
  }
  get computedSteps() {
    return this.steps || (this.max - this.min) / this.quantum;
  }
  get precision() {
    return tuiGetFractionPartPadded(this.quantum).length;
  }
  get decimal() {
    return this.precision ? "not-zero" : "never";
  }
  get showValueContent() {
    return Boolean(this.valueContent && !this.focused);
  }
  get step() {
    return (this.max - this.min) / this.computedSteps;
  }
  computeKeySteps(keySteps, min, max) {
    return keySteps || [[0, min], [100, max]];
  }
  focusTextInput() {
    var _a;
    const focusableElement = (_a = this.inputNumberRef) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement;
    if (focusableElement) {
      focusableElement.focus();
    }
  }
  safelyUpdateValue(value) {
    this.value = this.valueGuard(value !== null && value !== void 0 ? value : this.safeCurrentValue);
  }
  onVerticalArrowKeyDown(coefficient) {
    if (this.readOnly || !this.step) {
      return;
    }
    const value = this.value + coefficient * this.step;
    if (value !== this.value) {
      this.safelyUpdateValue(value);
      this.textfieldValue = this.value;
    }
  }
  onSliderChange(newValue) {
    this.safelyUpdateValue(newValue);
    this.textfieldValue = this.value;
  }
  onFocused(focused) {
    const {
      value,
      textfieldValue
    } = this;
    if (!focused && textfieldValue !== value) {
      this.textfieldValue = value;
    }
    this.updateFocused(focused);
  }
  writeValue(value) {
    super.writeValue(value);
    this.textfieldValue = this.value;
  }
  getFallbackValue() {
    return 0;
  }
  valueGuard(value) {
    const roundedValue = tuiRound(Math.round(value / this.quantum) * this.quantum, TUI_FLOATING_PRECISION);
    return tuiClamp(roundedValue, this.min, this.max);
  }
};
TuiInputSliderComponent.ɵfac = function TuiInputSliderComponent_Factory(t) {
  return new (t || TuiInputSliderComponent)(ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(TUI_TEXTFIELD_WATCHED_CONTROLLER));
};
TuiInputSliderComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiInputSliderComponent,
  selectors: [["tui-input-slider"]],
  viewQuery: function TuiInputSliderComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(TuiInputNumberComponent, 5);
      ɵɵviewQuery(TuiSliderComponent, 5, ElementRef);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.inputNumberRef = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.sliderRef = _t.first);
    }
  },
  hostVars: 3,
  hostBindings: function TuiInputSliderComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("data-size", ctx.controller.size);
      ɵɵclassProp("_label-outside", ctx.controller.labelOutside);
    }
  },
  inputs: {
    min: "min",
    max: "max",
    quantum: "quantum",
    steps: "steps",
    segments: "segments",
    keySteps: "keySteps",
    valueContent: "valueContent",
    textfieldPrefix: ["prefix", "textfieldPrefix"],
    textfieldPostfix: ["postfix", "textfieldPostfix"]
  },
  features: [ɵɵProvidersFeature([tuiAsFocusableItemAccessor(TuiInputSliderComponent), tuiAsControl(TuiInputSliderComponent), tuiSliderOptionsProvider({
    trackColor: "transparent"
  }), TEXTFIELD_CONTROLLER_PROVIDER]), ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c125,
  decls: 4,
  vars: 20,
  consts: [[3, "decimal", "disabled", "max", "min", "precision", "pseudoActive", "pseudoFocus", "pseudoHover", "pseudoInvalid", "readOnly", "tuiTextfieldPostfix", "tuiTextfieldPrefix", "ngModel", "ngModelChange", "focusedChange", "keydown.arrowDown.prevent", "keydown.arrowUp.prevent"], ["automation-id", "tui-input-slider__value-content", "ngProjectAs", "tuiContent", 5, ["tuiContent"], 4, "ngIf"], ["tuiSlider", "", "type", "range", 3, "disabled", "keySteps", "max", "ngModel", "segments", "tuiFocusable", "click", "ngModelChange"], ["automation-id", "tui-input-slider__value-content", "ngProjectAs", "tuiContent", 5, ["tuiContent"]], [4, "polymorpheusOutlet", "polymorpheusOutletContext"]],
  template: function TuiInputSliderComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵelementStart(0, "tui-input-number", 0);
      ɵɵlistener("ngModelChange", function TuiInputSliderComponent_Template_tui_input_number_ngModelChange_0_listener($event) {
        return ctx.textfieldValue = $event;
      })("focusedChange", function TuiInputSliderComponent_Template_tui_input_number_focusedChange_0_listener($event) {
        return ctx.onFocused($event);
      })("keydown.arrowDown.prevent", function TuiInputSliderComponent_Template_tui_input_number_keydown_arrowDown_prevent_0_listener() {
        return ctx.onVerticalArrowKeyDown(-1);
      })("keydown.arrowUp.prevent", function TuiInputSliderComponent_Template_tui_input_number_keydown_arrowUp_prevent_0_listener() {
        return ctx.onVerticalArrowKeyDown(1);
      })("ngModelChange", function TuiInputSliderComponent_Template_tui_input_number_ngModelChange_0_listener($event) {
        return ctx.safelyUpdateValue($event);
      });
      ɵɵprojection(1);
      ɵɵtemplate(2, TuiInputSliderComponent_div_2_Template, 2, 4, "div", 1);
      ɵɵelementEnd();
      ɵɵelementStart(3, "input", 2);
      ɵɵlistener("click", function TuiInputSliderComponent_Template_input_click_3_listener() {
        return ctx.focusTextInput();
      })("ngModelChange", function TuiInputSliderComponent_Template_input_ngModelChange_3_listener($event) {
        return ctx.onSliderChange($event);
      });
      ɵɵelementEnd();
    }
    if (rf & 2) {
      ɵɵproperty("decimal", ctx.decimal)("disabled", ctx.computedDisabled)("max", ctx.max)("min", ctx.min)("precision", ctx.precision)("pseudoActive", ctx.pseudoActive)("pseudoFocus", ctx.computedFocused)("pseudoHover", ctx.pseudoHover)("pseudoInvalid", ctx.pseudoInvalid)("readOnly", ctx.readOnly)("tuiTextfieldPostfix", ctx.showValueContent ? "" : ctx.postfix)("tuiTextfieldPrefix", ctx.showValueContent ? "" : ctx.prefix)("ngModel", ctx.textfieldValue);
      ɵɵadvance(2);
      ɵɵproperty("ngIf", ctx.showValueContent);
      ɵɵadvance(1);
      ɵɵproperty("disabled", ctx.readOnly || ctx.computedDisabled)("keySteps", ctx.computeKeySteps(ctx.keySteps, ctx.min, ctx.max))("max", ctx.computedSteps)("ngModel", ctx.value)("segments", ctx.segments)("tuiFocusable", false);
    }
  },
  dependencies: [TuiInputNumberComponent, TuiSliderComponent, TuiInputNumberDirective, TuiTextfieldPostfixDirective, TuiTextfieldPrefixDirective, NgControlStatus, NgModel, NgIf, PolymorpheusOutletDirective, TuiSliderKeyStepsDirective, RangeValueAccessor, DefaultValueAccessor, TuiFocusableDirective],
  styles: ["[_nghost-%COMP%]{position:relative;display:block;height:-webkit-max-content;height:max-content;isolation:isolate;border-radius:var(--tui-radius-m)}tui-input-number[_ngcontent-%COMP%]{border-radius:inherit}input[type=range][_ngcontent-%COMP%]{position:absolute;top:100%;left:calc(var(--tui-radius-m) / 2);right:0;width:calc(100% - calc(var(--tui-radius-m) / 2));box-sizing:border-box;height:1rem;margin:-.5625rem 0 0;border-top-left-radius:0;border-bottom-left-radius:calc(var(--tui-radius-m) * 5) calc(var(--tui-radius-m) * 1.5)}"],
  changeDetection: 0
});
__decorate([tuiPure], TuiInputSliderComponent.prototype, "computeKeySteps", null);
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputSliderComponent, [{
    type: Component,
    args: [{
      selector: "tui-input-slider",
      templateUrl: "./input-slider.template.html",
      styleUrls: ["./input-slider.style.less"],
      host: {
        "[attr.data-size]": "controller.size",
        "[class._label-outside]": "controller.labelOutside"
      },
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [tuiAsFocusableItemAccessor(TuiInputSliderComponent), tuiAsControl(TuiInputSliderComponent), tuiSliderOptionsProvider({
        trackColor: "transparent"
      }), TEXTFIELD_CONTROLLER_PROVIDER]
    }]
  }], function() {
    return [{
      type: NgControl,
      decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NgControl]
      }]
    }, {
      type: ChangeDetectorRef,
      decorators: [{
        type: Inject,
        args: [ChangeDetectorRef]
      }]
    }, {
      type: TuiTextfieldController,
      decorators: [{
        type: Inject,
        args: [TUI_TEXTFIELD_WATCHED_CONTROLLER]
      }]
    }];
  }, {
    inputNumberRef: [{
      type: ViewChild,
      args: [TuiInputNumberComponent]
    }],
    sliderRef: [{
      type: ViewChild,
      args: [TuiSliderComponent, {
        read: ElementRef
      }]
    }],
    min: [{
      type: Input
    }],
    max: [{
      type: Input
    }],
    quantum: [{
      type: Input
    }],
    steps: [{
      type: Input
    }],
    segments: [{
      type: Input
    }],
    keySteps: [{
      type: Input
    }],
    valueContent: [{
      type: Input
    }],
    textfieldPrefix: [{
      type: Input,
      args: ["prefix"]
    }],
    textfieldPostfix: [{
      type: Input,
      args: ["postfix"]
    }],
    computeKeySteps: []
  });
})();
var TuiInputSliderModule = class {
};
TuiInputSliderModule.ɵfac = function TuiInputSliderModule_Factory(t) {
  return new (t || TuiInputSliderModule)();
};
TuiInputSliderModule.ɵmod = ɵɵdefineNgModule({
  type: TuiInputSliderModule,
  declarations: [TuiInputSliderComponent],
  imports: [CommonModule, FormsModule, PolymorpheusModule, TuiFocusableModule, TuiInputNumberModule, TuiSliderModule, TuiTextfieldControllerModule],
  exports: [TuiInputSliderComponent]
});
TuiInputSliderModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, FormsModule, PolymorpheusModule, TuiFocusableModule, TuiInputNumberModule, TuiSliderModule, TuiTextfieldControllerModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputSliderModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, FormsModule, PolymorpheusModule, TuiFocusableModule, TuiInputNumberModule, TuiSliderModule, TuiTextfieldControllerModule],
      declarations: [TuiInputSliderComponent],
      exports: [TuiInputSliderComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-input-time.js
var _c035 = ["tuiTime", ""];
function TuiNativeTimeComponent_datalist_0_option_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "option", 3);
  }
  if (rf & 2) {
    const item_r2 = ctx.$implicit;
    ɵɵpropertyInterpolate("value", item_r2);
  }
}
function TuiNativeTimeComponent_datalist_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "datalist", 1);
    ɵɵtemplate(1, TuiNativeTimeComponent_datalist_0_option_1_Template, 1, 1, "option", 2);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵproperty("id", ctx_r0.autoIdString);
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r0.items);
  }
}
function TuiInputTimeComponent_ng_template_5_button_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "button", 7);
    ɵɵtext(1);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const item_r5 = ctx.$implicit;
    const ctx_r4 = ɵɵnextContext(2);
    ɵɵproperty("disabled", ctx_r4.disabledItemHandler(item_r5))("value", item_r5);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", item_r5, " ");
  }
}
function TuiInputTimeComponent_ng_template_5_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "tui-data-list", 5);
    ɵɵtemplate(1, TuiInputTimeComponent_ng_template_5_button_1_Template, 2, 3, "button", 6);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵproperty("size", ctx_r1.itemSize);
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r1.filtered);
  }
}
function TuiInputTimeComponent_ng_template_7_tui_svg_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "tui-svg", 10);
  }
  if (rf & 2) {
    const src_r8 = ctx.polymorpheusOutlet;
    ɵɵproperty("src", src_r8);
  }
}
function TuiInputTimeComponent_ng_template_7_input_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "input", 11);
  }
}
var _c126 = function(a0) {
  return {
    $implicit: a0
  };
};
function TuiInputTimeComponent_ng_template_7_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtemplate(0, TuiInputTimeComponent_ng_template_7_tui_svg_0_Template, 1, 1, "tui-svg", 8);
    ɵɵtemplate(1, TuiInputTimeComponent_ng_template_7_input_1_Template, 1, 0, "input", 9);
  }
  if (rf & 2) {
    const ctx_r3 = ɵɵnextContext();
    ɵɵproperty("polymorpheusOutlet", ctx_r3.icon)("polymorpheusOutletContext", ɵɵpureFunction1(3, _c126, ctx_r3.size));
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r3.showNativePicker);
  }
}
var _c215 = ["*"];
var TUI_INPUT_TIME_DEFAULT_OPTIONS = {
  icon: ({
    $implicit
  }) => $implicit === "s" ? "tuiIconClock" : "tuiIconClockLarge",
  mode: "HH:MM",
  postfix: "",
  maxValues: MAX_TIME_VALUES,
  itemSize: "m",
  nativePicker: false
};
var TUI_INPUT_TIME_OPTIONS = tuiCreateToken(TUI_INPUT_TIME_DEFAULT_OPTIONS);
function tuiInputTimeOptionsProvider(options) {
  return tuiProvideOptions(TUI_INPUT_TIME_OPTIONS, options, TUI_INPUT_TIME_DEFAULT_OPTIONS);
}
var TuiNativeTimeComponent = class {
  constructor(host, idService) {
    this.host = host;
    this.autoIdString = idService.generate();
  }
  get items() {
    return this.host.items.map((item) => item.toString(this.host.mode));
  }
  get value() {
    return this.host.value.length === this.host.mode.length ? this.host.value : "";
  }
  get step() {
    switch (this.host.mode) {
      case "HH:MM:SS":
        return 1;
      case "HH:MM:SS.MSS":
        return 1e-3;
      default:
        return 60;
    }
  }
  onChange(value) {
    this.host.onValueChange(value);
  }
};
TuiNativeTimeComponent.ɵfac = function TuiNativeTimeComponent_Factory(t) {
  return new (t || TuiNativeTimeComponent)(ɵɵdirectiveInject(TUI_TEXTFIELD_HOST), ɵɵdirectiveInject(TuiIdService));
};
TuiNativeTimeComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiNativeTimeComponent,
  selectors: [["input", "tuiTime", ""]],
  hostAttrs: ["type", "time"],
  hostVars: 4,
  hostBindings: function TuiNativeTimeComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("change.stop", function TuiNativeTimeComponent_change_stop_HostBindingHandler($event) {
        return ctx.onChange($event.target.value);
      })("click.stop.silent", function TuiNativeTimeComponent_click_stop_silent_HostBindingHandler() {
        return 0;
      })("mousedown.stop.silent", function TuiNativeTimeComponent_mousedown_stop_silent_HostBindingHandler() {
        return 0;
      });
    }
    if (rf & 2) {
      ɵɵhostProperty("tabIndex", -1)("value", ctx.value)("step", ctx.step);
      ɵɵattribute("list", ctx.autoIdString);
    }
  },
  attrs: _c035,
  decls: 1,
  vars: 1,
  consts: [[3, "id", 4, "ngIf"], [3, "id"], [3, "value", 4, "ngFor", "ngForOf"], [3, "value"]],
  template: function TuiNativeTimeComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵtemplate(0, TuiNativeTimeComponent_datalist_0_Template, 2, 2, "datalist", 0);
    }
    if (rf & 2) {
      ɵɵproperty("ngIf", ctx.items.length);
    }
  },
  dependencies: [NgIf, NgForOf],
  styles: ["[_nghost-%COMP%]{position:absolute;top:0;left:0;width:100%;height:100%;opacity:0;pointer-events:auto;font-size:2rem}"],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiNativeTimeComponent, [{
    type: Component,
    args: [{
      selector: "input[tuiTime]",
      template: `
        <datalist
            *ngIf="items.length"
            [id]="autoIdString"
        >
            <option
                *ngFor="let item of items"
                value="{{ item }}"
            ></option>
        </datalist>
    `,
      host: {
        type: "time",
        "[attr.list]": "autoIdString",
        "[tabIndex]": "-1",
        "[value]": "value",
        "[step]": "step",
        "(change.stop)": "onChange($event.target.value)",
        "(click.stop.silent)": "0",
        "(mousedown.stop.silent)": "0"
      },
      styleUrls: ["./native-time.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush
    }]
  }], function() {
    return [{
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_TEXTFIELD_HOST]
      }]
    }, {
      type: TuiIdService,
      decorators: [{
        type: Inject,
        args: [TuiIdService]
      }]
    }];
  }, null);
})();
var TuiInputTimeComponent = class extends AbstractTuiNullableControl {
  constructor(control, cdr, timeTexts$, options, isMobile, isIos, textfieldSize) {
    super(control, cdr);
    this.timeTexts$ = timeTexts$;
    this.options = options;
    this.isMobile = isMobile;
    this.isIos = isIos;
    this.textfieldSize = textfieldSize;
    this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
    this.items = [];
    this.itemSize = this.options.itemSize;
    this.strict = false;
    this.mode = this.options.mode;
    this.postfix = this.options.postfix;
    this.open = false;
  }
  get size() {
    return this.textfieldSize.size;
  }
  get nativeFocusableElement() {
    var _a, _b;
    return (_b = (_a = this.textfield) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) !== null && _b !== void 0 ? _b : null;
  }
  get focused() {
    return tuiIsNativeFocused(this.nativeFocusableElement);
  }
  get canOpen() {
    return this.interactive && !!this.filtered.length;
  }
  get filtered() {
    return this.filter(this.items, this.mode, this.computedSearch);
  }
  get showNativePicker() {
    return this.nativePicker && (!this.isIos || this.mode === "HH:MM" && !this.items.length);
  }
  get nativeDatalist() {
    return this.nativePicker && !this.isIos;
  }
  get maskOptions() {
    return this.calculateMask(this.mode);
  }
  get computedValue() {
    return this.value ? this.value.toString(this.mode) : this.nativeValue;
  }
  get computedSearch() {
    return this.computedValue.length !== this.mode.length ? this.computedValue : "";
  }
  get innerPseudoFocused() {
    if (this.pseudoFocus === false) {
      return false;
    }
    if (this.open && this.canOpen || this.computedFocused) {
      return true;
    }
    return null;
  }
  get icon() {
    return this.options.icon;
  }
  get nativeValue() {
    var _a;
    return ((_a = this.nativeFocusableElement) === null || _a === void 0 ? void 0 : _a.value) || "";
  }
  set nativeValue(value) {
    if (!this.nativeFocusableElement) {
      return;
    }
    this.nativeFocusableElement.value = value;
  }
  getFiller$(mode) {
    return this.timeTexts$.pipe(map((texts) => texts[mode]));
  }
  onClick() {
    this.open = !this.open;
  }
  onValueChange(value) {
    this.open = !!this.items.length;
    if (this.control) {
      this.control.updateValueAndValidity({
        emitEvent: false
      });
    }
    const match = this.getMatch(value);
    if (match !== void 0) {
      this.value = match;
      return;
    }
    if (value.length !== this.mode.length) {
      this.value = null;
      return;
    }
    const time = TuiTime.fromString(value);
    this.value = this.strict ? this.findNearestTimeFromItems(time) : time;
  }
  onFocused(focused) {
    this.updateFocused(focused);
    if (focused || this.value !== null || this.nativeValue === "" || this.mode === "HH:MM") {
      return;
    }
    this.value = TuiTime.fromString(this.nativeValue);
    timer(0).pipe(takeUntil(this.destroy$)).subscribe(() => {
      if (this.nativeValue.endsWith(".") || this.nativeValue.endsWith(":")) {
        this.nativeValue = this.nativeValue.slice(0, -1);
      }
    });
  }
  onArrowUp(event) {
    if (this.items.length) {
      return;
    }
    this.processArrow(event, 1);
  }
  onArrowDown(event) {
    if (this.items.length) {
      return;
    }
    this.processArrow(event, -1);
  }
  handleOption(item) {
    this.focusInput();
    this.value = item;
  }
  onOpen(open) {
    this.open = open;
  }
  writeValue(value) {
    super.writeValue(value);
    this.nativeValue = value ? this.computedValue : "";
  }
  get nativePicker() {
    return !!this.options.nativePicker && this.isMobile;
  }
  calculateMask(mode) {
    const {
      HH,
      MM,
      SS,
      MS
    } = this.options.maxValues;
    return maskitoTimeOptionsGenerator({
      mode,
      timeSegmentMaxValues: {
        hours: HH,
        minutes: MM,
        seconds: SS,
        milliseconds: MS
      }
    });
  }
  filter(items, mode, search) {
    return items.filter((item) => item.toString(mode).includes(search));
  }
  findNearestTimeFromItems(value) {
    return this.items.reduce((previous, current) => Math.abs(current.valueOf() - value.valueOf()) < Math.abs(previous.valueOf() - value.valueOf()) ? current : previous, new TuiTime(0, 0));
  }
  getMatch(value) {
    return this.items.find((item) => TUI_STRICT_MATCHER(item, value));
  }
  close() {
    this.open = false;
  }
  processArrow(event, shift) {
    const {
      target
    } = event;
    if (this.readOnly || !tuiIsElement(target) || !tuiIsInput(target)) {
      return;
    }
    const selectionStart = target.selectionStart || 0;
    this.shiftTime(this.calculateShift(selectionStart, shift));
    target.setSelectionRange(selectionStart, selectionStart);
    event.preventDefault();
  }
  calculateShift(selectionStart, shift) {
    if (selectionStart <= 2) {
      return {
        hours: shift
      };
    }
    if (selectionStart <= 5) {
      return {
        minutes: shift
      };
    }
    if (selectionStart <= 8) {
      return {
        seconds: shift
      };
    }
    return {
      ms: shift
    };
  }
  shiftTime(shift) {
    if (this.value === null) {
      return;
    }
    const increasedTime = this.value.shift(shift);
    this.nativeValue = increasedTime.toString(this.mode);
    this.value = increasedTime;
  }
  focusInput(preventScroll = false) {
    if (this.nativeFocusableElement) {
      this.nativeFocusableElement.focus({
        preventScroll
      });
      this.close();
    }
  }
};
TuiInputTimeComponent.ɵfac = function TuiInputTimeComponent_Factory(t) {
  return new (t || TuiInputTimeComponent)(ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(TUI_TIME_TEXTS), ɵɵdirectiveInject(TUI_INPUT_TIME_OPTIONS), ɵɵdirectiveInject(TUI_IS_MOBILE), ɵɵdirectiveInject(TUI_IS_IOS), ɵɵdirectiveInject(TUI_TEXTFIELD_SIZE));
};
TuiInputTimeComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiInputTimeComponent,
  selectors: [["tui-input-time"]],
  viewQuery: function TuiInputTimeComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(TuiPrimitiveTextfieldComponent, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.textfield = _t.first);
    }
  },
  hostVars: 1,
  hostBindings: function TuiInputTimeComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("click", function TuiInputTimeComponent_click_HostBindingHandler() {
        return ctx.onClick();
      });
    }
    if (rf & 2) {
      ɵɵattribute("data-size", ctx.size);
    }
  },
  inputs: {
    disabledItemHandler: "disabledItemHandler",
    items: "items",
    itemSize: "itemSize",
    strict: "strict",
    mode: "mode",
    postfix: "postfix"
  },
  features: [ɵɵProvidersFeature([tuiAsFocusableItemAccessor(TuiInputTimeComponent), tuiAsControl(TuiInputTimeComponent), tuiAsDataListHost(TuiInputTimeComponent), tuiAsOptionContent(TUI_SELECT_OPTION)], [FIXED_DROPDOWN_CONTROLLER_PROVIDER]), ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c215,
  decls: 9,
  vars: 18,
  consts: [[1, "t-wrapper", 3, "canOpen", "content", "open", "focusedChange", "openChange"], ["tuiValueAccessor", "", 1, "t-textfield", 3, "disabled", "focusable", "invalid", "maskito", "nativeId", "postfix", "pseudoActive", "pseudoFocus", "pseudoHover", "readOnly", "tuiTextfieldFiller", "tuiTextfieldIcon", "value", "keydown.arrowDown", "keydown.arrowUp", "valueChange"], ["inputmode", "numeric", "tuiTextfield", ""], ["dropdownContent", ""], ["iconContent", ""], ["automation-id", "tui-input-time__dropdown", 3, "size"], ["automation-id", "tui-input-time__item", "tuiOption", "", 3, "disabled", "value", 4, "ngFor", "ngForOf"], ["automation-id", "tui-input-time__item", "tuiOption", "", 3, "disabled", "value"], ["appearance", "icon", "tuiWrapper", "", 3, "src", 4, "polymorpheusOutlet", "polymorpheusOutletContext"], ["tuiTime", "", 4, "ngIf"], ["appearance", "icon", "tuiWrapper", "", 3, "src"], ["tuiTime", ""]],
  template: function TuiInputTimeComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵelementStart(0, "tui-hosted-dropdown", 0);
      ɵɵlistener("focusedChange", function TuiInputTimeComponent_Template_tui_hosted_dropdown_focusedChange_0_listener($event) {
        return ctx.onFocused($event);
      })("openChange", function TuiInputTimeComponent_Template_tui_hosted_dropdown_openChange_0_listener($event) {
        return ctx.onOpen($event);
      });
      ɵɵelementStart(1, "tui-primitive-textfield", 1);
      ɵɵlistener("keydown.arrowDown", function TuiInputTimeComponent_Template_tui_primitive_textfield_keydown_arrowDown_1_listener($event) {
        return ctx.onArrowDown($event);
      })("keydown.arrowUp", function TuiInputTimeComponent_Template_tui_primitive_textfield_keydown_arrowUp_1_listener($event) {
        return ctx.onArrowUp($event);
      })("valueChange", function TuiInputTimeComponent_Template_tui_primitive_textfield_valueChange_1_listener($event) {
        return ctx.onValueChange($event);
      });
      ɵɵpipe(2, "async");
      ɵɵprojection(3);
      ɵɵelement(4, "input", 2);
      ɵɵelementEnd()();
      ɵɵtemplate(5, TuiInputTimeComponent_ng_template_5_Template, 2, 2, "ng-template", null, 3, ɵɵtemplateRefExtractor);
      ɵɵtemplate(7, TuiInputTimeComponent_ng_template_7_Template, 2, 5, "ng-template", null, 4, ɵɵtemplateRefExtractor);
    }
    if (rf & 2) {
      const _r0 = ɵɵreference(6);
      const _r2 = ɵɵreference(8);
      ɵɵproperty("canOpen", ctx.canOpen && !ctx.nativeDatalist)("content", _r0)("open", ctx.canOpen && ctx.open);
      ɵɵadvance(1);
      ɵɵproperty("disabled", ctx.disabled)("focusable", ctx.focusable)("invalid", ctx.computedInvalid)("maskito", ctx.maskOptions)("nativeId", ctx.nativeId)("postfix", ctx.postfix)("pseudoActive", ctx.pseudoActive)("pseudoFocus", ctx.innerPseudoFocused)("pseudoHover", ctx.pseudoHover)("readOnly", ctx.readOnly)("tuiTextfieldFiller", ɵɵpipeBind1(2, 16, ctx.getFiller$(ctx.mode)) || "")("tuiTextfieldIcon", _r2)("value", ctx.computedValue);
    }
  },
  dependencies: [TuiHostedDropdownComponent, TuiPrimitiveTextfieldComponent, TuiTextfieldComponent, TuiDataListComponent, TuiOptionComponent, TuiSvgComponent, TuiNativeTimeComponent, TuiPrimitiveTextfieldDirective, TuiValueAccessorDirective, MaskitoDirective, TuiTextfieldFillerDirective, TuiTextfieldIconDirective, NgForOf, PolymorpheusOutletDirective, TuiWrapperDirective, NgIf, AsyncPipe],
  styles: ["[_nghost-%COMP%]{display:block;border-radius:var(--tui-radius-m);text-align:left}._disabled[_nghost-%COMP%]{pointer-events:none}.t-wrapper[_ngcontent-%COMP%]{display:block;border-radius:inherit}.t-textfield[_ngcontent-%COMP%]{border-radius:inherit;text-align:inherit}"],
  changeDetection: 0
});
__decorate([tuiPure], TuiInputTimeComponent.prototype, "getFiller$", null);
__decorate([tuiPure], TuiInputTimeComponent.prototype, "calculateMask", null);
__decorate([tuiPure], TuiInputTimeComponent.prototype, "filter", null);
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputTimeComponent, [{
    type: Component,
    args: [{
      selector: "tui-input-time",
      templateUrl: "./input-time.template.html",
      styleUrls: ["./input-time.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [tuiAsFocusableItemAccessor(TuiInputTimeComponent), tuiAsControl(TuiInputTimeComponent), tuiAsDataListHost(TuiInputTimeComponent), tuiAsOptionContent(TUI_SELECT_OPTION)],
      viewProviders: [FIXED_DROPDOWN_CONTROLLER_PROVIDER]
    }]
  }], function() {
    return [{
      type: NgControl,
      decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NgControl]
      }]
    }, {
      type: ChangeDetectorRef,
      decorators: [{
        type: Inject,
        args: [ChangeDetectorRef]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Inject,
        args: [TUI_TIME_TEXTS]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_INPUT_TIME_OPTIONS]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_IS_MOBILE]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_IS_IOS]
      }]
    }, {
      type: TuiTextfieldSizeDirective,
      decorators: [{
        type: Inject,
        args: [TUI_TEXTFIELD_SIZE]
      }]
    }];
  }, {
    textfield: [{
      type: ViewChild,
      args: [TuiPrimitiveTextfieldComponent]
    }],
    disabledItemHandler: [{
      type: Input
    }],
    items: [{
      type: Input
    }],
    itemSize: [{
      type: Input
    }],
    strict: [{
      type: Input
    }],
    mode: [{
      type: Input
    }],
    postfix: [{
      type: Input
    }],
    size: [{
      type: HostBinding,
      args: ["attr.data-size"]
    }],
    getFiller$: [],
    onClick: [{
      type: HostListener,
      args: ["click"]
    }],
    calculateMask: [],
    filter: []
  });
})();
var TuiInputTimeDirective = class extends AbstractTuiTextfieldHost {
  get value() {
    return this.host.computedValue;
  }
  get mode() {
    return this.host.mode;
  }
  get items() {
    return this.host.items;
  }
  onValueChange(value) {
    if (!value) {
      this.host.nativeValue = "";
    }
    this.host.onValueChange(value);
  }
  process(input) {
    input.inputMode = "numeric";
  }
};
TuiInputTimeDirective.ɵfac = function() {
  let ɵTuiInputTimeDirective_BaseFactory;
  return function TuiInputTimeDirective_Factory(t) {
    return (ɵTuiInputTimeDirective_BaseFactory || (ɵTuiInputTimeDirective_BaseFactory = ɵɵgetInheritedFactory(TuiInputTimeDirective)))(t || TuiInputTimeDirective);
  };
}();
TuiInputTimeDirective.ɵdir = ɵɵdefineDirective({
  type: TuiInputTimeDirective,
  selectors: [["tui-input-time"]],
  features: [ɵɵProvidersFeature([tuiAsTextfieldHost(TuiInputTimeDirective)]), ɵɵInheritDefinitionFeature]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputTimeDirective, [{
    type: Directive,
    args: [{
      selector: "tui-input-time",
      providers: [tuiAsTextfieldHost(TuiInputTimeDirective)]
    }]
  }], null, null);
})();
var TuiInputTimeModule = class {
};
TuiInputTimeModule.ɵfac = function TuiInputTimeModule_Factory(t) {
  return new (t || TuiInputTimeModule)();
};
TuiInputTimeModule.ɵmod = ɵɵdefineNgModule({
  type: TuiInputTimeModule,
  declarations: [TuiInputTimeComponent, TuiNativeTimeComponent, TuiInputTimeDirective],
  imports: [CommonModule, MaskitoModule, TuiSelectOptionModule, TuiDataListModule, TuiWrapperModule, TuiHostedDropdownModule, TuiPrimitiveTextfieldModule, TuiValueAccessorModule, TuiTextfieldControllerModule, TuiSvgModule, PolymorpheusModule],
  exports: [TuiInputTimeComponent, TuiInputTimeDirective]
});
TuiInputTimeModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, MaskitoModule, TuiSelectOptionModule, TuiDataListModule, TuiWrapperModule, TuiHostedDropdownModule, TuiPrimitiveTextfieldModule, TuiValueAccessorModule, TuiTextfieldControllerModule, TuiSvgModule, PolymorpheusModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputTimeModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, MaskitoModule, TuiSelectOptionModule, TuiDataListModule, TuiWrapperModule, TuiHostedDropdownModule, TuiPrimitiveTextfieldModule, TuiValueAccessorModule, TuiTextfieldControllerModule, TuiSvgModule, PolymorpheusModule],
      declarations: [TuiInputTimeComponent, TuiNativeTimeComponent, TuiInputTimeDirective],
      exports: [TuiInputTimeComponent, TuiInputTimeDirective]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-input-year.js
function TuiInputYearComponent_ng_template_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 3)(1, "tui-scrollbar", 4)(2, "tui-primitive-year-picker", 5);
    ɵɵlistener("mousedown.prevent.silent", function TuiInputYearComponent_ng_template_4_Template_tui_primitive_year_picker_mousedown_prevent_silent_2_listener() {
      return 0;
    })("yearClick", function TuiInputYearComponent_ng_template_4_Template_tui_primitive_year_picker_yearClick_2_listener($event) {
      ɵɵrestoreView(_r4);
      const ctx_r3 = ɵɵnextContext();
      return ɵɵresetView(ctx_r3.onYearClick($event));
    });
    ɵɵpipe(3, "tuiToYear");
    ɵɵpipe(4, "tuiToYear");
    ɵɵpipe(5, "tuiToYear");
    ɵɵpipe(6, "tuiToYear");
    ɵɵelementEnd()()();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵproperty("disabledItemHandler", ctx_r1.disabledItemHandler)("initialItem", ɵɵpipeBind1(3, 5, ctx_r1.value || ctx_r1.initialItem))("max", ɵɵpipeBind1(4, 7, ctx_r1.computedMax))("min", ɵɵpipeBind1(5, 9, ctx_r1.computedMin))("value", ctx_r1.value === null ? null : ɵɵpipeBind1(6, 11, ctx_r1.value));
  }
}
var _c036 = ["*", [["input"]]];
var _c127 = ["*", "input"];
var UP_TO_4_DIGITS_REG = /^\d{0,4}$/;
var TuiInputYearComponent = class extends AbstractTuiNullableControl {
  constructor(control, cdr, options, textfieldSize) {
    super(control, cdr);
    this.options = options;
    this.textfieldSize = textfieldSize;
    this.min = this.options.min.year;
    this.max = this.options.max.year;
    this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
    this.open = false;
    this.nativeValue = "";
    this.initialItem = (/* @__PURE__ */ new Date()).getFullYear();
  }
  get size() {
    return this.textfieldSize.size;
  }
  get computedMin() {
    var _a;
    return (_a = this.min) !== null && _a !== void 0 ? _a : this.options.min.year;
  }
  get computedMax() {
    var _a;
    return (_a = this.max) !== null && _a !== void 0 ? _a : this.options.max.year;
  }
  get nativeFocusableElement() {
    var _a;
    return ((_a = this.textfield) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) || null;
  }
  get focused() {
    var _a;
    return !!((_a = this.textfield) === null || _a === void 0 ? void 0 : _a.focused);
  }
  get calendarIcon() {
    return this.options.icon;
  }
  getMaskOptions(min, max) {
    return Object.assign(Object.assign({}, maskitoNumberOptionsGenerator({
      min,
      max,
      thousandSeparator: ""
    })), {
      mask: UP_TO_4_DIGITS_REG
    });
  }
  onValueChange(value) {
    this.value = value ? Number(value) : null;
  }
  onYearClick({
    year
  }) {
    this.value = year;
    this.updateNativeValue(year);
    this.onOpenChange(false);
  }
  onFocused(focused) {
    this.updateFocused(focused);
  }
  onOpenChange(open) {
    this.open = open;
  }
  toggle() {
    this.open = !this.open;
  }
  writeValue(value) {
    super.writeValue(value);
    this.updateNativeValue(value);
  }
  updateNativeValue(value) {
    this.nativeValue = (value === null || value === void 0 ? void 0 : value.toString()) || "";
  }
};
TuiInputYearComponent.ɵfac = function TuiInputYearComponent_Factory(t) {
  return new (t || TuiInputYearComponent)(ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(TUI_INPUT_DATE_OPTIONS), ɵɵdirectiveInject(TUI_TEXTFIELD_SIZE));
};
TuiInputYearComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiInputYearComponent,
  selectors: [["tui-input-year"]],
  viewQuery: function TuiInputYearComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(TuiPrimitiveTextfieldComponent, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.textfield = _t.first);
    }
  },
  hostVars: 1,
  hostBindings: function TuiInputYearComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("data-size", ctx.size);
    }
  },
  inputs: {
    min: "min",
    max: "max",
    disabledItemHandler: "disabledItemHandler"
  },
  features: [ɵɵProvidersFeature([tuiAsFocusableItemAccessor(TuiInputYearComponent), tuiAsControl(TuiInputYearComponent)]), ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c127,
  decls: 6,
  vars: 12,
  consts: [[1, "t-hosted", 3, "canOpen", "content", "open", "click", "openChange"], [1, "t-textfield", 3, "disabled", "invalid", "maskito", "nativeId", "pseudoFocus", "pseudoHover", "readOnly", "tuiTextfieldIcon", "value", "valueChange", "focusedChange"], ["dropdown", ""], [1, "t-container"], [1, "t-scrollbar"], [3, "disabledItemHandler", "initialItem", "max", "min", "value", "mousedown.prevent.silent", "yearClick"]],
  template: function TuiInputYearComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c036);
      ɵɵelementStart(0, "tui-hosted-dropdown", 0);
      ɵɵlistener("click", function TuiInputYearComponent_Template_tui_hosted_dropdown_click_0_listener() {
        return ctx.toggle();
      })("openChange", function TuiInputYearComponent_Template_tui_hosted_dropdown_openChange_0_listener($event) {
        return ctx.onOpenChange($event);
      });
      ɵɵelementStart(1, "tui-primitive-textfield", 1);
      ɵɵlistener("valueChange", function TuiInputYearComponent_Template_tui_primitive_textfield_valueChange_1_listener($event) {
        return ctx.nativeValue = $event;
      })("focusedChange", function TuiInputYearComponent_Template_tui_primitive_textfield_focusedChange_1_listener($event) {
        return ctx.onFocused($event);
      })("valueChange", function TuiInputYearComponent_Template_tui_primitive_textfield_valueChange_1_listener($event) {
        return ctx.onValueChange($event);
      });
      ɵɵprojection(2);
      ɵɵprojection(3, 1, ["ngProjectAs", "input", 5, ["input"]]);
      ɵɵelementEnd();
      ɵɵtemplate(4, TuiInputYearComponent_ng_template_4_Template, 7, 13, "ng-template", null, 2, ɵɵtemplateRefExtractor);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      const _r0 = ɵɵreference(5);
      ɵɵproperty("canOpen", ctx.interactive)("content", _r0)("open", ctx.open && ctx.interactive);
      ɵɵadvance(1);
      ɵɵproperty("disabled", ctx.computedDisabled)("invalid", ctx.computedInvalid)("maskito", ctx.getMaskOptions(ctx.computedMin, ctx.computedMax))("nativeId", ctx.nativeId)("pseudoFocus", ctx.pseudoFocus)("pseudoHover", ctx.pseudoHover)("readOnly", ctx.readOnly)("tuiTextfieldIcon", ctx.calendarIcon)("value", ctx.nativeValue);
    }
  },
  dependencies: [TuiHostedDropdownComponent, TuiPrimitiveTextfieldComponent, TuiScrollbarComponent, TuiPrimitiveYearPickerComponent, TuiPrimitiveTextfieldDirective, MaskitoDirective, TuiTextfieldIconDirective, TuiToYearPipe],
  styles: ["[_nghost-%COMP%]{display:block;border-radius:var(--tui-radius-m);text-align:left}.t-hosted[_ngcontent-%COMP%]{display:block;border-radius:inherit}.t-container[_ngcontent-%COMP%]{width:15.75rem;padding:1rem 1.125rem}.t-scrollbar[_ngcontent-%COMP%]{max-height:18.25rem;width:16.875rem}.t-textfield[_ngcontent-%COMP%]{border-radius:inherit;text-align:inherit}"],
  changeDetection: 0
});
__decorate([tuiPure], TuiInputYearComponent.prototype, "getMaskOptions", null);
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputYearComponent, [{
    type: Component,
    args: [{
      selector: "tui-input-year",
      templateUrl: "./input-year.template.html",
      styleUrls: ["./input-year.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [tuiAsFocusableItemAccessor(TuiInputYearComponent), tuiAsControl(TuiInputYearComponent)]
    }]
  }], function() {
    return [{
      type: NgControl,
      decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NgControl]
      }]
    }, {
      type: ChangeDetectorRef,
      decorators: [{
        type: Inject,
        args: [ChangeDetectorRef]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_INPUT_DATE_OPTIONS]
      }]
    }, {
      type: TuiTextfieldSizeDirective,
      decorators: [{
        type: Inject,
        args: [TUI_TEXTFIELD_SIZE]
      }]
    }];
  }, {
    textfield: [{
      type: ViewChild,
      args: [TuiPrimitiveTextfieldComponent]
    }],
    min: [{
      type: Input
    }],
    max: [{
      type: Input
    }],
    disabledItemHandler: [{
      type: Input
    }],
    size: [{
      type: HostBinding,
      args: ["attr.data-size"]
    }],
    getMaskOptions: []
  });
})();
var TuiInputYearDirective = class extends AbstractTuiTextfieldHost {
  onValueChange(value) {
    this.host.onValueChange(value);
    this.host.nativeValue = value;
  }
  get value() {
    return this.host.nativeValue;
  }
  process(input) {
    input.inputMode = "numeric";
  }
};
TuiInputYearDirective.ɵfac = function() {
  let ɵTuiInputYearDirective_BaseFactory;
  return function TuiInputYearDirective_Factory(t) {
    return (ɵTuiInputYearDirective_BaseFactory || (ɵTuiInputYearDirective_BaseFactory = ɵɵgetInheritedFactory(TuiInputYearDirective)))(t || TuiInputYearDirective);
  };
}();
TuiInputYearDirective.ɵdir = ɵɵdefineDirective({
  type: TuiInputYearDirective,
  selectors: [["tui-input-year"]],
  features: [ɵɵProvidersFeature([tuiAsTextfieldHost(TuiInputYearDirective)]), ɵɵInheritDefinitionFeature]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputYearDirective, [{
    type: Directive,
    args: [{
      selector: "tui-input-year",
      providers: [tuiAsTextfieldHost(TuiInputYearDirective)]
    }]
  }], null, null);
})();
var TuiInputYearModule = class {
};
TuiInputYearModule.ɵfac = function TuiInputYearModule_Factory(t) {
  return new (t || TuiInputYearModule)();
};
TuiInputYearModule.ɵmod = ɵɵdefineNgModule({
  type: TuiInputYearModule,
  declarations: [TuiInputYearComponent, TuiInputYearDirective],
  imports: [MaskitoModule, TuiHostedDropdownModule, TuiPrimitiveTextfieldModule, TuiPrimitiveYearPickerModule, TuiScrollbarModule, TuiTextfieldControllerModule, TuiToYearPipeModule],
  exports: [TuiInputYearComponent, TuiInputYearDirective, TuiTextfieldComponent]
});
TuiInputYearModule.ɵinj = ɵɵdefineInjector({
  imports: [[MaskitoModule, TuiHostedDropdownModule, TuiPrimitiveTextfieldModule, TuiPrimitiveYearPickerModule, TuiScrollbarModule, TuiTextfieldControllerModule, TuiToYearPipeModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiInputYearModule, [{
    type: NgModule,
    args: [{
      imports: [MaskitoModule, TuiHostedDropdownModule, TuiPrimitiveTextfieldModule, TuiPrimitiveYearPickerModule, TuiScrollbarModule, TuiTextfieldControllerModule, TuiToYearPipeModule],
      declarations: [TuiInputYearComponent, TuiInputYearDirective],
      exports: [TuiInputYearComponent, TuiInputYearDirective, TuiTextfieldComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-island.js
var _c037 = ["*"];
var TuiIslandComponent = class {
  constructor() {
    this.size = "m";
    this.textAlign = "left";
    this.hoverable = false;
    this.transparent = false;
  }
  get sizeS() {
    return this.size === "s";
  }
  get sizeM() {
    return this.size === "m";
  }
  get sizeL() {
    return this.size === "l";
  }
  get textAlignLeft() {
    return this.textAlign === "left";
  }
  get textAlignCenter() {
    return this.textAlign === "center";
  }
  get textAlignRight() {
    return this.textAlign === "right";
  }
};
TuiIslandComponent.ɵfac = function TuiIslandComponent_Factory(t) {
  return new (t || TuiIslandComponent)();
};
TuiIslandComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiIslandComponent,
  selectors: [["tui-island"], ["a", "tuiIsland", ""]],
  hostAttrs: [1, "tui-island"],
  hostVars: 16,
  hostBindings: function TuiIslandComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("tui-island_hoverable", ctx.hoverable)("tui-island_transparent", ctx.transparent)("tui-island_size_s", ctx.sizeS)("tui-island_size_m", ctx.sizeM)("tui-island_size_l", ctx.sizeL)("tui-island_text-align_left", ctx.textAlignLeft)("tui-island_text-align_center", ctx.textAlignCenter)("tui-island_text-align_right", ctx.textAlignRight);
    }
  },
  inputs: {
    size: "size",
    textAlign: "textAlign",
    hoverable: "hoverable",
    transparent: "transparent"
  },
  ngContentSelectors: _c037,
  decls: 1,
  vars: 0,
  template: function TuiIslandComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵprojection(0);
    }
  },
  styles: ["[_nghost-%COMP%]{display:block}"],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiIslandComponent, [{
    type: Component,
    args: [{
      selector: "tui-island, a[tuiIsland]",
      templateUrl: "./island.template.html",
      styleUrls: ["./island.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      host: {
        class: "tui-island"
      }
    }]
  }], null, {
    size: [{
      type: Input
    }],
    textAlign: [{
      type: Input
    }],
    hoverable: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["class.tui-island_hoverable"]
    }],
    transparent: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["class.tui-island_transparent"]
    }],
    sizeS: [{
      type: HostBinding,
      args: ["class.tui-island_size_s"]
    }],
    sizeM: [{
      type: HostBinding,
      args: ["class.tui-island_size_m"]
    }],
    sizeL: [{
      type: HostBinding,
      args: ["class.tui-island_size_l"]
    }],
    textAlignLeft: [{
      type: HostBinding,
      args: ["class.tui-island_text-align_left"]
    }],
    textAlignCenter: [{
      type: HostBinding,
      args: ["class.tui-island_text-align_center"]
    }],
    textAlignRight: [{
      type: HostBinding,
      args: ["class.tui-island_text-align_right"]
    }]
  });
})();
var TuiIslandModule = class {
};
TuiIslandModule.ɵfac = function TuiIslandModule_Factory(t) {
  return new (t || TuiIslandModule)();
};
TuiIslandModule.ɵmod = ɵɵdefineNgModule({
  type: TuiIslandModule,
  declarations: [TuiIslandComponent],
  imports: [CommonModule],
  exports: [TuiIslandComponent]
});
TuiIslandModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiIslandModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule],
      declarations: [TuiIslandComponent],
      exports: [TuiIslandComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-items-with-more.js
function TuiItemsWithMoreComponent_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function TuiItemsWithMoreComponent_ng_container_2_div_1_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
var _c038 = function() {
  return ["_active"];
};
function TuiItemsWithMoreComponent_ng_container_2_div_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 4);
    ɵɵtemplate(1, TuiItemsWithMoreComponent_ng_container_2_div_1_ng_container_1_Template, 1, 0, "ng-container", 5);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const item_r5 = ctx.$implicit;
    const index_r6 = ctx.index;
    const lastIndex_r2 = ɵɵnextContext().tuiLet;
    const ctx_r3 = ɵɵnextContext();
    ɵɵclassProp("t-item_hidden", index_r6 > lastIndex_r2 && index_r6 !== ctx_r3.directive.required);
    ɵɵproperty("tuiProjectClass", ɵɵpureFunction0(4, _c038));
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", item_r5);
  }
}
var _c128 = function(a0) {
  return {
    $implicit: a0
  };
};
function TuiItemsWithMoreComponent_ng_container_2_span_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "span", 4);
    ɵɵelementContainer(1, 6);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const lastIndex_r2 = ɵɵnextContext().tuiLet;
    const ctx_r4 = ɵɵnextContext();
    ɵɵclassProp("t-item_hidden", lastIndex_r2 >= ctx_r4.items.length - 1);
    ɵɵproperty("tuiProjectClass", ɵɵpureFunction0(5, _c038));
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", ctx_r4.more)("ngTemplateOutletContext", ɵɵpureFunction1(6, _c128, lastIndex_r2));
  }
}
function TuiItemsWithMoreComponent_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, TuiItemsWithMoreComponent_ng_container_2_div_1_Template, 2, 5, "div", 2);
    ɵɵtemplate(2, TuiItemsWithMoreComponent_ng_container_2_span_2_Template, 2, 8, "span", 3);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const lastIndex_r2 = ctx.tuiLet;
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", ctx_r1.items);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r1.more && lastIndex_r2 < ctx_r1.items.length - 1);
  }
}
var TuiItemsWithMoreDirective = class extends AbstractTuiController {
  constructor() {
    super(...arguments);
    this.itemsLimit = Infinity;
    this.required = -1;
  }
};
TuiItemsWithMoreDirective.ɵfac = function() {
  let ɵTuiItemsWithMoreDirective_BaseFactory;
  return function TuiItemsWithMoreDirective_Factory(t) {
    return (ɵTuiItemsWithMoreDirective_BaseFactory || (ɵTuiItemsWithMoreDirective_BaseFactory = ɵɵgetInheritedFactory(TuiItemsWithMoreDirective)))(t || TuiItemsWithMoreDirective);
  };
}();
TuiItemsWithMoreDirective.ɵdir = ɵɵdefineDirective({
  type: TuiItemsWithMoreDirective,
  selectors: [["tui-items-with-more"]],
  inputs: {
    itemsLimit: "itemsLimit",
    required: "required"
  },
  features: [ɵɵInheritDefinitionFeature]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiItemsWithMoreDirective, [{
    type: Directive,
    args: [{
      selector: "tui-items-with-more"
    }]
  }], null, {
    itemsLimit: [{
      type: Input
    }],
    required: [{
      type: Input
    }]
  });
})();
var TuiItemsWithMoreService = class extends Observable {
  constructor(zone, el, mutation$, resize$, directive) {
    super((subscriber) => this.stream$.subscribe(subscriber));
    this.zone = zone;
    this.el = el;
    this.mutation$ = mutation$;
    this.resize$ = resize$;
    this.directive = directive;
    this.stream$ = merge(this.directive.change$, this.mutation$, this.resize$).pipe(throttleTime(0), map(() => this.getOverflowIndex()), distinctUntilChanged(), tuiZoneOptimized(this.zone), share());
  }
  getOverflowIndex() {
    var _a;
    const {
      clientWidth,
      children
    } = this.el.nativeElement;
    const items = Array.from(children, ({
      clientWidth: clientWidth2
    }) => clientWidth2);
    const first = this.directive.required === -1 ? 0 : this.directive.required;
    const last = items.length - 1;
    const more = ((_a = children[last]) === null || _a === void 0 ? void 0 : _a.tagName) === "SPAN" ? items[last] : 0;
    items.unshift(...items.splice(first, 1));
    let total = items.reduce((sum, width) => sum + width, 0) - more;
    if (total <= clientWidth && this.directive.itemsLimit >= items.length) {
      return this.maxItems;
    }
    for (let i = last - 1; i > 0; i--) {
      total -= items[i];
      if (total + more <= clientWidth) {
        return tuiClamp(i > this.directive.required ? i - 1 : i - 2, -1, this.maxItems);
      }
    }
    return -1;
  }
  get maxItems() {
    return this.directive.itemsLimit > this.directive.required ? this.directive.itemsLimit - 1 : this.directive.itemsLimit - 2;
  }
};
TuiItemsWithMoreService.ɵfac = function TuiItemsWithMoreService_Factory(t) {
  return new (t || TuiItemsWithMoreService)(ɵɵinject(NgZone), ɵɵinject(ElementRef), ɵɵinject(MutationObserverService), ɵɵinject(TuiResizeService), ɵɵinject(TuiItemsWithMoreDirective));
};
TuiItemsWithMoreService.ɵprov = ɵɵdefineInjectable({
  token: TuiItemsWithMoreService,
  factory: TuiItemsWithMoreService.ɵfac
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiItemsWithMoreService, [{
    type: Injectable
  }], function() {
    return [{
      type: NgZone,
      decorators: [{
        type: Inject,
        args: [NgZone]
      }]
    }, {
      type: ElementRef,
      decorators: [{
        type: Inject,
        args: [ElementRef]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Inject,
        args: [MutationObserverService]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Inject,
        args: [TuiResizeService]
      }]
    }, {
      type: TuiItemsWithMoreDirective,
      decorators: [{
        type: Inject,
        args: [TuiItemsWithMoreDirective]
      }]
    }];
  }, null);
})();
var TuiMoreDirective = class {
  static ngTemplateContextGuard(_dir, _ctx) {
    return true;
  }
};
TuiMoreDirective.ɵfac = function TuiMoreDirective_Factory(t) {
  return new (t || TuiMoreDirective)();
};
TuiMoreDirective.ɵdir = ɵɵdefineDirective({
  type: TuiMoreDirective,
  selectors: [["", "tuiMore", ""]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiMoreDirective, [{
    type: Directive,
    args: [{
      selector: "[tuiMore]"
    }]
  }], null, null);
})();
var TuiItemsWithMoreComponent = class {
  constructor(directive, lastVisibleIndex$) {
    this.directive = directive;
    this.lastVisibleIndex$ = lastVisibleIndex$;
    this.items = EMPTY_QUERY;
  }
};
TuiItemsWithMoreComponent.ɵfac = function TuiItemsWithMoreComponent_Factory(t) {
  return new (t || TuiItemsWithMoreComponent)(ɵɵdirectiveInject(TuiItemsWithMoreDirective), ɵɵdirectiveInject(TuiItemsWithMoreService));
};
TuiItemsWithMoreComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiItemsWithMoreComponent,
  selectors: [["tui-items-with-more"]],
  contentQueries: function TuiItemsWithMoreComponent_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, TuiMoreDirective, 5, TemplateRef);
      ɵɵcontentQuery(dirIndex, TuiItemDirective, 5, TemplateRef);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.more = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.items = _t);
    }
  },
  features: [ɵɵProvidersFeature([MutationObserverService, TuiResizeService, TuiDestroyService, TuiItemsWithMoreService, {
    provide: MUTATION_OBSERVER_INIT,
    useValue: {
      childList: true,
      characterData: true,
      subtree: true
    }
  }])],
  decls: 4,
  vars: 6,
  consts: [[4, "ngIf"], [4, "tuiLet"], ["class", "t-item", 3, "t-item_hidden", "tuiProjectClass", 4, "ngFor", "ngForOf"], ["class", "t-item", 3, "t-item_hidden", "tuiProjectClass", 4, "ngIf"], [1, "t-item", 3, "tuiProjectClass"], [4, "ngTemplateOutlet"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"]],
  template: function TuiItemsWithMoreComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵtemplate(0, TuiItemsWithMoreComponent_ng_container_0_Template, 1, 0, "ng-container", 0);
      ɵɵpipe(1, "async");
      ɵɵtemplate(2, TuiItemsWithMoreComponent_ng_container_2_Template, 3, 2, "ng-container", 1);
      ɵɵpipe(3, "async");
    }
    if (rf & 2) {
      ɵɵproperty("ngIf", ɵɵpipeBind1(1, 2, ctx.items.changes));
      ɵɵadvance(2);
      ɵɵproperty("tuiLet", ɵɵpipeBind1(3, 4, ctx.lastVisibleIndex$) || 0);
    }
  },
  dependencies: [NgIf, TuiLetDirective, NgForOf, TuiProjectClassDirective, NgTemplateOutlet, AsyncPipe],
  styles: ["[_nghost-%COMP%]{position:relative;display:flex;align-items:center;white-space:nowrap}.t-item[_ngcontent-%COMP%]{flex:0 0 auto}.t-item_hidden[_ngcontent-%COMP%]{position:absolute;visibility:hidden}"],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiItemsWithMoreComponent, [{
    type: Component,
    args: [{
      selector: "tui-items-with-more",
      templateUrl: "./items-with-more.template.html",
      styleUrls: ["./items-with-more.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [MutationObserverService, TuiResizeService, TuiDestroyService, TuiItemsWithMoreService, {
        provide: MUTATION_OBSERVER_INIT,
        useValue: {
          childList: true,
          characterData: true,
          subtree: true
        }
      }]
    }]
  }], function() {
    return [{
      type: TuiItemsWithMoreDirective,
      decorators: [{
        type: Inject,
        args: [TuiItemsWithMoreDirective]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Inject,
        args: [TuiItemsWithMoreService]
      }]
    }];
  }, {
    items: [{
      type: ContentChildren,
      args: [TuiItemDirective, {
        read: TemplateRef,
        descendants: true
      }]
    }],
    more: [{
      type: ContentChild,
      args: [TuiMoreDirective, {
        read: TemplateRef
      }]
    }]
  });
})();
var TuiItemsWithMoreModule = class {
};
TuiItemsWithMoreModule.ɵfac = function TuiItemsWithMoreModule_Factory(t) {
  return new (t || TuiItemsWithMoreModule)();
};
TuiItemsWithMoreModule.ɵmod = ɵɵdefineNgModule({
  type: TuiItemsWithMoreModule,
  declarations: [TuiItemsWithMoreComponent, TuiItemsWithMoreDirective, TuiMoreDirective],
  imports: [CommonModule, TuiItemModule, TuiLetModule, TuiProjectClassModule],
  exports: [TuiItemsWithMoreComponent, TuiItemsWithMoreDirective, TuiMoreDirective, TuiItemDirective]
});
TuiItemsWithMoreModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, TuiItemModule, TuiLetModule, TuiProjectClassModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiItemsWithMoreModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, TuiItemModule, TuiLetModule, TuiProjectClassModule],
      declarations: [TuiItemsWithMoreComponent, TuiItemsWithMoreDirective, TuiMoreDirective],
      exports: [TuiItemsWithMoreComponent, TuiItemsWithMoreDirective, TuiMoreDirective, TuiItemDirective]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-line-clamp.js
function TuiLineClampBoxComponent_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtext(1);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const text_r1 = ctx.polymorpheusOutlet;
    ɵɵadvance(1);
    ɵɵtextInterpolate(text_r1);
  }
}
function TuiLineClampComponent_div_0_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtext(1);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const text_r3 = ctx.polymorpheusOutlet;
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", text_r3, " ");
  }
}
function TuiLineClampComponent_div_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 1);
    ɵɵlistener("mouseenter", function TuiLineClampComponent_div_0_Template_div_mouseenter_0_listener() {
      ɵɵrestoreView(_r5);
      const ctx_r4 = ɵɵnextContext();
      return ɵɵresetView(ctx_r4.updateView());
    })("tuiResize", function TuiLineClampComponent_div_0_Template_div_tuiResize_0_listener() {
      ɵɵrestoreView(_r5);
      const ctx_r6 = ɵɵnextContext();
      return ɵɵresetView(ctx_r6.updateView());
    });
    ɵɵtemplate(1, TuiLineClampComponent_div_0_ng_container_1_Template, 2, 1, "ng-container", 2);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const lineClamp_r1 = ctx.tuiLet;
    const ctx_r0 = ɵɵnextContext();
    ɵɵstyleProp("-webkit-line-clamp", lineClamp_r1)("word-break", (lineClamp_r1 || 0) > 1 ? "break-word" : "break-all");
    ɵɵproperty("tuiHint", ctx_r0.computedContent);
    ɵɵadvance(1);
    ɵɵproperty("polymorpheusOutlet", ctx_r0.content);
  }
}
var TUI_LINE_CLAMP_DEFAULT_OPTIONS = {
  showHint: true
};
var TUI_LINE_CLAMP_OPTIONS = tuiCreateToken(TUI_LINE_CLAMP_DEFAULT_OPTIONS);
function tuiLineClampOptionsProvider(options) {
  return tuiProvideOptions(TUI_LINE_CLAMP_OPTIONS, options, TUI_LINE_CLAMP_DEFAULT_OPTIONS);
}
var TuiLineClampBoxComponent = class extends TuiHintComponent {
  get width() {
    return this.accessor.getClientRect().width;
  }
};
TuiLineClampBoxComponent.ɵfac = function() {
  let ɵTuiLineClampBoxComponent_BaseFactory;
  return function TuiLineClampBoxComponent_Factory(t) {
    return (ɵTuiLineClampBoxComponent_BaseFactory || (ɵTuiLineClampBoxComponent_BaseFactory = ɵɵgetInheritedFactory(TuiLineClampBoxComponent)))(t || TuiLineClampBoxComponent);
  };
}();
TuiLineClampBoxComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiLineClampBoxComponent,
  selectors: [["tui-line-clamp-box"]],
  hostVars: 2,
  hostBindings: function TuiLineClampBoxComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵstyleProp("min-width", ctx.width, "px");
    }
  },
  features: [ɵɵProvidersFeature([TuiDestroyService, TuiPositionService, TuiHoveredService, tuiPositionAccessorFor("hint", TuiHintPositionDirective), tuiRectAccessorFor("hint", TuiHintDirective)]), ɵɵInheritDefinitionFeature],
  decls: 1,
  vars: 1,
  consts: [[4, "polymorpheusOutlet"]],
  template: function TuiLineClampBoxComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵtemplate(0, TuiLineClampBoxComponent_ng_container_0_Template, 2, 1, "ng-container", 0);
    }
    if (rf & 2) {
      ɵɵproperty("polymorpheusOutlet", ctx.content);
    }
  },
  dependencies: [PolymorpheusOutletDirective],
  styles: ["[_nghost-%COMP%]{position:absolute;box-shadow:var(--tui-shadow-dropdown);width:-webkit-min-content;width:min-content;padding:.75rem 1rem;margin-left:calc(-1px - 1rem);margin-top:calc(-1px - .75rem);border-radius:var(--tui-radius-l);box-sizing:content-box;border:1px solid var(--tui-base-03);background:var(--tui-base-01);color:var(--tui-text-01);word-wrap:break-word}"],
  data: {
    animation: [tuiFadeIn]
  },
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiLineClampBoxComponent, [{
    type: Component,
    args: [{
      selector: "tui-line-clamp-box",
      template: `
        <ng-container *polymorpheusOutlet="content as text">{{ text }}</ng-container>
    `,
      styleUrls: ["./line-clamp-box.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [TuiDestroyService, TuiPositionService, TuiHoveredService, tuiPositionAccessorFor("hint", TuiHintPositionDirective), tuiRectAccessorFor("hint", TuiHintDirective)],
      animations: [tuiFadeIn]
    }]
  }], null, {
    width: [{
      type: HostBinding,
      args: ["style.minWidth.px"]
    }]
  });
})();
var TuiLineClampPositionDirective = class extends TuiPositionAccessor {
  constructor(accessor) {
    super();
    this.accessor = accessor;
    this.type = "hint";
  }
  getPosition() {
    const {
      top,
      left
    } = this.accessor.getClientRect();
    return [top, left];
  }
};
TuiLineClampPositionDirective.ɵfac = function TuiLineClampPositionDirective_Factory(t) {
  return new (t || TuiLineClampPositionDirective)(ɵɵdirectiveInject(TuiHintDirective));
};
TuiLineClampPositionDirective.ɵdir = ɵɵdefineDirective({
  type: TuiLineClampPositionDirective,
  selectors: [["", "tuiLineClamp", ""]],
  features: [ɵɵProvidersFeature([tuiAsPositionAccessor(TuiLineClampPositionDirective)]), ɵɵInheritDefinitionFeature]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiLineClampPositionDirective, [{
    type: Directive,
    args: [{
      selector: "[tuiLineClamp]",
      providers: [tuiAsPositionAccessor(TuiLineClampPositionDirective)]
    }]
  }], function() {
    return [{
      type: TuiRectAccessor,
      decorators: [{
        type: Inject,
        args: [TuiHintDirective]
      }]
    }];
  }, null);
})();
var TuiLineClampComponent = class {
  constructor(el, renderer, cd, zone, options) {
    this.el = el;
    this.renderer = renderer;
    this.cd = cd;
    this.zone = zone;
    this.options = options;
    this.linesLimit$ = new BehaviorSubject(1);
    this.isOverflown$ = new Subject();
    this.initialized = false;
    this.lineHeight = 24;
    this.overflownChange = this.isOverflown$.pipe(distinctUntilChanged());
    this.lineClamp$ = this.linesLimit$.pipe(startWith(1), pairwise(), switchMap(([prev, next]) => next >= prev ? of(next) : tuiTypedFromEvent(this.el.nativeElement, "transitionend").pipe(filter(tuiIsCurrentTarget), map(() => next))));
    this.skipInitialTransition();
  }
  set linesLimit(linesLimit) {
    this.linesLimit$.next(linesLimit);
  }
  get overflown() {
    if (!this.outlet) {
      return false;
    }
    const {
      scrollHeight,
      scrollWidth
    } = this.outlet.nativeElement;
    const {
      clientHeight,
      clientWidth
    } = this.el.nativeElement;
    return scrollHeight - clientHeight > 4 || scrollWidth - clientWidth > 0;
  }
  get computedContent() {
    return this.options.showHint && this.overflown ? this.content : "";
  }
  updateView() {
    this.cd.detectChanges();
  }
  ngDoCheck() {
    this.update();
    this.isOverflown$.next(this.overflown);
  }
  ngAfterViewInit() {
    this.initialized = true;
  }
  skipInitialTransition() {
    timer(0).pipe(tuiZonefree(this.zone)).subscribe(() => {
      this.renderer.addClass(this.el.nativeElement, "_initialized");
      this.cd.detectChanges();
    });
  }
  update() {
    if (this.outlet) {
      this.renderer.setStyle(this.el.nativeElement, "height", tuiPx(this.outlet.nativeElement.scrollHeight + 4));
    }
    if (this.initialized) {
      this.renderer.setStyle(this.el.nativeElement, "max-height", tuiPx(this.lineHeight * this.linesLimit$.value));
    }
  }
};
TuiLineClampComponent.ɵfac = function TuiLineClampComponent_Factory(t) {
  return new (t || TuiLineClampComponent)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(Renderer2), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(NgZone), ɵɵdirectiveInject(TUI_LINE_CLAMP_OPTIONS));
};
TuiLineClampComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiLineClampComponent,
  selectors: [["tui-line-clamp"]],
  viewQuery: function TuiLineClampComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(TuiHintDirective, 5, ElementRef);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.outlet = _t.first);
    }
  },
  hostBindings: function TuiLineClampComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("transitionend", function TuiLineClampComponent_transitionend_HostBindingHandler() {
        return ctx.updateView();
      });
    }
  },
  inputs: {
    linesLimit: "linesLimit",
    lineHeight: "lineHeight",
    content: "content"
  },
  outputs: {
    overflownChange: "overflownChange"
  },
  features: [ɵɵProvidersFeature([{
    provide: TUI_HINT_COMPONENT,
    useValue: TuiLineClampBoxComponent
  }])],
  decls: 2,
  vars: 3,
  consts: [["tuiLineClamp", "", "class", "t-wrapper", 3, "-webkit-line-clamp", "word-break", "tuiHint", "mouseenter", "tuiResize", 4, "tuiLet"], ["tuiLineClamp", "", 1, "t-wrapper", 3, "tuiHint", "mouseenter", "tuiResize"], [4, "polymorpheusOutlet"]],
  template: function TuiLineClampComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵtemplate(0, TuiLineClampComponent_div_0_Template, 2, 6, "div", 0);
      ɵɵpipe(1, "async");
    }
    if (rf & 2) {
      ɵɵproperty("tuiLet", ɵɵpipeBind1(1, 1, ctx.lineClamp$));
    }
  },
  dependencies: [TuiLetDirective, TuiLineClampPositionDirective, TuiHintDirective, TuiHintDriverDirective, TuiHintHoverDirective, TuiHintPositionDirective, TuiResizeDirective, PolymorpheusOutletDirective, AsyncPipe],
  styles: ["[_nghost-%COMP%]{position:relative;display:block;overflow:hidden}._initialized[_nghost-%COMP%]{transition-property:max-height;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out}.t-wrapper[_ngcontent-%COMP%]{display:-webkit-box;-webkit-box-orient:vertical;overflow:hidden;overflow-wrap:anywhere}.t-wrapper[_ngcontent-%COMP%]    >*{white-space:initial}"],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiLineClampComponent, [{
    type: Component,
    args: [{
      selector: "tui-line-clamp",
      templateUrl: "./line-clamp.template.html",
      styleUrls: ["./line-clamp.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [{
        provide: TUI_HINT_COMPONENT,
        useValue: TuiLineClampBoxComponent
      }]
    }]
  }], function() {
    return [{
      type: ElementRef,
      decorators: [{
        type: Inject,
        args: [ElementRef]
      }]
    }, {
      type: Renderer2,
      decorators: [{
        type: Inject,
        args: [Renderer2]
      }]
    }, {
      type: ChangeDetectorRef,
      decorators: [{
        type: Inject,
        args: [ChangeDetectorRef]
      }]
    }, {
      type: NgZone,
      decorators: [{
        type: Inject,
        args: [NgZone]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_LINE_CLAMP_OPTIONS]
      }]
    }];
  }, {
    outlet: [{
      type: ViewChild,
      args: [TuiHintDirective, {
        read: ElementRef
      }]
    }],
    linesLimit: [{
      type: Input
    }],
    lineHeight: [{
      type: Input
    }],
    content: [{
      type: Input
    }],
    overflownChange: [{
      type: Output
    }],
    updateView: [{
      type: HostListener,
      args: ["transitionend"]
    }]
  });
})();
var TuiLineClampModule = class {
};
TuiLineClampModule.ɵfac = function TuiLineClampModule_Factory(t) {
  return new (t || TuiLineClampModule)();
};
TuiLineClampModule.ɵmod = ɵɵdefineNgModule({
  type: TuiLineClampModule,
  declarations: [TuiLineClampComponent, TuiLineClampBoxComponent, TuiLineClampPositionDirective],
  imports: [CommonModule, PolymorpheusModule, TuiHintModule, TuiResizeModule, TuiLetModule],
  exports: [TuiLineClampComponent]
});
TuiLineClampModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, PolymorpheusModule, TuiHintModule, TuiResizeModule, TuiLetModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiLineClampModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, PolymorpheusModule, TuiHintModule, TuiResizeModule, TuiLetModule],
      declarations: [TuiLineClampComponent, TuiLineClampBoxComponent, TuiLineClampPositionDirective],
      exports: [TuiLineClampComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-pagination.js
var _c039 = ["element"];
function TuiPaginationComponent_ng_container_1_ng_container_1_ng_container_2_ng_container_1_button_1_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtext(1);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const text_r14 = ctx.polymorpheusOutlet;
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", text_r14, " ");
  }
}
var _c129 = function(a0) {
  return {
    $implicit: a0
  };
};
function TuiPaginationComponent_ng_container_1_ng_container_1_ng_container_2_ng_container_1_button_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r17 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 9, 10);
    ɵɵlistener("click", function TuiPaginationComponent_ng_container_1_ng_container_1_ng_container_2_ng_container_1_button_1_Template_button_click_0_listener() {
      ɵɵrestoreView(_r17);
      const index_r10 = ɵɵnextContext().tuiLet;
      const ctx_r15 = ɵɵnextContext(4);
      return ɵɵresetView(ctx_r15.onElementClick(index_r10));
    })("keydown.arrowLeft.prevent", function TuiPaginationComponent_ng_container_1_ng_container_1_ng_container_2_ng_container_1_button_1_Template_button_keydown_arrowLeft_prevent_0_listener() {
      ɵɵrestoreView(_r17);
      const _r12 = ɵɵreference(1);
      const ctx_r18 = ɵɵnextContext(5);
      return ɵɵresetView(ctx_r18.onElementKeyDownArrowLeft(_r12));
    })("keydown.arrowRight.prevent", function TuiPaginationComponent_ng_container_1_ng_container_1_ng_container_2_ng_container_1_button_1_Template_button_keydown_arrowRight_prevent_0_listener() {
      ɵɵrestoreView(_r17);
      const _r12 = ɵɵreference(1);
      const ctx_r19 = ɵɵnextContext(5);
      return ɵɵresetView(ctx_r19.onElementKeyDownArrowRight(_r12));
    });
    ɵɵtemplate(2, TuiPaginationComponent_ng_container_1_ng_container_1_ng_container_2_ng_container_1_button_1_ng_container_2_Template, 2, 1, "ng-container", 11);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const index_r10 = ɵɵnextContext().tuiLet;
    const ctx_r11 = ɵɵnextContext(4);
    ɵɵproperty("appearance", ctx_r11.getElementMode(index_r10))("disabled", ctx_r11.disabled)("focusable", ctx_r11.elementIsFocusable(index_r10))("size", ctx_r11.buttonSize);
    ɵɵadvance(2);
    ɵɵproperty("polymorpheusOutlet", ctx_r11.content || index_r10 + 1)("polymorpheusOutletContext", ɵɵpureFunction1(6, _c129, index_r10));
  }
}
function TuiPaginationComponent_ng_container_1_ng_container_1_ng_container_2_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, TuiPaginationComponent_ng_container_1_ng_container_1_ng_container_2_ng_container_1_button_1_Template, 3, 8, "button", 8);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const index_r10 = ctx.tuiLet;
    ɵɵnextContext(4);
    const _r3 = ɵɵreference(5);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", index_r10 !== null)("ngIfElse", _r3);
  }
}
function TuiPaginationComponent_ng_container_1_ng_container_1_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, TuiPaginationComponent_ng_container_1_ng_container_1_ng_container_2_ng_container_1_Template, 2, 2, "ng-container", 7);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const elementIndex_r8 = ctx.$implicit;
    const ctx_r7 = ɵɵnextContext(3);
    ɵɵadvance(1);
    ɵɵproperty("tuiLet", ctx_r7.getItemIndexByElementIndex(elementIndex_r8));
  }
}
function TuiPaginationComponent_ng_container_1_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r22 = ɵɵgetCurrentView();
    ɵɵelementContainerStart(0);
    ɵɵelementStart(1, "button", 5);
    ɵɵlistener("click", function TuiPaginationComponent_ng_container_1_ng_container_1_Template_button_click_1_listener() {
      ɵɵrestoreView(_r22);
      const ctx_r21 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r21.onArrowClick("left"));
    })("mousedown.silent.prevent", function TuiPaginationComponent_ng_container_1_ng_container_1_Template_button_mousedown_silent_prevent_1_listener() {
      return 0;
    });
    ɵɵelementEnd();
    ɵɵtemplate(2, TuiPaginationComponent_ng_container_1_ng_container_1_ng_container_2_Template, 2, 1, "ng-container", 6);
    ɵɵelementStart(3, "button", 5);
    ɵɵlistener("click", function TuiPaginationComponent_ng_container_1_ng_container_1_Template_button_click_3_listener() {
      ɵɵrestoreView(_r22);
      const ctx_r24 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r24.onArrowClick("right"));
    })("mousedown.silent.prevent", function TuiPaginationComponent_ng_container_1_ng_container_1_Template_button_mousedown_silent_prevent_3_listener() {
      return 0;
    });
    ɵɵelementEnd();
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const texts_r6 = ctx.ngIf;
    const ctx_r5 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("disabled", ctx_r5.arrowIsDisabledLeft)("focusable", false)("icon", ctx_r5.icons.decrement)("size", ctx_r5.buttonSize)("title", texts_r6[0]);
    ɵɵadvance(1);
    ɵɵproperty("tuiRepeatTimesOf", ctx_r5.elementsLength);
    ɵɵadvance(1);
    ɵɵproperty("disabled", ctx_r5.arrowIsDisabledRight)("focusable", false)("icon", ctx_r5.icons.increment)("size", ctx_r5.buttonSize)("title", texts_r6[1]);
  }
}
function TuiPaginationComponent_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, TuiPaginationComponent_ng_container_1_ng_container_1_Template, 4, 11, "ng-container", 4);
    ɵɵpipe(2, "async");
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ɵɵpipeBind1(2, 1, ctx_r0.texts$));
  }
}
function TuiPaginationComponent_ng_template_2_button_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r30 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 13, 10);
    ɵɵlistener("click", function TuiPaginationComponent_ng_template_2_button_0_Template_button_click_0_listener() {
      const restoredCtx = ɵɵrestoreView(_r30);
      const indexItem_r27 = restoredCtx.$implicit;
      const ctx_r29 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r29.onElementClick(indexItem_r27));
    })("keydown.arrowLeft.prevent", function TuiPaginationComponent_ng_template_2_button_0_Template_button_keydown_arrowLeft_prevent_0_listener() {
      ɵɵrestoreView(_r30);
      const _r28 = ɵɵreference(1);
      const ctx_r31 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r31.onElementKeyDownArrowLeft(_r28));
    })("keydown.arrowRight.prevent", function TuiPaginationComponent_ng_template_2_button_0_Template_button_keydown_arrowRight_prevent_0_listener() {
      ɵɵrestoreView(_r30);
      const _r28 = ɵɵreference(1);
      const ctx_r32 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r32.onElementKeyDownArrowRight(_r28));
    });
    ɵɵpipe(2, "async");
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const indexItem_r27 = ctx.$implicit;
    const ctx_r26 = ɵɵnextContext(2);
    ɵɵclassProp("t-button_active", indexItem_r27 === ctx_r26.index);
    ɵɵproperty("appearance", ctx_r26.getSmallElementMode(indexItem_r27, ɵɵpipeBind1(2, 5, ctx_r26.mode$)))("disabled", ctx_r26.disabled)("focusable", ctx_r26.elementIsFocusable(indexItem_r27));
  }
}
function TuiPaginationComponent_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtemplate(0, TuiPaginationComponent_ng_template_2_button_0_Template, 3, 7, "button", 12);
  }
  if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵproperty("tuiRepeatTimesOf", ctx_r2.length);
  }
}
function TuiPaginationComponent_ng_template_4_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "div", 14);
  }
}
var DOTS_LENGTH = 1;
var ACTIVE_ITEM_LENGTH = 1;
var TuiPaginationComponent = class extends AbstractTuiInteractive {
  constructor(el, modeDirective, texts$, icons) {
    super();
    this.el = el;
    this.modeDirective = modeDirective;
    this.texts$ = texts$;
    this.icons = icons;
    this.els = EMPTY_QUERY;
    this.length = 1;
    this.size = "l";
    this.disabled = false;
    this.activePadding = 1;
    this.sidePadding = 1;
    this.index = 0;
    this.indexChange = new EventEmitter();
    this.mode$ = this.modeDirective ? this.modeDirective.change$.pipe(map(() => {
      var _a;
      return ((_a = this.modeDirective) === null || _a === void 0 ? void 0 : _a.mode) || null;
    })) : EMPTY;
  }
  get nativeFocusableElement() {
    var _a, _b;
    if (this.disabled) {
      return null;
    }
    let activeElementIndex = 0;
    const {
      elementsLength
    } = this;
    for (let i = 0; i < elementsLength; i++) {
      const itemIndex = this.getItemIndexByElementIndex(i);
      if (itemIndex) {
        activeElementIndex++;
      }
      if (itemIndex === this.index) {
        break;
      }
    }
    return (_b = (_a = this.els.find((_, index) => index === activeElementIndex)) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) !== null && _b !== void 0 ? _b : null;
  }
  get focused() {
    return tuiIsNativeFocusedIn(this.el.nativeElement);
  }
  /**
   * Number of items in a container.
   */
  get elementsLength() {
    return this.itemsFit ? this.length : this.maxElementsLength;
  }
  get buttonSize() {
    return this.size === "m" ? "xs" : "s";
  }
  get arrowIsDisabledLeft() {
    return this.index === 0;
  }
  get arrowIsDisabledRight() {
    return this.reverseIndex === 0;
  }
  elementIsFocusable(index) {
    return this.index === index && !this.focused;
  }
  /**
   * Get index by element index
   * @param elementIndex
   * @returns index or null (for '…')
   */
  getItemIndexByElementIndex(elementIndex) {
    if (this.size === "s") {
      return elementIndex;
    }
    if (elementIndex < this.sidePadding) {
      return elementIndex;
    }
    if (elementIndex === this.sidePadding && this.hasCollapsedItems(this.index)) {
      return null;
    }
    const reverseElementIndex = this.lastElementIndex - elementIndex;
    if (reverseElementIndex === this.sidePadding && this.hasCollapsedItems(this.reverseIndex)) {
      return null;
    }
    if (reverseElementIndex < this.sidePadding) {
      return this.lastIndex - reverseElementIndex;
    }
    const computedIndex = this.index - this.maxHalfLength + elementIndex;
    return tuiClamp(computedIndex, elementIndex, this.lastIndex - reverseElementIndex);
  }
  getElementMode(index) {
    return this.index === index ? TuiAppearance.Primary : TuiAppearance.Flat;
  }
  getSmallElementMode(index, mode) {
    return this.index === index && mode !== "onLight" ? TuiAppearance.Primary : TuiAppearance.Secondary;
  }
  onElementClick(index) {
    this.updateIndex(index);
  }
  onElementKeyDownArrowLeft(element) {
    if (element === this.els.first) {
      return;
    }
    const previous = this.els.find((_, index, array) => array[index + 1] === element);
    if (previous === null || previous === void 0 ? void 0 : previous.nativeFocusableElement) {
      previous.nativeFocusableElement.focus();
    }
  }
  onElementKeyDownArrowRight(element) {
    if (element === this.els.last) {
      return;
    }
    const next = this.els.find((_, index, array) => array[index - 1] === element);
    if (next === null || next === void 0 ? void 0 : next.nativeFocusableElement) {
      next.nativeFocusableElement.focus();
    }
  }
  onArrowClick(direction) {
    this.tryChangeTo(direction);
    this.focusActive();
  }
  onActiveZone(focused) {
    this.updateFocused(focused);
  }
  /**
   * Active index from the end
   */
  get reverseIndex() {
    return this.lastIndex - this.index;
  }
  /**
   * Max number of elements in half (not counting the middle one).
   */
  get maxHalfLength() {
    return this.sidePadding + DOTS_LENGTH + this.activePadding;
  }
  /**
   * Is there '...' anywhere
   */
  get itemsFit() {
    return this.length <= this.maxElementsLength;
  }
  /**
   * Max number of elements
   */
  get maxElementsLength() {
    return this.maxHalfLength * 2 + ACTIVE_ITEM_LENGTH;
  }
  get lastIndex() {
    return this.length - 1;
  }
  get lastElementIndex() {
    return this.elementsLength - 1;
  }
  /**
   * Are there collapsed items at that index
   * @param index
   * @returns there are collapsed items
   */
  hasCollapsedItems(index) {
    return !this.itemsFit && index > this.maxHalfLength;
  }
  tryChangeTo(direction) {
    this.updateIndex(tuiClamp(this.index + tuiHorizontalDirectionToNumber(direction), 0, this.lastIndex));
  }
  focusActive() {
    const {
      nativeFocusableElement
    } = this;
    if (nativeFocusableElement) {
      nativeFocusableElement.focus();
    }
  }
  updateIndex(index) {
    if (this.index === index) {
      return;
    }
    this.index = index;
    this.indexChange.emit(index);
  }
};
TuiPaginationComponent.ɵfac = function TuiPaginationComponent_Factory(t) {
  return new (t || TuiPaginationComponent)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(TuiModeDirective, 8), ɵɵdirectiveInject(TUI_PAGINATION_TEXTS), ɵɵdirectiveInject(TUI_SPIN_ICONS));
};
TuiPaginationComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiPaginationComponent,
  selectors: [["tui-pagination"]],
  viewQuery: function TuiPaginationComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(_c039, 5, TUI_FOCUSABLE_ITEM_ACCESSOR);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.els = _t);
    }
  },
  inputs: {
    length: "length",
    size: "size",
    disabled: "disabled",
    activePadding: "activePadding",
    sidePadding: "sidePadding",
    content: "content",
    index: "index"
  },
  outputs: {
    indexChange: "indexChange"
  },
  features: [ɵɵProvidersFeature([tuiAsFocusableItemAccessor(TuiPaginationComponent)]), ɵɵInheritDefinitionFeature],
  decls: 6,
  vars: 2,
  consts: [[1, "t-content", 3, "tuiActiveZoneChange"], [4, "ngIf", "ngIfElse"], ["smallButtons", ""], ["dotsTemplate", ""], [4, "ngIf"], ["appearance", "flat", "tuiIconButton", "", "type", "button", 1, "t-button", 3, "disabled", "focusable", "icon", "size", "title", "click", "mousedown.silent.prevent"], [4, "tuiRepeatTimes", "tuiRepeatTimesOf"], [4, "tuiLet"], ["automation-id", "tui-pagination__element", "shape", "square", "tuiButton", "", "type", "button", "class", "t-button", 3, "appearance", "disabled", "focusable", "size", "click", "keydown.arrowLeft.prevent", "keydown.arrowRight.prevent", 4, "ngIf", "ngIfElse"], ["automation-id", "tui-pagination__element", "shape", "square", "tuiButton", "", "type", "button", 1, "t-button", 3, "appearance", "disabled", "focusable", "size", "click", "keydown.arrowLeft.prevent", "keydown.arrowRight.prevent"], ["element", ""], [4, "polymorpheusOutlet", "polymorpheusOutletContext"], ["shape", "square", "tuiButton", "", "type", "button", "class", "t-button t-button_small", 3, "appearance", "t-button_active", "disabled", "focusable", "click", "keydown.arrowLeft.prevent", "keydown.arrowRight.prevent", 4, "tuiRepeatTimes", "tuiRepeatTimesOf"], ["shape", "square", "tuiButton", "", "type", "button", 1, "t-button", "t-button_small", 3, "appearance", "disabled", "focusable", "click", "keydown.arrowLeft.prevent", "keydown.arrowRight.prevent"], ["automation-id", "tui-pagination__element", 1, "t-dots"]],
  template: function TuiPaginationComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵelementStart(0, "div", 0);
      ɵɵlistener("tuiActiveZoneChange", function TuiPaginationComponent_Template_div_tuiActiveZoneChange_0_listener($event) {
        return ctx.onActiveZone($event);
      });
      ɵɵtemplate(1, TuiPaginationComponent_ng_container_1_Template, 3, 3, "ng-container", 1);
      ɵɵtemplate(2, TuiPaginationComponent_ng_template_2_Template, 1, 1, "ng-template", null, 2, ɵɵtemplateRefExtractor);
      ɵɵtemplate(4, TuiPaginationComponent_ng_template_4_Template, 1, 0, "ng-template", null, 3, ɵɵtemplateRefExtractor);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      const _r1 = ɵɵreference(3);
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.size !== "s")("ngIfElse", _r1);
    }
  },
  dependencies: [TuiButtonComponent, TuiActiveZoneDirective, NgIf, TuiRepeatTimesDirective, TuiLetDirective, PolymorpheusOutletDirective, AsyncPipe],
  styles: ['[_nghost-%COMP%]{font:var(--tui-font-text-s);color:var(--tui-text-01);display:block;text-align:center}.t-content[_ngcontent-%COMP%]{display:flex;justify-content:center}.t-button[_ngcontent-%COMP%]{margin:0 .125rem;flex-shrink:0}.t-button_active[_ngcontent-%COMP%]{background:currentColor}.t-button.t-button.t-button_small[_ngcontent-%COMP%]{width:.5rem;height:.5rem;margin:0}.t-button.t-button.t-button_small[_ngcontent-%COMP%]:not(:first-child){margin-left:.5rem}.t-dots[_ngcontent-%COMP%]{width:var(--tui-height-s);height:var(--tui-height-s);line-height:var(--tui-height-s);margin:0 .125rem;flex-shrink:0;color:var(--tui-text-03);text-align:center;cursor:default}.t-dots[_ngcontent-%COMP%]:before{content:"\\2026"}'],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiPaginationComponent, [{
    type: Component,
    args: [{
      selector: "tui-pagination",
      templateUrl: "./pagination.template.html",
      styleUrls: ["./pagination.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [tuiAsFocusableItemAccessor(TuiPaginationComponent)]
    }]
  }], function() {
    return [{
      type: ElementRef,
      decorators: [{
        type: Inject,
        args: [ElementRef]
      }]
    }, {
      type: TuiModeDirective,
      decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [TuiModeDirective]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Inject,
        args: [TUI_PAGINATION_TEXTS]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_SPIN_ICONS]
      }]
    }];
  }, {
    els: [{
      type: ViewChildren,
      args: ["element", {
        read: TUI_FOCUSABLE_ITEM_ACCESSOR
      }]
    }],
    length: [{
      type: Input
    }],
    size: [{
      type: Input
    }],
    disabled: [{
      type: Input
    }],
    activePadding: [{
      type: Input
    }],
    sidePadding: [{
      type: Input
    }],
    content: [{
      type: Input
    }],
    index: [{
      type: Input
    }],
    indexChange: [{
      type: Output
    }]
  });
})();
var TuiPaginationModule = class {
};
TuiPaginationModule.ɵfac = function TuiPaginationModule_Factory(t) {
  return new (t || TuiPaginationModule)();
};
TuiPaginationModule.ɵmod = ɵɵdefineNgModule({
  type: TuiPaginationModule,
  declarations: [TuiPaginationComponent],
  imports: [CommonModule, PolymorpheusModule, TuiRepeatTimesModule, TuiLetModule, TuiActiveZoneModule, TuiButtonModule],
  exports: [TuiPaginationComponent]
});
TuiPaginationModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, PolymorpheusModule, TuiRepeatTimesModule, TuiLetModule, TuiActiveZoneModule, TuiButtonModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiPaginationModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, PolymorpheusModule, TuiRepeatTimesModule, TuiLetModule, TuiActiveZoneModule, TuiButtonModule],
      declarations: [TuiPaginationComponent],
      exports: [TuiPaginationComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-pdf-viewer.js
function TuiPdfViewerComponent_ng_container_4_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtext(1);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const text_r2 = ctx.polymorpheusOutlet;
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", text_r2, " ");
  }
}
function TuiPdfViewerComponent_iframe_8_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "iframe", 7);
  }
  if (rf & 2) {
    const content_r3 = ctx.polymorpheusOutlet;
    ɵɵproperty("src", content_r3, ɵɵsanitizeResourceUrl);
  }
}
var TuiPdfViewerComponent = class {
  constructor(animation, closeWord$, icons, context) {
    this.animation = animation;
    this.closeWord$ = closeWord$;
    this.icons = icons;
    this.context = context;
  }
  onKeyDownEsc() {
    this.context.$implicit.complete();
  }
};
TuiPdfViewerComponent.ɵfac = function TuiPdfViewerComponent_Factory(t) {
  return new (t || TuiPdfViewerComponent)(ɵɵdirectiveInject(TUI_ANIMATION_OPTIONS), ɵɵdirectiveInject(TUI_CLOSE_WORD), ɵɵdirectiveInject(TUI_COMMON_ICONS), ɵɵdirectiveInject(POLYMORPHEUS_CONTEXT));
};
TuiPdfViewerComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiPdfViewerComponent,
  selectors: [["tui-pdf-viewer"]],
  hostVars: 2,
  hostBindings: function TuiPdfViewerComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("keydown.esc", function TuiPdfViewerComponent_keydown_esc_HostBindingHandler() {
        return ctx.onKeyDownEsc();
      }, false, ɵɵresolveDocument);
    }
    if (rf & 2) {
      ɵɵsyntheticHostProperty("@tuiFadeIn", ctx.animation)("@tuiSlideInTop", ctx.animation);
    }
  },
  decls: 9,
  vars: 9,
  consts: [[1, "t-header"], ["automation-id", "tui-pdf-viewer__label", 1, "t-title"], [1, "t-actions"], [4, "polymorpheusOutlet", "polymorpheusOutletContext"], ["appearance", "", "shape", "rounded", "size", "s", "tuiIconButton", "", "type", "button", 1, "t-close", 3, "icon", "title", "click"], [1, "t-content"], ["title", "pdf", "class", "t-iframe", 3, "src", 4, "polymorpheusOutlet", "polymorpheusOutletContext"], ["title", "pdf", 1, "t-iframe", 3, "src"]],
  template: function TuiPdfViewerComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵelementStart(0, "header", 0)(1, "h2", 1);
      ɵɵtext(2);
      ɵɵelementEnd();
      ɵɵelementStart(3, "div", 2);
      ɵɵtemplate(4, TuiPdfViewerComponent_ng_container_4_Template, 2, 1, "ng-container", 3);
      ɵɵelementEnd();
      ɵɵelementStart(5, "button", 4);
      ɵɵlistener("click", function TuiPdfViewerComponent_Template_button_click_5_listener() {
        return ctx.context.$implicit.complete();
      });
      ɵɵpipe(6, "async");
      ɵɵelementEnd()();
      ɵɵelementStart(7, "section", 5);
      ɵɵtemplate(8, TuiPdfViewerComponent_iframe_8_Template, 1, 1, "iframe", 6);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      ɵɵadvance(2);
      ɵɵtextInterpolate1(" ", ctx.context.label, " ");
      ɵɵadvance(2);
      ɵɵproperty("polymorpheusOutlet", ctx.context.actions)("polymorpheusOutletContext", ctx.context);
      ɵɵadvance(1);
      ɵɵproperty("icon", ctx.icons.close)("title", ɵɵpipeBind1(6, 7, ctx.closeWord$));
      ɵɵadvance(3);
      ɵɵproperty("polymorpheusOutlet", ctx.context.content)("polymorpheusOutletContext", ctx.context);
    }
  },
  dependencies: [TuiButtonComponent, PolymorpheusOutletDirective, AsyncPipe],
  styles: ["[_nghost-%COMP%]{display:block;width:100%;height:100%;box-sizing:border-box;color:var(--tui-text-01-night);background:#333639}.t-header[_ngcontent-%COMP%]{display:flex;align-items:center;height:4rem;padding:0 1rem 0 1.5625rem;box-shadow:inset 0 -1px #535659}.t-title[_ngcontent-%COMP%]{margin:0;font:var(--tui-font-text-m);white-space:nowrap;text-overflow:ellipsis;padding-right:.3125rem;overflow:hidden}.t-actions[_ngcontent-%COMP%]{display:flex;margin-left:auto}.t-close[_ngcontent-%COMP%]{transition-property:background;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;margin-left:.75rem;color:var(--tui-text-01-night);background:rgba(255,255,255,.32)}.t-close[_ngcontent-%COMP%]:hover{background:rgba(255,255,255,.4)}.t-content[_ngcontent-%COMP%]{height:calc(100% - 4rem);overflow:hidden}.t-iframe[_ngcontent-%COMP%]{width:100%;height:100%}"],
  data: {
    animation: [tuiSlideInTop, tuiFadeIn]
  },
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiPdfViewerComponent, [{
    type: Component,
    args: [{
      selector: "tui-pdf-viewer",
      templateUrl: "./pdf-viewer.template.html",
      styleUrls: ["./pdf-viewer.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      animations: [tuiSlideInTop, tuiFadeIn],
      host: {
        "[@tuiFadeIn]": "animation",
        "[@tuiSlideInTop]": "animation"
      }
    }]
  }], function() {
    return [{
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_ANIMATION_OPTIONS]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Inject,
        args: [TUI_CLOSE_WORD]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_COMMON_ICONS]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [POLYMORPHEUS_CONTEXT]
      }]
    }];
  }, {
    onKeyDownEsc: [{
      type: HostListener,
      args: ["document:keydown.esc"]
    }]
  });
})();
var TUI_PDF_VIEWER_DEFAULT_OPTIONS = {
  label: "",
  actions: ""
};
var TUI_PDF_VIEWER_OPTIONS = tuiCreateToken(TUI_PDF_VIEWER_DEFAULT_OPTIONS);
function tuiPdfViewerOptionsProvider(options) {
  return tuiProvideOptions(TUI_PDF_VIEWER_OPTIONS, options, TUI_PDF_VIEWER_DEFAULT_OPTIONS);
}
var DIALOG = new PolymorpheusComponent(TuiPdfViewerComponent);
var TuiPdfViewerService = class extends AbstractTuiDialogService {
  constructor() {
    super(...arguments);
    this.component = DIALOG;
    this.defaultOptions = Object.assign(Object.assign({}, inject(TUI_PDF_VIEWER_OPTIONS)), {
      data: void 0
    });
  }
  open(content, options = {}) {
    return super.open(content, options);
  }
};
TuiPdfViewerService.ɵfac = function() {
  let ɵTuiPdfViewerService_BaseFactory;
  return function TuiPdfViewerService_Factory(t) {
    return (ɵTuiPdfViewerService_BaseFactory || (ɵTuiPdfViewerService_BaseFactory = ɵɵgetInheritedFactory(TuiPdfViewerService)))(t || TuiPdfViewerService);
  };
}();
TuiPdfViewerService.ɵprov = ɵɵdefineInjectable({
  token: TuiPdfViewerService,
  factory: TuiPdfViewerService.ɵfac,
  providedIn: "root"
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiPdfViewerService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
var TuiPdfViewerDirective = class extends AbstractTuiDialogDirective {
};
TuiPdfViewerDirective.ɵfac = function() {
  let ɵTuiPdfViewerDirective_BaseFactory;
  return function TuiPdfViewerDirective_Factory(t) {
    return (ɵTuiPdfViewerDirective_BaseFactory || (ɵTuiPdfViewerDirective_BaseFactory = ɵɵgetInheritedFactory(TuiPdfViewerDirective)))(t || TuiPdfViewerDirective);
  };
}();
TuiPdfViewerDirective.ɵdir = ɵɵdefineDirective({
  type: TuiPdfViewerDirective,
  selectors: [["ng-template", "tuiPdfViewer", ""]],
  inputs: {
    options: ["tuiPdfViewerOptions", "options"],
    open: ["tuiPdfViewer", "open"]
  },
  outputs: {
    openChange: "tuiPdfViewerChange"
  },
  features: [ɵɵProvidersFeature([{
    provide: AbstractTuiDialogService,
    useExisting: TuiPdfViewerService
  }]), ɵɵInheritDefinitionFeature]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiPdfViewerDirective, [{
    type: Directive,
    args: [{
      selector: "ng-template[tuiPdfViewer]",
      inputs: ["options: tuiPdfViewerOptions", "open: tuiPdfViewer"],
      outputs: ["openChange: tuiPdfViewerChange"],
      providers: [{
        provide: AbstractTuiDialogService,
        useExisting: TuiPdfViewerService
      }]
    }]
  }], null, null);
})();
var TuiPdfViewerModule = class {
};
TuiPdfViewerModule.ɵfac = function TuiPdfViewerModule_Factory(t) {
  return new (t || TuiPdfViewerModule)();
};
TuiPdfViewerModule.ɵmod = ɵɵdefineNgModule({
  type: TuiPdfViewerModule,
  declarations: [TuiPdfViewerComponent, TuiPdfViewerDirective],
  imports: [CommonModule, TuiButtonModule, PolymorpheusModule],
  exports: [TuiPdfViewerComponent, TuiPdfViewerDirective]
});
TuiPdfViewerModule.ɵinj = ɵɵdefineInjector({
  providers: [tuiAsDialog(TuiPdfViewerService)],
  imports: [[CommonModule, TuiButtonModule, PolymorpheusModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiPdfViewerModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, TuiButtonModule, PolymorpheusModule],
      declarations: [TuiPdfViewerComponent, TuiPdfViewerDirective],
      providers: [tuiAsDialog(TuiPdfViewerService)],
      exports: [TuiPdfViewerComponent, TuiPdfViewerDirective]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-progress.js
var _c040 = ["tuiProgressBar", ""];
var _c130 = ["progressCircle"];
var _c216 = ["tuiProgressLabel", ""];
var _c37 = [[["progress"]], [["tui-progress-circle"]], "*"];
var _c45 = ["progress", "tui-progress-circle", "*"];
function TuiProgressSegmentedComponent_span_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "span", 2);
  }
  if (rf & 2) {
    const index_r1 = ctx.$implicit;
    const ctx_r0 = ɵɵnextContext();
    ɵɵstyleProp("background", index_r1 < ctx_r0.value ? ctx_r0.getActiveColor(index_r1) : null);
  }
}
var TuiProgressBarComponent = class {
  constructor(mode$) {
    this.mode$ = mode$;
    this.size = "m";
  }
};
TuiProgressBarComponent.ɵfac = function TuiProgressBarComponent_Factory(t) {
  return new (t || TuiProgressBarComponent)(ɵɵdirectiveInject(TUI_MODE));
};
TuiProgressBarComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiProgressBarComponent,
  selectors: [["progress", "tuiProgressBar", ""]],
  hostVars: 3,
  hostBindings: function TuiProgressBarComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("$.data-mode.attr", function TuiProgressBarComponent___data_mode_attr_HostBindingHandler() {
        return ctx.mode$;
      });
    }
    if (rf & 2) {
      ɵɵattribute("data-size", ctx.size);
      ɵɵstyleProp("--tui-progress-color", ctx.color);
    }
  },
  inputs: {
    color: "color",
    size: "size"
  },
  features: [ɵɵProvidersFeature([MODE_PROVIDER])],
  attrs: _c040,
  decls: 0,
  vars: 0,
  template: function TuiProgressBarComponent_Template(rf, ctx) {
  },
  styles: ["@keyframes _ngcontent-%COMP%_tuiIndeterminateAnimation{50%{background-position:left}}[_nghost-%COMP%]{-webkit-appearance:none;-moz-appearance:none;appearance:none;border:none;display:block;width:100%;height:var(--t-height);color:var(--tui-primary);background:var(--tui-clear);-webkit-clip-path:inset(0 round var(--tui-radius-xs));clip-path:inset(0 round var(--tui-radius-xs));overflow:hidden}[_nghost-%COMP%]::-webkit-progress-value{-webkit-transition:width var(--tui-duration) linear;transition:width var(--tui-duration) linear}[_nghost-%COMP%]::-webkit-progress-value{background:var(--tui-progress-color, currentColor)}[_nghost-%COMP%]::-moz-progress-bar{background:var(--tui-progress-color, currentColor)}[data-mode=onDark][_nghost-%COMP%]{--tui-clear: var(--tui-clear-inverse)}[data-size=m][_nghost-%COMP%]{--t-height: 1.5rem}[data-size=s][_nghost-%COMP%]{--t-height: .5rem}[data-size=s][_nghost-%COMP%]::-webkit-progress-value{border-radius:var(--tui-radius-xs)}[data-size=s][_nghost-%COMP%]::-moz-progress-bar{border-radius:var(--tui-radius-xs)}[new][_nghost-%COMP%]{-webkit-clip-path:inset(0 .5px round var(--tui-radius-m));clip-path:inset(0 .5px round var(--tui-radius-m));border-radius:1rem}[new][_nghost-%COMP%]::-webkit-progress-value{border-radius:inherit}[new][_nghost-%COMP%]::-moz-progress-bar{border-radius:inherit}[new][data-size=xs][_nghost-%COMP%]{--t-height: .25rem}[new][data-size=s][_nghost-%COMP%]{--t-height: .5rem}[new][data-size=m][_nghost-%COMP%]{--t-height: .75rem}[new][data-size=l][_nghost-%COMP%]{--t-height: 1rem}[new][data-size=xl][_nghost-%COMP%]{--t-height: 1.25rem}[new][data-size=xxl][_nghost-%COMP%]{--t-height: 1.5rem}[_nghost-%COMP%]:indeterminate{background:linear-gradient(to right,var(--tui-clear) 0 45%,var(--tui-progress-color, currentColor) 45% 55%,var(--tui-clear) 55% 100%) right;background-size:225%;animation:_ngcontent-%COMP%_tuiIndeterminateAnimation 3s infinite ease-in-out}[_nghost-%COMP%]:indeterminate::-webkit-progress-value{background:transparent}[_nghost-%COMP%]:indeterminate::-moz-progress-bar{background:transparent}[_nghost-%COMP%]::-webkit-progress-inner-element{border-radius:inherit}[_nghost-%COMP%]::-webkit-progress-bar{background:transparent;border-radius:inherit}label[tuiProgressLabel][_nghost-%COMP%]:not(:first-child), label[tuiProgressLabel]   [_nghost-%COMP%]:not(:first-child){position:absolute;top:0;left:0;width:100%;height:100%;background:transparent}"],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiProgressBarComponent, [{
    type: Component,
    args: [{
      selector: "progress[tuiProgressBar]",
      template: "",
      styleUrls: ["./progress-bar.component.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [MODE_PROVIDER],
      host: {
        "($.data-mode.attr)": "mode$"
      }
    }]
  }], function() {
    return [{
      type: Observable,
      decorators: [{
        type: Inject,
        args: [TUI_MODE]
      }]
    }];
  }, {
    color: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["style.--tui-progress-color"]
    }],
    size: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["attr.data-size"]
    }]
  });
})();
function calculateColorSegments(colors, progressWidth) {
  const segmentWidth = Math.ceil(progressWidth / colors.length);
  const colorsString = colors.reduce((acc, color, i) => `${acc}, ${color} ${i * segmentWidth}px ${(i + 1) * segmentWidth}px`, "");
  return `linear-gradient(to right ${colorsString})`;
}
var TuiProgressColorSegmentsDirective = class {
  constructor(el, resize$, userAgent) {
    this.el = el;
    this.resize$ = resize$;
    this.userAgent = userAgent;
    this.isOldBrowsers = tuiIsEdgeOlderThan(CHROMIUM_EDGE_START_VERSION, this.userAgent);
    this.colors$ = new BehaviorSubject([]);
  }
  set colors(colors) {
    this.colors$.next(colors);
  }
  get calcSegments$() {
    return combineLatest([this.colors$, this.resize$.pipe(map(() => this.el.nativeElement.offsetWidth), distinctUntilChanged())]).pipe(map(([colors, width]) => this.isOldBrowsers ? colors[0] : calculateColorSegments(colors, width)));
  }
};
TuiProgressColorSegmentsDirective.ɵfac = function TuiProgressColorSegmentsDirective_Factory(t) {
  return new (t || TuiProgressColorSegmentsDirective)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(TuiResizeService), ɵɵdirectiveInject(USER_AGENT));
};
TuiProgressColorSegmentsDirective.ɵdir = ɵɵdefineDirective({
  type: TuiProgressColorSegmentsDirective,
  selectors: [["progress", "tuiProgressBar", "", "tuiProgressColorSegments", ""]],
  hostVars: 1,
  hostBindings: function TuiProgressColorSegmentsDirective_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("$.style.--tui-progress-color", function TuiProgressColorSegmentsDirective___style___tui_progress_color_HostBindingHandler() {
        return 0;
      });
    }
    if (rf & 2) {
      ɵɵhostProperty("$.style.--tui-progress-color", ctx.calcSegments$);
    }
  },
  inputs: {
    colors: ["tuiProgressColorSegments", "colors"]
  },
  features: [ɵɵProvidersFeature([TuiDestroyService, TuiResizeService])]
});
__decorate([tuiPure], TuiProgressColorSegmentsDirective.prototype, "calcSegments$", null);
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiProgressColorSegmentsDirective, [{
    type: Directive,
    args: [{
      selector: "progress[tuiProgressBar][tuiProgressColorSegments]",
      providers: [TuiDestroyService, TuiResizeService],
      host: {
        "[$.style.--tui-progress-color]": "calcSegments$",
        "($.style.--tui-progress-color)": "0"
      }
    }]
  }], function() {
    return [{
      type: ElementRef,
      decorators: [{
        type: Inject,
        args: [ElementRef]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Inject,
        args: [TuiResizeService]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [USER_AGENT]
      }]
    }];
  }, {
    colors: [{
      type: Input,
      args: ["tuiProgressColorSegments"]
    }],
    calcSegments$: []
  });
})();
var TuiProgressCircleComponent = class {
  constructor(userAgent, win, el, mode$) {
    this.userAgent = userAgent;
    this.win = win;
    this.el = el;
    this.mode$ = mode$;
    this.value = 0;
    this.max = 1;
    this.color = null;
    this.size = "m";
    this.animationDelay$ = of(true).pipe(delay(0));
  }
  get progressRatio() {
    const ratio = this.value / this.max;
    return Number.isFinite(ratio) ? ratio : 0;
  }
  // TODO: drop support of legacy Edge (EdgeHTML) in v4.x
  get oldEdgeRadiusFallback() {
    if (!tuiIsEdgeOlderThan(CHROMIUM_EDGE_START_VERSION, this.userAgent)) {
      return null;
    }
    const strokeWidth = parseInt(this.win.getComputedStyle(this.progressCircle.nativeElement).strokeWidth, 10);
    return (this.el.nativeElement.offsetWidth - strokeWidth) / 2;
  }
};
TuiProgressCircleComponent.ɵfac = function TuiProgressCircleComponent_Factory(t) {
  return new (t || TuiProgressCircleComponent)(ɵɵdirectiveInject(USER_AGENT), ɵɵdirectiveInject(WINDOW), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(TUI_MODE));
};
TuiProgressCircleComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiProgressCircleComponent,
  selectors: [["tui-progress-circle"]],
  viewQuery: function TuiProgressCircleComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(_c130, 7);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.progressCircle = _t.first);
    }
  },
  hostVars: 5,
  hostBindings: function TuiProgressCircleComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("$.data-mode.attr", function TuiProgressCircleComponent___data_mode_attr_HostBindingHandler() {
        return ctx.mode$;
      });
    }
    if (rf & 2) {
      ɵɵattribute("data-size", ctx.size);
      ɵɵstyleProp("--tui-progress-color", ctx.color)("--progress-ratio", ctx.progressRatio);
    }
  },
  inputs: {
    value: "value",
    max: "max",
    color: "color",
    size: "size"
  },
  features: [ɵɵProvidersFeature([MODE_PROVIDER])],
  decls: 6,
  vars: 8,
  consts: [[1, "t-hidden-progress", 3, "max", "value"], ["aria-hidden", "true", "height", "100%", "width", "100%", 1, "t-svg"], ["cx", "50%", "cy", "50%", 1, "t-track"], ["cx", "50%", "cy", "50%", 1, "t-progress"], ["progressCircle", ""]],
  template: function TuiProgressCircleComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵelement(0, "progress", 0);
      ɵɵnamespaceSVG();
      ɵɵelementStart(1, "svg", 1);
      ɵɵelement(2, "circle", 2);
      ɵɵelementStart(3, "circle", 3, 4);
      ɵɵpipe(5, "async");
      ɵɵelementEnd()();
    }
    if (rf & 2) {
      ɵɵproperty("max", ctx.max)("value", ctx.value);
      ɵɵadvance(2);
      ɵɵattribute("r", ctx.oldEdgeRadiusFallback);
      ɵɵadvance(1);
      ɵɵclassProp("t-progress_filled", ɵɵpipeBind1(5, 6, ctx.animationDelay$));
      ɵɵattribute("r", ctx.oldEdgeRadiusFallback);
    }
  },
  dependencies: [AsyncPipe],
  styles: ["[_nghost-%COMP%]{position:relative;display:block;color:var(--tui-primary);transform:rotate(-90deg);transform-origin:center;font-size:1rem;width:var(--t-diameter);height:var(--t-diameter)}[data-mode=onDark][_nghost-%COMP%]{--tui-clear: var(--tui-clear-inverse)}[data-size=s][_nghost-%COMP%]{--t-diameter: 2em;--t-track-stroke: .5em;--t-progress-stroke: .5em}[data-size=m][_nghost-%COMP%]{--t-diameter: 3em;--t-track-stroke: .375em;--t-progress-stroke: .375em}[data-size=l][_nghost-%COMP%]{--t-diameter: 4em;--t-track-stroke: .375em;--t-progress-stroke: .375em}[data-size=xl][_nghost-%COMP%]{--t-diameter: 7em;--t-track-stroke: .375em;--t-progress-stroke: .375em}[new][_nghost-%COMP%]{--t-track-stroke: var(--tui-thickness, .375em);--t-progress-stroke: var(--tui-thickness, .375em)}[new][data-size=xxs][_nghost-%COMP%]{--t-diameter: 2rem}[new][data-size=xs][_nghost-%COMP%]{--t-diameter: 2.5rem}[new][data-size=s][_nghost-%COMP%]{--t-diameter: 3.5rem}[new][data-size=m][_nghost-%COMP%]{--t-diameter: 4rem}[new][data-size=l][_nghost-%COMP%]{--t-diameter: 5rem}[new][data-size=xl][_nghost-%COMP%]{--t-diameter: 6rem}[new][data-size=xxl][_nghost-%COMP%]{--t-diameter: 8rem}.t-track[_ngcontent-%COMP%]{fill:transparent;stroke:var(--tui-clear);stroke-width:var(--t-track-stroke);r:calc((var(--t-diameter) - var(--t-track-stroke)) / 2)}.t-progress[_ngcontent-%COMP%]{fill:transparent;stroke:var(--tui-progress-color, currentColor);stroke-linecap:round;stroke-width:var(--t-progress-stroke);stroke-dasharray:calc(2 * 3.14159265 * calc((var(--t-diameter) - var(--t-progress-stroke)) / 2));stroke-dashoffset:calc(2 * 3.14159265 * calc((var(--t-diameter) - var(--t-progress-stroke)) / 2));r:calc((var(--t-diameter) - var(--t-progress-stroke)) / 2)}.t-progress_filled[_ngcontent-%COMP%]{transition:stroke-dashoffset var(--tui-duration) linear;stroke-dashoffset:calc(calc(2 * 3.14159265 * calc((var(--t-diameter) - var(--t-progress-stroke)) / 2)) - var(--progress-ratio) * calc(2 * 3.14159265 * calc((var(--t-diameter) - var(--t-progress-stroke)) / 2)))}.t-hidden-progress[_ngcontent-%COMP%]{position:absolute;clip:rect(1px,1px,1px,1px);-webkit-clip-path:inset(50%);clip-path:inset(50%);height:1px;width:1px;margin:-1px;overflow:hidden;padding:0}.t-svg[_ngcontent-%COMP%]{overflow:unset}"],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiProgressCircleComponent, [{
    type: Component,
    args: [{
      selector: "tui-progress-circle",
      templateUrl: "./progress-circle.template.html",
      styleUrls: ["./progress-circle.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [MODE_PROVIDER],
      host: {
        "($.data-mode.attr)": "mode$"
      }
    }]
  }], function() {
    return [{
      type: void 0,
      decorators: [{
        type: Inject,
        args: [USER_AGENT]
      }]
    }, {
      type: Window,
      decorators: [{
        type: Inject,
        args: [WINDOW]
      }]
    }, {
      type: ElementRef,
      decorators: [{
        type: Inject,
        args: [ElementRef]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Inject,
        args: [TUI_MODE]
      }]
    }];
  }, {
    progressCircle: [{
      type: ViewChild,
      args: ["progressCircle", {
        static: true
      }]
    }],
    value: [{
      type: Input
    }],
    max: [{
      type: Input
    }],
    color: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["style.--tui-progress-color"]
    }],
    size: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["attr.data-size"]
    }],
    progressRatio: [{
      type: HostBinding,
      args: ["style.--progress-ratio"]
    }]
  });
})();
var TuiProgressLabelComponent = class {
};
TuiProgressLabelComponent.ɵfac = function TuiProgressLabelComponent_Factory(t) {
  return new (t || TuiProgressLabelComponent)();
};
TuiProgressLabelComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiProgressLabelComponent,
  selectors: [["label", "tuiProgressLabel", ""]],
  attrs: _c216,
  ngContentSelectors: _c45,
  decls: 4,
  vars: 0,
  consts: [[1, "t-label"]],
  template: function TuiProgressLabelComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c37);
      ɵɵprojection(0);
      ɵɵprojection(1, 1);
      ɵɵelementStart(2, "span", 0);
      ɵɵprojection(3, 2);
      ɵɵelementEnd();
    }
  },
  styles: ["[_nghost-%COMP%]{position:relative;display:inline-block;color:var(--tui-text-01)}.t-label[_ngcontent-%COMP%]{position:absolute;top:0;left:0;width:100%;height:100%;display:flex;font:var(--tui-font-text-s);flex-direction:column;justify-content:center;align-items:center}"],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiProgressLabelComponent, [{
    type: Component,
    args: [{
      selector: "label[tuiProgressLabel]",
      templateUrl: "./progress-label.template.html",
      styleUrls: ["./progress-label.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush
    }]
  }], null, null);
})();
var TuiProgressSegmentedComponent = class {
  constructor(mode$) {
    this.mode$ = mode$;
    this.value = 0;
    this.max = 1;
    this.size = "m";
    this.colors = "currentColor";
  }
  getActiveColor(index = 0) {
    return tuiIsString(this.colors) ? this.colors : this.colors[index] || this.colors[this.colors.length - 1];
  }
};
TuiProgressSegmentedComponent.ɵfac = function TuiProgressSegmentedComponent_Factory(t) {
  return new (t || TuiProgressSegmentedComponent)(ɵɵdirectiveInject(TUI_MODE));
};
TuiProgressSegmentedComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiProgressSegmentedComponent,
  selectors: [["tui-progress-segmented"]],
  hostVars: 1,
  hostBindings: function TuiProgressSegmentedComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("$.data-mode.attr", function TuiProgressSegmentedComponent___data_mode_attr_HostBindingHandler() {
        return ctx.mode$;
      });
    }
    if (rf & 2) {
      ɵɵattribute("data-size", ctx.size);
    }
  },
  inputs: {
    value: "value",
    max: "max",
    size: "size",
    colors: "colors"
  },
  features: [ɵɵProvidersFeature([MODE_PROVIDER])],
  decls: 2,
  vars: 3,
  consts: [[1, "t-hidden-progress", 3, "max", "value"], ["aria-hidden", "true", "class", "t-segment", 3, "background", 4, "tuiRepeatTimes", "tuiRepeatTimesOf"], ["aria-hidden", "true", 1, "t-segment"]],
  template: function TuiProgressSegmentedComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵelement(0, "progress", 0);
      ɵɵtemplate(1, TuiProgressSegmentedComponent_span_1_Template, 1, 2, "span", 1);
    }
    if (rf & 2) {
      ɵɵproperty("max", ctx.max)("value", ctx.value);
      ɵɵadvance(1);
      ɵɵproperty("tuiRepeatTimesOf", ctx.max);
    }
  },
  dependencies: [TuiRepeatTimesDirective],
  styles: ["[_nghost-%COMP%]{display:flex;color:var(--tui-primary)}[data-mode=onDark][_nghost-%COMP%]{--tui-clear: var(--tui-clear-inverse)}.t-segment[_ngcontent-%COMP%]{transition-property:background;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;flex:1 1 100%;border-radius:var(--tui-radius-xs);background:var(--tui-clear)}.t-segment[_ngcontent-%COMP%]:not(:last-child){margin-right:.25rem}[data-size=s][_nghost-%COMP%]   .t-segment[_ngcontent-%COMP%]{height:.25rem}[data-size=m][_nghost-%COMP%]   .t-segment[_ngcontent-%COMP%]{height:.5rem}.t-hidden-progress[_ngcontent-%COMP%]{position:absolute;clip:rect(1px,1px,1px,1px);-webkit-clip-path:inset(50%);clip-path:inset(50%);height:1px;width:1px;margin:-1px;overflow:hidden;padding:0}"],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiProgressSegmentedComponent, [{
    type: Component,
    args: [{
      selector: "tui-progress-segmented",
      templateUrl: "./progress-segmented.template.html",
      styleUrls: ["./progress-segmented.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [MODE_PROVIDER],
      host: {
        "($.data-mode.attr)": "mode$"
      }
    }]
  }], function() {
    return [{
      type: Observable,
      decorators: [{
        type: Inject,
        args: [TUI_MODE]
      }]
    }];
  }, {
    value: [{
      type: Input
    }],
    max: [{
      type: Input
    }],
    size: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["attr.data-size"]
    }],
    colors: [{
      type: Input
    }]
  });
})();
var TuiProgressModule = class {
};
TuiProgressModule.ɵfac = function TuiProgressModule_Factory(t) {
  return new (t || TuiProgressModule)();
};
TuiProgressModule.ɵmod = ɵɵdefineNgModule({
  type: TuiProgressModule,
  declarations: [TuiProgressBarComponent, TuiProgressColorSegmentsDirective, TuiProgressCircleComponent, TuiProgressLabelComponent, TuiProgressSegmentedComponent],
  imports: [CommonModule, TuiRepeatTimesModule],
  exports: [TuiProgressBarComponent, TuiProgressCircleComponent, TuiProgressColorSegmentsDirective, TuiProgressLabelComponent, TuiProgressSegmentedComponent]
});
TuiProgressModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, TuiRepeatTimesModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiProgressModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, TuiRepeatTimesModule],
      declarations: [TuiProgressBarComponent, TuiProgressColorSegmentsDirective, TuiProgressCircleComponent, TuiProgressLabelComponent, TuiProgressSegmentedComponent],
      exports: [TuiProgressBarComponent, TuiProgressCircleComponent, TuiProgressColorSegmentsDirective, TuiProgressLabelComponent, TuiProgressSegmentedComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-prompt.js
function TuiPromptComponent_div_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "div", 2);
  }
  if (rf & 2) {
    const text_r2 = ctx.polymorpheusOutlet;
    ɵɵproperty("innerHTML", text_r2, ɵɵsanitizeHtml);
  }
}
function TuiPromptComponent_div_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 3)(1, "button", 4);
    ɵɵlistener("click", function TuiPromptComponent_div_1_Template_button_click_1_listener() {
      ɵɵrestoreView(_r5);
      const ctx_r4 = ɵɵnextContext();
      return ɵɵresetView(ctx_r4.context.completeWith(false));
    });
    ɵɵtext(2);
    ɵɵelementEnd();
    ɵɵelementStart(3, "button", 5);
    ɵɵlistener("click", function TuiPromptComponent_div_1_Template_button_click_3_listener() {
      ɵɵrestoreView(_r5);
      const ctx_r6 = ɵɵnextContext();
      return ɵɵresetView(ctx_r6.context.completeWith(true));
    });
    ɵɵtext(4);
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    const words_r3 = ctx.ngIf;
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("appearance", ctx_r1.appearance);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", (ctx_r1.context.data == null ? null : ctx_r1.context.data.no) || words_r3.no, " ");
    ɵɵadvance(2);
    ɵɵtextInterpolate1(" ", (ctx_r1.context.data == null ? null : ctx_r1.context.data.yes) || words_r3.yes, " ");
  }
}
var TuiPromptComponent = class {
  constructor(words$, context, isMobile) {
    this.words$ = words$;
    this.context = context;
    this.isMobile = isMobile;
  }
  get appearance() {
    return this.isMobile ? TuiAppearance.Secondary : TuiAppearance.Flat;
  }
};
TuiPromptComponent.ɵfac = function TuiPromptComponent_Factory(t) {
  return new (t || TuiPromptComponent)(ɵɵdirectiveInject(TUI_PROMPT_WORDS), ɵɵdirectiveInject(POLYMORPHEUS_CONTEXT), ɵɵdirectiveInject(TUI_IS_MOBILE));
};
TuiPromptComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiPromptComponent,
  selectors: [["tui-prompt"]],
  decls: 3,
  vars: 4,
  consts: [["class", "t-content", 3, "innerHTML", 4, "polymorpheusOutlet"], ["class", "t-buttons", 4, "ngIf"], [1, "t-content", 3, "innerHTML"], [1, "t-buttons"], ["size", "m", "tuiButton", "", "type", "button", 1, "t-button", 3, "appearance", "click"], ["size", "m", "tuiAutoFocus", "", "tuiButton", "", "type", "button", 1, "t-button", 3, "click"]],
  template: function TuiPromptComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵtemplate(0, TuiPromptComponent_div_0_Template, 1, 1, "div", 0);
      ɵɵtemplate(1, TuiPromptComponent_div_1_Template, 5, 3, "div", 1);
      ɵɵpipe(2, "async");
    }
    if (rf & 2) {
      ɵɵproperty("polymorpheusOutlet", ctx.context.data == null ? null : ctx.context.data.content);
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ɵɵpipeBind1(2, 2, ctx.words$));
    }
  },
  dependencies: [TuiButtonComponent, PolymorpheusOutletDirective, NgIf, TuiAutoFocusDirective, AsyncPipe],
  styles: [".t-content[_ngcontent-%COMP%]:not(:empty){margin-bottom:.875rem}.t-buttons[_ngcontent-%COMP%]{display:flex;justify-content:flex-end;flex-wrap:wrap-reverse;margin:.375rem -.375rem -.375rem}.t-button[_ngcontent-%COMP%]{margin:.375rem;white-space:nowrap}tui-root._mobile[_nghost-%COMP%]   .t-button[_ngcontent-%COMP%], tui-root._mobile   [_nghost-%COMP%]   .t-button[_ngcontent-%COMP%]{flex:1}"],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiPromptComponent, [{
    type: Component,
    args: [{
      selector: "tui-prompt",
      templateUrl: "./prompt.template.html",
      styleUrls: ["./prompt.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush
    }]
  }], function() {
    return [{
      type: Observable,
      decorators: [{
        type: Inject,
        args: [TUI_PROMPT_WORDS]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [POLYMORPHEUS_CONTEXT]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_IS_MOBILE]
      }]
    }];
  }, null);
})();
var TUI_PROMPT = new PolymorpheusComponent(TuiPromptComponent);
var TuiPromptModule = class {
};
TuiPromptModule.ɵfac = function TuiPromptModule_Factory(t) {
  return new (t || TuiPromptModule)();
};
TuiPromptModule.ɵmod = ɵɵdefineNgModule({
  type: TuiPromptModule,
  declarations: [TuiPromptComponent],
  imports: [CommonModule, PolymorpheusModule, TuiButtonModule, TuiAutoFocusModule],
  exports: [TuiPromptComponent]
});
TuiPromptModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, PolymorpheusModule, TuiButtonModule, TuiAutoFocusModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiPromptModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, PolymorpheusModule, TuiButtonModule, TuiAutoFocusModule],
      declarations: [TuiPromptComponent],
      exports: [TuiPromptComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-push.js
function TuiPushComponent_button_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r3 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 10);
    ɵɵlistener("click", function TuiPushComponent_button_2_Template_button_click_0_listener() {
      ɵɵrestoreView(_r3);
      const ctx_r2 = ɵɵnextContext();
      return ɵɵresetView(ctx_r2.close.emit());
    });
    ɵɵpipe(1, "async");
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵproperty("icon", ctx_r0.icons.close)("title", ɵɵpipeBind1(1, 2, ctx_r0.closeWord$));
  }
}
function TuiPushComponent_span_7_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "span", 11);
    ɵɵpipe(1, "async");
    ɵɵpipe(2, "tuiFormatDate");
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵproperty("textContent", ctx_r1.isString(ctx_r1.timestamp) ? ctx_r1.timestamp : ɵɵpipeBind1(1, 1, ɵɵpipeBind1(2, 3, ctx_r1.timestamp)));
  }
}
var _c041 = [[["img"]], [["tui-svg"]], "*", [["", "tuiButton", ""]], [["", "tuiLink", ""]]];
var _c131 = ["img", "tui-svg", "*", "[tuiButton]", "[tuiLink]"];
function TuiPushAlertComponent_tui_push_0_img_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "img", 8);
  }
  if (rf & 2) {
    const ctx_r3 = ɵɵnextContext(2);
    ɵɵproperty("src", ctx_r3.context.image, ɵɵsanitizeUrl);
  }
}
function TuiPushAlertComponent_tui_push_0_tui_svg_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "tui-svg", 9);
  }
  if (rf & 2) {
    const ctx_r4 = ɵɵnextContext(2);
    ɵɵstyleProp("color", ctx_r4.context.iconColor);
    ɵɵproperty("src", ctx_r4.context.icon);
  }
}
function TuiPushAlertComponent_tui_push_0_div_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "div", 10);
  }
  if (rf & 2) {
    const text_r8 = ctx.polymorpheusOutlet;
    ɵɵproperty("innerHTML", text_r8, ɵɵsanitizeHtml);
  }
}
function TuiPushAlertComponent_tui_push_0_button_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r10 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 11);
    ɵɵlistener("click", function TuiPushAlertComponent_tui_push_0_button_4_Template_button_click_0_listener() {
      ɵɵrestoreView(_r10);
      const ctx_r9 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r9.context.$implicit.next(ctx_r9.context.buttons[0]));
    });
    ɵɵtext(1);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r6 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r6.context.buttons[0], " ");
  }
}
function TuiPushAlertComponent_tui_push_0_button_5_Template(rf, ctx) {
  if (rf & 1) {
    const _r12 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 12);
    ɵɵlistener("click", function TuiPushAlertComponent_tui_push_0_button_5_Template_button_click_0_listener() {
      ɵɵrestoreView(_r12);
      const ctx_r11 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r11.context.$implicit.next(ctx_r11.context.buttons[ctx_r11.context.buttons.length - 1]));
    });
    ɵɵtext(1);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r7 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r7.context.buttons[ctx_r7.context.buttons.length - 1], " ");
  }
}
function TuiPushAlertComponent_tui_push_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r14 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "tui-push", 2);
    ɵɵlistener("close", function TuiPushAlertComponent_tui_push_0_Template_tui_push_close_0_listener() {
      ɵɵrestoreView(_r14);
      const ctx_r13 = ɵɵnextContext();
      return ɵɵresetView(ctx_r13.context.$implicit.complete());
    });
    ɵɵtemplate(1, TuiPushAlertComponent_tui_push_0_img_1_Template, 1, 1, "img", 3);
    ɵɵtemplate(2, TuiPushAlertComponent_tui_push_0_tui_svg_2_Template, 1, 3, "tui-svg", 4);
    ɵɵtemplate(3, TuiPushAlertComponent_tui_push_0_div_3_Template, 1, 1, "div", 5);
    ɵɵtemplate(4, TuiPushAlertComponent_tui_push_0_button_4_Template, 2, 1, "button", 6);
    ɵɵtemplate(5, TuiPushAlertComponent_tui_push_0_button_5_Template, 2, 1, "button", 7);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵproperty("heading", ctx_r0.context.heading)("timestamp", ctx_r0.context.timestamp)("type", ctx_r0.context.type);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.context.image);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.context.icon);
    ɵɵadvance(1);
    ɵɵproperty("polymorpheusOutlet", ctx_r0.context.content)("polymorpheusOutletContext", ctx_r0.context);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.context.buttons.length > 1);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r0.context.buttons.length);
  }
}
function TuiPushAlertComponent_ng_template_1_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function TuiPushAlertComponent_ng_template_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtemplate(0, TuiPushAlertComponent_ng_template_1_ng_container_0_Template, 1, 0, "ng-container", 13);
  }
  if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵproperty("polymorpheusOutlet", ctx_r2.context.content);
  }
}
var TuiPushComponent = class {
  constructor(closeWord$, icons) {
    this.closeWord$ = closeWord$;
    this.icons = icons;
    this.heading = "";
    this.type = "";
    this.lines = 2;
    this.timestamp = "";
    this.close = new EventEmitter();
    this.isString = tuiIsString;
  }
  get closeable() {
    return tuiIsObserved(this.close);
  }
};
TuiPushComponent.ɵfac = function TuiPushComponent_Factory(t) {
  return new (t || TuiPushComponent)(ɵɵdirectiveInject(TUI_CLOSE_WORD), ɵɵdirectiveInject(TUI_COMMON_ICONS));
};
TuiPushComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiPushComponent,
  selectors: [["tui-push"]],
  hostVars: 2,
  hostBindings: function TuiPushComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵstyleProp("--t-lines", ctx.lines);
    }
  },
  inputs: {
    heading: "heading",
    type: "type",
    lines: "lines",
    timestamp: "timestamp"
  },
  outputs: {
    close: "close"
  },
  ngContentSelectors: _c131,
  decls: 17,
  vars: 4,
  consts: [[1, "t-image"], ["appearance", "", "shape", "rounded", "size", "xs", "tuiIconButton", "", "type", "button", "class", "t-close", 3, "icon", "title", "click", 4, "ngIf"], [1, "t-top"], [1, "t-icon"], ["class", "t-time", 3, "textContent", 4, "ngIf"], ["automation-id", "tui-push__heading", 1, "t-heading"], [1, "t-content"], [1, "t-actions"], [1, "t-button"], [1, "t-link"], ["appearance", "", "shape", "rounded", "size", "xs", "tuiIconButton", "", "type", "button", 1, "t-close", 3, "icon", "title", "click"], [1, "t-time", 3, "textContent"]],
  template: function TuiPushComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c041);
      ɵɵelementStart(0, "div", 0);
      ɵɵprojection(1);
      ɵɵelementEnd();
      ɵɵtemplate(2, TuiPushComponent_button_2_Template, 2, 4, "button", 1);
      ɵɵelementStart(3, "div", 2)(4, "span", 3);
      ɵɵprojection(5, 1);
      ɵɵelementEnd();
      ɵɵtext(6);
      ɵɵtemplate(7, TuiPushComponent_span_7_Template, 3, 5, "span", 4);
      ɵɵelementEnd();
      ɵɵelementStart(8, "h3", 5);
      ɵɵtext(9);
      ɵɵelementEnd();
      ɵɵelementStart(10, "div", 6);
      ɵɵprojection(11, 2);
      ɵɵelementEnd();
      ɵɵelementStart(12, "div", 7)(13, "span", 8);
      ɵɵprojection(14, 3);
      ɵɵelementEnd();
      ɵɵelementStart(15, "span", 9);
      ɵɵprojection(16, 4);
      ɵɵelementEnd()();
    }
    if (rf & 2) {
      ɵɵadvance(2);
      ɵɵproperty("ngIf", ctx.closeable);
      ɵɵadvance(4);
      ɵɵtextInterpolate1(" ", ctx.type, " ");
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.timestamp);
      ɵɵadvance(2);
      ɵɵtextInterpolate1(" ", ctx.heading, "\n");
    }
  },
  dependencies: [TuiButtonComponent, NgIf, AsyncPipe, TuiFormatDatePipe],
  styles: ['[_nghost-%COMP%]{position:relative;display:block;width:22.5rem;max-width:100%;box-sizing:border-box;padding:1.25rem 1.25rem .25rem;overflow:hidden;font:var(--tui-font-text-m);border-radius:var(--tui-radius-xl);background:var(--tui-elevation-02);box-shadow:var(--tui-shadow)}.t-image[_ngcontent-%COMP%]{display:flex;flex-direction:column;max-height:10.625rem;overflow:hidden;margin:-1.25rem -1.25rem 1.25rem}.t-close[_ngcontent-%COMP%]{position:absolute;top:.75rem;right:.75rem;color:#0000008a;background:rgba(242,242,242,.32);-webkit-backdrop-filter:blur(1rem);backdrop-filter:blur(1rem)}.t-top[_ngcontent-%COMP%]{display:flex;align-items:center;font:var(--tui-font-text-s);color:var(--tui-text-02)}.t-icon[_ngcontent-%COMP%]{height:1.25rem;margin-right:.5rem;transform:scale(.833);transform-origin:top left;color:var(--tui-link)}.t-time[_ngcontent-%COMP%]:before{content:"\\2022";display:inline-block;width:1rem;text-align:center}.t-heading[_ngcontent-%COMP%]{line-height:1.25rem;font-weight:bold;margin:.75rem 0 .25rem}.t-heading[_ngcontent-%COMP%], .t-content[_ngcontent-%COMP%]{display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:var(--t-lines);word-break:break-word;overflow:hidden}.t-actions[_ngcontent-%COMP%]{display:flex;align-items:center;font:var(--tui-font-text-s)}.t-button[_ngcontent-%COMP%]:not(:empty){margin:.75rem .75rem .75rem 0}.t-link[_ngcontent-%COMP%]{margin:.75rem 0}.t-link[_ngcontent-%COMP%]:empty{margin:.5rem}'],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiPushComponent, [{
    type: Component,
    args: [{
      selector: "tui-push",
      templateUrl: "./push.template.html",
      styleUrls: ["./push.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      host: {
        "[style.--t-lines]": "lines"
      }
    }]
  }], function() {
    return [{
      type: Observable,
      decorators: [{
        type: Inject,
        args: [TUI_CLOSE_WORD]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_COMMON_ICONS]
      }]
    }];
  }, {
    heading: [{
      type: Input
    }],
    type: [{
      type: Input
    }],
    lines: [{
      type: Input
    }],
    timestamp: [{
      type: Input
    }],
    close: [{
      type: Output
    }]
  });
})();
var TuiPushDirective = class extends TuiModeDirective {
  constructor(modeDirective) {
    var _a;
    super();
    this.modeDirective = modeDirective;
    this.size = "s";
    this.shape = null;
    this.change$ = ((_a = this.modeDirective) === null || _a === void 0 ? void 0 : _a.change$) || new Subject();
  }
  get appearance() {
    var _a;
    return ((_a = this.modeDirective) === null || _a === void 0 ? void 0 : _a.mode) === "onDark" ? "accent" : "secondary";
  }
};
TuiPushDirective.ɵfac = function TuiPushDirective_Factory(t) {
  return new (t || TuiPushDirective)(ɵɵdirectiveInject(TuiModeDirective, 12));
};
TuiPushDirective.ɵdir = ɵɵdefineDirective({
  type: TuiPushDirective,
  selectors: [["tui-push"]],
  features: [ɵɵProvidersFeature([{
    provide: TuiModeDirective,
    useExisting: TuiPushDirective
  }, {
    provide: TUI_BUTTON_OPTIONS,
    useExisting: TuiPushDirective
  }]), ɵɵInheritDefinitionFeature]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiPushDirective, [{
    type: Directive,
    args: [{
      selector: "tui-push",
      providers: [{
        provide: TuiModeDirective,
        useExisting: TuiPushDirective
      }, {
        provide: TUI_BUTTON_OPTIONS,
        useExisting: TuiPushDirective
      }]
    }]
  }], function() {
    return [{
      type: TuiModeDirective,
      decorators: [{
        type: Optional
      }, {
        type: SkipSelf
      }, {
        type: Inject,
        args: [TuiModeDirective]
      }]
    }];
  }, null);
})();
var TUI_PUSH_DEFAULT_OPTIONS = {
  heading: "",
  type: "",
  timestamp: "",
  image: "",
  icon: "",
  iconColor: "",
  buttons: []
};
var TUI_PUSH_OPTIONS = tuiCreateToken(TUI_PUSH_DEFAULT_OPTIONS);
function tuiPushOptionsProvider(options) {
  return tuiProvideOptions(TUI_PUSH_OPTIONS, options, TUI_PUSH_DEFAULT_OPTIONS);
}
var TuiPushAlertDirective = class extends PolymorpheusTemplate {
  constructor(template, cdr, destroy$, push) {
    super(template, cdr);
    this.show$ = new Subject();
    this.show$.pipe(tuiIfMap(() => push.open(this)), takeUntil(destroy$)).subscribe();
  }
  set tuiPush(show) {
    this.show$.next(show);
  }
};
TuiPushAlertDirective.ɵfac = function TuiPushAlertDirective_Factory(t) {
  return new (t || TuiPushAlertDirective)(ɵɵdirectiveInject(TemplateRef), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(TuiDestroyService, 2), ɵɵdirectiveInject(forwardRef(() => TuiPushService)));
};
TuiPushAlertDirective.ɵdir = ɵɵdefineDirective({
  type: TuiPushAlertDirective,
  selectors: [["", "tuiPush", ""]],
  inputs: {
    tuiPush: "tuiPush"
  },
  features: [ɵɵProvidersFeature([TuiDestroyService]), ɵɵInheritDefinitionFeature]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiPushAlertDirective, [{
    type: Directive,
    args: [{
      selector: "[tuiPush]",
      providers: [TuiDestroyService]
    }]
  }], function() {
    return [{
      type: TemplateRef,
      decorators: [{
        type: Inject,
        args: [TemplateRef]
      }]
    }, {
      type: ChangeDetectorRef,
      decorators: [{
        type: Inject,
        args: [ChangeDetectorRef]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Self
      }, {
        type: Inject,
        args: [TuiDestroyService]
      }]
    }, {
      type: TuiPushService,
      decorators: [{
        type: Inject,
        args: [forwardRef(() => TuiPushService)]
      }]
    }];
  }, {
    tuiPush: [{
      type: Input
    }]
  });
})();
var TuiPushAlertComponent = class {
  constructor(animation, context) {
    this.animation = animation;
    this.context = context;
  }
  get isDirective() {
    return this.context.content instanceof TuiPushAlertDirective;
  }
};
TuiPushAlertComponent.ɵfac = function TuiPushAlertComponent_Factory(t) {
  return new (t || TuiPushAlertComponent)(ɵɵdirectiveInject(TUI_ANIMATION_OPTIONS), ɵɵdirectiveInject(POLYMORPHEUS_CONTEXT));
};
TuiPushAlertComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiPushAlertComponent,
  selectors: [["tui-push-alert"]],
  hostAttrs: ["role", "alert"],
  hostVars: 3,
  hostBindings: function TuiPushAlertComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵsyntheticHostProperty("@tuiFadeIn", ctx.animation)("@tuiSlideInRight", ctx.animation)("@tuiHeightCollapse", ctx.animation);
    }
  },
  decls: 3,
  vars: 2,
  consts: [[3, "heading", "timestamp", "type", "close", 4, "ngIf", "ngIfElse"], ["directive", ""], [3, "heading", "timestamp", "type", "close"], ["alt", "", 3, "src", 4, "ngIf"], [3, "src", "color", 4, "ngIf"], [3, "innerHTML", 4, "polymorpheusOutlet", "polymorpheusOutletContext"], ["tuiButton", "", "type", "button", 3, "click", 4, "ngIf"], ["tuiLink", "", "type", "button", 3, "click", 4, "ngIf"], ["alt", "", 3, "src"], [3, "src"], [3, "innerHTML"], ["tuiButton", "", "type", "button", 3, "click"], ["tuiLink", "", "type", "button", 3, "click"], [4, "polymorpheusOutlet"]],
  template: function TuiPushAlertComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵtemplate(0, TuiPushAlertComponent_tui_push_0_Template, 6, 9, "tui-push", 0);
      ɵɵtemplate(1, TuiPushAlertComponent_ng_template_1_Template, 1, 1, "ng-template", null, 1, ɵɵtemplateRefExtractor);
    }
    if (rf & 2) {
      const _r1 = ɵɵreference(2);
      ɵɵproperty("ngIf", !ctx.isDirective)("ngIfElse", _r1);
    }
  },
  dependencies: [TuiPushComponent, TuiSvgComponent, TuiButtonComponent, TuiLinkComponent, NgIf, TuiPushDirective, PolymorpheusOutletDirective],
  styles: ["[_nghost-%COMP%]{max-width:calc(100% - 2rem);margin:0 1rem 1rem auto}[_nghost-%COMP%]:first-child{margin-top:auto}"],
  data: {
    animation: [tuiFadeIn, tuiSlideInRight, tuiHeightCollapse]
  },
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiPushAlertComponent, [{
    type: Component,
    args: [{
      selector: "tui-push-alert",
      templateUrl: "./push-alert.template.html",
      styleUrls: ["./push-alert.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      animations: [tuiFadeIn, tuiSlideInRight, tuiHeightCollapse],
      host: {
        role: "alert",
        "[@tuiFadeIn]": "animation",
        "[@tuiSlideInRight]": "animation",
        "[@tuiHeightCollapse]": "animation"
      }
    }]
  }], function() {
    return [{
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_ANIMATION_OPTIONS]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [POLYMORPHEUS_CONTEXT]
      }]
    }];
  }, null);
})();
var TuiPushService = class extends AbstractTuiDialogService {
  constructor() {
    super(...arguments);
    this.component = new PolymorpheusComponent(TuiPushAlertComponent);
    this.defaultOptions = inject(TUI_PUSH_OPTIONS);
  }
};
TuiPushService.ɵfac = function() {
  let ɵTuiPushService_BaseFactory;
  return function TuiPushService_Factory(t) {
    return (ɵTuiPushService_BaseFactory || (ɵTuiPushService_BaseFactory = ɵɵgetInheritedFactory(TuiPushService)))(t || TuiPushService);
  };
}();
TuiPushService.ɵprov = ɵɵdefineInjectable({
  token: TuiPushService,
  factory: TuiPushService.ɵfac,
  providedIn: "root"
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiPushService, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
var TuiPushModule = class {
};
TuiPushModule.ɵfac = function TuiPushModule_Factory(t) {
  return new (t || TuiPushModule)();
};
TuiPushModule.ɵmod = ɵɵdefineNgModule({
  type: TuiPushModule,
  declarations: [TuiPushComponent, TuiPushDirective, TuiPushAlertComponent, TuiPushAlertDirective],
  imports: [CommonModule, PolymorpheusModule, TuiButtonModule, TuiLinkModule, TuiSvgModule, TuiFormatDatePipeModule],
  exports: [TuiPushComponent, TuiPushDirective, TuiPushAlertComponent, TuiPushAlertDirective]
});
TuiPushModule.ɵinj = ɵɵdefineInjector({
  providers: [{
    provide: TUI_ALERTS,
    useExisting: TuiPushService,
    multi: true
  }],
  imports: [[CommonModule, PolymorpheusModule, TuiButtonModule, TuiLinkModule, TuiSvgModule, TuiFormatDatePipeModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiPushModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, PolymorpheusModule, TuiButtonModule, TuiLinkModule, TuiSvgModule, TuiFormatDatePipeModule],
      declarations: [TuiPushComponent, TuiPushDirective, TuiPushAlertComponent, TuiPushAlertDirective],
      providers: [{
        provide: TUI_ALERTS,
        useExisting: TuiPushService,
        multi: true
      }],
      exports: [TuiPushComponent, TuiPushDirective, TuiPushAlertComponent, TuiPushAlertDirective]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-radio-group.js
var _c042 = ["*"];
var TuiRadioGroupComponent = class _TuiRadioGroupComponent {
  constructor() {
    this.name = `tui-radio-group-${_TuiRadioGroupComponent.index++}`;
  }
};
TuiRadioGroupComponent.index = 0;
TuiRadioGroupComponent.ɵfac = function TuiRadioGroupComponent_Factory(t) {
  return new (t || TuiRadioGroupComponent)();
};
TuiRadioGroupComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiRadioGroupComponent,
  selectors: [["tui-radio-group"]],
  inputs: {
    name: "name"
  },
  ngContentSelectors: _c042,
  decls: 1,
  vars: 0,
  template: function TuiRadioGroupComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵprojection(0);
    }
  },
  encapsulation: 2,
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiRadioGroupComponent, [{
    type: Component,
    args: [{
      selector: "tui-radio-group",
      templateUrl: "./radio-group.template.html",
      changeDetection: ChangeDetectionStrategy.OnPush
    }]
  }], null, {
    name: [{
      type: Input
    }]
  });
})();
var TuiRadioGroupModule = class {
};
TuiRadioGroupModule.ɵfac = function TuiRadioGroupModule_Factory(t) {
  return new (t || TuiRadioGroupModule)();
};
TuiRadioGroupModule.ɵmod = ɵɵdefineNgModule({
  type: TuiRadioGroupModule,
  declarations: [TuiRadioGroupComponent],
  exports: [TuiRadioGroupComponent]
});
TuiRadioGroupModule.ɵinj = ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiRadioGroupModule, [{
    type: NgModule,
    args: [{
      declarations: [TuiRadioGroupComponent],
      exports: [TuiRadioGroupComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-radio.js
var _c043 = ["focusableElement"];
var TUI_RADIO_DEFAULT_OPTIONS = {
  size: "m",
  appearances: {
    unchecked: TuiAppearance.Outline,
    checked: TuiAppearance.Primary
  }
};
var TUI_RADIO_OPTIONS = tuiCreateToken(TUI_RADIO_DEFAULT_OPTIONS);
function tuiRadioOptionsProvider(options) {
  return tuiProvideOptions(TUI_RADIO_OPTIONS, options, TUI_RADIO_DEFAULT_OPTIONS);
}
var TuiRadioComponent = class extends AbstractTuiNullableControl {
  constructor(control, cdr, options, radioGroup) {
    super(control, cdr);
    this.options = options;
    this.radioGroup = radioGroup;
    this.identityMatcher = TUI_DEFAULT_IDENTITY_MATCHER;
    this.name = null;
    this.size = this.options.size;
    this.pseudoDisabled = false;
  }
  get appearance() {
    return this.checked ? this.options.appearances.checked : this.options.appearances.unchecked;
  }
  get computedDisabled() {
    return this.disabled || this.pseudoDisabled;
  }
  get nativeFocusableElement() {
    return !this.focusableElement || this.computedDisabled ? null : this.focusableElement.nativeElement;
  }
  get focused() {
    return tuiIsNativeFocused(this.nativeFocusableElement);
  }
  get checked() {
    return this.value === null ? this.item === null : this.item !== void 0 && this.item !== null && this.identityMatcher(this.value, this.item);
  }
  get computedName() {
    return this.name || this.radioGroupName || this.controlName || "";
  }
  get isFocusable() {
    return !this.readOnly && this.computedFocusable;
  }
  onChecked(checked) {
    if (checked) {
      this.value = this.item !== void 0 ? this.item : this.fallbackValue;
    }
  }
  onFocused(focused) {
    this.updateFocused(focused);
  }
  onFocusVisible(focusVisible) {
    this.updateFocusVisible(focusVisible);
  }
  get radioGroupName() {
    return this.radioGroup === null ? null : this.radioGroup.name;
  }
};
TuiRadioComponent.ɵfac = function TuiRadioComponent_Factory(t) {
  return new (t || TuiRadioComponent)(ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(TUI_RADIO_OPTIONS), ɵɵdirectiveInject(TuiRadioGroupComponent, 8));
};
TuiRadioComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiRadioComponent,
  selectors: [["tui-radio"]],
  viewQuery: function TuiRadioComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(_c043, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.focusableElement = _t.first);
    }
  },
  hostVars: 3,
  hostBindings: function TuiRadioComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("data-size", ctx.size);
      ɵɵclassProp("_disabled", ctx.computedDisabled);
    }
  },
  inputs: {
    item: "item",
    identityMatcher: "identityMatcher",
    name: "name",
    size: "size",
    pseudoDisabled: "pseudoDisabled"
  },
  features: [ɵɵProvidersFeature([tuiAsFocusableItemAccessor(TuiRadioComponent), tuiAsControl(TuiRadioComponent)]), ɵɵInheritDefinitionFeature],
  decls: 4,
  vars: 13,
  consts: [["tuiWrapper", "", 3, "active", "appearance", "disabled", "focus", "hover", "invalid"], [1, "t-mark"], ["type", "radio", 1, "t-native", 3, "disabled", "id", "tuiChecked", "tuiFocusable", "tuiCheckedChange", "tuiFocusedChange", "tuiFocusVisibleChange"], ["focusableElement", ""]],
  template: function TuiRadioComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵelementStart(0, "div", 0);
      ɵɵelement(1, "div", 1);
      ɵɵelementStart(2, "input", 2, 3);
      ɵɵlistener("tuiCheckedChange", function TuiRadioComponent_Template_input_tuiCheckedChange_2_listener($event) {
        return ctx.onChecked($event);
      })("tuiFocusedChange", function TuiRadioComponent_Template_input_tuiFocusedChange_2_listener($event) {
        return ctx.onFocused($event);
      })("tuiFocusVisibleChange", function TuiRadioComponent_Template_input_tuiFocusVisibleChange_2_listener($event) {
        return ctx.onFocusVisible($event);
      });
      ɵɵelementEnd()();
    }
    if (rf & 2) {
      ɵɵproperty("active", ctx.pseudoActive)("appearance", ctx.appearance)("disabled", ctx.computedDisabled)("focus", ctx.computedFocusVisible)("hover", ctx.pseudoHover)("invalid", ctx.computedInvalid);
      ɵɵadvance(1);
      ɵɵclassProp("t-mark_visible", ctx.checked);
      ɵɵadvance(1);
      ɵɵproperty("disabled", ctx.computedDisabled)("id", ctx.id)("tuiChecked", ctx.checked)("tuiFocusable", ctx.isFocusable);
      ɵɵattribute("name", ctx.computedName);
    }
  },
  dependencies: [TuiWrapperDirective, TuiCheckedDirective, TuiFocusableDirective, TuiFocusedDirective, TuiFocusVisibleDirective],
  styles: ["[_nghost-%COMP%]{font:var(--tui-font-text-s);color:var(--tui-text-01);position:relative;display:block;flex-shrink:0;border-radius:100%}[data-size=m][_nghost-%COMP%]{width:1rem;height:1rem}[data-size=l][_nghost-%COMP%]{width:1.5rem;height:1.5rem}._readonly[_nghost-%COMP%]{pointer-events:none}.t-mark[_ngcontent-%COMP%]{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;position:absolute;background-color:currentColor;border-radius:100%;transform:scale(0)}.t-mark_visible[_ngcontent-%COMP%]{transform:scale(1)}[data-size=m][_nghost-%COMP%]   .t-mark[_ngcontent-%COMP%]{margin:.25rem;width:.5rem;height:.5rem}[data-size=l][_nghost-%COMP%]   .t-mark[_ngcontent-%COMP%]{margin:.4375rem;width:.625rem;height:.625rem}.t-native[_ngcontent-%COMP%]{padding:0;margin:0;border-width:0;border-radius:inherit;background:none;font-size:inherit;line-height:inherit;font-weight:inherit;color:inherit;caret-color:currentColor;outline:none;-webkit-appearance:none;-moz-appearance:none;appearance:none;word-break:keep-all;-webkit-text-fill-color:currentColor;position:absolute;top:0;left:0;width:100%;height:100%;opacity:0;cursor:pointer}.t-native[_ngcontent-%COMP%]:-webkit-autofill, .t-native[_ngcontent-%COMP%]:-webkit-autofill:hover, .t-native[_ngcontent-%COMP%]:-webkit-autofill:focus{caret-color:var(--tui-base-09);border-radius:inherit;color:inherit!important;background-color:transparent!important;-webkit-text-fill-color:var(--tui-text-01)!important;border-color:var(--tui-autofill);-webkit-box-shadow:0 0 0 100rem var(--tui-autofill) inset!important}@supports (-webkit-touch-callout: none){.t-native[_ngcontent-%COMP%]:active{font-size:1rem}}._disabled[_nghost-%COMP%]   .t-native[_ngcontent-%COMP%]{cursor:default}"],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiRadioComponent, [{
    type: Component,
    args: [{
      selector: "tui-radio",
      templateUrl: "./radio.template.html",
      styleUrls: ["./radio.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [tuiAsFocusableItemAccessor(TuiRadioComponent), tuiAsControl(TuiRadioComponent)]
    }]
  }], function() {
    return [{
      type: NgControl,
      decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NgControl]
      }]
    }, {
      type: ChangeDetectorRef,
      decorators: [{
        type: Inject,
        args: [ChangeDetectorRef]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_RADIO_OPTIONS]
      }]
    }, {
      type: TuiRadioGroupComponent,
      decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [TuiRadioGroupComponent]
      }]
    }];
  }, {
    focusableElement: [{
      type: ViewChild,
      args: ["focusableElement"]
    }],
    item: [{
      type: Input
    }],
    identityMatcher: [{
      type: Input
    }],
    name: [{
      type: Input
    }],
    size: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["attr.data-size"]
    }],
    pseudoDisabled: [{
      type: Input
    }],
    computedDisabled: [{
      type: HostBinding,
      args: ["class._disabled"]
    }]
  });
})();
var TuiRadioModule = class {
};
TuiRadioModule.ɵfac = function TuiRadioModule_Factory(t) {
  return new (t || TuiRadioModule)();
};
TuiRadioModule.ɵmod = ɵɵdefineNgModule({
  type: TuiRadioModule,
  declarations: [TuiRadioComponent],
  imports: [CommonModule, TuiCheckedModule, TuiFocusableModule, TuiFocusedModule, TuiFocusVisibleModule, TuiWrapperModule],
  exports: [TuiRadioComponent]
});
TuiRadioModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, TuiCheckedModule, TuiFocusableModule, TuiFocusedModule, TuiFocusVisibleModule, TuiWrapperModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiRadioModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, TuiCheckedModule, TuiFocusableModule, TuiFocusedModule, TuiFocusVisibleModule, TuiWrapperModule],
      declarations: [TuiRadioComponent],
      exports: [TuiRadioComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-radio-block.js
function TuiRadioBlockComponent_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
var _c044 = ["*"];
var TuiRadioBlockComponent = class extends AbstractTuiNullableControl {
  constructor(control, cdr, modeDirective) {
    super(control, cdr);
    this.modeDirective = modeDirective;
    this.identityMatcher = TUI_DEFAULT_IDENTITY_MATCHER;
    this.contentAlign = "right";
    this.size = "l";
    this.hideRadio = false;
    this.pseudoDisabled = false;
  }
  get nativeFocusableElement() {
    var _a, _b;
    return (_b = (_a = this.radio) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) !== null && _b !== void 0 ? _b : null;
  }
  get focused() {
    return !!this.radio && this.radio.focused;
  }
  get computedDisabled() {
    return this.disabled || this.pseudoDisabled;
  }
  get checked() {
    var _a;
    return !!((_a = this.radio) === null || _a === void 0 ? void 0 : _a.checked) && this.hideRadio;
  }
  get checkboxSize() {
    return this.size === "l" ? "l" : "m";
  }
  get appearance() {
    var _a;
    if (!((_a = this.modeDirective) === null || _a === void 0 ? void 0 : _a.mode)) {
      return this.checked ? TuiAppearance.WhiteblockActive : TuiAppearance.Whiteblock;
    }
    return this.checked ? TuiAppearance.Primary : TuiAppearance.Secondary;
  }
  onFocused(focused) {
    this.updateFocused(focused);
  }
  onFocusVisible(focusVisible) {
    this.updateFocusVisible(focusVisible);
  }
  /** @deprecated use 'value' setter */
  onModelChange(value) {
    this.value = value;
  }
};
TuiRadioBlockComponent.ɵfac = function TuiRadioBlockComponent_Factory(t) {
  return new (t || TuiRadioBlockComponent)(ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(TuiModeDirective, 8));
};
TuiRadioBlockComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiRadioBlockComponent,
  selectors: [["tui-radio-block"]],
  viewQuery: function TuiRadioBlockComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(TuiRadioComponent, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.radio = _t.first);
    }
  },
  hostVars: 8,
  hostBindings: function TuiRadioBlockComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("data-align", ctx.contentAlign)("data-size", ctx.size);
      ɵɵclassProp("_hidden_input", ctx.hideRadio)("_disabled", ctx.computedDisabled)("_active", ctx.checked);
    }
  },
  inputs: {
    item: "item",
    identityMatcher: "identityMatcher",
    contentAlign: "contentAlign",
    size: "size",
    hideRadio: "hideRadio",
    pseudoDisabled: "pseudoDisabled"
  },
  features: [ɵɵProvidersFeature([tuiAsFocusableItemAccessor(TuiRadioBlockComponent), tuiAsControl(TuiRadioBlockComponent)]), ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c044,
  decls: 7,
  vars: 22,
  consts: [[4, "ngIf"], ["tuiWrapper", "", 1, "t-wrapper", 3, "active", "appearance", "disabled", "focus", "hover", "invalid"], [1, "t-view", 3, "focusable", "identityMatcher", "item", "name", "nativeId", "pseudoActive", "pseudoDisabled", "pseudoFocus", "pseudoHover", "pseudoInvalid", "readOnly", "size", "ngModel", "ngModelChange", "focusedChange", "focusVisibleChange"], [1, "t-label"], [1, "t-content"]],
  template: function TuiRadioBlockComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵtemplate(0, TuiRadioBlockComponent_ng_container_0_Template, 1, 0, "ng-container", 0);
      ɵɵpipe(1, "async");
      ɵɵelementStart(2, "label", 1)(3, "tui-radio", 2);
      ɵɵlistener("ngModelChange", function TuiRadioBlockComponent_Template_tui_radio_ngModelChange_3_listener($event) {
        return ctx.value = $event;
      })("focusedChange", function TuiRadioBlockComponent_Template_tui_radio_focusedChange_3_listener($event) {
        return ctx.onFocused($event);
      })("focusVisibleChange", function TuiRadioBlockComponent_Template_tui_radio_focusVisibleChange_3_listener($event) {
        return ctx.onFocusVisible($event);
      });
      ɵɵelementEnd();
      ɵɵelementStart(4, "div", 3)(5, "div", 4);
      ɵɵprojection(6);
      ɵɵelementEnd()()();
    }
    if (rf & 2) {
      ɵɵproperty("ngIf", ctx.modeDirective && ɵɵpipeBind1(1, 20, ctx.modeDirective.change$));
      ɵɵadvance(2);
      ɵɵproperty("active", ctx.pseudoActive)("appearance", ctx.appearance)("disabled", ctx.computedDisabled)("focus", ctx.computedFocusVisible)("hover", ctx.pseudoHover)("invalid", ctx.computedInvalid);
      ɵɵadvance(1);
      ɵɵproperty("focusable", ctx.focusable)("identityMatcher", ctx.identityMatcher)("item", ctx.item)("name", ctx.computedName || "")("nativeId", ctx.nativeId)("pseudoActive", ctx.pseudoActive)("pseudoDisabled", ctx.computedDisabled)("pseudoFocus", false)("pseudoHover", ctx.pseudoHover)("pseudoInvalid", ctx.computedInvalid)("readOnly", ctx.readOnly)("size", ctx.checkboxSize)("ngModel", ctx.value);
    }
  },
  dependencies: [TuiRadioComponent, NgIf, TuiWrapperDirective, NgControlStatus, NgModel, AsyncPipe],
  styles: ["[_nghost-%COMP%]{font:var(--tui-font-text-s);color:var(--tui-text-01);display:inline-block;vertical-align:top;align-items:flex-start;border-radius:var(--tui-radius-m)}[data-size=xs][_nghost-%COMP%]{font:var(--tui-font-text-xs)}[data-size=m][_nghost-%COMP%], [data-size=l][_nghost-%COMP%]{font:var(--tui-font-text-m)}._disabled[_nghost-%COMP%], ._readonly[_nghost-%COMP%]{pointer-events:none}.t-wrapper[_ngcontent-%COMP%]{position:relative;display:flex;align-items:inherit;box-sizing:border-box;border-radius:inherit;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;user-select:none;padding:0 1rem 0 0}[data-size=xs][_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]{padding-right:.5rem}[data-align=right][_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]{flex-direction:row-reverse;padding:0 0 0 1rem}[data-align=right][data-size=xs][_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]{padding-left:.5rem}[data-size=xs]._hidden_input[_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]{padding:0 .5rem}[data-size=xs]._hidden_input[_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]:not(._focused):after{border-width:1px}[data-size=s]._hidden_input[_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]{padding:0 1rem}[data-size=m]._hidden_input[_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]{padding:0 1.5rem}[data-size=l]._hidden_input[_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]{padding:0 2.25rem}[data-size=xs][_nghost-%COMP%]   .t-view[_ngcontent-%COMP%]{margin:calc(var(--tui-height-xs) / 2 - .5rem) .25rem;transform:scale(.75)}[data-size=s][_nghost-%COMP%]   .t-view[_ngcontent-%COMP%]{margin:calc(var(--tui-height-s) / 2 - .5rem) .5rem}[data-size=m][_nghost-%COMP%]   .t-view[_ngcontent-%COMP%]{margin:calc(var(--tui-height-m) / 2 - .5rem) .75rem}[data-size=l][_nghost-%COMP%]   .t-view[_ngcontent-%COMP%]{margin:calc(var(--tui-height-l) / 2 - .75rem) 1rem}._hidden_input[_nghost-%COMP%]   .t-view[_ngcontent-%COMP%]{position:absolute;height:1px;width:1px;margin:-1px;border:0;padding:0;overflow:hidden;clip:rect(0,0,0,0);-webkit-clip-path:inset(0);clip-path:inset(0)}.t-label[_ngcontent-%COMP%]{display:flex;flex-grow:1;align-self:flex-start;align-items:center;overflow:hidden}[data-size=xs][_nghost-%COMP%]   .t-label[_ngcontent-%COMP%]{min-height:var(--tui-height-xs)}[data-size=s][_nghost-%COMP%]   .t-label[_ngcontent-%COMP%]{min-height:var(--tui-height-s)}[data-size=m][_nghost-%COMP%]   .t-label[_ngcontent-%COMP%]{min-height:var(--tui-height-m)}[data-size=l][_nghost-%COMP%]   .t-label[_ngcontent-%COMP%]{min-height:var(--tui-height-l)}._hidden_input[_nghost-%COMP%]   .t-label[_ngcontent-%COMP%]{text-align:center;justify-content:center}.t-content[_ngcontent-%COMP%]{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}"],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiRadioBlockComponent, [{
    type: Component,
    args: [{
      selector: "tui-radio-block",
      templateUrl: "./radio-block.template.html",
      styleUrls: ["../checkbox-block/checkbox-block.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [tuiAsFocusableItemAccessor(TuiRadioBlockComponent), tuiAsControl(TuiRadioBlockComponent)]
    }]
  }], function() {
    return [{
      type: NgControl,
      decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NgControl]
      }]
    }, {
      type: ChangeDetectorRef,
      decorators: [{
        type: Inject,
        args: [ChangeDetectorRef]
      }]
    }, {
      type: TuiModeDirective,
      decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [TuiModeDirective]
      }]
    }];
  }, {
    radio: [{
      type: ViewChild,
      args: [TuiRadioComponent]
    }],
    item: [{
      type: Input
    }],
    identityMatcher: [{
      type: Input
    }],
    contentAlign: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["attr.data-align"]
    }],
    size: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["attr.data-size"]
    }],
    hideRadio: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["class._hidden_input"]
    }],
    pseudoDisabled: [{
      type: Input
    }],
    computedDisabled: [{
      type: HostBinding,
      args: ["class._disabled"]
    }],
    checked: [{
      type: HostBinding,
      args: ["class._active"]
    }]
  });
})();
var TuiRadioBlockModule = class {
};
TuiRadioBlockModule.ɵfac = function TuiRadioBlockModule_Factory(t) {
  return new (t || TuiRadioBlockModule)();
};
TuiRadioBlockModule.ɵmod = ɵɵdefineNgModule({
  type: TuiRadioBlockModule,
  declarations: [TuiRadioBlockComponent],
  imports: [CommonModule, FormsModule, TuiRadioModule, TuiWrapperModule],
  exports: [TuiRadioBlockComponent]
});
TuiRadioBlockModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, FormsModule, TuiRadioModule, TuiWrapperModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiRadioBlockModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, FormsModule, TuiRadioModule, TuiWrapperModule],
      declarations: [TuiRadioBlockComponent],
      exports: [TuiRadioBlockComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-radio-labeled.js
var _c045 = ["*"];
var TuiRadioLabeledComponent = class extends AbstractTuiNullableControl {
  constructor(control, cdr, mode$, options) {
    super(control, cdr);
    this.mode$ = mode$;
    this.options = options;
    this.size = this.options.size;
    this.identityMatcher = TUI_DEFAULT_IDENTITY_MATCHER;
    this.pseudoDisabled = false;
  }
  get nativeFocusableElement() {
    var _a, _b;
    return (_b = (_a = this.radio) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) !== null && _b !== void 0 ? _b : null;
  }
  get focused() {
    return !!this.radio && this.radio.focused;
  }
  get computedDisabled() {
    return this.disabled || this.pseudoDisabled;
  }
  onFocused(focused) {
    this.updateFocused(focused);
  }
  /** @deprecated use 'value' setter */
  onModelChange(value) {
    this.value = value;
  }
};
TuiRadioLabeledComponent.ɵfac = function TuiRadioLabeledComponent_Factory(t) {
  return new (t || TuiRadioLabeledComponent)(ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(TUI_MODE), ɵɵdirectiveInject(TUI_RADIO_OPTIONS));
};
TuiRadioLabeledComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiRadioLabeledComponent,
  selectors: [["tui-radio-labeled"]],
  viewQuery: function TuiRadioLabeledComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(TuiRadioComponent, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.radio = _t.first);
    }
  },
  hostVars: 1,
  hostBindings: function TuiRadioLabeledComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("$.data-mode.attr", function TuiRadioLabeledComponent___data_mode_attr_HostBindingHandler() {
        return ctx.mode$;
      });
    }
    if (rf & 2) {
      ɵɵattribute("data-size", ctx.size);
    }
  },
  inputs: {
    item: "item",
    size: "size",
    identityMatcher: "identityMatcher",
    pseudoDisabled: "pseudoDisabled"
  },
  features: [ɵɵProvidersFeature([tuiAsFocusableItemAccessor(TuiRadioLabeledComponent), tuiAsControl(TuiRadioLabeledComponent), MODE_PROVIDER]), ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c045,
  decls: 4,
  vars: 15,
  consts: [[1, "t-wrapper"], [3, "focusable", "identityMatcher", "item", "name", "nativeId", "pseudoActive", "pseudoDisabled", "pseudoFocus", "pseudoHover", "pseudoInvalid", "readOnly", "size", "ngModel", "ngModelChange", "focusedChange"], [1, "t-content"]],
  template: function TuiRadioLabeledComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵelementStart(0, "label", 0)(1, "tui-radio", 1);
      ɵɵlistener("ngModelChange", function TuiRadioLabeledComponent_Template_tui_radio_ngModelChange_1_listener($event) {
        return ctx.value = $event;
      })("focusedChange", function TuiRadioLabeledComponent_Template_tui_radio_focusedChange_1_listener($event) {
        return ctx.onFocused($event);
      });
      ɵɵelementEnd();
      ɵɵelementStart(2, "div", 2);
      ɵɵprojection(3);
      ɵɵelementEnd()();
    }
    if (rf & 2) {
      ɵɵadvance(1);
      ɵɵproperty("focusable", ctx.focusable)("identityMatcher", ctx.identityMatcher)("item", ctx.item)("name", ctx.computedName || "")("nativeId", ctx.nativeId)("pseudoActive", ctx.pseudoActive)("pseudoDisabled", ctx.computedDisabled)("pseudoFocus", ctx.pseudoFocus)("pseudoHover", ctx.pseudoHover)("pseudoInvalid", ctx.computedInvalid)("readOnly", ctx.readOnly)("size", ctx.size)("ngModel", ctx.value);
      ɵɵadvance(1);
      ɵɵclassProp("t-content_disabled", ctx.computedDisabled);
    }
  },
  dependencies: [TuiRadioComponent, NgControlStatus, NgModel],
  styles: ["[_nghost-%COMP%]{position:relative;display:block;font:var(--tui-font-text-s);line-height:1rem}._readonly[_nghost-%COMP%]{pointer-events:none}[data-size=l][_nghost-%COMP%]{line-height:1.5rem}.t-wrapper[_ngcontent-%COMP%]{display:inline-flex;max-width:100%;cursor:pointer;vertical-align:top;align-items:inherit}._disabled[_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]{cursor:default}[data-mode=onDark][_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]{color:var(--tui-text-01-night)}.t-content[_ngcontent-%COMP%]{word-wrap:break-word;min-width:0;line-height:inherit}.t-content_disabled[_ngcontent-%COMP%]{opacity:var(--tui-disabled-opacity)}[data-size=m][_nghost-%COMP%]   .t-content[_ngcontent-%COMP%]{margin-left:.5rem}[data-size=l][_nghost-%COMP%]   .t-content[_ngcontent-%COMP%]{font:var(--tui-font-text-m);margin-left:.75rem;line-height:inherit}"],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiRadioLabeledComponent, [{
    type: Component,
    args: [{
      selector: "tui-radio-labeled",
      templateUrl: "./radio-labeled.template.html",
      styleUrls: ["./radio-labeled.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [tuiAsFocusableItemAccessor(TuiRadioLabeledComponent), tuiAsControl(TuiRadioLabeledComponent), MODE_PROVIDER],
      host: {
        "($.data-mode.attr)": "mode$",
        "[attr.data-size]": "size"
      }
    }]
  }], function() {
    return [{
      type: NgControl,
      decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NgControl]
      }]
    }, {
      type: ChangeDetectorRef,
      decorators: [{
        type: Inject,
        args: [ChangeDetectorRef]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Inject,
        args: [TUI_MODE]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_RADIO_OPTIONS]
      }]
    }];
  }, {
    radio: [{
      type: ViewChild,
      args: [TuiRadioComponent]
    }],
    item: [{
      type: Input
    }],
    size: [{
      type: Input
    }],
    identityMatcher: [{
      type: Input
    }],
    pseudoDisabled: [{
      type: Input
    }]
  });
})();
var TuiRadioLabeledModule = class {
};
TuiRadioLabeledModule.ɵfac = function TuiRadioLabeledModule_Factory(t) {
  return new (t || TuiRadioLabeledModule)();
};
TuiRadioLabeledModule.ɵmod = ɵɵdefineNgModule({
  type: TuiRadioLabeledModule,
  declarations: [TuiRadioLabeledComponent],
  imports: [CommonModule, FormsModule, TuiFocusableModule, TuiFocusedModule, TuiRadioModule],
  exports: [TuiRadioLabeledComponent]
});
TuiRadioLabeledModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, FormsModule, TuiFocusableModule, TuiFocusedModule, TuiRadioModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiRadioLabeledModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, FormsModule, TuiFocusableModule, TuiFocusedModule, TuiRadioModule],
      declarations: [TuiRadioLabeledComponent],
      exports: [TuiRadioLabeledComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-radio-list.js
function TuiRadioListComponent_tui_radio_labeled_1_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtext(1);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const text_r4 = ctx.polymorpheusOutlet;
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", text_r4, " ");
  }
}
var _c046 = function(a0, a1, a2) {
  return {
    $implicit: a0,
    index: a1,
    active: a2
  };
};
function TuiRadioListComponent_tui_radio_labeled_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "tui-radio-labeled", 2);
    ɵɵlistener("ngModelChange", function TuiRadioListComponent_tui_radio_labeled_1_Template_tui_radio_labeled_ngModelChange_0_listener($event) {
      ɵɵrestoreView(_r6);
      const ctx_r5 = ɵɵnextContext();
      return ɵɵresetView(ctx_r5.value = $event);
    });
    ɵɵtemplate(1, TuiRadioListComponent_tui_radio_labeled_1_ng_container_1_Template, 2, 1, "ng-container", 3);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const item_r1 = ctx.$implicit;
    const index_r2 = ctx.index;
    const ctx_r0 = ɵɵnextContext();
    ɵɵproperty("disabled", ctx_r0.disabled)("identityMatcher", ctx_r0.identityMatcher)("item", item_r1)("nativeId", ctx_r0.computeId(index_r2))("pseudoDisabled", ctx_r0.itemIsDisabled(item_r1))("pseudoInvalid", ctx_r0.computedInvalid)("readOnly", ctx_r0.readOnly)("size", ctx_r0.size)("ngModel", ctx_r0.value);
    ɵɵadvance(1);
    ɵɵproperty("polymorpheusOutlet", ctx_r0.itemContent)("polymorpheusOutletContext", ɵɵpureFunction3(11, _c046, item_r1, index_r2, ctx_r0.itemIsActive(item_r1)));
  }
}
var TuiRadioListComponent = class extends AbstractTuiNullableControl {
  constructor(control, cdr, el) {
    super(control, cdr);
    this.el = el;
    this.radioButtons = EMPTY_QUERY;
    this.items = [];
    this.size = "m";
    this.identityMatcher = TUI_DEFAULT_IDENTITY_MATCHER;
    this.orientation = "vertical";
    this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
    this.itemContent = ({
      $implicit
    }) => String($implicit);
  }
  get nativeFocusableElement() {
    var _a;
    const focusableRadioButton = this.radioButtons.find((radioButton) => radioButton.nativeFocusableElement !== null);
    return (_a = focusableRadioButton === null || focusableRadioButton === void 0 ? void 0 : focusableRadioButton.nativeFocusableElement) !== null && _a !== void 0 ? _a : null;
  }
  get focused() {
    return tuiIsNativeFocusedIn(this.el.nativeElement);
  }
  computeId(index) {
    return `${this.id}-${index}`;
  }
  itemIsDisabled(item) {
    return this.disabledItemHandler(item);
  }
  /** @deprecated use 'value' setter */
  onModelChange(value) {
    this.value = value;
  }
  itemIsActive(item) {
    return this.value === null ? item === null : this.identityMatcher(this.value, item);
  }
};
TuiRadioListComponent.ɵfac = function TuiRadioListComponent_Factory(t) {
  return new (t || TuiRadioListComponent)(ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(ElementRef));
};
TuiRadioListComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiRadioListComponent,
  selectors: [["tui-radio-list"]],
  viewQuery: function TuiRadioListComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(TuiRadioLabeledComponent, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.radioButtons = _t);
    }
  },
  hostVars: 2,
  hostBindings: function TuiRadioListComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("data-size", ctx.size)("data-orientation", ctx.orientation);
    }
  },
  inputs: {
    items: "items",
    size: "size",
    identityMatcher: "identityMatcher",
    orientation: "orientation",
    disabledItemHandler: "disabledItemHandler",
    itemContent: "itemContent"
  },
  features: [ɵɵProvidersFeature([tuiAsFocusableItemAccessor(TuiRadioListComponent), tuiAsControl(TuiRadioListComponent)]), ɵɵInheritDefinitionFeature],
  decls: 2,
  vars: 1,
  consts: [[1, "t-group"], ["class", "t-item", 3, "disabled", "identityMatcher", "item", "nativeId", "pseudoDisabled", "pseudoInvalid", "readOnly", "size", "ngModel", "ngModelChange", 4, "ngFor", "ngForOf"], [1, "t-item", 3, "disabled", "identityMatcher", "item", "nativeId", "pseudoDisabled", "pseudoInvalid", "readOnly", "size", "ngModel", "ngModelChange"], [4, "polymorpheusOutlet", "polymorpheusOutletContext"]],
  template: function TuiRadioListComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵelementStart(0, "tui-radio-group", 0);
      ɵɵtemplate(1, TuiRadioListComponent_tui_radio_labeled_1_Template, 2, 15, "tui-radio-labeled", 1);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      ɵɵadvance(1);
      ɵɵproperty("ngForOf", ctx.items);
    }
  },
  dependencies: [TuiRadioGroupComponent, TuiRadioLabeledComponent, NgForOf, NgControlStatus, NgModel, PolymorpheusOutletDirective],
  styles: ["[_nghost-%COMP%]{display:block}._readonly[_nghost-%COMP%]{pointer-events:none}.t-group[_ngcontent-%COMP%]{align-items:inherit}[data-orientation=horizontal][_nghost-%COMP%]   .t-group[_ngcontent-%COMP%]{display:flex;justify-content:inherit}.t-item[_ngcontent-%COMP%]{align-items:inherit}[data-orientation=horizontal][_nghost-%COMP%]   .t-item[_ngcontent-%COMP%]:nth-child(n + 2){margin-left:1.5rem}[data-orientation=vertical][_nghost-%COMP%]   .t-item[_ngcontent-%COMP%]:nth-child(n + 2){margin-top:.75rem}[data-size=l][data-orientation=horizontal][_nghost-%COMP%]   .t-item[_ngcontent-%COMP%]:nth-child(n + 2){margin-left:2.5rem}[data-size=l][data-orientation=vertical][_nghost-%COMP%]   .t-item[_ngcontent-%COMP%]:nth-child(n + 2){margin-top:1rem}"],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiRadioListComponent, [{
    type: Component,
    args: [{
      selector: "tui-radio-list",
      templateUrl: "./radio-list.template.html",
      styleUrls: ["./radio-list.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [tuiAsFocusableItemAccessor(TuiRadioListComponent), tuiAsControl(TuiRadioListComponent)]
    }]
  }], function() {
    return [{
      type: NgControl,
      decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NgControl]
      }]
    }, {
      type: ChangeDetectorRef,
      decorators: [{
        type: Inject,
        args: [ChangeDetectorRef]
      }]
    }, {
      type: ElementRef,
      decorators: [{
        type: Inject,
        args: [ElementRef]
      }]
    }];
  }, {
    radioButtons: [{
      type: ViewChildren,
      args: [TuiRadioLabeledComponent]
    }],
    items: [{
      type: Input
    }],
    size: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["attr.data-size"]
    }],
    identityMatcher: [{
      type: Input
    }],
    orientation: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["attr.data-orientation"]
    }],
    disabledItemHandler: [{
      type: Input
    }],
    itemContent: [{
      type: Input
    }]
  });
})();
var TuiRadioListModule = class {
};
TuiRadioListModule.ɵfac = function TuiRadioListModule_Factory(t) {
  return new (t || TuiRadioListModule)();
};
TuiRadioListModule.ɵmod = ɵɵdefineNgModule({
  type: TuiRadioListModule,
  declarations: [TuiRadioListComponent],
  imports: [CommonModule, FormsModule, PolymorpheusModule, TuiRadioGroupModule, TuiRadioLabeledModule],
  exports: [TuiRadioListComponent]
});
TuiRadioListModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, FormsModule, PolymorpheusModule, TuiRadioGroupModule, TuiRadioLabeledModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiRadioListModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, FormsModule, PolymorpheusModule, TuiRadioGroupModule, TuiRadioLabeledModule],
      declarations: [TuiRadioListComponent],
      exports: [TuiRadioListComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-rating.js
var _c047 = ["focusableElement"];
function TuiRatingComponent_tui_svg_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "tui-svg", 8);
    ɵɵlistener("click", function TuiRatingComponent_tui_svg_4_Template_tui_svg_click_0_listener() {
      const restoredCtx = ɵɵrestoreView(_r6);
      const index_r4 = restoredCtx.$implicit;
      const ctx_r5 = ɵɵnextContext();
      return ɵɵresetView(ctx_r5.setRateByReverseIndex(index_r4));
    });
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const index_r4 = ctx.$implicit;
    const ctx_r0 = ɵɵnextContext();
    ɵɵclassProp("t-icon-rating-last", index_r4 === 0);
    ɵɵproperty("src", ctx_r0.iconFilled);
  }
}
function TuiRatingComponent_tui_svg_6_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "tui-svg", 9);
  }
  if (rf & 2) {
    const index_r7 = ctx.$implicit;
    const ctx_r1 = ɵɵnextContext();
    ɵɵclassProp("t-icon-rating-last", index_r7 === 0);
    ɵɵproperty("src", ctx_r1.iconFilled);
  }
}
function TuiRatingComponent_tui_svg_7_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "tui-svg", 10);
  }
  if (rf & 2) {
    const index_r8 = ctx.$implicit;
    const ctx_r2 = ɵɵnextContext();
    ɵɵclassProp("t-icon-rating-last", ctx_r2.max - 1 === index_r8);
    ɵɵproperty("src", ctx_r2.iconNormal);
  }
}
var _c132 = ["*"];
var TUI_RATING_DEFAULT_OPTIONS = {
  min: 0,
  max: 5,
  iconNormal: "tuiIconStarLarge",
  iconFilled: "tuiIconStarLarge"
};
var TUI_RATING_OPTIONS = tuiCreateToken(TUI_RATING_DEFAULT_OPTIONS);
function tuiRatingOptionsProvider(options) {
  return tuiProvideOptions(TUI_RATING_OPTIONS, options, TUI_RATING_DEFAULT_OPTIONS);
}
var TuiRatingComponent = class extends AbstractTuiControl {
  constructor(ngControl, cdr, options) {
    super(ngControl, cdr);
    this.options = options;
    this.min = this.options.min;
    this.max = this.options.max;
    this.iconNormal = this.options.iconNormal;
    this.iconFilled = this.options.iconFilled;
  }
  get nativeFocusableElement() {
    return this.computedDisabled || !this.focusableElement ? null : this.focusableElement.nativeElement;
  }
  get focused() {
    return tuiIsNativeFocused(this.nativeFocusableElement);
  }
  get isFocusable() {
    return !(this.readOnly || this.disabled);
  }
  get percent() {
    return tuiClamp(100 * this.value / this.max, 0, 100);
  }
  onFocused(focused) {
    this.updateFocused(focused);
  }
  setRateByReverseIndex(index) {
    const reversedIndex = this.max - index;
    if (reversedIndex <= this.min) {
      return;
    }
    this.value = reversedIndex;
  }
  setRate(value) {
    this.value = value;
  }
  getFallbackValue() {
    return 0;
  }
};
TuiRatingComponent.ɵfac = function TuiRatingComponent_Factory(t) {
  return new (t || TuiRatingComponent)(ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(TUI_RATING_OPTIONS));
};
TuiRatingComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiRatingComponent,
  selectors: [["tui-rating"]],
  viewQuery: function TuiRatingComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(_c047, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.focusableElement = _t.first);
    }
  },
  hostBindings: function TuiRatingComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("focusin", function TuiRatingComponent_focusin_HostBindingHandler() {
        return ctx.onFocused(true);
      })("focusout", function TuiRatingComponent_focusout_HostBindingHandler() {
        return ctx.onFocused(false);
      });
    }
  },
  inputs: {
    min: "min",
    max: "max",
    iconNormal: "iconNormal",
    iconFilled: "iconFilled"
  },
  features: [ɵɵProvidersFeature([tuiAsFocusableItemAccessor(TuiRatingComponent), tuiAsControl(TuiRatingComponent)]), ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c132,
  decls: 10,
  vars: 9,
  consts: [[1, "t-host"], [1, "t-interactive"], ["class", "t-icon-rating t-icon-filled", 3, "t-icon-rating-last", "src", "click", 4, "tuiRepeatTimes", "tuiRepeatTimesOf"], [1, "t-wrapper"], ["class", "t-icon-rating t-icon-filled", 3, "t-icon-rating-last", "src", 4, "tuiRepeatTimes", "tuiRepeatTimesOf"], ["class", "t-icon-rating", 3, "t-icon-rating-last", "src", 4, "tuiRepeatTimes", "tuiRepeatTimesOf"], ["step", "1", "type", "range", 1, "t-input", 3, "max", "min", "ngModel", "tuiFocusable", "ngModelChange"], ["focusableElement", ""], [1, "t-icon-rating", "t-icon-filled", 3, "src", "click"], [1, "t-icon-rating", "t-icon-filled", 3, "src"], [1, "t-icon-rating", 3, "src"]],
  template: function TuiRatingComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵelementStart(0, "label");
      ɵɵprojection(1);
      ɵɵelementStart(2, "div", 0)(3, "div", 1);
      ɵɵtemplate(4, TuiRatingComponent_tui_svg_4_Template, 1, 3, "tui-svg", 2);
      ɵɵelementEnd();
      ɵɵelementStart(5, "div", 3);
      ɵɵtemplate(6, TuiRatingComponent_tui_svg_6_Template, 1, 3, "tui-svg", 4);
      ɵɵelementEnd();
      ɵɵtemplate(7, TuiRatingComponent_tui_svg_7_Template, 1, 3, "tui-svg", 5);
      ɵɵelementStart(8, "input", 6, 7);
      ɵɵlistener("ngModelChange", function TuiRatingComponent_Template_input_ngModelChange_8_listener($event) {
        return ctx.setRate($event);
      });
      ɵɵelementEnd()()();
    }
    if (rf & 2) {
      ɵɵadvance(4);
      ɵɵproperty("tuiRepeatTimesOf", ctx.max);
      ɵɵadvance(1);
      ɵɵstyleProp("width", ctx.percent, "%");
      ɵɵadvance(1);
      ɵɵproperty("tuiRepeatTimesOf", ctx.max);
      ɵɵadvance(1);
      ɵɵproperty("tuiRepeatTimesOf", ctx.max);
      ɵɵadvance(1);
      ɵɵproperty("max", ctx.max)("min", ctx.min)("ngModel", ctx.value)("tuiFocusable", ctx.isFocusable);
    }
  },
  dependencies: [TuiSvgComponent, TuiRepeatTimesDirective, RangeValueAccessor, DefaultValueAccessor, NgControlStatus, NgModel, TuiFocusableDirective],
  styles: ["._readonly[_nghost-%COMP%], ._disabled[_nghost-%COMP%]{pointer-events:none}._disabled[_nghost-%COMP%]{opacity:var(--tui-disabled-opacity)}.t-host[_ngcontent-%COMP%]{position:relative;display:inline-flex}.t-icon-rating[_ngcontent-%COMP%]{width:var(--tui-rating-size, 1.5rem);height:var(--tui-rating-size, 1.5rem);padding:0 var(--tui-rating-gap, 0) 0 0}.t-icon-rating-last[_ngcontent-%COMP%]{padding-right:0}.t-input[_ngcontent-%COMP%]{pointer-events:none;-webkit-appearance:none;-moz-appearance:none;appearance:none;background:transparent}.t-input[_ngcontent-%COMP%]::-webkit-slider-thumb{display:none}.t-input[_ngcontent-%COMP%]::-moz-range-thumb{opacity:0}.t-input[_ngcontent-%COMP%], .t-wrapper[_ngcontent-%COMP%], .t-interactive[_ngcontent-%COMP%]{position:absolute;left:0;bottom:0;width:100%;height:100%}.t-wrapper[_ngcontent-%COMP%], .t-interactive[_ngcontent-%COMP%]{display:inline-flex;overflow:hidden;flex-direction:row-reverse;justify-content:flex-end;white-space:nowrap}.t-wrapper[_ngcontent-%COMP%]{pointer-events:none}.t-interactive[_ngcontent-%COMP%]{opacity:0}@media (hover: hover) and (pointer: fine){.t-interactive[_ngcontent-%COMP%]:hover{opacity:1}.t-interactive[_ngcontent-%COMP%]:hover ~ .t-wrapper[_ngcontent-%COMP%]{visibility:hidden}.t-interactive[_ngcontent-%COMP%]:hover   .t-icon-filled[_ngcontent-%COMP%]{opacity:0}.t-interactive[_ngcontent-%COMP%]:hover   .t-icon-filled[_ngcontent-%COMP%]:hover, .t-interactive[_ngcontent-%COMP%]:hover   .t-icon-filled[_ngcontent-%COMP%]:hover ~ .t-icon-filled[_ngcontent-%COMP%]{opacity:1}}.t-icon-filled[_ngcontent-%COMP%]{position:relative;cursor:pointer;fill:currentColor}"],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiRatingComponent, [{
    type: Component,
    args: [{
      selector: "tui-rating",
      templateUrl: "./rating.template.html",
      styleUrls: ["./rating.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [tuiAsFocusableItemAccessor(TuiRatingComponent), tuiAsControl(TuiRatingComponent)]
    }]
  }], function() {
    return [{
      type: NgControl,
      decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NgControl]
      }]
    }, {
      type: ChangeDetectorRef,
      decorators: [{
        type: Inject,
        args: [ChangeDetectorRef]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_RATING_OPTIONS]
      }]
    }];
  }, {
    focusableElement: [{
      type: ViewChild,
      args: ["focusableElement"]
    }],
    min: [{
      type: Input
    }],
    max: [{
      type: Input
    }],
    iconNormal: [{
      type: Input
    }],
    iconFilled: [{
      type: Input
    }],
    onFocused: [{
      type: HostListener,
      args: ["focusin", ["true"]]
    }, {
      type: HostListener,
      args: ["focusout", ["false"]]
    }]
  });
})();
var TuiRatingModule = class {
};
TuiRatingModule.ɵfac = function TuiRatingModule_Factory(t) {
  return new (t || TuiRatingModule)();
};
TuiRatingModule.ɵmod = ɵɵdefineNgModule({
  type: TuiRatingModule,
  declarations: [TuiRatingComponent],
  imports: [TuiSvgModule, TuiFocusableModule, TuiRepeatTimesModule, FormsModule, ReactiveFormsModule],
  exports: [TuiRatingComponent]
});
TuiRatingModule.ɵinj = ɵɵdefineInjector({
  imports: [[TuiSvgModule, TuiFocusableModule, TuiRepeatTimesModule, FormsModule, ReactiveFormsModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiRatingModule, [{
    type: NgModule,
    args: [{
      imports: [TuiSvgModule, TuiFocusableModule, TuiRepeatTimesModule, FormsModule, ReactiveFormsModule],
      declarations: [TuiRatingComponent],
      exports: [TuiRatingComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-routable-dialog.js
var TuiRoutableDialogComponent = class {
  constructor(route, router, dialogs, injector, destroy$) {
    this.route = route;
    this.router = router;
    this.initialUrl = this.router.url;
    dialogs.open(new PolymorpheusComponent(this.route.snapshot.data["dialog"], injector), this.route.snapshot.data["dialogOptions"]).pipe(takeUntil(destroy$)).subscribe({
      complete: () => this.onDialogClosing()
    });
  }
  get lazyLoadedBackUrl() {
    var _a;
    return (((_a = this.route.parent) === null || _a === void 0 ? void 0 : _a.snapshot.url) || []).map(() => "..").join("/");
  }
  onDialogClosing() {
    if (this.initialUrl === this.router.url) {
      this.navigateToParent();
    }
  }
  navigateToParent() {
    const backUrl = this.route.snapshot.data["isLazy"] ? this.lazyLoadedBackUrl : this.route.snapshot.data["backUrl"];
    void this.router.navigate([backUrl], {
      relativeTo: this.route
    });
  }
};
TuiRoutableDialogComponent.ɵfac = function TuiRoutableDialogComponent_Factory(t) {
  return new (t || TuiRoutableDialogComponent)(ɵɵdirectiveInject(ActivatedRoute), ɵɵdirectiveInject(Router), ɵɵdirectiveInject(TuiDialogService), ɵɵdirectiveInject(Injector), ɵɵdirectiveInject(TuiDestroyService, 2));
};
TuiRoutableDialogComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiRoutableDialogComponent,
  selectors: [["tui-routable-dialog"]],
  features: [ɵɵProvidersFeature([TuiDestroyService])],
  decls: 0,
  vars: 0,
  template: function TuiRoutableDialogComponent_Template(rf, ctx) {
  },
  encapsulation: 2,
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiRoutableDialogComponent, [{
    type: Component,
    args: [{
      selector: "tui-routable-dialog",
      template: "",
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [TuiDestroyService]
    }]
  }], function() {
    return [{
      type: ActivatedRoute,
      decorators: [{
        type: Inject,
        args: [ActivatedRoute]
      }]
    }, {
      type: Router,
      decorators: [{
        type: Inject,
        args: [Router]
      }]
    }, {
      type: TuiDialogService,
      decorators: [{
        type: Inject,
        args: [TuiDialogService]
      }]
    }, {
      type: Injector,
      decorators: [{
        type: Inject,
        args: [Injector]
      }]
    }, {
      type: TuiDestroyService,
      decorators: [{
        type: Self
      }, {
        type: Inject,
        args: [TuiDestroyService]
      }]
    }];
  }, null);
})();
function tuiGenerateDialogableRoute(component, _a = {}) {
  var {
    path = ""
  } = _a, dialogOptions = __rest(_a, ["path"]);
  return {
    path,
    component: TuiRoutableDialogComponent,
    data: {
      dialog: component,
      backUrl: path.split("/").map(() => "..").join("/"),
      isLazy: path === "",
      dialogOptions
    }
  };
}
var TuiRoutableDialogModule = class {
};
TuiRoutableDialogModule.ɵfac = function TuiRoutableDialogModule_Factory(t) {
  return new (t || TuiRoutableDialogModule)();
};
TuiRoutableDialogModule.ɵmod = ɵɵdefineNgModule({
  type: TuiRoutableDialogModule,
  declarations: [TuiRoutableDialogComponent],
  exports: [TuiRoutableDialogComponent]
});
TuiRoutableDialogModule.ɵinj = ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiRoutableDialogModule, [{
    type: NgModule,
    args: [{
      declarations: [TuiRoutableDialogComponent],
      exports: [TuiRoutableDialogComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-select.js
var _c048 = ["tuiSelect", ""];
function TuiNativeSelectComponent_tui_data_list_wrapper_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "tui-data-list-wrapper", 4);
    ɵɵpipe(1, "tuiStringifyContent");
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵproperty("disabledItemHandler", ctx_r0.disabledItemHandler || ctx_r0.itemsHandlers.disabledItemHandler)("itemContent", ɵɵpipeBind1(1, 3, ctx_r0.stringify))("items", ctx_r0.items);
  }
}
function TuiNativeSelectComponent_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function TuiNativeSelectComponent_option_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "option", 5);
    ɵɵtext(1);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r2.placeholder, "\n");
  }
}
function TuiNativeSelectComponent_option_4_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "option", 6);
    ɵɵtext(1);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const option_r4 = ctx.$implicit;
    const ctx_r3 = ɵɵnextContext();
    ɵɵproperty("disabled", ctx_r3.disabledItemHandler ? ctx_r3.disabledItemHandler(option_r4) : ctx_r3.itemsHandlers.disabledItemHandler(option_r4))("selected", ctx_r3.selected(option_r4))("value", ctx_r3.stringify(option_r4));
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r3.stringify(option_r4), "\n");
  }
}
var _c133 = ["tuiSelect", "", "labels", ""];
function TuiNativeSelectGroupComponent_tui_data_list_wrapper_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "tui-data-list-wrapper", 4);
    ɵɵpipe(1, "tuiStringifyContent");
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵproperty("disabledItemHandler", ctx_r0.disabledItemHandler || ctx_r0.itemsHandlers.disabledItemHandler)("itemContent", ɵɵpipeBind1(1, 4, ctx_r0.stringify))("items", ctx_r0.items)("labels", ctx_r0.labels);
  }
}
function TuiNativeSelectGroupComponent_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function TuiNativeSelectGroupComponent_option_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "option", 5);
    ɵɵtext(1);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r2.placeholder, "\n");
  }
}
function TuiNativeSelectGroupComponent_optgroup_4_option_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "option", 8);
    ɵɵtext(1);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const option_r7 = ctx.$implicit;
    const ctx_r6 = ɵɵnextContext(2);
    ɵɵproperty("disabled", ctx_r6.disabledItemHandler ? ctx_r6.disabledItemHandler(option_r7) : ctx_r6.itemsHandlers.disabledItemHandler(option_r7))("selected", ctx_r6.selected(option_r7))("value", ctx_r6.stringify(option_r7));
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", ctx_r6.stringify(option_r7), " ");
  }
}
function TuiNativeSelectGroupComponent_optgroup_4_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "optgroup", 6);
    ɵɵtemplate(1, TuiNativeSelectGroupComponent_optgroup_4_option_1_Template, 2, 4, "option", 7);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const group_r4 = ctx.$implicit;
    const index_r5 = ctx.index;
    const ctx_r3 = ɵɵnextContext();
    ɵɵproperty("label", ctx_r3.labels[index_r5]);
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", group_r4);
  }
}
var _c217 = "[_nghost-%COMP%]{position:absolute;top:0;left:0;width:100%;height:100%;opacity:0}";
function TuiSelectComponent_ng_template_4_ng_content_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0, 2, ["*ngIf", "isMobile"]);
  }
}
function TuiSelectComponent_ng_template_4_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtemplate(0, TuiSelectComponent_ng_template_4_ng_content_0_Template, 1, 0, "ng-content", 6);
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵproperty("ngIf", ctx_r1.isMobile);
  }
}
function TuiSelectComponent_ng_container_6_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0, 7);
  }
}
function TuiSelectComponent_div_7_div_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "div", 10);
  }
  if (rf & 2) {
    const text_r8 = ctx.polymorpheusOutlet;
    ɵɵproperty("textContent", text_r8);
  }
}
var _c38 = function(a0, a1) {
  return {
    $implicit: a0,
    active: a1
  };
};
function TuiSelectComponent_div_7_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 8);
    ɵɵtemplate(1, TuiSelectComponent_div_7_div_1_Template, 1, 1, "div", 9);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r3 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("polymorpheusOutlet", ctx_r3.computedContent)("polymorpheusOutletContext", ɵɵpureFunction2(2, _c38, ctx_r3.value, ctx_r3.computedFocused));
  }
}
function TuiSelectComponent_ng_template_8_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function TuiSelectComponent_ng_template_8_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 11);
    ɵɵtemplate(1, TuiSelectComponent_ng_template_8_ng_container_1_Template, 1, 0, "ng-container", 12);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r5 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("polymorpheusOutlet", ctx_r5.arrow);
  }
}
var _c46 = ["*", [["input"]], [["select"]]];
var _c53 = ["*", "input", "select"];
var TuiNativeSelectComponent = class extends AbstractTuiNativeSelect {
  constructor() {
    super(...arguments);
    this.items = [];
  }
  get stringify() {
    return this.host.stringify;
  }
  selected(option) {
    return this.control.value === option;
  }
  onValueChange(index) {
    var _a;
    this.host.onValueChange(((_a = this.items) === null || _a === void 0 ? void 0 : _a[index]) || null);
  }
};
TuiNativeSelectComponent.ɵfac = function() {
  let ɵTuiNativeSelectComponent_BaseFactory;
  return function TuiNativeSelectComponent_Factory(t) {
    return (ɵTuiNativeSelectComponent_BaseFactory || (ɵTuiNativeSelectComponent_BaseFactory = ɵɵgetInheritedFactory(TuiNativeSelectComponent)))(t || TuiNativeSelectComponent);
  };
}();
TuiNativeSelectComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiNativeSelectComponent,
  selectors: [["select", "tuiSelect", "", 3, "labels", "", 3, "multiple", ""]],
  hostVars: 4,
  hostBindings: function TuiNativeSelectComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("change", function TuiNativeSelectComponent_change_HostBindingHandler($event) {
        return ctx.onValueChange($event.target.options.selectedIndex - (ctx.emptyOption ? 1 : 0));
      });
    }
    if (rf & 2) {
      ɵɵhostProperty("disabled", ctx.host.disabled || ctx.control.readOnly)("tabIndex", ctx.host.focusable ? 0 : -1)("value", ctx.host.value);
      ɵɵattribute("aria-invalid", ctx.host.invalid);
    }
  },
  inputs: {
    items: "items"
  },
  features: [ɵɵProvidersFeature([tuiAsDataList(TuiNativeSelectComponent), {
    provide: TemplateRef,
    deps: [TuiNativeSelectComponent],
    useFactory: ({
      datalist
    }) => datalist
  }, {
    provide: AbstractTuiNativeSelect,
    useExisting: TuiNativeSelectComponent
  }]), ɵɵInheritDefinitionFeature],
  attrs: _c048,
  decls: 5,
  vars: 5,
  consts: [[3, "disabledItemHandler", "itemContent", "items", 4, "tuiDataList"], [4, "ngIf"], ["disabled", "", "selected", "", "value", "", 4, "ngIf"], [3, "disabled", "selected", "value", 4, "ngFor", "ngForOf"], [3, "disabledItemHandler", "itemContent", "items"], ["disabled", "", "selected", "", "value", ""], [3, "disabled", "selected", "value"]],
  template: function TuiNativeSelectComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵtemplate(0, TuiNativeSelectComponent_tui_data_list_wrapper_0_Template, 2, 5, "tui-data-list-wrapper", 0);
      ɵɵtemplate(1, TuiNativeSelectComponent_ng_container_1_Template, 1, 0, "ng-container", 1);
      ɵɵpipe(2, "async");
      ɵɵtemplate(3, TuiNativeSelectComponent_option_3_Template, 2, 1, "option", 2);
      ɵɵtemplate(4, TuiNativeSelectComponent_option_4_Template, 2, 4, "option", 3);
    }
    if (rf & 2) {
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ɵɵpipeBind1(2, 3, ctx.control.control == null ? null : ctx.control.control.valueChanges));
      ɵɵadvance(2);
      ɵɵproperty("ngIf", ctx.emptyOption);
      ɵɵadvance(1);
      ɵɵproperty("ngForOf", ctx.items);
    }
  },
  dependencies: [TuiDataListWrapperComponent, TuiDataListDirective, NgIf, NgForOf, TuiStringifyContentPipe, AsyncPipe],
  styles: ["[_nghost-%COMP%]{position:absolute;top:0;left:0;width:100%;height:100%;opacity:0}"],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiNativeSelectComponent, [{
    type: Component,
    args: [{
      selector: "select[tuiSelect]:not([labels]):not([multiple])",
      templateUrl: "./native-select.template.html",
      styleUrls: ["./native-select.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [tuiAsDataList(TuiNativeSelectComponent), {
        provide: TemplateRef,
        deps: [TuiNativeSelectComponent],
        useFactory: ({
          datalist
        }) => datalist
      }, {
        provide: AbstractTuiNativeSelect,
        useExisting: TuiNativeSelectComponent
      }],
      host: {
        "[attr.aria-invalid]": "host.invalid",
        "[disabled]": "host.disabled || control.readOnly",
        "[tabIndex]": "host.focusable ? 0 : -1",
        "[value]": "host.value",
        "(change)": "onValueChange($event.target.options.selectedIndex - (emptyOption ? 1 : 0))"
      }
    }]
  }], null, {
    items: [{
      type: Input
    }]
  });
})();
var TuiNativeSelectGroupComponent = class extends AbstractTuiNativeSelect {
  constructor() {
    super(...arguments);
    this.items = [];
    this.labels = [];
  }
  get stringify() {
    return this.host.stringify;
  }
  selected(option) {
    return this.control.value === option;
  }
  onValueChange(index) {
    var _a;
    const flatItems = (_a = this.items) === null || _a === void 0 ? void 0 : _a.reduce((acc, val) => acc.concat(val), []);
    this.host.onValueChange((flatItems === null || flatItems === void 0 ? void 0 : flatItems[index]) || null);
  }
};
TuiNativeSelectGroupComponent.ɵfac = function() {
  let ɵTuiNativeSelectGroupComponent_BaseFactory;
  return function TuiNativeSelectGroupComponent_Factory(t) {
    return (ɵTuiNativeSelectGroupComponent_BaseFactory || (ɵTuiNativeSelectGroupComponent_BaseFactory = ɵɵgetInheritedFactory(TuiNativeSelectGroupComponent)))(t || TuiNativeSelectGroupComponent);
  };
}();
TuiNativeSelectGroupComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiNativeSelectGroupComponent,
  selectors: [["select", "tuiSelect", "", "labels", "", 3, "multiple", ""]],
  hostVars: 4,
  hostBindings: function TuiNativeSelectGroupComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("change", function TuiNativeSelectGroupComponent_change_HostBindingHandler($event) {
        return ctx.onValueChange($event.target.options.selectedIndex - (ctx.emptyOption ? 1 : 0));
      });
    }
    if (rf & 2) {
      ɵɵhostProperty("disabled", ctx.host.disabled || ctx.control.readOnly)("tabIndex", ctx.host.focusable ? 0 : -1)("value", ctx.host.value);
      ɵɵattribute("aria-invalid", ctx.host.invalid);
    }
  },
  inputs: {
    items: "items",
    labels: "labels"
  },
  features: [ɵɵProvidersFeature([tuiAsDataList(TuiNativeSelectGroupComponent), {
    provide: TemplateRef,
    deps: [TuiNativeSelectGroupComponent],
    useFactory: ({
      datalist
    }) => datalist
  }, {
    provide: AbstractTuiNativeSelect,
    useExisting: TuiNativeSelectGroupComponent
  }]), ɵɵInheritDefinitionFeature],
  attrs: _c133,
  decls: 5,
  vars: 5,
  consts: [[3, "disabledItemHandler", "itemContent", "items", "labels", 4, "tuiDataList"], [4, "ngIf"], ["disabled", "", "selected", "", "value", "", 4, "ngIf"], [3, "label", 4, "ngFor", "ngForOf"], [3, "disabledItemHandler", "itemContent", "items", "labels"], ["disabled", "", "selected", "", "value", ""], [3, "label"], [3, "disabled", "selected", "value", 4, "ngFor", "ngForOf"], [3, "disabled", "selected", "value"]],
  template: function TuiNativeSelectGroupComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵtemplate(0, TuiNativeSelectGroupComponent_tui_data_list_wrapper_0_Template, 2, 6, "tui-data-list-wrapper", 0);
      ɵɵtemplate(1, TuiNativeSelectGroupComponent_ng_container_1_Template, 1, 0, "ng-container", 1);
      ɵɵpipe(2, "async");
      ɵɵtemplate(3, TuiNativeSelectGroupComponent_option_3_Template, 2, 1, "option", 2);
      ɵɵtemplate(4, TuiNativeSelectGroupComponent_optgroup_4_Template, 2, 2, "optgroup", 3);
    }
    if (rf & 2) {
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ɵɵpipeBind1(2, 3, ctx.control.control == null ? null : ctx.control.control.valueChanges));
      ɵɵadvance(2);
      ɵɵproperty("ngIf", ctx.emptyOption);
      ɵɵadvance(1);
      ɵɵproperty("ngForOf", ctx.items);
    }
  },
  dependencies: [TuiDataListGroupWrapperComponent, TuiDataListDirective, NgIf, NgForOf, TuiStringifyContentPipe, AsyncPipe],
  styles: [_c217],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiNativeSelectGroupComponent, [{
    type: Component,
    args: [{
      selector: "select[tuiSelect][labels]:not([multiple])",
      templateUrl: "./native-select-group.template.html",
      styleUrls: ["./native-select.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [tuiAsDataList(TuiNativeSelectGroupComponent), {
        provide: TemplateRef,
        deps: [TuiNativeSelectGroupComponent],
        useFactory: ({
          datalist
        }) => datalist
      }, {
        provide: AbstractTuiNativeSelect,
        useExisting: TuiNativeSelectGroupComponent
      }],
      host: {
        "[attr.aria-invalid]": "host.invalid",
        "[disabled]": "host.disabled || control.readOnly",
        "[tabIndex]": "host.focusable ? 0 : -1",
        "[value]": "host.value",
        "(change)": "onValueChange($event.target.options.selectedIndex - (emptyOption ? 1 : 0))"
      }
    }]
  }], null, {
    items: [{
      type: Input
    }],
    labels: [{
      type: Input
    }]
  });
})();
var TUI_SELECT_DEFAULT_OPTIONS = {
  valueContent: ""
};
var TUI_SELECT_OPTIONS = tuiCreateToken(TUI_SELECT_DEFAULT_OPTIONS);
function tuiSelectOptionsProvider(options) {
  return tuiProvideOptions(TUI_SELECT_OPTIONS, options, TUI_SELECT_DEFAULT_OPTIONS);
}
var TuiSelectComponent = class extends AbstractTuiNullableControl {
  constructor(control, cdr, textfieldCleaner, textfieldSize, arrowMode, itemsHandlers, options, isMobile) {
    super(control, cdr);
    this.textfieldCleaner = textfieldCleaner;
    this.textfieldSize = textfieldSize;
    this.arrowMode = arrowMode;
    this.itemsHandlers = itemsHandlers;
    this.options = options;
    this.isMobile = isMobile;
    this.stringify = this.itemsHandlers.stringify;
    this.identityMatcher = this.itemsHandlers.identityMatcher;
    this.valueContent = this.options.valueContent;
  }
  get size() {
    return this.textfieldSize.size;
  }
  get arrow() {
    return !this.interactive ? this.arrowMode.disabled : this.arrowMode.interactive;
  }
  get nativeFocusableElement() {
    var _a, _b;
    return (_b = (_a = this.textfield) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) !== null && _b !== void 0 ? _b : null;
  }
  get focused() {
    return tuiIsNativeFocused(this.nativeFocusableElement) || !!this.hostedDropdown && this.hostedDropdown.focused;
  }
  get nativeDropdownMode() {
    return !!this.nativeSelect && this.isMobile;
  }
  get computedValue() {
    return this.value === null ? "" : this.stringify(this.value) || " ";
  }
  get computedContent() {
    return this.valueContent || this.computedValue;
  }
  onValueChange(value) {
    this.value = value || null;
  }
  onActiveZone(active) {
    this.updateFocused(active);
  }
  onKeyDownDelete() {
    if (this.textfieldCleaner.cleaner) {
      this.value = null;
    }
  }
  handleOption(option) {
    var _a;
    this.focusInput();
    this.value = option;
    (_a = this.hostedDropdown) === null || _a === void 0 ? void 0 : _a.updateOpen(false);
  }
  focusInput(preventScroll = false) {
    if (this.nativeFocusableElement) {
      this.nativeFocusableElement.focus({
        preventScroll
      });
    }
  }
};
TuiSelectComponent.ɵfac = function TuiSelectComponent_Factory(t) {
  return new (t || TuiSelectComponent)(ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(TUI_TEXTFIELD_CLEANER), ɵɵdirectiveInject(TUI_TEXTFIELD_SIZE), ɵɵdirectiveInject(TUI_ARROW_MODE), ɵɵdirectiveInject(TUI_ITEMS_HANDLERS), ɵɵdirectiveInject(TUI_SELECT_OPTIONS), ɵɵdirectiveInject(TUI_IS_MOBILE));
};
TuiSelectComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiSelectComponent,
  selectors: [["tui-select"]],
  contentQueries: function TuiSelectComponent_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, AbstractTuiNativeSelect, 7);
      ɵɵcontentQuery(dirIndex, TuiDataListDirective, 5, TemplateRef);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.nativeSelect = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.datalist = _t.first);
    }
  },
  viewQuery: function TuiSelectComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(TuiPrimitiveTextfieldComponent, 5);
      ɵɵviewQuery(TuiHostedDropdownComponent, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.textfield = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.hostedDropdown = _t.first);
    }
  },
  hostVars: 1,
  hostBindings: function TuiSelectComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("data-size", ctx.size);
    }
  },
  inputs: {
    stringify: "stringify",
    identityMatcher: "identityMatcher",
    valueContent: "valueContent"
  },
  features: [ɵɵProvidersFeature([tuiAsFocusableItemAccessor(TuiSelectComponent), tuiAsControl(TuiSelectComponent), tuiAsDataListHost(TuiSelectComponent), tuiAsOptionContent(TUI_SELECT_OPTION)], [FIXED_DROPDOWN_CONTROLLER_PROVIDER]), ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c53,
  decls: 10,
  vars: 15,
  consts: [[1, "t-hosted", 3, "canOpen", "content", "tuiActiveZoneChange"], ["automation-id", "tui-select__textfield", 1, "t-textfield", 3, "disabled", "editable", "focusable", "invalid", "nativeId", "pseudoActive", "pseudoFocus", "pseudoHover", "readOnly", "tuiTextfieldIcon", "value", "keydown.backspace.prevent", "keydown.delete.prevent", "valueChange"], ["select", ""], ["ngProjectAs", "select", 5, ["select"], 4, "ngTemplateOutlet"], ["automation-id", "tui-select__value", "ngProjectAs", "tuiContent", "class", "t-value", 5, ["tuiContent"], 4, "ngIf"], ["icon", ""], [4, "ngIf"], ["ngProjectAs", "select", 5, ["select"]], ["automation-id", "tui-select__value", "ngProjectAs", "tuiContent", 5, ["tuiContent"], 1, "t-value"], ["class", "t-primitive-value", 3, "textContent", 4, "polymorpheusOutlet", "polymorpheusOutletContext"], [1, "t-primitive-value", 3, "textContent"], ["appearance", "icon", "tuiWrapper", "", 1, "t-icon"], [4, "polymorpheusOutlet"]],
  template: function TuiSelectComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c46);
      ɵɵelementStart(0, "tui-hosted-dropdown", 0);
      ɵɵlistener("tuiActiveZoneChange", function TuiSelectComponent_Template_tui_hosted_dropdown_tuiActiveZoneChange_0_listener($event) {
        return ctx.onActiveZone($event);
      });
      ɵɵelementStart(1, "tui-primitive-textfield", 1);
      ɵɵlistener("keydown.backspace.prevent", function TuiSelectComponent_Template_tui_primitive_textfield_keydown_backspace_prevent_1_listener() {
        return ctx.onKeyDownDelete();
      })("keydown.delete.prevent", function TuiSelectComponent_Template_tui_primitive_textfield_keydown_delete_prevent_1_listener() {
        return ctx.onKeyDownDelete();
      })("valueChange", function TuiSelectComponent_Template_tui_primitive_textfield_valueChange_1_listener($event) {
        return ctx.onValueChange($event);
      });
      ɵɵprojection(2);
      ɵɵprojection(3, 1, ["ngProjectAs", "input", 5, ["input"]]);
      ɵɵtemplate(4, TuiSelectComponent_ng_template_4_Template, 1, 1, "ng-template", null, 2, ɵɵtemplateRefExtractor);
      ɵɵtemplate(6, TuiSelectComponent_ng_container_6_Template, 1, 0, "ng-container", 3);
      ɵɵtemplate(7, TuiSelectComponent_div_7_Template, 2, 5, "div", 4);
      ɵɵelementEnd();
      ɵɵtemplate(8, TuiSelectComponent_ng_template_8_Template, 2, 1, "ng-template", null, 5, ɵɵtemplateRefExtractor);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      const _r0 = ɵɵreference(5);
      const _r4 = ɵɵreference(9);
      ɵɵproperty("canOpen", ctx.interactive && !ctx.nativeDropdownMode)("content", ctx.datalist || "");
      ɵɵadvance(1);
      ɵɵproperty("disabled", ctx.computedDisabled)("editable", false)("focusable", ctx.computedFocusable)("invalid", ctx.computedInvalid)("nativeId", ctx.nativeId)("pseudoActive", ctx.pseudoActive)("pseudoFocus", ctx.computedFocused)("pseudoHover", ctx.pseudoHover)("readOnly", ctx.readOnly)("tuiTextfieldIcon", ctx.arrow ? _r4 : "")("value", ctx.computedValue);
      ɵɵadvance(5);
      ɵɵproperty("ngTemplateOutlet", _r0);
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.value !== null);
    }
  },
  dependencies: [TuiHostedDropdownComponent, TuiPrimitiveTextfieldComponent, TuiActiveZoneDirective, TuiPrimitiveTextfieldDirective, TuiTextfieldIconDirective, NgIf, NgTemplateOutlet, PolymorpheusOutletDirective, TuiWrapperDirective],
  styles: ["[_nghost-%COMP%]{display:block;border-radius:var(--tui-radius-m);text-align:left}[_nghost-%COMP%]:not(._readonly)     input:not(:disabled){cursor:pointer}._readonly[_nghost-%COMP%]     input{cursor:default}.t-hosted[_ngcontent-%COMP%]{display:block;border-radius:inherit}.t-textfield[_ngcontent-%COMP%]{border-radius:inherit;text-align:inherit}.t-value[_ngcontent-%COMP%]{display:flex;width:100%;align-items:center}.t-primitive-value[_ngcontent-%COMP%]{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}"],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiSelectComponent, [{
    type: Component,
    args: [{
      selector: "tui-select",
      templateUrl: "./select.template.html",
      styleUrls: ["./select.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [tuiAsFocusableItemAccessor(TuiSelectComponent), tuiAsControl(TuiSelectComponent), tuiAsDataListHost(TuiSelectComponent), tuiAsOptionContent(TUI_SELECT_OPTION)],
      viewProviders: [FIXED_DROPDOWN_CONTROLLER_PROVIDER]
    }]
  }], function() {
    return [{
      type: NgControl,
      decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NgControl]
      }]
    }, {
      type: ChangeDetectorRef,
      decorators: [{
        type: Inject,
        args: [ChangeDetectorRef]
      }]
    }, {
      type: TuiTextfieldCleanerDirective,
      decorators: [{
        type: Inject,
        args: [TUI_TEXTFIELD_CLEANER]
      }]
    }, {
      type: TuiTextfieldSizeDirective,
      decorators: [{
        type: Inject,
        args: [TUI_TEXTFIELD_SIZE]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_ARROW_MODE]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_ITEMS_HANDLERS]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_SELECT_OPTIONS]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_IS_MOBILE]
      }]
    }];
  }, {
    textfield: [{
      type: ViewChild,
      args: [TuiPrimitiveTextfieldComponent]
    }],
    hostedDropdown: [{
      type: ViewChild,
      args: [TuiHostedDropdownComponent]
    }],
    nativeSelect: [{
      type: ContentChild,
      args: [AbstractTuiNativeSelect, {
        static: true
      }]
    }],
    stringify: [{
      type: Input
    }],
    identityMatcher: [{
      type: Input
    }],
    valueContent: [{
      type: Input
    }],
    datalist: [{
      type: ContentChild,
      args: [TuiDataListDirective, {
        read: TemplateRef
      }]
    }],
    size: [{
      type: HostBinding,
      args: ["attr.data-size"]
    }]
  });
})();
var TuiSelectDirective = class extends AbstractTuiTextfieldHost {
  get readOnly() {
    return true;
  }
  get value() {
    return this.host.computedValue;
  }
  get stringify() {
    return this.host.stringify;
  }
  onValueChange(value) {
    this.host.onValueChange(value);
  }
};
TuiSelectDirective.ɵfac = function() {
  let ɵTuiSelectDirective_BaseFactory;
  return function TuiSelectDirective_Factory(t) {
    return (ɵTuiSelectDirective_BaseFactory || (ɵTuiSelectDirective_BaseFactory = ɵɵgetInheritedFactory(TuiSelectDirective)))(t || TuiSelectDirective);
  };
}();
TuiSelectDirective.ɵdir = ɵɵdefineDirective({
  type: TuiSelectDirective,
  selectors: [["tui-select"]],
  features: [ɵɵProvidersFeature([tuiAsTextfieldHost(TuiSelectDirective)]), ɵɵInheritDefinitionFeature]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiSelectDirective, [{
    type: Directive,
    args: [{
      selector: "tui-select",
      providers: [tuiAsTextfieldHost(TuiSelectDirective)]
    }]
  }], null, null);
})();
var TuiSelectModule = class {
};
TuiSelectModule.ɵfac = function TuiSelectModule_Factory(t) {
  return new (t || TuiSelectModule)();
};
TuiSelectModule.ɵmod = ɵɵdefineNgModule({
  type: TuiSelectModule,
  declarations: [TuiSelectComponent, TuiSelectDirective, TuiNativeSelectComponent, TuiNativeSelectGroupComponent],
  imports: [CommonModule, PolymorpheusModule, TuiActiveZoneModule, TuiPrimitiveTextfieldModule, TuiHostedDropdownModule, TuiSelectOptionModule, TuiArrowModule, TuiWrapperModule, TuiTextfieldControllerModule, TuiDataListWrapperModule, TuiDataListModule, TuiStringifyContentPipeModule],
  exports: [TuiSelectComponent, TuiSelectDirective, TuiTextfieldComponent, TuiNativeSelectComponent, TuiNativeSelectGroupComponent]
});
TuiSelectModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, PolymorpheusModule, TuiActiveZoneModule, TuiPrimitiveTextfieldModule, TuiHostedDropdownModule, TuiSelectOptionModule, TuiArrowModule, TuiWrapperModule, TuiTextfieldControllerModule, TuiDataListWrapperModule, TuiDataListModule, TuiStringifyContentPipeModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiSelectModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, PolymorpheusModule, TuiActiveZoneModule, TuiPrimitiveTextfieldModule, TuiHostedDropdownModule, TuiSelectOptionModule, TuiArrowModule, TuiWrapperModule, TuiTextfieldControllerModule, TuiDataListWrapperModule, TuiDataListModule, TuiStringifyContentPipeModule],
      declarations: [TuiSelectComponent, TuiSelectDirective, TuiNativeSelectComponent, TuiNativeSelectGroupComponent],
      exports: [TuiSelectComponent, TuiSelectDirective, TuiTextfieldComponent, TuiNativeSelectComponent, TuiNativeSelectGroupComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-stepper.js
function TuiStepperComponent_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
var _c049 = ["*"];
var _c134 = ["tuiStep", ""];
function TuiStepComponent_tui_svg_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "tui-svg", 4);
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵproperty("src", ctx_r0.icon);
  }
}
var TuiStepperComponent = class {
  constructor(cdr, el, scrollService, resize$, duration, destroy$) {
    this.cdr = cdr;
    this.el = el;
    this.scrollService = scrollService;
    this.duration = duration;
    this.destroy$ = destroy$;
    this.steps = EMPTY_QUERY;
    this.orientation = "horizontal";
    this.activeItemIndexChange = new EventEmitter();
    this.activeItemIndex = 0;
    resize$.subscribe(() => this.scrollIntoView(this.activeItemIndex));
  }
  set activeIndex(index) {
    this.activeItemIndex = index;
    this.scrollIntoView(index);
  }
  get changes$() {
    return tuiQueryListChanges(this.steps).pipe(delay(0));
  }
  onHorizontal(event, step) {
    if (this.orientation !== "horizontal" || !event.target) {
      return;
    }
    event.preventDefault();
    this.moveFocus(event.target, step);
  }
  onVertical(event, step) {
    if (this.orientation !== "vertical" || !event.target) {
      return;
    }
    event.preventDefault();
    this.moveFocus(event.target, step);
  }
  indexOf(step) {
    return tuiGetOriginalArrayFromQueryList(this.steps).findIndex(({
      nativeElement
    }) => nativeElement === step);
  }
  isActive(index) {
    return index === this.activeItemIndex;
  }
  activate(index) {
    if (this.activeItemIndex === index) {
      return;
    }
    this.activeItemIndex = index;
    this.activeItemIndexChange.emit(index);
    this.cdr.markForCheck();
    this.scrollIntoView(index);
  }
  moveFocus(current, step) {
    if (!tuiIsElement(current)) {
      return;
    }
    const stepElements = this.steps.toArray().map(({
      nativeElement
    }) => nativeElement);
    const index = stepElements.findIndex((element) => element === current);
    tuiMoveFocus(index, stepElements, step);
  }
  scrollIntoView(index) {
    var _a;
    const step = (_a = this.steps.get(index)) === null || _a === void 0 ? void 0 : _a.nativeElement;
    if (!step) {
      return;
    }
    const {
      nativeElement
    } = this.el;
    const {
      clientHeight,
      clientWidth,
      offsetTop,
      offsetLeft
    } = nativeElement;
    const {
      offsetHeight,
      offsetWidth,
      offsetTop: stepOffsetTop,
      offsetLeft: stepOffsetLeft
    } = step;
    const top = stepOffsetTop - offsetTop - clientHeight / 2 + offsetHeight / 2;
    const left = stepOffsetLeft - offsetLeft - clientWidth / 2 + offsetWidth / 2;
    this.scrollService.scroll$(nativeElement, Math.max(0, top), Math.max(0, left), this.duration / 3).pipe(takeUntil(this.destroy$)).subscribe();
  }
};
TuiStepperComponent.ɵfac = function TuiStepperComponent_Factory(t) {
  return new (t || TuiStepperComponent)(ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(TuiScrollService), ɵɵdirectiveInject(TuiResizeService), ɵɵdirectiveInject(TUI_ANIMATIONS_DURATION), ɵɵdirectiveInject(TuiDestroyService, 2));
};
TuiStepperComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiStepperComponent,
  selectors: [["tui-stepper"], ["nav", "tuiStepper", ""]],
  contentQueries: function TuiStepperComponent_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, TuiStepComponent, 4, ElementRef);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.steps = _t);
    }
  },
  hostVars: 1,
  hostBindings: function TuiStepperComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("keydown.arrowRight", function TuiStepperComponent_keydown_arrowRight_HostBindingHandler($event) {
        return ctx.onHorizontal($event, 1);
      })("keydown.arrowLeft", function TuiStepperComponent_keydown_arrowLeft_HostBindingHandler($event) {
        return ctx.onHorizontal($event, -1);
      })("keydown.arrowDown", function TuiStepperComponent_keydown_arrowDown_HostBindingHandler($event) {
        return ctx.onVertical($event, 1);
      })("keydown.arrowUp", function TuiStepperComponent_keydown_arrowUp_HostBindingHandler($event) {
        return ctx.onVertical($event, -1);
      });
    }
    if (rf & 2) {
      ɵɵattribute("data-orientation", ctx.orientation);
    }
  },
  inputs: {
    orientation: "orientation",
    activeIndex: ["activeItemIndex", "activeIndex"]
  },
  outputs: {
    activeItemIndexChange: "activeItemIndexChange"
  },
  features: [ɵɵProvidersFeature([TuiResizeService, TuiDestroyService])],
  ngContentSelectors: _c049,
  decls: 3,
  vars: 3,
  consts: [[4, "ngIf"]],
  template: function TuiStepperComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵtemplate(0, TuiStepperComponent_ng_container_0_Template, 1, 0, "ng-container", 0);
      ɵɵpipe(1, "async");
      ɵɵprojection(2);
    }
    if (rf & 2) {
      ɵɵproperty("ngIf", ɵɵpipeBind1(1, 1, ctx.changes$));
    }
  },
  dependencies: [NgIf, AsyncPipe],
  styles: ["[_nghost-%COMP%]{scrollbar-width:none;-ms-overflow-style:none;scroll-behavior:smooth;display:flex;overflow:auto;counter-reset:steps}[_nghost-%COMP%]::-webkit-scrollbar, [_nghost-%COMP%]::-webkit-scrollbar-thumb{display:none}tui-root._reduced-motion   [_nghost-%COMP%]{scroll-behavior:auto}[data-orientation=vertical][_nghost-%COMP%]{flex-direction:column}"],
  changeDetection: 0
});
__decorate([tuiPure], TuiStepperComponent.prototype, "changes$", null);
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiStepperComponent, [{
    type: Component,
    args: [{
      selector: "tui-stepper, nav[tuiStepper]",
      templateUrl: "./stepper.template.html",
      styleUrls: ["./stepper.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [TuiResizeService, TuiDestroyService]
    }]
  }], function() {
    return [{
      type: ChangeDetectorRef,
      decorators: [{
        type: Inject,
        args: [ChangeDetectorRef]
      }]
    }, {
      type: ElementRef,
      decorators: [{
        type: Inject,
        args: [ElementRef]
      }]
    }, {
      type: TuiScrollService,
      decorators: [{
        type: Inject,
        args: [TuiScrollService]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Inject,
        args: [TuiResizeService]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_ANIMATIONS_DURATION]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Self
      }, {
        type: Inject,
        args: [TuiDestroyService]
      }]
    }];
  }, {
    steps: [{
      type: ContentChildren,
      args: [forwardRef(() => TuiStepComponent), {
        read: ElementRef
      }]
    }],
    orientation: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["attr.data-orientation"]
    }],
    activeIndex: [{
      type: Input,
      args: ["activeItemIndex"]
    }],
    activeItemIndexChange: [{
      type: Output
    }],
    changes$: [],
    onHorizontal: [{
      type: HostListener,
      args: ["keydown.arrowRight", ["$event", "1"]]
    }, {
      type: HostListener,
      args: ["keydown.arrowLeft", ["$event", "-1"]]
    }],
    onVertical: [{
      type: HostListener,
      args: ["keydown.arrowDown", ["$event", "1"]]
    }, {
      type: HostListener,
      args: ["keydown.arrowUp", ["$event", "-1"]]
    }]
  });
})();
var TuiStepComponent = class {
  constructor(focusVisible$, routerLinkActive$, stepper, el, icons) {
    this.stepper = stepper;
    this.el = el;
    this.icons = icons;
    this.stepState = "normal";
    this.icon = "";
    this.focusVisible = false;
    routerLinkActive$.pipe(filter(identity)).subscribe(() => {
      this.activate();
    });
    focusVisible$.subscribe((visible) => {
      this.focusVisible = visible;
    });
  }
  get isActive() {
    return this.stepper.isActive(this.index);
  }
  get isVertical() {
    return this.stepper.orientation === "vertical";
  }
  get tabIndex() {
    return this.isActive ? 0 : -1;
  }
  get index() {
    return this.stepper.indexOf(this.el.nativeElement);
  }
  activate() {
    this.stepper.activate(this.index);
  }
};
TuiStepComponent.ɵfac = function TuiStepComponent_Factory(t) {
  return new (t || TuiStepComponent)(ɵɵdirectiveInject(TuiFocusVisibleService), ɵɵdirectiveInject(TuiRouterLinkActiveService), ɵɵdirectiveInject(TuiStepperComponent), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(TUI_COMMON_ICONS));
};
TuiStepComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiStepComponent,
  selectors: [["button", "tuiStep", ""], ["a", "tuiStep", "", 3, "routerLink", ""], ["a", "tuiStep", "", "routerLink", "", "routerLinkActive", ""]],
  hostAttrs: ["type", "button"],
  hostVars: 8,
  hostBindings: function TuiStepComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("click", function TuiStepComponent_click_HostBindingHandler() {
        return ctx.activate();
      });
    }
    if (rf & 2) {
      ɵɵhostProperty("tabIndex", ctx.tabIndex);
      ɵɵattribute("data-state", ctx.stepState);
      ɵɵclassProp("_focus-visible", ctx.focusVisible)("_active", ctx.isActive)("_vertical", ctx.isVertical);
    }
  },
  inputs: {
    stepState: "stepState",
    icon: "icon"
  },
  features: [ɵɵProvidersFeature([TuiDestroyService, TuiRouterLinkActiveService, TuiFocusVisibleService])],
  attrs: _c134,
  ngContentSelectors: _c049,
  decls: 5,
  vars: 3,
  consts: [["class", "t-marker t-marker_custom", 3, "src", 4, "ngIf"], [1, "t-marker", "t-marker_error", 3, "src"], [1, "t-marker", "t-marker_pass", 3, "src"], [1, "t-marker", "t-marker_index"], [1, "t-marker", "t-marker_custom", 3, "src"]],
  template: function TuiStepComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵtemplate(0, TuiStepComponent_tui_svg_0_Template, 1, 1, "tui-svg", 0);
      ɵɵelement(1, "tui-svg", 1)(2, "tui-svg", 2)(3, "div", 3);
      ɵɵprojection(4);
    }
    if (rf & 2) {
      ɵɵproperty("ngIf", ctx.icon);
      ɵɵadvance(1);
      ɵɵproperty("src", ctx.icons.error);
      ɵɵadvance(1);
      ɵɵproperty("src", ctx.icons.check);
    }
  },
  dependencies: [TuiSvgComponent, NgIf],
  styles: ['[_nghost-%COMP%]{-webkit-appearance:none;-moz-appearance:none;appearance:none;padding:0;border:0;background:none;font-size:inherit;line-height:inherit;text-decoration:none;position:relative;display:flex;align-items:center;flex-shrink:0;color:var(--tui-link);margin-right:1.5rem;outline:none;cursor:pointer;counter-increment:steps}[_nghost-%COMP%]:disabled{pointer-events:none;color:var(--tui-base-07)}[_nghost-%COMP%]:hover{color:var(--tui-link-hover)}[_nghost-%COMP%]:not(:last-of-type)._vertical{margin-bottom:1.25rem}._active[_nghost-%COMP%], ._active[_nghost-%COMP%]:hover{color:var(--tui-text-01);cursor:default}._focus-visible[_nghost-%COMP%]:before{content:"";position:absolute;left:2.75rem;right:0;top:50%;height:1.5rem;margin-top:-.75rem;background:var(--tui-selection)}.t-marker[_ngcontent-%COMP%]{transition-property:background;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;display:flex;width:2rem;height:2rem;border-radius:100%;margin-right:.75rem;flex-shrink:0;align-items:center;justify-content:center;background:var(--tui-secondary);color:var(--tui-link)}[_nghost-%COMP%]:disabled   .t-marker[_ngcontent-%COMP%]{background:var(--tui-base-03);color:var(--tui-base-07)}.t-marker_index[_ngcontent-%COMP%]:before{content:counter(steps)}[_nghost-%COMP%]:hover   .t-marker_index[_ngcontent-%COMP%]{color:var(--tui-link-hover);background:var(--tui-secondary-hover)}._active[_nghost-%COMP%]   .t-marker_index[_ngcontent-%COMP%]{color:var(--tui-primary-text);background:var(--tui-primary)}[_nghost-%COMP%]:not([data-state="normal"]):not(._active)   .t-marker_index[_ngcontent-%COMP%], [_nghost-%COMP%]:not(._active)   .t-marker_custom[_ngcontent-%COMP%] ~ .t-marker_index[_ngcontent-%COMP%]{display:none}.t-marker_error[_ngcontent-%COMP%]{background:var(--tui-error-bg);color:var(--tui-error-fill)}[_nghost-%COMP%]:hover   .t-marker_error[_ngcontent-%COMP%]{background:var(--tui-error-bg-hover);color:var(--tui-error-fill)}[_nghost-%COMP%]:not([data-state="error"])   .t-marker_error[_ngcontent-%COMP%], ._active[_nghost-%COMP%]   .t-marker_error[_ngcontent-%COMP%]{display:none}[_nghost-%COMP%]:not([data-state="pass"])   .t-marker_pass[_ngcontent-%COMP%], ._active[_nghost-%COMP%]   .t-marker_pass[_ngcontent-%COMP%]{display:none}[_nghost-%COMP%]:not([data-state="normal"])   .t-marker_custom[_ngcontent-%COMP%], ._active[_nghost-%COMP%]   .t-marker_custom[_ngcontent-%COMP%]{display:none}[_nghost-%COMP%]:hover   .t-marker_custom[_ngcontent-%COMP%]{color:var(--tui-link-hover);background:var(--tui-secondary-hover)}'],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiStepComponent, [{
    type: Component,
    args: [{
      selector: "button[tuiStep], a[tuiStep]:not([routerLink]), a[tuiStep][routerLink][routerLinkActive]",
      templateUrl: "./step.template.html",
      styleUrls: ["./step.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [TuiDestroyService, TuiRouterLinkActiveService, TuiFocusVisibleService],
      host: {
        type: "button"
      }
    }]
  }], function() {
    return [{
      type: TuiFocusVisibleService,
      decorators: [{
        type: Inject,
        args: [TuiFocusVisibleService]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Inject,
        args: [TuiRouterLinkActiveService]
      }]
    }, {
      type: TuiStepperComponent,
      decorators: [{
        type: Inject,
        args: [TuiStepperComponent]
      }]
    }, {
      type: ElementRef,
      decorators: [{
        type: Inject,
        args: [ElementRef]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_COMMON_ICONS]
      }]
    }];
  }, {
    stepState: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["attr.data-state"]
    }],
    icon: [{
      type: Input
    }],
    focusVisible: [{
      type: HostBinding,
      args: ["class._focus-visible"]
    }],
    isActive: [{
      type: HostBinding,
      args: ["class._active"]
    }],
    isVertical: [{
      type: HostBinding,
      args: ["class._vertical"]
    }],
    tabIndex: [{
      type: HostBinding,
      args: ["tabIndex"]
    }],
    activate: [{
      type: HostListener,
      args: ["click"]
    }]
  });
})();
var TuiStepperModule = class {
};
TuiStepperModule.ɵfac = function TuiStepperModule_Factory(t) {
  return new (t || TuiStepperModule)();
};
TuiStepperModule.ɵmod = ɵɵdefineNgModule({
  type: TuiStepperModule,
  declarations: [TuiStepperComponent, TuiStepComponent],
  imports: [CommonModule, TuiSvgModule],
  exports: [TuiStepperComponent, TuiStepComponent]
});
TuiStepperModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, TuiSvgModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiStepperModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, TuiSvgModule],
      declarations: [TuiStepperComponent, TuiStepComponent],
      exports: [TuiStepperComponent, TuiStepComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-tabs.js
var _c050 = ["tuiTab", ""];
function TuiTabComponent_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
var _c135 = ["*"];
function TuiTabsComponent_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function TuiTabsComponent_tui_underline_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "tui-underline", 2);
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵproperty("element", ctx_r1.activeElement);
  }
}
var _c218 = ["vertical", ""];
function TuiTabsWithMoreComponent_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function TuiTabsWithMoreComponent_ng_container_4_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0, 12);
  }
  if (rf & 2) {
    const item_r8 = ɵɵnextContext().$implicit;
    ɵɵproperty("ngTemplateOutlet", item_r8);
  }
}
function TuiTabsWithMoreComponent_ng_container_4_ng_template_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div");
    ɵɵelementContainer(1, 12);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r14 = ɵɵnextContext();
    const index_r9 = ctx_r14.index;
    const item_r8 = ctx_r14.$implicit;
    const ctx_r12 = ɵɵnextContext();
    ɵɵclassProp("t-overflown", ctx_r12.isOverflown(index_r9));
    ɵɵadvance(1);
    ɵɵproperty("ngTemplateOutlet", item_r8);
  }
}
function TuiTabsWithMoreComponent_ng_container_4_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, TuiTabsWithMoreComponent_ng_container_4_ng_container_1_Template, 1, 1, "ng-container", 10);
    ɵɵtemplate(2, TuiTabsWithMoreComponent_ng_container_4_ng_template_2_Template, 2, 3, "ng-template", null, 11, ɵɵtemplateRefExtractor);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const index_r9 = ctx.index;
    const _r11 = ɵɵreference(3);
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("ngIf", index_r9 <= ctx_r1.lastVisibleIndex)("ngIfElse", _r11);
  }
}
function TuiTabsWithMoreComponent_ng_container_7_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtext(1);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const text_r15 = ctx.polymorpheusOutlet;
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", text_r15, " ");
  }
}
function TuiTabsWithMoreComponent_ng_template_8_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵtext(0);
    ɵɵpipe(1, "async");
    ɵɵelement(2, "tui-svg", 13);
  }
  if (rf & 2) {
    const ctx_r4 = ɵɵnextContext();
    ɵɵtextInterpolate1(" ", ɵɵpipeBind1(1, 4, ctx_r4.moreWord$), " ");
    ɵɵadvance(2);
    ɵɵclassProp("t-icon_rotated", ctx_r4.open);
    ɵɵproperty("src", ctx_r4.arrowOptions.iconSmall);
  }
}
function TuiTabsWithMoreComponent_ng_template_10_div_2_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0, 12);
  }
  if (rf & 2) {
    const item_r18 = ɵɵnextContext().$implicit;
    ɵɵproperty("ngTemplateOutlet", item_r18);
  }
}
function TuiTabsWithMoreComponent_ng_template_10_div_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r23 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 17);
    ɵɵlistener("tui-tab-activate", function TuiTabsWithMoreComponent_ng_template_10_div_2_Template_div_tui_tab_activate_0_listener() {
      const restoredCtx = ɵɵrestoreView(_r23);
      const index_r19 = restoredCtx.index;
      const ctx_r22 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r22.onClick(index_r19));
    });
    ɵɵtemplate(1, TuiTabsWithMoreComponent_ng_template_10_div_2_ng_container_1_Template, 1, 1, "ng-container", 18);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const index_r19 = ctx.index;
    const ctx_r17 = ɵɵnextContext(2);
    ɵɵadvance(1);
    ɵɵproperty("ngIf", ctx_r17.shouldShow(index_r19));
  }
}
function TuiTabsWithMoreComponent_ng_template_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r25 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "div", 14, 15);
    ɵɵlistener("keydown.arrowDown.prevent", function TuiTabsWithMoreComponent_ng_template_10_Template_div_keydown_arrowDown_prevent_0_listener($event) {
      ɵɵrestoreView(_r25);
      const _r16 = ɵɵreference(1);
      const ctx_r24 = ɵɵnextContext();
      return ɵɵresetView(ctx_r24.onWrapperArrow($event, _r16, false));
    })("keydown.arrowUp.prevent", function TuiTabsWithMoreComponent_ng_template_10_Template_div_keydown_arrowUp_prevent_0_listener($event) {
      ɵɵrestoreView(_r25);
      const _r16 = ɵɵreference(1);
      const ctx_r26 = ɵɵnextContext();
      return ɵɵresetView(ctx_r26.onWrapperArrow($event, _r16, true));
    });
    ɵɵtemplate(2, TuiTabsWithMoreComponent_ng_template_10_div_2_Template, 2, 1, "div", 16);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r6 = ɵɵnextContext();
    ɵɵadvance(2);
    ɵɵproperty("ngForOf", ctx_r6.items);
  }
}
function TuiTabsWithMoreComponent_tui_underline_12_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "tui-underline", 19);
  }
  if (rf & 2) {
    const ctx_r7 = ɵɵnextContext();
    ɵɵproperty("element", ctx_r7.activeElement);
  }
}
var TUI_TAB_EVENT = new InjectionToken("[TUI_TAB_EVENT]");
var TUI_TAB_ACTIVATE = "tui-tab-activate";
var TUI_TAB_PROVIDERS = [TuiDestroyService, TuiFocusVisibleService, TuiRouterLinkActiveService, {
  provide: TUI_TAB_EVENT,
  deps: [ElementRef, TuiRouterLinkActiveService, [new Optional(), MutationObserverService], [new Optional(), RouterLinkActive]],
  useFactory: ({
    nativeElement
  }, routerLinkActiveService, mutationObserverService, routerLinkActive) => {
    const mutationObserver = routerLinkActive && mutationObserverService ? mutationObserverService.pipe(filter(() => routerLinkActive.isActive)) : EMPTY;
    return merge(mutationObserver, routerLinkActiveService.pipe(filter(identity)), nativeElement.matches("button") ? tuiTypedFromEvent(nativeElement, "click") : EMPTY).pipe(map(() => nativeElement.dispatchEvent(new CustomEvent(TUI_TAB_ACTIVATE, {
      bubbles: true
    }))));
  }
}, MODE_PROVIDER];
var TuiTabComponent = class {
  constructor(routerLinkActive, el, mode$, event$, margin) {
    this.routerLinkActive = routerLinkActive;
    this.el = el;
    this.mode$ = mode$;
    this.event$ = event$;
    this.margin = margin;
  }
  get isActive() {
    return !!this.routerLinkActive && this.routerLinkActive.isActive;
  }
  ngOnDestroy() {
    if (tuiIsNativeFocused(this.el.nativeElement)) {
      this.el.nativeElement.blur();
    }
  }
};
TuiTabComponent.ɵfac = function TuiTabComponent_Factory(t) {
  return new (t || TuiTabComponent)(ɵɵdirectiveInject(RouterLinkActive, 8), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(TUI_MODE), ɵɵdirectiveInject(TUI_TAB_EVENT), ɵɵdirectiveInject(TUI_TAB_MARGIN));
};
TuiTabComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiTabComponent,
  selectors: [["a", "tuiTab", "", 3, "routerLink", ""], ["a", "tuiTab", "", "routerLink", "", "routerLinkActive", ""], ["button", "tuiTab", ""]],
  hostAttrs: ["type", "button"],
  hostVars: 6,
  hostBindings: function TuiTabComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("$.data-mode.attr", function TuiTabComponent___data_mode_attr_HostBindingHandler() {
        return ctx.mode$;
      });
    }
    if (rf & 2) {
      ɵɵstyleProp("cursor", "pointer")("--tui-tab-margin", ctx.margin, "px");
      ɵɵclassProp("_active", ctx.isActive);
    }
  },
  features: [ɵɵProvidersFeature(TUI_TAB_PROVIDERS)],
  attrs: _c050,
  ngContentSelectors: _c135,
  decls: 4,
  vars: 3,
  consts: [[4, "ngIf"], [1, "t-highlight"]],
  template: function TuiTabComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵtemplate(0, TuiTabComponent_ng_container_0_Template, 1, 0, "ng-container", 0);
      ɵɵpipe(1, "async");
      ɵɵelementStart(2, "span", 1);
      ɵɵprojection(3);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      ɵɵproperty("ngIf", ɵɵpipeBind1(1, 1, ctx.event$));
    }
  },
  dependencies: [NgIf, AsyncPipe],
  styles: ['._underline[_nghost-%COMP%]:hover:not(._active), ._underline   [_nghost-%COMP%]:hover:not(._active){box-shadow:inset 0 -2px var(--tui-base-03)}tui-tabs    > [_nghost-%COMP%]:first-child, tui-tabs    > [_nghost-%COMP%]:first-child, [tuiTabs]    > [_nghost-%COMP%]:first-child, [tuiTabs]    > [_nghost-%COMP%]:first-child, tui-tabs    > :not(.t-overflown)[_nghost-%COMP%]:first-child, tui-tabs    > :not(.t-overflown)   [_nghost-%COMP%]:first-child, [tuiTabs]    > :not(.t-overflown)[_nghost-%COMP%]:first-child, [tuiTabs]    > :not(.t-overflown)   [_nghost-%COMP%]:first-child{margin-left:0}[tuiTabs]    > [tuiTab]    ~ :not(.t-overflown)[_nghost-%COMP%]:first-child, [tuiTabs]    > [tuiTab]    ~ :not(.t-overflown)   [_nghost-%COMP%]:first-child, tui-tabs    > [tuiTab]    ~ :not(.t-overflown)[_nghost-%COMP%]:first-child, tui-tabs    > [tuiTab]    ~ :not(.t-overflown)   [_nghost-%COMP%]:first-child{margin-left:var(--tui-tab-margin, 1.5rem)}[_nghost-%COMP%]{transition-property:color,box-shadow,opacity,background;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;-webkit-appearance:none;-moz-appearance:none;appearance:none;padding:0;border:0;background:none;font-size:inherit;line-height:inherit;text-decoration:none;position:relative;display:flex;flex-shrink:0;height:100%;box-sizing:border-box;justify-content:space-between;line-height:1.5rem;align-items:center;white-space:nowrap;cursor:pointer;outline:none;color:inherit;margin-left:var(--tui-tab-margin, 1.5rem)}[_nghost-%COMP%]:disabled{opacity:var(--tui-disabled-opacity);pointer-events:none}[_nghost-%COMP%]:not([data-mode])._active{opacity:1;color:var(--tui-text-01);box-shadow:none}[data-mode=onDark][_nghost-%COMP%]{color:#ffffffb8}[data-mode=onDark][_nghost-%COMP%]:hover, [data-mode=onDark]._active[_nghost-%COMP%]{color:#fff}[data-mode=onDark][_nghost-%COMP%]:focus-visible   .t-highlight[_ngcontent-%COMP%]{background:var(--tui-clear-inverse);color:var(--tui-text-01)}[data-mode=onLight][_nghost-%COMP%]{color:var(--tui-text-02)}[data-mode=onLight][_nghost-%COMP%]:hover, [data-mode=onLight]._active[_nghost-%COMP%]{color:var(--tui-text-01)}[data-mode=onLight][_nghost-%COMP%]:focus-visible   .t-highlight[_ngcontent-%COMP%]{background:var(--tui-text-01);color:#fff}[_nghost-%COMP%]:focus-visible   .t-highlight[_ngcontent-%COMP%]{background:var(--tui-selection)}._android[_nghost-%COMP%]{transition-property:opacity;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;height:3rem;flex:1;flex-shrink:0;justify-content:center;margin:0;text-transform:uppercase;color:var(--tui-base-09);opacity:.5;font-size:.875rem;font-weight:500;letter-spacing:-.008125rem;font-family:-apple-system,BlinkMacSystemFont,Roboto,"Helvetica Neue",sans-serif}._android[_nghost-%COMP%]:hover{box-shadow:none}._android._active[_nghost-%COMP%]{opacity:1;color:var(--tui-base-09)}._android[_nghost-%COMP%]   .t-highlight[_ngcontent-%COMP%]{width:auto}._ios[_nghost-%COMP%]{height:1.75rem;flex:1;flex-shrink:0;justify-content:center;margin:0;color:var(--tui-base-01);opacity:1;font-size:.8125rem;font-weight:500;letter-spacing:-.005rem;font-family:-apple-system,BlinkMacSystemFont,Roboto,"Helvetica Neue",sans-serif}._ios[_nghost-%COMP%]:hover{box-shadow:none}._ios._active[_nghost-%COMP%]{font-size:.875rem;font-weight:600;color:var(--tui-link)}._ios[_nghost-%COMP%]   .t-highlight[_ngcontent-%COMP%]{width:auto}@media (hover: hover){[_nghost-%COMP%]:hover{color:var(--tui-text-01)}}.t-highlight[_ngcontent-%COMP%]{display:inline-flex;width:100%;align-items:center;justify-content:inherit}.t-highlight[_ngcontent-%COMP%]    >*{flex-shrink:0}tui-tabs[data-vertical][_nghost-%COMP%], tui-tabs[data-vertical]   [_nghost-%COMP%], [tuiTabs][data-vertical][_nghost-%COMP%], [tuiTabs][data-vertical]   [_nghost-%COMP%]{min-height:2.75rem;height:auto;white-space:normal;margin:0;text-align:left;padding:.25rem 1.25rem .25rem 0}tui-tabs[data-vertical][_nghost-%COMP%]:after, tui-tabs[data-vertical]   [_nghost-%COMP%]:after, [tuiTabs][data-vertical][_nghost-%COMP%]:after, [tuiTabs][data-vertical]   [_nghost-%COMP%]:after{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;content:"";position:absolute;top:0;bottom:0;right:0;width:2px;background:var(--tui-primary);transform:scaleX(0);transform-origin:right}tui-tabs[data-vertical][_nghost-%COMP%]:hover, tui-tabs[data-vertical]   [_nghost-%COMP%]:hover, [tuiTabs][data-vertical][_nghost-%COMP%]:hover, [tuiTabs][data-vertical]   [_nghost-%COMP%]:hover{box-shadow:inset -2px 0 var(--tui-base-03)}tui-tabs[data-vertical]._active[_nghost-%COMP%]:after, tui-tabs[data-vertical]   ._active[_nghost-%COMP%]:after, [tuiTabs][data-vertical]._active[_nghost-%COMP%]:after, [tuiTabs][data-vertical]   ._active[_nghost-%COMP%]:after{transform:none}tui-tabs[data-vertical="right"][_nghost-%COMP%], tui-tabs[data-vertical="right"]   [_nghost-%COMP%], [tuiTabs][data-vertical="right"][_nghost-%COMP%], [tuiTabs][data-vertical="right"]   [_nghost-%COMP%]{text-align:right;padding:.25rem 0 .25rem 1.25rem}tui-tabs[data-vertical="right"][_nghost-%COMP%]:after, tui-tabs[data-vertical="right"]   [_nghost-%COMP%]:after, [tuiTabs][data-vertical="right"][_nghost-%COMP%]:after, [tuiTabs][data-vertical="right"]   [_nghost-%COMP%]:after{right:auto;left:0;transform-origin:left}tui-tabs[data-vertical="right"][_nghost-%COMP%]:hover, tui-tabs[data-vertical="right"]   [_nghost-%COMP%]:hover, [tuiTabs][data-vertical="right"][_nghost-%COMP%]:hover, [tuiTabs][data-vertical="right"]   [_nghost-%COMP%]:hover{box-shadow:inset 2px 0 var(--tui-base-03)}'],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiTabComponent, [{
    type: Component,
    args: [{
      selector: "a[tuiTab]:not([routerLink]), a[tuiTab][routerLink][routerLinkActive], button[tuiTab]",
      templateUrl: "./tab.template.html",
      styleUrls: ["./tab.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: TUI_TAB_PROVIDERS,
      host: {
        "($.data-mode.attr)": "mode$",
        /**
         * SSR hack - problem with the Domino renderer that Angular uses for its server-side DOM implementation.
         * Domino doesn't support CSS variables and some CSS properties like clip-path.
         * Read more: https://github.com/taiga-family/taiga-ui/issues/3210#issuecomment-1375788017
         * ___
         * TODO: drop this line after Angular team switch over to a new JavaScript DOM API
         * https://github.com/angular/angular/issues/42170
         */
        "[style.cursor]": '"pointer"',
        "[style.--tui-tab-margin.px]": "margin",
        type: "button"
      }
    }]
  }], function() {
    return [{
      type: RouterLinkActive,
      decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [RouterLinkActive]
      }]
    }, {
      type: ElementRef,
      decorators: [{
        type: Inject,
        args: [ElementRef]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Inject,
        args: [TUI_MODE]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Inject,
        args: [TUI_TAB_EVENT]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_TAB_MARGIN]
      }]
    }];
  }, {
    isActive: [{
      type: HostBinding,
      args: ["class._active"]
    }]
  });
})();
var TuiTabsDirective = class {
  constructor(el) {
    this.el = el;
    this.activeItemIndex = 0;
    this.activeItemIndexChange = new EventEmitter();
  }
  get tabs() {
    return Array.from(this.el.nativeElement.querySelectorAll("[tuiTab]"));
  }
  get activeElement() {
    return this.tabs[this.activeItemIndex] || null;
  }
  onActivate(event, element) {
    const index = this.tabs.findIndex((tab) => tab === element);
    event.stopPropagation();
    if (index === this.activeItemIndex) {
      return;
    }
    this.activeItemIndexChange.emit(index);
    this.activeItemIndex = index;
  }
  moveFocus(current, step) {
    const {
      tabs
    } = this;
    tuiMoveFocus(tabs.indexOf(current), tabs, step);
  }
  ngAfterViewChecked() {
    const {
      tabs,
      activeElement
    } = this;
    tabs.forEach((nativeElement) => {
      const active = nativeElement === activeElement;
      nativeElement.classList.toggle("_active", active);
      nativeElement.setAttribute("tabIndex", active ? "0" : "-1");
    });
  }
};
TuiTabsDirective.ɵfac = function TuiTabsDirective_Factory(t) {
  return new (t || TuiTabsDirective)(ɵɵdirectiveInject(ElementRef));
};
TuiTabsDirective.ɵdir = ɵɵdefineDirective({
  type: TuiTabsDirective,
  selectors: [["tui-tabs"], ["nav", "tuiTabs", ""]],
  hostBindings: function TuiTabsDirective_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("tui-tab-activate", function TuiTabsDirective_tui_tab_activate_HostBindingHandler($event) {
        return ctx.onActivate($event, $event.target);
      });
    }
  },
  inputs: {
    activeItemIndex: "activeItemIndex"
  },
  outputs: {
    activeItemIndexChange: "activeItemIndexChange"
  }
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiTabsDirective, [{
    type: Directive,
    args: [{
      selector: "tui-tabs, nav[tuiTabs]"
    }]
  }], function() {
    return [{
      type: ElementRef,
      decorators: [{
        type: Inject,
        args: [ElementRef]
      }]
    }];
  }, {
    activeItemIndex: [{
      type: Input
    }],
    activeItemIndexChange: [{
      type: Output
    }],
    onActivate: [{
      type: HostListener,
      args: [TUI_TAB_ACTIVATE, ["$event", "$event.target"]]
    }]
  });
})();
var TUI_TABS_DEFAULT_OPTIONS = {
  underline: true,
  exposeActive: true,
  itemsLimit: Infinity,
  minMoreWidth: 0
};
var TUI_TABS_OPTIONS = tuiCreateToken(TUI_TABS_DEFAULT_OPTIONS);
function tuiTabsOptionsProvider(options) {
  return tuiProvideOptions(TUI_TABS_OPTIONS, options, TUI_TABS_DEFAULT_OPTIONS);
}
var TuiUnderlineComponent = class {
  constructor({
    nativeElement
  }, zone, animationFrame$, mode$) {
    this.zone = zone;
    this.animationFrame$ = animationFrame$;
    this.mode$ = mode$;
    this.el$ = new ReplaySubject(1);
    this.refresh$ = this.el$.pipe(switchMap((element) => element ? this.animationFrame$.pipe(map(() => element), tuiZonefree(this.zone)) : of(null)), share());
    this.transition$ = asCallable(this.el$.pipe(map((element) => element && "all"), debounceTime(50)));
    this.transform$ = asCallable(this.refresh$.pipe(map((element) => element ? `translate3d(${element.offsetLeft}px, 0, 0)` : null)));
    this.width$ = asCallable(this.refresh$.pipe(map((element) => (element === null || element === void 0 ? void 0 : element.clientWidth) || 0)));
    nativeElement["$.style.transitionProperty"] = this.transition$;
    nativeElement["$.style.transform"] = this.transform$;
    nativeElement["$.style.width.px"] = this.width$;
  }
  set element(element) {
    this.el$.next(element);
  }
};
TuiUnderlineComponent.ɵfac = function TuiUnderlineComponent_Factory(t) {
  return new (t || TuiUnderlineComponent)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(NgZone), ɵɵdirectiveInject(ANIMATION_FRAME), ɵɵdirectiveInject(TUI_MODE));
};
TuiUnderlineComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiUnderlineComponent,
  selectors: [["tui-underline"]],
  hostBindings: function TuiUnderlineComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("$.data-mode.attr", function TuiUnderlineComponent___data_mode_attr_HostBindingHandler() {
        return ctx.mode$;
      })("$.style.transitionProperty", function TuiUnderlineComponent___style_transitionProperty_HostBindingHandler() {
        return ctx.transition$();
      })("$.style.transform", function TuiUnderlineComponent___style_transform_HostBindingHandler() {
        return ctx.transform$();
      })("$.style.width.px", function TuiUnderlineComponent___style_width_px_HostBindingHandler() {
        return ctx.width$();
      });
    }
  },
  inputs: {
    element: "element"
  },
  features: [ɵɵProvidersFeature([MODE_PROVIDER])],
  decls: 0,
  vars: 0,
  template: function TuiUnderlineComponent_Template(rf, ctx) {
  },
  styles: ["[_nghost-%COMP%]{transition-property:none;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;position:absolute;left:0;height:100%;color:var(--tui-primary);transform:scale(0);box-shadow:inset 0 -.1875rem 0 -.0625rem;pointer-events:none}[data-mode=onDark][_nghost-%COMP%]{color:var(--tui-text-01-night)}[data-mode=onLight][_nghost-%COMP%]{color:var(--tui-text-02)}"],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiUnderlineComponent, [{
    type: Component,
    args: [{
      selector: "tui-underline",
      template: "",
      styleUrls: ["./underline.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [MODE_PROVIDER],
      host: {
        "($.data-mode.attr)": "mode$"
      }
    }]
  }], function() {
    return [{
      type: ElementRef,
      decorators: [{
        type: Inject,
        args: [ElementRef]
      }]
    }, {
      type: NgZone,
      decorators: [{
        type: Inject,
        args: [NgZone]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Inject,
        args: [ANIMATION_FRAME]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Inject,
        args: [TUI_MODE]
      }]
    }];
  }, {
    element: [{
      type: Input
    }],
    transition$: [{
      type: HostListener,
      args: ["$.style.transitionProperty"]
    }],
    transform$: [{
      type: HostListener,
      args: ["$.style.transform"]
    }],
    width$: [{
      type: HostListener,
      args: ["$.style.width.px"]
    }]
  });
})();
var TuiTabsComponent = class {
  constructor(options, el, tabs, cdr, resize$) {
    this.options = options;
    this.el = el;
    this.tabs = tabs;
    this.children = EMPTY_QUERY;
    this.underline = this.options.underline;
    resize$.pipe(filter(() => this.underline)).subscribe(() => {
      cdr.detectChanges();
    });
  }
  /** @deprecated use `activeItemIndex` from {@link TuiTabsDirective} instead */
  get activeItemIndex() {
    return this.tabs.activeItemIndex;
  }
  /** @deprecated use `activeItemIndex` from {@link TuiTabsDirective} instead */
  set activeItemIndex(index) {
    this.tabs.activeItemIndex = index;
  }
  get activeElement() {
    return this.tabs.activeElement;
  }
  onKeyDownArrow(current, step) {
    this.tabs.moveFocus(current, step);
  }
  ngAfterViewChecked() {
    this.scrollTo(this.tabs.activeItemIndex);
  }
  scrollTo(index) {
    const element = this.tabs.tabs[index];
    if (!element) {
      return;
    }
    const {
      offsetLeft,
      offsetWidth
    } = element;
    const {
      nativeElement
    } = this.el;
    if (offsetLeft < nativeElement.scrollLeft) {
      nativeElement.scrollLeft = offsetLeft;
    }
    if (offsetLeft + offsetWidth > nativeElement.scrollLeft + nativeElement.offsetWidth) {
      nativeElement.scrollLeft = offsetLeft + offsetWidth - nativeElement.offsetWidth;
    }
  }
};
TuiTabsComponent.ɵfac = function TuiTabsComponent_Factory(t) {
  return new (t || TuiTabsComponent)(ɵɵdirectiveInject(TUI_TABS_OPTIONS), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(TuiTabsDirective), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(TuiResizeService));
};
TuiTabsComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiTabsComponent,
  selectors: [["tui-tabs", 3, "vertical", ""], ["nav", "tuiTabs", "", 3, "vertical", ""]],
  contentQueries: function TuiTabsComponent_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, TuiTabComponent, 4);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.children = _t);
    }
  },
  hostVars: 2,
  hostBindings: function TuiTabsComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("keydown.arrowRight.prevent", function TuiTabsComponent_keydown_arrowRight_prevent_HostBindingHandler($event) {
        return ctx.onKeyDownArrow($event.target, 1);
      })("keydown.arrowLeft.prevent", function TuiTabsComponent_keydown_arrowLeft_prevent_HostBindingHandler($event) {
        return ctx.onKeyDownArrow($event.target, -1);
      });
    }
    if (rf & 2) {
      ɵɵclassProp("_underline", ctx.underline);
    }
  },
  inputs: {
    underline: "underline"
  },
  features: [ɵɵProvidersFeature([TuiDestroyService, TuiResizeService, MutationObserverService, {
    provide: MUTATION_OBSERVER_INIT,
    useValue: {
      childList: true
    }
  }])],
  ngContentSelectors: _c135,
  decls: 4,
  vars: 4,
  consts: [[4, "ngIf"], ["class", "t-underline", 3, "element", 4, "ngIf"], [1, "t-underline", 3, "element"]],
  template: function TuiTabsComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵtemplate(0, TuiTabsComponent_ng_container_0_Template, 1, 0, "ng-container", 0);
      ɵɵpipe(1, "async");
      ɵɵprojection(2);
      ɵɵtemplate(3, TuiTabsComponent_tui_underline_3_Template, 1, 1, "tui-underline", 1);
    }
    if (rf & 2) {
      ɵɵproperty("ngIf", ɵɵpipeBind1(1, 2, ctx.children.changes));
      ɵɵadvance(3);
      ɵɵproperty("ngIf", ctx.underline);
    }
  },
  dependencies: [TuiUnderlineComponent, NgIf, AsyncPipe],
  styles: ["[_nghost-%COMP%]{scrollbar-width:none;-ms-overflow-style:none;position:relative;display:flex;font:var(--tui-font-text-m);height:var(--tui-height-l);color:var(--tui-text-02);box-shadow:inset 0 -1px var(--tui-base-03);overflow:auto;isolation:isolate}[_nghost-%COMP%]::-webkit-scrollbar, [_nghost-%COMP%]::-webkit-scrollbar-thumb{display:none}.t-underline[_ngcontent-%COMP%]{z-index:-1}"],
  changeDetection: 0
});
__decorate([tuiPure], TuiTabsComponent.prototype, "scrollTo", null);
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiTabsComponent, [{
    type: Component,
    args: [{
      selector: "tui-tabs:not([vertical]), nav[tuiTabs]:not([vertical])",
      templateUrl: "./tabs.template.html",
      styleUrls: ["./tabs.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [TuiDestroyService, TuiResizeService, MutationObserverService, {
        provide: MUTATION_OBSERVER_INIT,
        useValue: {
          childList: true
        }
      }]
    }]
  }], function() {
    return [{
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_TABS_OPTIONS]
      }]
    }, {
      type: ElementRef,
      decorators: [{
        type: Inject,
        args: [ElementRef]
      }]
    }, {
      type: TuiTabsDirective,
      decorators: [{
        type: Inject,
        args: [TuiTabsDirective]
      }]
    }, {
      type: ChangeDetectorRef,
      decorators: [{
        type: Inject,
        args: [ChangeDetectorRef]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Inject,
        args: [TuiResizeService]
      }]
    }];
  }, {
    children: [{
      type: ContentChildren,
      args: [forwardRef(() => TuiTabComponent)]
    }],
    underline: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["class._underline"]
    }],
    onKeyDownArrow: [{
      type: HostListener,
      args: ["keydown.arrowRight.prevent", ["$event.target", "1"]]
    }, {
      type: HostListener,
      args: ["keydown.arrowLeft.prevent", ["$event.target", "-1"]]
    }],
    scrollTo: []
  });
})();
var TuiTabsVerticalComponent = class {
  constructor(tabs) {
    this.tabs = tabs;
    this.vertical = "left";
  }
  onKeyDownArrow(current, step) {
    this.tabs.moveFocus(current, step);
  }
};
TuiTabsVerticalComponent.ɵfac = function TuiTabsVerticalComponent_Factory(t) {
  return new (t || TuiTabsVerticalComponent)(ɵɵdirectiveInject(TuiTabsDirective));
};
TuiTabsVerticalComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiTabsVerticalComponent,
  selectors: [["tui-tabs", "vertical", ""], ["nav", "tuiTabs", "", "vertical", ""]],
  hostVars: 1,
  hostBindings: function TuiTabsVerticalComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("keydown.arrowDown.prevent", function TuiTabsVerticalComponent_keydown_arrowDown_prevent_HostBindingHandler($event) {
        return ctx.onKeyDownArrow($event.target, 1);
      })("keydown.arrowUp.prevent", function TuiTabsVerticalComponent_keydown_arrowUp_prevent_HostBindingHandler($event) {
        return ctx.onKeyDownArrow($event.target, -1);
      });
    }
    if (rf & 2) {
      ɵɵattribute("data-vertical", ctx.vertical);
    }
  },
  inputs: {
    vertical: "vertical"
  },
  attrs: _c218,
  ngContentSelectors: _c135,
  decls: 1,
  vars: 0,
  template: function TuiTabsVerticalComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵprojection(0);
    }
  },
  styles: ["[_nghost-%COMP%]{display:flex;flex-direction:column;font:var(--tui-font-text-m);color:var(--tui-text-02);box-shadow:inset -1px 0 var(--tui-base-03)}[data-vertical=right][_nghost-%COMP%]{box-shadow:inset 1px 0 var(--tui-base-03)}"],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiTabsVerticalComponent, [{
    type: Component,
    args: [{
      selector: "tui-tabs[vertical], nav[tuiTabs][vertical]",
      template: `
        <ng-content></ng-content>
    `,
      styleUrls: ["./tabs-vertical.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush
    }]
  }], function() {
    return [{
      type: TuiTabsDirective,
      decorators: [{
        type: Inject,
        args: [TuiTabsDirective]
      }]
    }];
  }, {
    vertical: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["attr.data-vertical"]
    }],
    onKeyDownArrow: [{
      type: HostListener,
      args: ["keydown.arrowDown.prevent", ["$event.target", "1"]]
    }, {
      type: HostListener,
      args: ["keydown.arrowUp.prevent", ["$event.target", "-1"]]
    }]
  });
})();
var TUI_TABS_REFRESH = new InjectionToken("[TUI_TABS_REFRESH]");
var TUI_TABS_PROVIDERS = [TuiResizeService, TuiDestroyService, MutationObserverService, tuiDropdownOptionsProvider({
  align: "right"
}), {
  provide: MUTATION_OBSERVER_INIT,
  useValue: {
    childList: true,
    subtree: true,
    characterData: true
  }
}, {
  provide: TUI_TABS_REFRESH,
  deps: [TuiResizeService, MutationObserverService, TuiDestroyService, DOCUMENT, ElementRef, ChangeDetectorRef],
  useFactory: (resize$, mutations$, destroy$, {
    body
  }, {
    nativeElement
  }, cdr) => merge(resize$, mutations$.pipe(tap(() => cdr.detectChanges()))).pipe(
    // Ignoring cases when host is detached from DOM
    filter(() => body.contains(nativeElement)),
    debounceTime(0),
    startWith(null),
    takeUntil(destroy$)
  )
}];
var TuiTabsWithMoreComponent = class {
  constructor(options, margin, refresh$, el, cdr, moreWord$, arrowOptions) {
    this.options = options;
    this.margin = margin;
    this.refresh$ = refresh$;
    this.el = el;
    this.cdr = cdr;
    this.moreWord$ = moreWord$;
    this.arrowOptions = arrowOptions;
    this.maxIndex = Infinity;
    this.underline = this.options.underline;
    this.itemsLimit = this.options.itemsLimit;
    this.activeItemIndexChange = new EventEmitter();
    this.items = EMPTY_QUERY;
    this.activeItemIndex = 0;
    this.open = false;
  }
  set itemIndex(activeItemIndex) {
    this.activeItemIndex = activeItemIndex;
    this.maxIndex = this.getMaxIndex();
  }
  // TODO: Improve performance
  get tabs() {
    return Array.from(this.el.nativeElement.querySelectorAll("[tuiTab]"));
  }
  get activeElement() {
    var _a;
    const {
      tabs
    } = this;
    const safeActiveIndex = tuiClamp(this.activeItemIndex || 0, 0, tabs.length - 2);
    return this.options.exposeActive || this.lastVisibleIndex >= safeActiveIndex ? tabs[safeActiveIndex] || null : ((_a = this.moreButton) === null || _a === void 0 ? void 0 : _a.nativeElement) || null;
  }
  get isMoreAlone() {
    return this.lastVisibleIndex < 0 && !this.options.exposeActive;
  }
  get isMoreVisible() {
    return this.lastVisibleIndex < this.items.length - 1;
  }
  get isMoreFocusable() {
    return !!this.moreButton && tuiIsNativeFocused(this.moreButton.nativeElement);
  }
  get isMoreActive() {
    return this.open || !this.options.exposeActive && this.lastVisibleIndex < this.activeItemIndex;
  }
  get lastVisibleIndex() {
    if (this.itemsLimit + 1 >= this.items.length) {
      return this.maxIndex;
    }
    const offset = this.itemsLimit - 1 > this.activeItemIndex || !this.options.exposeActive ? 1 : 2;
    return Math.min(this.itemsLimit - offset, this.maxIndex);
  }
  ngAfterViewInit() {
    this.refresh$.pipe(map(() => this.getMaxIndex()), filter((maxIndex) => this.maxIndex !== maxIndex)).subscribe((maxIndex) => {
      this.maxIndex = maxIndex;
      this.cdr.detectChanges();
    });
  }
  onActiveItemIndexChange(activeItemIndex) {
    this.updateActiveItemIndex(activeItemIndex);
  }
  onClick(index) {
    this.open = false;
    this.focusMore();
    this.updateActiveItemIndex(index);
  }
  onArrowRight(event) {
    if (tuiIsElement(event.target) && tuiIsNativeFocused(event.target)) {
      this.focusMore();
    }
  }
  onArrowLeft() {
    const {
      tabs
    } = this;
    let index = tabs.length - 2;
    while (index >= 0) {
      tabs[index].focus();
      if (tuiIsNativeFocused(tabs[index])) {
        return;
      }
      index--;
    }
  }
  onWrapperArrow(event, wrapper, previous) {
    const button = event.target;
    const target = tuiGetClosestFocusable({
      initial: button,
      root: wrapper,
      previous
    });
    if (target) {
      target.focus();
    }
  }
  isOverflown(index) {
    return index !== this.activeItemIndex || !this.options.exposeActive;
  }
  shouldShow(index) {
    return index > this.lastVisibleIndex && this.isOverflown(index);
  }
  focusMore() {
    if (this.moreButton) {
      this.moreButton.nativeElement.focus();
    }
  }
  getMaxIndex() {
    const {
      tabs,
      activeItemIndex,
      margin
    } = this;
    if (tabs.length < 2) {
      return 0;
    }
    const {
      exposeActive,
      minMoreWidth
    } = this.options;
    const {
      clientWidth
    } = this.el.nativeElement;
    const activeWidth = tabs[activeItemIndex] ? tabs[activeItemIndex].scrollWidth : 0;
    const moreWidth = Math.max(tabs[tabs.length - 1].scrollWidth, minMoreWidth);
    let maxIndex = tabs.length - 2;
    let total = tabs.reduce((acc, {
      scrollWidth
    }) => acc + scrollWidth, 0) + maxIndex * margin - tabs[tabs.length - 1].scrollWidth;
    if (total <= clientWidth) {
      return Infinity;
    }
    while (maxIndex) {
      total -= tabs[maxIndex].scrollWidth + margin;
      maxIndex--;
      const activeDisplaced = exposeActive && activeItemIndex > maxIndex;
      const activeOffset = activeDisplaced ? activeWidth + margin : 0;
      const currentWidth = total + activeOffset + moreWidth + margin;
      const safetyOffset = tuiToInt(this.maxIndex === maxIndex - 1);
      if (currentWidth + safetyOffset < clientWidth) {
        return maxIndex;
      }
    }
    return -1;
  }
  updateActiveItemIndex(activeItemIndex) {
    this.itemIndex = activeItemIndex;
    this.activeItemIndexChange.emit(activeItemIndex);
  }
};
TuiTabsWithMoreComponent.ɵfac = function TuiTabsWithMoreComponent_Factory(t) {
  return new (t || TuiTabsWithMoreComponent)(ɵɵdirectiveInject(TUI_TABS_OPTIONS), ɵɵdirectiveInject(TUI_TAB_MARGIN), ɵɵdirectiveInject(TUI_TABS_REFRESH), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(TUI_MORE_WORD), ɵɵdirectiveInject(TUI_ARROW_OPTIONS));
};
TuiTabsWithMoreComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiTabsWithMoreComponent,
  selectors: [["tui-tabs-with-more"], ["nav", "tuiTabsWithMore", ""]],
  contentQueries: function TuiTabsWithMoreComponent_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, TuiItemDirective, 4, TemplateRef);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.items = _t);
    }
  },
  viewQuery: function TuiTabsWithMoreComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(TuiTabComponent, 5, ElementRef);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.moreButton = _t.first);
    }
  },
  hostVars: 2,
  hostBindings: function TuiTabsWithMoreComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("_underline", ctx.underline);
    }
  },
  inputs: {
    moreContent: "moreContent",
    dropdownContent: "dropdownContent",
    underline: "underline",
    itemIndex: ["activeItemIndex", "itemIndex"],
    itemsLimit: "itemsLimit"
  },
  outputs: {
    activeItemIndexChange: "activeItemIndexChange"
  },
  features: [ɵɵProvidersFeature(TUI_TABS_PROVIDERS)],
  decls: 13,
  vars: 17,
  consts: [[4, "ngIf"], [1, "t-wrapper"], [1, "t-tabs", 3, "activeItemIndex", "underline", "activeItemIndexChange", "keydown.arrowRight"], [4, "ngFor", "ngForOf"], [1, "t-more_wrapper", 3, "content", "open", "openChange"], ["tuiTab", "", 3, "tuiFocusable", "keydown.arrowLeft.prevent"], [4, "polymorpheusOutlet"], ["more", ""], ["dropdown", ""], [3, "element", 4, "ngIf"], [3, "ngTemplateOutlet", 4, "ngIf", "ngIfElse"], ["hidden", ""], [3, "ngTemplateOutlet"], [1, "t-icon", 3, "src"], [1, "t-dropdown", 3, "keydown.arrowDown.prevent", "keydown.arrowUp.prevent"], ["element", ""], ["class", "t-dropdown-item", 3, "tui-tab-activate", 4, "ngFor", "ngForOf"], [1, "t-dropdown-item", 3, "tui-tab-activate"], [3, "ngTemplateOutlet", 4, "ngIf"], [3, "element"]],
  template: function TuiTabsWithMoreComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵtemplate(0, TuiTabsWithMoreComponent_ng_container_0_Template, 1, 0, "ng-container", 0);
      ɵɵpipe(1, "async");
      ɵɵelementStart(2, "div", 1)(3, "tui-tabs", 2);
      ɵɵlistener("activeItemIndexChange", function TuiTabsWithMoreComponent_Template_tui_tabs_activeItemIndexChange_3_listener($event) {
        return ctx.onActiveItemIndexChange($event);
      })("keydown.arrowRight", function TuiTabsWithMoreComponent_Template_tui_tabs_keydown_arrowRight_3_listener($event) {
        return ctx.onArrowRight($event);
      });
      ɵɵtemplate(4, TuiTabsWithMoreComponent_ng_container_4_Template, 4, 2, "ng-container", 3);
      ɵɵelementEnd();
      ɵɵelementStart(5, "tui-hosted-dropdown", 4);
      ɵɵlistener("openChange", function TuiTabsWithMoreComponent_Template_tui_hosted_dropdown_openChange_5_listener($event) {
        return ctx.open = $event;
      });
      ɵɵelementStart(6, "button", 5);
      ɵɵlistener("keydown.arrowLeft.prevent", function TuiTabsWithMoreComponent_Template_button_keydown_arrowLeft_prevent_6_listener() {
        return ctx.onArrowLeft();
      });
      ɵɵtemplate(7, TuiTabsWithMoreComponent_ng_container_7_Template, 2, 1, "ng-container", 6);
      ɵɵelementEnd();
      ɵɵtemplate(8, TuiTabsWithMoreComponent_ng_template_8_Template, 3, 6, "ng-template", null, 7, ɵɵtemplateRefExtractor);
      ɵɵelementEnd();
      ɵɵtemplate(10, TuiTabsWithMoreComponent_ng_template_10_Template, 3, 1, "ng-template", null, 8, ɵɵtemplateRefExtractor);
      ɵɵtemplate(12, TuiTabsWithMoreComponent_tui_underline_12_Template, 1, 1, "tui-underline", 9);
      ɵɵelementEnd();
    }
    if (rf & 2) {
      const _r3 = ɵɵreference(9);
      const _r5 = ɵɵreference(11);
      ɵɵproperty("ngIf", ɵɵpipeBind1(1, 15, ctx.items.changes));
      ɵɵadvance(3);
      ɵɵproperty("activeItemIndex", ctx.activeItemIndex)("underline", false);
      ɵɵadvance(1);
      ɵɵproperty("ngForOf", ctx.items);
      ɵɵadvance(1);
      ɵɵclassProp("t-overflown", !ctx.isMoreVisible);
      ɵɵproperty("content", ctx.dropdownContent || _r5)("open", ctx.open);
      ɵɵadvance(1);
      ɵɵclassProp("_active", ctx.isMoreActive)("t-no-margin", ctx.isMoreAlone);
      ɵɵproperty("tuiFocusable", ctx.isMoreFocusable);
      ɵɵadvance(1);
      ɵɵproperty("polymorpheusOutlet", ctx.moreContent || _r3);
      ɵɵadvance(5);
      ɵɵproperty("ngIf", ctx.underline);
    }
  },
  dependencies: [TuiTabsComponent, TuiHostedDropdownComponent, TuiTabComponent, TuiSvgComponent, TuiUnderlineComponent, NgIf, TuiTabsDirective, NgForOf, NgTemplateOutlet, TuiFocusableDirective, PolymorpheusOutletDirective, AsyncPipe],
  styles: ["[_nghost-%COMP%]{position:relative;display:flex;font:var(--tui-font-text-m);height:var(--tui-height-l);box-sizing:border-box;color:var(--tui-text-02);box-shadow:inset 0 -1px var(--tui-base-03);overflow:hidden}.t-wrapper[_ngcontent-%COMP%]{position:relative;display:flex}.t-tabs[_ngcontent-%COMP%]{height:inherit;font-size:inherit;font-weight:inherit;overflow:visible;box-shadow:none;color:inherit}.t-overflown[_ngcontent-%COMP%]{display:flex;margin:0;width:0;max-width:0;overflow:hidden;visibility:hidden}.t-more_wrapper[_ngcontent-%COMP%]{height:100%;pointer-events:none}.t-more_wrapper[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{pointer-events:auto}.t-icon[_ngcontent-%COMP%]{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;margin-right:-.25rem;vertical-align:bottom}.t-icon_rotated[_ngcontent-%COMP%]{transform:rotate(180deg)}.t-dropdown[_ngcontent-%COMP%]{padding:.25rem 0}.t-dropdown[_ngcontent-%COMP%]     *[tuiTab]{width:calc(100% - .75rem);height:2.75rem;justify-content:flex-start;margin:.125rem .375rem;padding:0 .625rem;line-height:1.5rem;border-radius:var(--tui-radius-s);font:var(--tui-font-text-m);color:var(--tui-text-01)}.t-dropdown[_ngcontent-%COMP%]     *[tuiTab]:before{display:none}.t-dropdown[_ngcontent-%COMP%]     *[tuiTab]:hover, .t-dropdown[_ngcontent-%COMP%]     *[tuiTab]:focus, .t-dropdown[_ngcontent-%COMP%]     *[tuiTab]._active{box-shadow:none;background:var(--tui-clear)}.t-dropdown[_ngcontent-%COMP%]     *[tuiTab] .t-highlight{background:transparent!important}.t-dropdown-item[_ngcontent-%COMP%]{display:flex;flex-direction:column}.t-no-margin[_ngcontent-%COMP%]{margin-left:0}"],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiTabsWithMoreComponent, [{
    type: Component,
    args: [{
      selector: "tui-tabs-with-more, nav[tuiTabsWithMore]",
      templateUrl: "./tabs-with-more.template.html",
      styleUrls: ["./tabs-with-more.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: TUI_TABS_PROVIDERS
    }]
  }], function() {
    return [{
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_TABS_OPTIONS]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_TAB_MARGIN]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Inject,
        args: [TUI_TABS_REFRESH]
      }]
    }, {
      type: ElementRef,
      decorators: [{
        type: Inject,
        args: [ElementRef]
      }]
    }, {
      type: ChangeDetectorRef,
      decorators: [{
        type: Inject,
        args: [ChangeDetectorRef]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Inject,
        args: [TUI_MORE_WORD]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_ARROW_OPTIONS]
      }]
    }];
  }, {
    moreButton: [{
      type: ViewChild,
      args: [TuiTabComponent, {
        read: ElementRef
      }]
    }],
    moreContent: [{
      type: Input
    }],
    dropdownContent: [{
      type: Input
    }],
    underline: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["class._underline"]
    }],
    itemIndex: [{
      type: Input,
      args: ["activeItemIndex"]
    }],
    itemsLimit: [{
      type: Input
    }],
    activeItemIndexChange: [{
      type: Output
    }],
    items: [{
      type: ContentChildren,
      args: [TuiItemDirective, {
        read: TemplateRef
      }]
    }]
  });
})();
var TuiTabsModule = class {
};
TuiTabsModule.ɵfac = function TuiTabsModule_Factory(t) {
  return new (t || TuiTabsModule)();
};
TuiTabsModule.ɵmod = ɵɵdefineNgModule({
  type: TuiTabsModule,
  declarations: [TuiTabsWithMoreComponent, TuiTabsComponent, TuiTabsDirective, TuiTabsVerticalComponent, TuiTabComponent, TuiUnderlineComponent],
  imports: [CommonModule, PolymorpheusModule, TuiHostedDropdownModule, TuiSvgModule, TuiFocusableModule, TuiItemModule],
  exports: [TuiTabsWithMoreComponent, TuiTabsComponent, TuiTabsDirective, TuiTabsVerticalComponent, TuiTabComponent, TuiItemDirective]
});
TuiTabsModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, PolymorpheusModule, TuiHostedDropdownModule, TuiSvgModule, TuiFocusableModule, TuiItemModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiTabsModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, PolymorpheusModule, TuiHostedDropdownModule, TuiSvgModule, TuiFocusableModule, TuiItemModule],
      declarations: [TuiTabsWithMoreComponent, TuiTabsComponent, TuiTabsDirective, TuiTabsVerticalComponent, TuiTabComponent, TuiUnderlineComponent],
      exports: [TuiTabsWithMoreComponent, TuiTabsComponent, TuiTabsDirective, TuiTabsVerticalComponent, TuiTabComponent, TuiItemDirective]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-textarea.js
var _c051 = ["focusableElement"];
function TuiTextareaComponent_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function TuiTextareaComponent_div_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 19);
    ɵɵtext(1);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate2(" ", ctx_r1.value.length, "/", ctx_r1.maxLength, " ");
  }
}
function TuiTextareaComponent_div_6_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 20);
    ɵɵprojection(1, 1);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵclassProp("t-placeholder_raised", ctx_r2.placeholderRaised);
  }
}
function TuiTextareaComponent_div_18_tui_svg_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "tui-svg", 23);
  }
  if (rf & 2) {
    const src_r10 = ctx.polymorpheusOutlet;
    ɵɵproperty("src", src_r10);
  }
}
var _c136 = function(a0) {
  return {
    $implicit: a0
  };
};
function TuiTextareaComponent_div_18_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 21);
    ɵɵtemplate(1, TuiTextareaComponent_div_18_tui_svg_1_Template, 1, 1, "tui-svg", 22);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r4 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("polymorpheusOutlet", ctx_r4.iconLeftContent)("polymorpheusOutletContext", ɵɵpureFunction1(2, _c136, ctx_r4.size));
  }
}
function TuiTextareaComponent_ng_container_19_tui_svg_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "tui-svg", 25);
  }
  if (rf & 2) {
    const src_r12 = ctx.polymorpheusOutlet;
    ɵɵproperty("src", src_r12);
  }
}
function TuiTextareaComponent_ng_container_19_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, TuiTextareaComponent_ng_container_19_tui_svg_1_Template, 1, 1, "tui-svg", 24);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r5 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("polymorpheusOutlet", ctx_r5.controller.customContent);
  }
}
function TuiTextareaComponent_ng_container_20_tui_svg_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r16 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "tui-svg", 27);
    ɵɵlistener("click.stop", function TuiTextareaComponent_ng_container_20_tui_svg_1_Template_tui_svg_click_stop_0_listener() {
      ɵɵrestoreView(_r16);
      const ctx_r15 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r15.onValueChange(""));
    });
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const src_r14 = ctx.polymorpheusOutlet;
    ɵɵproperty("src", src_r14);
  }
}
function TuiTextareaComponent_ng_container_20_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, TuiTextareaComponent_ng_container_20_tui_svg_1_Template, 1, 1, "tui-svg", 26);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r6 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("polymorpheusOutlet", ctx_r6.iconCleaner)("polymorpheusOutletContext", ɵɵpureFunction1(2, _c136, ctx_r6.size));
  }
}
function TuiTextareaComponent_tui_tooltip_21_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "tui-tooltip", 28);
  }
  if (rf & 2) {
    const ctx_r7 = ɵɵnextContext();
    ɵɵproperty("content", ctx_r7.hintOptions == null ? null : ctx_r7.hintOptions.content)("describeId", ctx_r7.id);
  }
}
function TuiTextareaComponent_div_22_tui_svg_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "tui-svg", 23);
  }
  if (rf & 2) {
    const src_r18 = ctx.polymorpheusOutlet;
    ɵɵproperty("src", src_r18);
  }
}
function TuiTextareaComponent_div_22_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 29);
    ɵɵtemplate(1, TuiTextareaComponent_div_22_tui_svg_1_Template, 1, 1, "tui-svg", 22);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r8 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("polymorpheusOutlet", ctx_r8.iconContent)("polymorpheusOutletContext", ɵɵpureFunction1(2, _c136, ctx_r8.size));
  }
}
var _c219 = [[["textarea"]], "*"];
var _c39 = ["textarea", "*"];
function TuiTextAreaComponent_ng_container_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
function TuiTextAreaComponent_div_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 19);
    ɵɵtext(1);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵtextInterpolate2(" ", ctx_r1.value.length, "/", ctx_r1.maxLength, " ");
  }
}
function TuiTextAreaComponent_div_6_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 20);
    ɵɵprojection(1, 1);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵclassProp("t-placeholder_raised", ctx_r2.placeholderRaised);
  }
}
function TuiTextAreaComponent_div_18_tui_svg_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "tui-svg", 23);
  }
  if (rf & 2) {
    const src_r10 = ctx.polymorpheusOutlet;
    ɵɵproperty("src", src_r10);
  }
}
function TuiTextAreaComponent_div_18_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 21);
    ɵɵtemplate(1, TuiTextAreaComponent_div_18_tui_svg_1_Template, 1, 1, "tui-svg", 22);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r4 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("polymorpheusOutlet", ctx_r4.iconLeftContent)("polymorpheusOutletContext", ɵɵpureFunction1(2, _c136, ctx_r4.size));
  }
}
function TuiTextAreaComponent_ng_container_19_tui_svg_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "tui-svg", 25);
  }
  if (rf & 2) {
    const src_r12 = ctx.polymorpheusOutlet;
    ɵɵproperty("src", src_r12);
  }
}
function TuiTextAreaComponent_ng_container_19_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, TuiTextAreaComponent_ng_container_19_tui_svg_1_Template, 1, 1, "tui-svg", 24);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r5 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("polymorpheusOutlet", ctx_r5.controller.customContent);
  }
}
function TuiTextAreaComponent_ng_container_20_tui_svg_1_Template(rf, ctx) {
  if (rf & 1) {
    const _r16 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "tui-svg", 27);
    ɵɵlistener("click.stop", function TuiTextAreaComponent_ng_container_20_tui_svg_1_Template_tui_svg_click_stop_0_listener() {
      ɵɵrestoreView(_r16);
      const ctx_r15 = ɵɵnextContext(2);
      return ɵɵresetView(ctx_r15.onValueChange(""));
    });
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const src_r14 = ctx.polymorpheusOutlet;
    ɵɵproperty("src", src_r14);
  }
}
function TuiTextAreaComponent_ng_container_20_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, TuiTextAreaComponent_ng_container_20_tui_svg_1_Template, 1, 1, "tui-svg", 26);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const ctx_r6 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("polymorpheusOutlet", ctx_r6.iconCleaner)("polymorpheusOutletContext", ɵɵpureFunction1(2, _c136, ctx_r6.size));
  }
}
function TuiTextAreaComponent_tui_tooltip_21_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "tui-tooltip", 28);
  }
  if (rf & 2) {
    const ctx_r7 = ɵɵnextContext();
    ɵɵproperty("content", ctx_r7.hintOptions == null ? null : ctx_r7.hintOptions.content)("describeId", ctx_r7.id);
  }
}
function TuiTextAreaComponent_div_22_tui_svg_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "tui-svg", 23);
  }
  if (rf & 2) {
    const src_r18 = ctx.polymorpheusOutlet;
    ɵɵproperty("src", src_r18);
  }
}
function TuiTextAreaComponent_div_22_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "div", 29);
    ɵɵtemplate(1, TuiTextAreaComponent_div_22_tui_svg_1_Template, 1, 1, "tui-svg", 22);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r8 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("polymorpheusOutlet", ctx_r8.iconContent)("polymorpheusOutletContext", ɵɵpureFunction1(2, _c136, ctx_r8.size));
  }
}
var _c47 = "[_nghost-%COMP%]{position:relative;z-index:0;display:flex;flex-direction:column;min-height:var(--tui-textarea-height);border-radius:var(--tui-radius-m);color:var(--tui-text-01)}[data-mode=onDark][_nghost-%COMP%]{color:var(--tui-text-01-night)}[data-size=s][_nghost-%COMP%]{--tui-height: var(--tui-height-s);--tui-textarea-height: 4.5625rem;font:var(--tui-font-text-s)}[data-size=m][_nghost-%COMP%]{--tui-height: var(--tui-height-m);--tui-textarea-height: 5.5rem;font:var(--tui-font-text-s)}[data-size=l][_nghost-%COMP%]{--tui-height: var(--tui-height-l);--tui-textarea-height: 6.75rem;font:var(--tui-font-text-m)}[data-size=m]._has-counter[_nghost-%COMP%]{--tui-textarea-height: 6.625rem}[data-size=l]._has-counter[_nghost-%COMP%]{--tui-textarea-height: 7.875rem}.t-outline[_ngcontent-%COMP%]{min-height:inherit}.t-content[_ngcontent-%COMP%]{display:block;margin-top:0;margin-bottom:0;min-height:inherit;box-sizing:border-box;overflow:hidden;cursor:text}._disabled[_nghost-%COMP%]   .t-content[_ngcontent-%COMP%]{cursor:auto;opacity:var(--tui-disabled-opacity)}[_nghost-%COMP%]:not(._expandable)   .t-content[_ngcontent-%COMP%]{position:absolute;top:0;left:0;bottom:1px;right:0;min-height:auto}._has-counter[_nghost-%COMP%]:not(._expandable)   .t-content[_ngcontent-%COMP%]{bottom:1.6875rem}._label-outside._has-counter[_nghost-%COMP%]:not(._expandable)   .t-content[_ngcontent-%COMP%]{bottom:1rem}.t-wrapper[_ngcontent-%COMP%]{position:relative;width:100%;height:100%;min-height:inherit;box-sizing:border-box;padding:calc((var(--tui-height) - 1.25rem) / 2) 0}[data-size=l]._label-outside[_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]{padding:calc((var(--tui-height) - 1.5rem) / 2) 0}[data-size=m][_nghost-%COMP%]:not(._label-outside)   .t-wrapper[_ngcontent-%COMP%]{padding:calc((var(--tui-height) - 2.25rem) / 2) 0}[data-size=l][_nghost-%COMP%]:not(._label-outside)   .t-wrapper[_ngcontent-%COMP%]{padding:calc((var(--tui-height) - 2.625rem) / 2) 0}table[data-size=m]._label-outside[_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%], table   [data-size=m]._label-outside[_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]{padding-bottom:.75rem}table[data-size=l]._label-outside[_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%], table   [data-size=l]._label-outside[_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]{padding-bottom:1rem}.t-input-wrapper[_ngcontent-%COMP%]{min-height:inherit;width:100%;flex:1}.t-relative[_ngcontent-%COMP%]{position:relative;min-height:inherit}.t-box[_ngcontent-%COMP%]{display:flex;min-height:calc(100% - 1rem);width:100%}[_nghost-%COMP%]:not(._expandable)   .t-box[_ngcontent-%COMP%]{height:calc(100% - 1rem)}[_nghost-%COMP%]:not(._expandable)._label-outside   .t-box[_ngcontent-%COMP%]{height:100%}._has-counter._expandable[_nghost-%COMP%]   .t-box[_ngcontent-%COMP%]{margin-bottom:1.25rem}[data-size=m][_nghost-%COMP%]:not(._label-outside)   .t-box[_ngcontent-%COMP%]{border-top:1rem solid transparent}[data-size=l][_nghost-%COMP%]:not(._label-outside)   .t-box[_ngcontent-%COMP%]{border-top:1.25rem solid transparent}.t-pseudo-content[_ngcontent-%COMP%]{white-space:pre-wrap;word-wrap:break-word;word-break:keep-all;pointer-events:none;color:transparent;overflow:hidden;border:0 solid transparent;border-inline-start-width:var(--border-start, 0);border-inline-end-width:var(--border-end, 0)}[data-size=s][_nghost-%COMP%]   .t-pseudo-content[_ngcontent-%COMP%], [data-size=m][_nghost-%COMP%]   .t-pseudo-content[_ngcontent-%COMP%]{padding:0 .75rem}[data-size=l][_nghost-%COMP%]   .t-pseudo-content[_ngcontent-%COMP%]{padding:0 1rem}.t-pseudo-content__extra[_ngcontent-%COMP%]{background-color:var(--tui-error-bg-night)}.t-input[_ngcontent-%COMP%]{padding:0;margin:0;border-width:0;border-radius:inherit;background:none;font-size:inherit;line-height:inherit;font-weight:inherit;color:inherit;caret-color:currentColor;-webkit-appearance:none;-moz-appearance:none;appearance:none;word-break:keep-all;-webkit-text-fill-color:currentColor;position:absolute;top:0;left:0;width:100%;height:100%;box-sizing:border-box;resize:none;overflow:hidden;outline:none;border:0 solid transparent;border-inline-start-width:var(--border-start, 0);border-inline-end-width:var(--border-end, 0)}.t-input[_ngcontent-%COMP%]:-webkit-autofill, .t-input[_ngcontent-%COMP%]:-webkit-autofill:hover, .t-input[_ngcontent-%COMP%]:-webkit-autofill:focus{caret-color:var(--tui-base-09);border-radius:inherit;color:inherit!important;background-color:transparent!important;-webkit-text-fill-color:var(--tui-text-01)!important;border-color:var(--tui-autofill);-webkit-box-shadow:0 0 0 100rem var(--tui-autofill) inset!important}@supports (-webkit-touch-callout: none){.t-input[_ngcontent-%COMP%]:active{font-size:1rem}}.t-input[_ngcontent-%COMP%]:not(:last-of-type){display:none}.t-input[_ngcontent-%COMP%]::placeholder{color:var(--tui-text-03);opacity:0}[data-mode=onDark][_nghost-%COMP%]   .t-input[_ngcontent-%COMP%]::placeholder{color:var(--tui-text-03-night)}._focused[_nghost-%COMP%]   .t-input[_ngcontent-%COMP%]:not(:-moz-read-only)::placeholder{opacity:1}._focused[_nghost-%COMP%]   .t-input[_ngcontent-%COMP%]:not(:read-only)::placeholder{opacity:1}[data-size=s][_nghost-%COMP%]   .t-input[_ngcontent-%COMP%], [data-size=m][_nghost-%COMP%]   .t-input[_ngcontent-%COMP%]{padding:0 .75rem}[data-size=l][_nghost-%COMP%]   .t-input[_ngcontent-%COMP%]{padding:0 1rem}[data-mode=onDark]._disabled[_nghost-%COMP%]   .t-input[_ngcontent-%COMP%]{color:var(--tui-text-03-night)}@supports (-webkit-marquee-repetition: infinite) and (object-fit: fill){._ios[_nghost-%COMP%]   .t-input[_ngcontent-%COMP%]{padding-left:.8125rem}}.t-placeholder[_ngcontent-%COMP%]{transition-property:transform,font-size,color,letter-spacing;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;width:100%;-webkit-user-select:none;-moz-user-select:none;user-select:none;font:var(--tui-font-text-s);color:var(--tui-text-02);pointer-events:none;will-change:transform;transform:translateY(0);position:absolute;top:calc(var(--tui-height) / 2 - .625rem);left:0;max-width:100%;border:0 solid transparent;border-inline-start-width:var(--border-start, 0);border-inline-end-width:var(--border-end, 0);box-sizing:border-box}@supports (-webkit-hyphens: none){.t-placeholder[_ngcontent-%COMP%]{will-change:unset;transition-property:transform,color,letter-spacing}}.t-placeholder_raised[_ngcontent-%COMP%]{transform:translateY(-.625rem)}[data-size=m][_nghost-%COMP%]   .t-placeholder_raised[_ngcontent-%COMP%]{font:var(--tui-font-text-xs);line-height:1.25rem;transform:translateY(-.5rem);letter-spacing:.025rem}._invalid[_nghost-%COMP%]:not(._focused)   .t-placeholder_raised[_ngcontent-%COMP%], ._invalid[_nghost-%COMP%]:not(._focused):hover   .t-placeholder_raised[_ngcontent-%COMP%]{color:var(--tui-error-fill)}._invalid[_nghost-%COMP%]:not(._focused)   [tuiWrapper][data-mode=onDark][_ngcontent-%COMP%]   .t-placeholder_raised[_ngcontent-%COMP%], ._invalid[_nghost-%COMP%]:not(._focused):hover   [tuiWrapper][data-mode=onDark][_ngcontent-%COMP%]   .t-placeholder_raised[_ngcontent-%COMP%]{color:var(--tui-error-fill-night)}._focused[_nghost-%COMP%]   .t-placeholder[_ngcontent-%COMP%], [data-size=m]._focused._label-outside[_nghost-%COMP%]   .t-placeholder[_ngcontent-%COMP%], [data-size=l]._focused._label-outside[_nghost-%COMP%]   .t-placeholder[_ngcontent-%COMP%]{color:var(--tui-text-03)}[data-size=l][_nghost-%COMP%]   .t-placeholder[_ngcontent-%COMP%]{font:var(--tui-font-text-m);line-height:1.25rem}[data-size=l][_nghost-%COMP%]   .t-placeholder_raised[_ngcontent-%COMP%]{font-size:.8156rem}[data-size=m]._focused[_nghost-%COMP%]:not(._label-outside)   .t-placeholder[_ngcontent-%COMP%], [data-size=l]._focused[_nghost-%COMP%]:not(._label-outside)   .t-placeholder[_ngcontent-%COMP%]{color:var(--tui-text-01)}[tuiWrapper][data-mode=onDark][_ngcontent-%COMP%]   .t-placeholder[_ngcontent-%COMP%]{color:var(--tui-text-02-night)}[data-size=m]._focused[_nghost-%COMP%]:not(._label-outside)   [tuiWrapper][data-mode=onDark][_ngcontent-%COMP%]   .t-placeholder[_ngcontent-%COMP%], [data-size=l]._focused[_nghost-%COMP%]:not(._label-outside)   [tuiWrapper][data-mode=onDark][_ngcontent-%COMP%]   .t-placeholder[_ngcontent-%COMP%]{color:var(--tui-text-01-night)}._focused[_nghost-%COMP%]   [tuiWrapper][data-mode=onDark][_ngcontent-%COMP%]   .t-placeholder[_ngcontent-%COMP%], [data-size=m]._focused._label-outside[_nghost-%COMP%]   [tuiWrapper][data-mode=onDark][_ngcontent-%COMP%]   .t-placeholder[_ngcontent-%COMP%], [data-size=l]._focused._label-outside[_nghost-%COMP%]   [tuiWrapper][data-mode=onDark][_ngcontent-%COMP%]   .t-placeholder[_ngcontent-%COMP%]{color:var(--tui-text-02-night)}[data-size=s][_nghost-%COMP%]   .t-placeholder[_ngcontent-%COMP%]{padding:0 .75rem}[data-size=m][_nghost-%COMP%]   .t-placeholder[_ngcontent-%COMP%]{padding:0 .75rem}[data-size=l][_nghost-%COMP%]   .t-placeholder[_ngcontent-%COMP%]{padding:0 1rem}._label-outside[_nghost-%COMP%]   .t-placeholder[_ngcontent-%COMP%]{overflow:initial;height:auto;white-space:initial}.t-icons[_ngcontent-%COMP%]{position:absolute;top:0;left:0;bottom:0;right:0;display:flex;justify-content:flex-end;pointer-events:none;padding:calc((var(--tui-height) - 1.5rem) / 2) 1rem}[data-size=m][_nghost-%COMP%]   .t-icons[_ngcontent-%COMP%]{padding:calc((var(--tui-height) - 1.5rem) / 2) .625rem}.t-icons[_ngcontent-%COMP%] > [_ngcontent-%COMP%]:not(:first-child){-webkit-margin-start:.25rem;margin-inline-start:.25rem}.t-icon[_ngcontent-%COMP%]{position:relative;display:flex;width:1.5rem;height:1.5rem;align-items:center;justify-content:center;box-sizing:border-box;cursor:pointer;pointer-events:none}.t-icon_left[_ngcontent-%COMP%]{-webkit-margin-end:auto;margin-inline-end:auto}.t-cleaner[_ngcontent-%COMP%]{position:relative;display:flex;width:1.5rem;height:1.5rem;align-items:center;justify-content:center;box-sizing:border-box;cursor:pointer;pointer-events:none;pointer-events:auto}._readonly[_nghost-%COMP%]   .t-cleaner[_ngcontent-%COMP%], ._disabled[_nghost-%COMP%]   .t-cleaner[_ngcontent-%COMP%]{pointer-events:none}.t-caret[_ngcontent-%COMP%]{display:inline-block;height:1rem;width:0}.t-counter[_ngcontent-%COMP%]{position:absolute;right:.75rem;bottom:.5rem;font:var(--tui-font-text-s);pointer-events:none;margin-top:auto;text-align:right;color:var(--tui-text-03)}[data-mode=onDark][_nghost-%COMP%]   .t-counter[_ngcontent-%COMP%]{color:var(--tui-text-03-night)}";
var DEFAULT_ROWS = 20;
var LINE_HEIGHT_M = 20;
var LINE_HEIGHT_L = 24;
var TuiTextareaComponent = class extends AbstractTuiControl {
  constructor(control, cdr, isIOS, mode$, controller, hintOptions) {
    super(control, cdr);
    this.isIOS = isIOS;
    this.mode$ = mode$;
    this.controller = controller;
    this.hintOptions = hintOptions;
    this.rows = DEFAULT_ROWS;
    this.maxLength = null;
    this.expandable = false;
  }
  get labelOutside() {
    return this.controller.labelOutside;
  }
  get nativeFocusableElement() {
    var _a, _b;
    if (this.computedDisabled) {
      return null;
    }
    return ((_a = this.textfield) === null || _a === void 0 ? void 0 : _a.nativeElement) || ((_b = this.focusableElement) === null || _b === void 0 ? void 0 : _b.nativeElement) || null;
  }
  get focused() {
    return tuiIsNativeFocused(this.nativeFocusableElement);
  }
  get appearance() {
    return this.controller.appearance;
  }
  get size() {
    return this.controller.size;
  }
  get borderStart() {
    return this.iconLeftContent ? TUI_ICON_PADDINGS[this.size] : 0;
  }
  get borderEnd() {
    return tuiGetBorder(!!this.iconContent, this.hasCleaner, this.hasTooltip, this.hasCustomContent, this.size);
  }
  get hasCleaner() {
    return this.controller.cleaner && this.hasValue && this.interactive;
  }
  get hasTooltip() {
    var _a;
    return !!((_a = this.hintOptions) === null || _a === void 0 ? void 0 : _a.content) && (this.controller.options.hintOnDisabled || !this.computedDisabled);
  }
  get hasValue() {
    return this.value !== "";
  }
  get hasCounter() {
    return !!this.maxLength && this.interactive;
  }
  get hasPlaceholder() {
    return this.placeholderRaisable || !this.hasValue && !this.hasExampleText;
  }
  get hasCustomContent() {
    return !!this.controller.customContent;
  }
  get iconLeftContent() {
    return this.controller.iconLeft;
  }
  get iconContent() {
    return this.controller.icon;
  }
  get iconCleaner() {
    return this.controller.options.iconCleaner;
  }
  get hasExampleText() {
    var _a;
    return !!((_a = this.textfield) === null || _a === void 0 ? void 0 : _a.nativeElement.placeholder) && this.focused && !this.hasValue && !this.readOnly;
  }
  get computeMaxHeight() {
    return this.expandable ? this.rows * this.lineHeight : null;
  }
  get placeholderRaised() {
    return this.placeholderRaisable && (this.computedFocused && !this.readOnly || this.hasValue);
  }
  get fittedContent() {
    return this.value.slice(0, this.maxLength || Infinity);
  }
  get extraContent() {
    return this.value.slice(this.maxLength || Infinity);
  }
  onFocused(focused) {
    this.updateFocused(focused);
  }
  onValueChange(value) {
    this.value = value;
  }
  onMouseDown(event) {
    if (event.target === this.nativeFocusableElement) {
      return;
    }
    event.preventDefault();
    if (this.nativeFocusableElement) {
      this.nativeFocusableElement.focus();
    }
  }
  getFallbackValue() {
    return "";
  }
  get lineHeight() {
    return this.controller.size === "m" ? LINE_HEIGHT_M : LINE_HEIGHT_L;
  }
  get placeholderRaisable() {
    return this.size !== "s" && !this.controller.labelOutside;
  }
};
TuiTextareaComponent.ɵfac = function TuiTextareaComponent_Factory(t) {
  return new (t || TuiTextareaComponent)(ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(TUI_IS_IOS), ɵɵdirectiveInject(TUI_MODE), ɵɵdirectiveInject(TUI_TEXTFIELD_WATCHED_CONTROLLER), ɵɵdirectiveInject(TuiHintOptionsDirective, 8));
};
TuiTextareaComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiTextareaComponent,
  selectors: [["tui-textarea"]],
  contentQueries: function TuiTextareaComponent_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, TuiTextfieldComponent, 5, ElementRef);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.textfield = _t.first);
    }
  },
  viewQuery: function TuiTextareaComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(_c051, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.focusableElement = _t.first);
    }
  },
  hostVars: 17,
  hostBindings: function TuiTextareaComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("$.data-mode.attr", function TuiTextareaComponent___data_mode_attr_HostBindingHandler() {
        return ctx.mode$;
      })("focusin", function TuiTextareaComponent_focusin_HostBindingHandler() {
        return ctx.onFocused(true);
      })("focusout", function TuiTextareaComponent_focusout_HostBindingHandler() {
        return ctx.onFocused(false);
      });
    }
    if (rf & 2) {
      ɵɵattribute("data-size", ctx.size);
      ɵɵstyleProp("--border-start", ctx.borderStart, "rem")("--border-end", ctx.borderEnd, "rem");
      ɵɵclassProp("_ios", ctx.isIOS)("_expandable", ctx.expandable)("_label-outside", ctx.labelOutside)("_has-tooltip", ctx.hasTooltip)("_has-value", ctx.hasValue)("_has-counter", ctx.hasCounter);
    }
  },
  inputs: {
    rows: "rows",
    maxLength: "maxLength",
    expandable: "expandable"
  },
  features: [ɵɵProvidersFeature([tuiAsFocusableItemAccessor(TuiTextareaComponent), tuiAsControl(TuiTextareaComponent), TEXTFIELD_CONTROLLER_PROVIDER, MODE_PROVIDER]), ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c39,
  decls: 23,
  vars: 25,
  consts: [[4, "ngIf"], ["automation-id", "tui-text-area__wrapper", "tuiWrapper", "", 1, "t-outline", 3, "appearance", "disabled", "focus", "hover", "invalid", "readOnly"], ["automation-id", "tui-text-area__counter", "class", "t-counter", 4, "ngIf"], [1, "t-content", 3, "mousedown"], [1, "t-wrapper"], ["automation-id", "tui-text-area__placeholder", "class", "t-placeholder", 3, "t-placeholder_raised", 4, "ngIf"], ["automation-id", "tui-text-area__scrollbar", 1, "t-box"], [1, "t-input-wrapper"], [1, "t-relative"], ["aria-hidden", "true", 1, "t-pseudo-content"], [3, "textContent"], [1, "t-pseudo-content__extra", 3, "textContent"], [1, "t-caret"], ["automation-id", "tui-text-area__native", 1, "t-input", 3, "disabled", "id", "readOnly", "tuiFocusable", "ngModel", "ngModelChange"], ["focusableElement", ""], [1, "t-icons"], ["class", "t-icon t-icon_left t-textfield-icon", 4, "ngIf"], ["automation-id", "tui-text-area__tooltip", 3, "content", "describeId", 4, "ngIf"], ["class", "t-icon t-textfield-icon", 4, "ngIf"], ["automation-id", "tui-text-area__counter", 1, "t-counter"], ["automation-id", "tui-text-area__placeholder", 1, "t-placeholder"], [1, "t-icon", "t-icon_left", "t-textfield-icon"], ["appearance", "icon", "tuiWrapper", "", 3, "src", 4, "polymorpheusOutlet", "polymorpheusOutletContext"], ["appearance", "icon", "tuiWrapper", "", 3, "src"], [3, "src", 4, "polymorpheusOutlet"], [3, "src"], ["appearance", "icon", "tuiWrapper", "", "class", "t-cleaner", 3, "src", "click.stop", 4, "polymorpheusOutlet", "polymorpheusOutletContext"], ["appearance", "icon", "tuiWrapper", "", 1, "t-cleaner", 3, "src", "click.stop"], ["automation-id", "tui-text-area__tooltip", 3, "content", "describeId"], [1, "t-icon", "t-textfield-icon"]],
  template: function TuiTextareaComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c219);
      ɵɵtemplate(0, TuiTextareaComponent_ng_container_0_Template, 1, 0, "ng-container", 0);
      ɵɵpipe(1, "async");
      ɵɵelementStart(2, "div", 1);
      ɵɵtemplate(3, TuiTextareaComponent_div_3_Template, 2, 2, "div", 2);
      ɵɵelementStart(4, "label", 3);
      ɵɵlistener("mousedown", function TuiTextareaComponent_Template_label_mousedown_4_listener($event) {
        return ctx.onMouseDown($event);
      });
      ɵɵelementStart(5, "div", 4);
      ɵɵtemplate(6, TuiTextareaComponent_div_6_Template, 2, 2, "div", 5);
      ɵɵelementStart(7, "tui-scrollbar", 6)(8, "div", 7)(9, "div", 8)(10, "div", 9);
      ɵɵelement(11, "span", 10)(12, "span", 11)(13, "span", 12);
      ɵɵelementEnd();
      ɵɵelementStart(14, "textarea", 13, 14);
      ɵɵlistener("ngModelChange", function TuiTextareaComponent_Template_textarea_ngModelChange_14_listener($event) {
        return ctx.value = $event;
      });
      ɵɵelementEnd();
      ɵɵprojection(16);
      ɵɵelementEnd()()()();
      ɵɵelementStart(17, "div", 15);
      ɵɵtemplate(18, TuiTextareaComponent_div_18_Template, 2, 4, "div", 16);
      ɵɵtemplate(19, TuiTextareaComponent_ng_container_19_Template, 2, 1, "ng-container", 0);
      ɵɵtemplate(20, TuiTextareaComponent_ng_container_20_Template, 2, 4, "ng-container", 0);
      ɵɵtemplate(21, TuiTextareaComponent_tui_tooltip_21_Template, 1, 2, "tui-tooltip", 17);
      ɵɵtemplate(22, TuiTextareaComponent_div_22_Template, 2, 4, "div", 18);
      ɵɵelementEnd()()();
    }
    if (rf & 2) {
      ɵɵproperty("ngIf", ɵɵpipeBind1(1, 23, ctx.hintOptions == null ? null : ctx.hintOptions.change$));
      ɵɵadvance(2);
      ɵɵproperty("appearance", ctx.appearance)("disabled", ctx.disabled)("focus", ctx.computedFocused)("hover", ctx.pseudoHover)("invalid", ctx.computedInvalid)("readOnly", ctx.readOnly);
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.hasCounter);
      ɵɵadvance(3);
      ɵɵproperty("ngIf", ctx.hasPlaceholder);
      ɵɵadvance(1);
      ɵɵstyleProp("max-height", ctx.computeMaxHeight, "px");
      ɵɵadvance(4);
      ɵɵproperty("textContent", ctx.fittedContent || (ctx.nativeFocusableElement == null ? null : ctx.nativeFocusableElement.placeholder));
      ɵɵadvance(1);
      ɵɵproperty("textContent", ctx.extraContent);
      ɵɵadvance(2);
      ɵɵproperty("disabled", ctx.computedDisabled)("id", ctx.id)("readOnly", ctx.readOnly)("tuiFocusable", ctx.computedFocusable)("ngModel", ctx.value);
      ɵɵadvance(4);
      ɵɵproperty("ngIf", ctx.iconLeftContent);
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.hasCustomContent);
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.hasCleaner);
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.hasTooltip);
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.iconContent);
    }
  },
  dependencies: [TuiScrollbarComponent, TuiSvgComponent, TuiTooltipComponent, NgIf, TuiWrapperDirective, DefaultValueAccessor, TuiFocusableDirective, NgControlStatus, NgModel, PolymorpheusOutletDirective, AsyncPipe],
  styles: ["[_nghost-%COMP%]{position:relative;z-index:0;display:flex;flex-direction:column;min-height:var(--tui-textarea-height);border-radius:var(--tui-radius-m);color:var(--tui-text-01)}[data-mode=onDark][_nghost-%COMP%]{color:var(--tui-text-01-night)}[data-size=s][_nghost-%COMP%]{--tui-height: var(--tui-height-s);--tui-textarea-height: 4.5625rem;font:var(--tui-font-text-s)}[data-size=m][_nghost-%COMP%]{--tui-height: var(--tui-height-m);--tui-textarea-height: 5.5rem;font:var(--tui-font-text-s)}[data-size=l][_nghost-%COMP%]{--tui-height: var(--tui-height-l);--tui-textarea-height: 6.75rem;font:var(--tui-font-text-m)}[data-size=m]._has-counter[_nghost-%COMP%]{--tui-textarea-height: 6.625rem}[data-size=l]._has-counter[_nghost-%COMP%]{--tui-textarea-height: 7.875rem}.t-outline[_ngcontent-%COMP%]{min-height:inherit}.t-content[_ngcontent-%COMP%]{display:block;margin-top:0;margin-bottom:0;min-height:inherit;box-sizing:border-box;overflow:hidden;cursor:text}._disabled[_nghost-%COMP%]   .t-content[_ngcontent-%COMP%]{cursor:auto;opacity:var(--tui-disabled-opacity)}[_nghost-%COMP%]:not(._expandable)   .t-content[_ngcontent-%COMP%]{position:absolute;top:0;left:0;bottom:1px;right:0;min-height:auto}._has-counter[_nghost-%COMP%]:not(._expandable)   .t-content[_ngcontent-%COMP%]{bottom:1.6875rem}._label-outside._has-counter[_nghost-%COMP%]:not(._expandable)   .t-content[_ngcontent-%COMP%]{bottom:1rem}.t-wrapper[_ngcontent-%COMP%]{position:relative;width:100%;height:100%;min-height:inherit;box-sizing:border-box;padding:calc((var(--tui-height) - 1.25rem) / 2) 0}[data-size=l]._label-outside[_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]{padding:calc((var(--tui-height) - 1.5rem) / 2) 0}[data-size=m][_nghost-%COMP%]:not(._label-outside)   .t-wrapper[_ngcontent-%COMP%]{padding:calc((var(--tui-height) - 2.25rem) / 2) 0}[data-size=l][_nghost-%COMP%]:not(._label-outside)   .t-wrapper[_ngcontent-%COMP%]{padding:calc((var(--tui-height) - 2.625rem) / 2) 0}table[data-size=m]._label-outside[_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%], table   [data-size=m]._label-outside[_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]{padding-bottom:.75rem}table[data-size=l]._label-outside[_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%], table   [data-size=l]._label-outside[_nghost-%COMP%]   .t-wrapper[_ngcontent-%COMP%]{padding-bottom:1rem}.t-input-wrapper[_ngcontent-%COMP%]{min-height:inherit;width:100%;flex:1}.t-relative[_ngcontent-%COMP%]{position:relative;min-height:inherit}.t-box[_ngcontent-%COMP%]{display:flex;min-height:calc(100% - 1rem);width:100%}[_nghost-%COMP%]:not(._expandable)   .t-box[_ngcontent-%COMP%]{height:calc(100% - 1rem)}[_nghost-%COMP%]:not(._expandable)._label-outside   .t-box[_ngcontent-%COMP%]{height:100%}._has-counter._expandable[_nghost-%COMP%]   .t-box[_ngcontent-%COMP%]{margin-bottom:1.25rem}[data-size=m][_nghost-%COMP%]:not(._label-outside)   .t-box[_ngcontent-%COMP%]{border-top:1rem solid transparent}[data-size=l][_nghost-%COMP%]:not(._label-outside)   .t-box[_ngcontent-%COMP%]{border-top:1.25rem solid transparent}.t-pseudo-content[_ngcontent-%COMP%]{white-space:pre-wrap;word-wrap:break-word;word-break:keep-all;pointer-events:none;color:transparent;overflow:hidden;border:0 solid transparent;border-inline-start-width:var(--border-start, 0);border-inline-end-width:var(--border-end, 0)}[data-size=s][_nghost-%COMP%]   .t-pseudo-content[_ngcontent-%COMP%], [data-size=m][_nghost-%COMP%]   .t-pseudo-content[_ngcontent-%COMP%]{padding:0 .75rem}[data-size=l][_nghost-%COMP%]   .t-pseudo-content[_ngcontent-%COMP%]{padding:0 1rem}.t-pseudo-content__extra[_ngcontent-%COMP%]{background-color:var(--tui-error-bg-night)}.t-input[_ngcontent-%COMP%]{padding:0;margin:0;border-width:0;border-radius:inherit;background:none;font-size:inherit;line-height:inherit;font-weight:inherit;color:inherit;caret-color:currentColor;-webkit-appearance:none;-moz-appearance:none;appearance:none;word-break:keep-all;-webkit-text-fill-color:currentColor;position:absolute;top:0;left:0;width:100%;height:100%;box-sizing:border-box;resize:none;overflow:hidden;outline:none;border:0 solid transparent;border-inline-start-width:var(--border-start, 0);border-inline-end-width:var(--border-end, 0)}.t-input[_ngcontent-%COMP%]:-webkit-autofill, .t-input[_ngcontent-%COMP%]:-webkit-autofill:hover, .t-input[_ngcontent-%COMP%]:-webkit-autofill:focus{caret-color:var(--tui-base-09);border-radius:inherit;color:inherit!important;background-color:transparent!important;-webkit-text-fill-color:var(--tui-text-01)!important;border-color:var(--tui-autofill);-webkit-box-shadow:0 0 0 100rem var(--tui-autofill) inset!important}@supports (-webkit-touch-callout: none){.t-input[_ngcontent-%COMP%]:active{font-size:1rem}}.t-input[_ngcontent-%COMP%]:not(:last-of-type){display:none}.t-input[_ngcontent-%COMP%]::placeholder{color:var(--tui-text-03);opacity:0}[data-mode=onDark][_nghost-%COMP%]   .t-input[_ngcontent-%COMP%]::placeholder{color:var(--tui-text-03-night)}._focused[_nghost-%COMP%]   .t-input[_ngcontent-%COMP%]:not(:-moz-read-only)::placeholder{opacity:1}._focused[_nghost-%COMP%]   .t-input[_ngcontent-%COMP%]:not(:read-only)::placeholder{opacity:1}[data-size=s][_nghost-%COMP%]   .t-input[_ngcontent-%COMP%], [data-size=m][_nghost-%COMP%]   .t-input[_ngcontent-%COMP%]{padding:0 .75rem}[data-size=l][_nghost-%COMP%]   .t-input[_ngcontent-%COMP%]{padding:0 1rem}[data-mode=onDark]._disabled[_nghost-%COMP%]   .t-input[_ngcontent-%COMP%]{color:var(--tui-text-03-night)}@supports (-webkit-marquee-repetition: infinite) and (object-fit: fill){._ios[_nghost-%COMP%]   .t-input[_ngcontent-%COMP%]{padding-left:.8125rem}}.t-placeholder[_ngcontent-%COMP%]{transition-property:transform,font-size,color,letter-spacing;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;width:100%;-webkit-user-select:none;-moz-user-select:none;user-select:none;font:var(--tui-font-text-s);color:var(--tui-text-02);pointer-events:none;will-change:transform;transform:translateY(0);position:absolute;top:calc(var(--tui-height) / 2 - .625rem);left:0;max-width:100%;border:0 solid transparent;border-inline-start-width:var(--border-start, 0);border-inline-end-width:var(--border-end, 0);box-sizing:border-box}@supports (-webkit-hyphens: none){.t-placeholder[_ngcontent-%COMP%]{will-change:unset;transition-property:transform,color,letter-spacing}}.t-placeholder_raised[_ngcontent-%COMP%]{transform:translateY(-.625rem)}[data-size=m][_nghost-%COMP%]   .t-placeholder_raised[_ngcontent-%COMP%]{font:var(--tui-font-text-xs);line-height:1.25rem;transform:translateY(-.5rem);letter-spacing:.025rem}._invalid[_nghost-%COMP%]:not(._focused)   .t-placeholder_raised[_ngcontent-%COMP%], ._invalid[_nghost-%COMP%]:not(._focused):hover   .t-placeholder_raised[_ngcontent-%COMP%]{color:var(--tui-error-fill)}._invalid[_nghost-%COMP%]:not(._focused)   [tuiWrapper][data-mode=onDark][_ngcontent-%COMP%]   .t-placeholder_raised[_ngcontent-%COMP%], ._invalid[_nghost-%COMP%]:not(._focused):hover   [tuiWrapper][data-mode=onDark][_ngcontent-%COMP%]   .t-placeholder_raised[_ngcontent-%COMP%]{color:var(--tui-error-fill-night)}._focused[_nghost-%COMP%]   .t-placeholder[_ngcontent-%COMP%], [data-size=m]._focused._label-outside[_nghost-%COMP%]   .t-placeholder[_ngcontent-%COMP%], [data-size=l]._focused._label-outside[_nghost-%COMP%]   .t-placeholder[_ngcontent-%COMP%]{color:var(--tui-text-03)}[data-size=l][_nghost-%COMP%]   .t-placeholder[_ngcontent-%COMP%]{font:var(--tui-font-text-m);line-height:1.25rem}[data-size=l][_nghost-%COMP%]   .t-placeholder_raised[_ngcontent-%COMP%]{font-size:.8156rem}[data-size=m]._focused[_nghost-%COMP%]:not(._label-outside)   .t-placeholder[_ngcontent-%COMP%], [data-size=l]._focused[_nghost-%COMP%]:not(._label-outside)   .t-placeholder[_ngcontent-%COMP%]{color:var(--tui-text-01)}[tuiWrapper][data-mode=onDark][_ngcontent-%COMP%]   .t-placeholder[_ngcontent-%COMP%]{color:var(--tui-text-02-night)}[data-size=m]._focused[_nghost-%COMP%]:not(._label-outside)   [tuiWrapper][data-mode=onDark][_ngcontent-%COMP%]   .t-placeholder[_ngcontent-%COMP%], [data-size=l]._focused[_nghost-%COMP%]:not(._label-outside)   [tuiWrapper][data-mode=onDark][_ngcontent-%COMP%]   .t-placeholder[_ngcontent-%COMP%]{color:var(--tui-text-01-night)}._focused[_nghost-%COMP%]   [tuiWrapper][data-mode=onDark][_ngcontent-%COMP%]   .t-placeholder[_ngcontent-%COMP%], [data-size=m]._focused._label-outside[_nghost-%COMP%]   [tuiWrapper][data-mode=onDark][_ngcontent-%COMP%]   .t-placeholder[_ngcontent-%COMP%], [data-size=l]._focused._label-outside[_nghost-%COMP%]   [tuiWrapper][data-mode=onDark][_ngcontent-%COMP%]   .t-placeholder[_ngcontent-%COMP%]{color:var(--tui-text-02-night)}[data-size=s][_nghost-%COMP%]   .t-placeholder[_ngcontent-%COMP%]{padding:0 .75rem}[data-size=m][_nghost-%COMP%]   .t-placeholder[_ngcontent-%COMP%]{padding:0 .75rem}[data-size=l][_nghost-%COMP%]   .t-placeholder[_ngcontent-%COMP%]{padding:0 1rem}._label-outside[_nghost-%COMP%]   .t-placeholder[_ngcontent-%COMP%]{overflow:initial;height:auto;white-space:initial}.t-icons[_ngcontent-%COMP%]{position:absolute;top:0;left:0;bottom:0;right:0;display:flex;justify-content:flex-end;pointer-events:none;padding:calc((var(--tui-height) - 1.5rem) / 2) 1rem}[data-size=m][_nghost-%COMP%]   .t-icons[_ngcontent-%COMP%]{padding:calc((var(--tui-height) - 1.5rem) / 2) .625rem}.t-icons[_ngcontent-%COMP%] > [_ngcontent-%COMP%]:not(:first-child){-webkit-margin-start:.25rem;margin-inline-start:.25rem}.t-icon[_ngcontent-%COMP%]{position:relative;display:flex;width:1.5rem;height:1.5rem;align-items:center;justify-content:center;box-sizing:border-box;cursor:pointer;pointer-events:none}.t-icon_left[_ngcontent-%COMP%]{-webkit-margin-end:auto;margin-inline-end:auto}.t-cleaner[_ngcontent-%COMP%]{position:relative;display:flex;width:1.5rem;height:1.5rem;align-items:center;justify-content:center;box-sizing:border-box;cursor:pointer;pointer-events:none;pointer-events:auto}._readonly[_nghost-%COMP%]   .t-cleaner[_ngcontent-%COMP%], ._disabled[_nghost-%COMP%]   .t-cleaner[_ngcontent-%COMP%]{pointer-events:none}.t-caret[_ngcontent-%COMP%]{display:inline-block;height:1rem;width:0}.t-counter[_ngcontent-%COMP%]{position:absolute;right:.75rem;bottom:.5rem;font:var(--tui-font-text-s);pointer-events:none;margin-top:auto;text-align:right;color:var(--tui-text-03)}[data-mode=onDark][_nghost-%COMP%]   .t-counter[_ngcontent-%COMP%]{color:var(--tui-text-03-night)}"],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiTextareaComponent, [{
    type: Component,
    args: [{
      selector: "tui-textarea",
      templateUrl: "./textarea.template.html",
      styleUrls: ["./textarea.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [tuiAsFocusableItemAccessor(TuiTextareaComponent), tuiAsControl(TuiTextareaComponent), TEXTFIELD_CONTROLLER_PROVIDER, MODE_PROVIDER],
      host: {
        "($.data-mode.attr)": "mode$",
        "[class._ios]": "isIOS"
      }
    }]
  }], function() {
    return [{
      type: NgControl,
      decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NgControl]
      }]
    }, {
      type: ChangeDetectorRef,
      decorators: [{
        type: Inject,
        args: [ChangeDetectorRef]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_IS_IOS]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Inject,
        args: [TUI_MODE]
      }]
    }, {
      type: TuiTextfieldController,
      decorators: [{
        type: Inject,
        args: [TUI_TEXTFIELD_WATCHED_CONTROLLER]
      }]
    }, {
      type: TuiHintOptionsDirective,
      decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [TuiHintOptionsDirective]
      }]
    }];
  }, {
    focusableElement: [{
      type: ViewChild,
      args: ["focusableElement"]
    }],
    textfield: [{
      type: ContentChild,
      args: [TuiTextfieldComponent, {
        read: ElementRef
      }]
    }],
    rows: [{
      type: Input
    }],
    maxLength: [{
      type: Input
    }],
    expandable: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["class._expandable"]
    }],
    labelOutside: [{
      type: HostBinding,
      args: ["class._label-outside"]
    }],
    size: [{
      type: HostBinding,
      args: ["attr.data-size"]
    }],
    borderStart: [{
      type: HostBinding,
      args: ["style.--border-start.rem"]
    }],
    borderEnd: [{
      type: HostBinding,
      args: ["style.--border-end.rem"]
    }],
    hasTooltip: [{
      type: HostBinding,
      args: ["class._has-tooltip"]
    }],
    hasValue: [{
      type: HostBinding,
      args: ["class._has-value"]
    }],
    hasCounter: [{
      type: HostBinding,
      args: ["class._has-counter"]
    }],
    onFocused: [{
      type: HostListener,
      args: ["focusin", ["true"]]
    }, {
      type: HostListener,
      args: ["focusout", ["false"]]
    }]
  });
})();
var TuiTextareaDirective = class extends AbstractTuiTextfieldHost {
  onValueChange(value) {
    this.host.onValueChange(value);
  }
};
TuiTextareaDirective.ɵfac = function() {
  let ɵTuiTextareaDirective_BaseFactory;
  return function TuiTextareaDirective_Factory(t) {
    return (ɵTuiTextareaDirective_BaseFactory || (ɵTuiTextareaDirective_BaseFactory = ɵɵgetInheritedFactory(TuiTextareaDirective)))(t || TuiTextareaDirective);
  };
}();
TuiTextareaDirective.ɵdir = ɵɵdefineDirective({
  type: TuiTextareaDirective,
  selectors: [["tui-textarea"]],
  features: [ɵɵProvidersFeature([tuiAsTextfieldHost(TuiTextareaDirective)]), ɵɵInheritDefinitionFeature]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiTextareaDirective, [{
    type: Directive,
    args: [{
      selector: "tui-textarea",
      providers: [tuiAsTextfieldHost(TuiTextareaDirective)]
    }]
  }], null, null);
})();
var TuiTextAreaComponent = class extends TuiTextareaComponent {
};
TuiTextAreaComponent.ɵfac = function() {
  let ɵTuiTextAreaComponent_BaseFactory;
  return function TuiTextAreaComponent_Factory(t) {
    return (ɵTuiTextAreaComponent_BaseFactory || (ɵTuiTextAreaComponent_BaseFactory = ɵɵgetInheritedFactory(TuiTextAreaComponent)))(t || TuiTextAreaComponent);
  };
}();
TuiTextAreaComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiTextAreaComponent,
  selectors: [["tui-text-area"]],
  hostVars: 2,
  hostBindings: function TuiTextAreaComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("$.data-mode.attr", function TuiTextAreaComponent___data_mode_attr_HostBindingHandler() {
        return ctx.mode$;
      });
    }
    if (rf & 2) {
      ɵɵclassProp("_ios", ctx.isIOS);
    }
  },
  features: [ɵɵProvidersFeature([tuiAsFocusableItemAccessor(TuiTextAreaComponent), tuiAsControl(TuiTextAreaComponent), TEXTFIELD_CONTROLLER_PROVIDER, MODE_PROVIDER]), ɵɵInheritDefinitionFeature],
  ngContentSelectors: _c39,
  decls: 23,
  vars: 25,
  consts: [[4, "ngIf"], ["automation-id", "tui-text-area__wrapper", "tuiWrapper", "", 1, "t-outline", 3, "appearance", "disabled", "focus", "hover", "invalid", "readOnly"], ["automation-id", "tui-text-area__counter", "class", "t-counter", 4, "ngIf"], [1, "t-content", 3, "mousedown"], [1, "t-wrapper"], ["automation-id", "tui-text-area__placeholder", "class", "t-placeholder", 3, "t-placeholder_raised", 4, "ngIf"], ["automation-id", "tui-text-area__scrollbar", 1, "t-box"], [1, "t-input-wrapper"], [1, "t-relative"], ["aria-hidden", "true", 1, "t-pseudo-content"], [3, "textContent"], [1, "t-pseudo-content__extra", 3, "textContent"], [1, "t-caret"], ["automation-id", "tui-text-area__native", 1, "t-input", 3, "disabled", "id", "readOnly", "tuiFocusable", "ngModel", "ngModelChange"], ["focusableElement", ""], [1, "t-icons"], ["class", "t-icon t-icon_left t-textfield-icon", 4, "ngIf"], ["automation-id", "tui-text-area__tooltip", 3, "content", "describeId", 4, "ngIf"], ["class", "t-icon t-textfield-icon", 4, "ngIf"], ["automation-id", "tui-text-area__counter", 1, "t-counter"], ["automation-id", "tui-text-area__placeholder", 1, "t-placeholder"], [1, "t-icon", "t-icon_left", "t-textfield-icon"], ["appearance", "icon", "tuiWrapper", "", 3, "src", 4, "polymorpheusOutlet", "polymorpheusOutletContext"], ["appearance", "icon", "tuiWrapper", "", 3, "src"], [3, "src", 4, "polymorpheusOutlet"], [3, "src"], ["appearance", "icon", "tuiWrapper", "", "class", "t-cleaner", 3, "src", "click.stop", 4, "polymorpheusOutlet", "polymorpheusOutletContext"], ["appearance", "icon", "tuiWrapper", "", 1, "t-cleaner", 3, "src", "click.stop"], ["automation-id", "tui-text-area__tooltip", 3, "content", "describeId"], [1, "t-icon", "t-textfield-icon"]],
  template: function TuiTextAreaComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c219);
      ɵɵtemplate(0, TuiTextAreaComponent_ng_container_0_Template, 1, 0, "ng-container", 0);
      ɵɵpipe(1, "async");
      ɵɵelementStart(2, "div", 1);
      ɵɵtemplate(3, TuiTextAreaComponent_div_3_Template, 2, 2, "div", 2);
      ɵɵelementStart(4, "label", 3);
      ɵɵlistener("mousedown", function TuiTextAreaComponent_Template_label_mousedown_4_listener($event) {
        return ctx.onMouseDown($event);
      });
      ɵɵelementStart(5, "div", 4);
      ɵɵtemplate(6, TuiTextAreaComponent_div_6_Template, 2, 2, "div", 5);
      ɵɵelementStart(7, "tui-scrollbar", 6)(8, "div", 7)(9, "div", 8)(10, "div", 9);
      ɵɵelement(11, "span", 10)(12, "span", 11)(13, "span", 12);
      ɵɵelementEnd();
      ɵɵelementStart(14, "textarea", 13, 14);
      ɵɵlistener("ngModelChange", function TuiTextAreaComponent_Template_textarea_ngModelChange_14_listener($event) {
        return ctx.value = $event;
      });
      ɵɵelementEnd();
      ɵɵprojection(16);
      ɵɵelementEnd()()()();
      ɵɵelementStart(17, "div", 15);
      ɵɵtemplate(18, TuiTextAreaComponent_div_18_Template, 2, 4, "div", 16);
      ɵɵtemplate(19, TuiTextAreaComponent_ng_container_19_Template, 2, 1, "ng-container", 0);
      ɵɵtemplate(20, TuiTextAreaComponent_ng_container_20_Template, 2, 4, "ng-container", 0);
      ɵɵtemplate(21, TuiTextAreaComponent_tui_tooltip_21_Template, 1, 2, "tui-tooltip", 17);
      ɵɵtemplate(22, TuiTextAreaComponent_div_22_Template, 2, 4, "div", 18);
      ɵɵelementEnd()()();
    }
    if (rf & 2) {
      ɵɵproperty("ngIf", ɵɵpipeBind1(1, 23, ctx.hintOptions == null ? null : ctx.hintOptions.change$));
      ɵɵadvance(2);
      ɵɵproperty("appearance", ctx.appearance)("disabled", ctx.disabled)("focus", ctx.computedFocused)("hover", ctx.pseudoHover)("invalid", ctx.computedInvalid)("readOnly", ctx.readOnly);
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.hasCounter);
      ɵɵadvance(3);
      ɵɵproperty("ngIf", ctx.hasPlaceholder);
      ɵɵadvance(1);
      ɵɵstyleProp("max-height", ctx.computeMaxHeight, "px");
      ɵɵadvance(4);
      ɵɵproperty("textContent", ctx.fittedContent || (ctx.nativeFocusableElement == null ? null : ctx.nativeFocusableElement.placeholder));
      ɵɵadvance(1);
      ɵɵproperty("textContent", ctx.extraContent);
      ɵɵadvance(2);
      ɵɵproperty("disabled", ctx.computedDisabled)("id", ctx.id)("readOnly", ctx.readOnly)("tuiFocusable", ctx.computedFocusable)("ngModel", ctx.value);
      ɵɵadvance(4);
      ɵɵproperty("ngIf", ctx.iconLeftContent);
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.hasCustomContent);
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.hasCleaner);
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.hasTooltip);
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.iconContent);
    }
  },
  dependencies: [TuiScrollbarComponent, TuiSvgComponent, TuiTooltipComponent, NgIf, TuiWrapperDirective, DefaultValueAccessor, TuiFocusableDirective, NgControlStatus, NgModel, PolymorpheusOutletDirective, AsyncPipe],
  styles: [_c47],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiTextAreaComponent, [{
    type: Component,
    args: [{
      selector: "tui-text-area",
      templateUrl: "./textarea.template.html",
      styleUrls: ["./textarea.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [tuiAsFocusableItemAccessor(TuiTextAreaComponent), tuiAsControl(TuiTextAreaComponent), TEXTFIELD_CONTROLLER_PROVIDER, MODE_PROVIDER],
      host: {
        "($.data-mode.attr)": "mode$",
        "[class._ios]": "isIOS"
      }
    }]
  }], null, null);
})();
var TuiTextAreaDirective = class extends TuiTextareaDirective {
};
TuiTextAreaDirective.ɵfac = function() {
  let ɵTuiTextAreaDirective_BaseFactory;
  return function TuiTextAreaDirective_Factory(t) {
    return (ɵTuiTextAreaDirective_BaseFactory || (ɵTuiTextAreaDirective_BaseFactory = ɵɵgetInheritedFactory(TuiTextAreaDirective)))(t || TuiTextAreaDirective);
  };
}();
TuiTextAreaDirective.ɵdir = ɵɵdefineDirective({
  type: TuiTextAreaDirective,
  selectors: [["tui-text-area"]],
  features: [ɵɵProvidersFeature([tuiAsTextfieldHost(TuiTextAreaDirective)]), ɵɵInheritDefinitionFeature]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiTextAreaDirective, [{
    type: Directive,
    args: [{
      selector: "tui-text-area",
      providers: [tuiAsTextfieldHost(TuiTextAreaDirective)]
    }]
  }], null, null);
})();
var TuiTextAreaModule = class {
};
TuiTextAreaModule.ɵfac = function TuiTextAreaModule_Factory(t) {
  return new (t || TuiTextAreaModule)();
};
TuiTextAreaModule.ɵmod = ɵɵdefineNgModule({
  type: TuiTextAreaModule,
  declarations: [TuiTextAreaComponent, TuiTextAreaDirective],
  imports: [CommonModule, FormsModule, TuiFocusableModule, TuiScrollbarModule, TuiTooltipModule, TuiWrapperModule, TuiSvgModule, TuiPrimitiveTextfieldModule, PolymorpheusModule],
  exports: [TuiTextAreaComponent, TuiTextAreaDirective, TuiTextfieldComponent]
});
TuiTextAreaModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, FormsModule, TuiFocusableModule, TuiScrollbarModule, TuiTooltipModule, TuiWrapperModule, TuiSvgModule, TuiPrimitiveTextfieldModule, PolymorpheusModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiTextAreaModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, FormsModule, TuiFocusableModule, TuiScrollbarModule, TuiTooltipModule, TuiWrapperModule, TuiSvgModule, TuiPrimitiveTextfieldModule, PolymorpheusModule],
      declarations: [TuiTextAreaComponent, TuiTextAreaDirective],
      exports: [TuiTextAreaComponent, TuiTextAreaDirective, TuiTextfieldComponent]
    }]
  }], null, null);
})();
var TuiTextareaModule = class {
};
TuiTextareaModule.ɵfac = function TuiTextareaModule_Factory(t) {
  return new (t || TuiTextareaModule)();
};
TuiTextareaModule.ɵmod = ɵɵdefineNgModule({
  type: TuiTextareaModule,
  declarations: [TuiTextareaComponent, TuiTextareaDirective],
  imports: [CommonModule, FormsModule, TuiFocusableModule, TuiScrollbarModule, TuiTooltipModule, TuiWrapperModule, TuiSvgModule, TuiPrimitiveTextfieldModule, PolymorpheusModule],
  exports: [TuiTextareaComponent, TuiTextareaDirective, TuiTextfieldComponent]
});
TuiTextareaModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, FormsModule, TuiFocusableModule, TuiScrollbarModule, TuiTooltipModule, TuiWrapperModule, TuiSvgModule, TuiPrimitiveTextfieldModule, PolymorpheusModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiTextareaModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, FormsModule, TuiFocusableModule, TuiScrollbarModule, TuiTooltipModule, TuiWrapperModule, TuiSvgModule, TuiPrimitiveTextfieldModule, PolymorpheusModule],
      declarations: [TuiTextareaComponent, TuiTextareaDirective],
      exports: [TuiTextareaComponent, TuiTextareaDirective, TuiTextfieldComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-tiles.js
var _c052 = ["*"];
var _c137 = ["wrapper"];
var TuiTilesComponent = class {
  constructor(el) {
    this.el = el;
    this.el$ = new Subject();
    this.debounce = 0;
    this.orderChange = this.el$.pipe(debounce(() => timer(this.debounce)), filter(this.filter.bind(this)), map((element) => this.reorder(element)));
    this.element = null;
    this.order$ = new BehaviorSubject(/* @__PURE__ */ new Map());
  }
  set order(map2) {
    this.order$.next(map2);
  }
  get order() {
    return this.order$.value;
  }
  rearrange(element) {
    this.el$.next(element);
  }
  filter(element) {
    return !!this.element && !!element && this.element !== element;
  }
  reorder(element) {
    var _a, _b;
    const elements = Array.from(this.el.nativeElement.children);
    const currentIndex = elements.indexOf(this.element || element);
    const newIndex = elements.indexOf(element);
    const order = this.order.size ? new Map(this.order) : new Map(elements.map((_, index) => [index, index]));
    const dragged = (_a = order.get(currentIndex)) !== null && _a !== void 0 ? _a : currentIndex;
    const placement = (_b = order.get(newIndex)) !== null && _b !== void 0 ? _b : newIndex;
    order.set(currentIndex, placement);
    order.set(newIndex, dragged);
    this.order$.next(order);
    return order;
  }
};
TuiTilesComponent.ɵfac = function TuiTilesComponent_Factory(t) {
  return new (t || TuiTilesComponent)(ɵɵdirectiveInject(ElementRef));
};
TuiTilesComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiTilesComponent,
  selectors: [["tui-tiles"]],
  hostVars: 2,
  hostBindings: function TuiTilesComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("pointerleave.silent", function TuiTilesComponent_pointerleave_silent_HostBindingHandler() {
        return ctx.rearrange();
      });
    }
    if (rf & 2) {
      ɵɵclassProp("_dragged", ctx.element);
    }
  },
  inputs: {
    debounce: "debounce",
    order: "order"
  },
  outputs: {
    orderChange: "orderChange"
  },
  features: [ɵɵProvidersFeature([TuiDestroyService, TuiResizeService, MutationObserverService, {
    provide: MUTATION_OBSERVER_INIT,
    useValue: {
      childList: true
    }
  }])],
  ngContentSelectors: _c052,
  decls: 1,
  vars: 0,
  template: function TuiTilesComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵprojection(0);
    }
  },
  styles: ["tui-tiles{position:relative;z-index:0;display:grid;grid-auto-flow:dense;justify-items:stretch}tui-tiles._dragged tui-tile>.t-wrapper{pointer-events:none}tui-tiles._dragged tui-tile:not(._dragged)>.t-wrapper{transition-property:all;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;transition-delay:1ms}tui-tiles:not(._dragged) tui-tile._dragged>.t-wrapper{transition-property:all;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;transition-delay:1ms}tui-tile>.t-wrapper{position:absolute;z-index:0;border-radius:inherit}tui-tile._dragged>.t-wrapper{z-index:1;transition:none}\n"],
  encapsulation: 2,
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiTilesComponent, [{
    type: Component,
    args: [{
      selector: "tui-tiles",
      template: "<ng-content></ng-content>",
      styleUrls: ["./tiles.style.less"],
      encapsulation: ViewEncapsulation$1.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [TuiDestroyService, TuiResizeService, MutationObserverService, {
        provide: MUTATION_OBSERVER_INIT,
        useValue: {
          childList: true
        }
      }]
    }]
  }], function() {
    return [{
      type: ElementRef,
      decorators: [{
        type: Inject,
        args: [ElementRef]
      }]
    }];
  }, {
    debounce: [{
      type: Input
    }],
    order: [{
      type: Input
    }],
    orderChange: [{
      type: Output
    }],
    element: [{
      type: HostBinding,
      args: ["class._dragged"]
    }],
    rearrange: [{
      type: HostListener,
      args: ["pointerleave.silent"]
    }]
  });
})();
var TuiTileService = class {
  constructor(el, tiles, resize$, mutation$) {
    this.el = el;
    this.tiles = tiles;
    this.resize$ = resize$;
    this.mutation$ = mutation$;
    this.sub = new Subscription();
    this.offset$ = new BehaviorSubject([NaN, NaN]);
    this.position$ = combineLatest([this.offset$.pipe(distinctUntilChanged(tuiArrayShallowEquals)), this.resize$.pipe(startWith(null)), this.mutation$.pipe(startWith(null)), this.tiles.order$.pipe(debounceTime(0))]).pipe(map(([offset]) => offset));
  }
  init(element) {
    this.sub.add(this.position$.subscribe((offset) => {
      this.setPosition(element, offset);
      this.setRect(element, offset);
    }));
  }
  setOffset(offset) {
    this.offset$.next(offset);
  }
  ngOnDestroy() {
    this.sub.unsubscribe();
  }
  getRect([left, top]) {
    return {
      top: Number.isNaN(top) ? this.el.nativeElement.offsetTop : top,
      left: Number.isNaN(left) ? this.el.nativeElement.offsetLeft : left,
      width: this.el.nativeElement.clientWidth,
      height: this.el.nativeElement.clientHeight,
      right: NaN,
      bottom: NaN
    };
  }
  setRect({
    style
  }, offset) {
    const {
      top,
      left,
      width,
      height
    } = this.getRect(offset);
    style.top = tuiPx(top);
    style.left = tuiPx(left);
    style.width = tuiPx(width);
    style.height = tuiPx(height);
  }
  setPosition(element, [left]) {
    if (!Number.isNaN(left)) {
      element.style.setProperty("position", "fixed");
      return;
    }
    const {
      style
    } = element;
    const rect = element.getBoundingClientRect();
    const host = this.el.nativeElement.getBoundingClientRect();
    style.removeProperty("position");
    style.top = tuiPx(rect.top - host.top + this.el.nativeElement.offsetTop);
    style.left = tuiPx(rect.left - host.left + this.el.nativeElement.offsetLeft);
  }
};
TuiTileService.ɵfac = function TuiTileService_Factory(t) {
  return new (t || TuiTileService)(ɵɵinject(ElementRef), ɵɵinject(TuiTilesComponent), ɵɵinject(TuiResizeService), ɵɵinject(MutationObserverService));
};
TuiTileService.ɵprov = ɵɵdefineInjectable({
  token: TuiTileService,
  factory: TuiTileService.ɵfac
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiTileService, [{
    type: Injectable
  }], function() {
    return [{
      type: ElementRef,
      decorators: [{
        type: Inject,
        args: [ElementRef]
      }]
    }, {
      type: TuiTilesComponent,
      decorators: [{
        type: Inject,
        args: [TuiTilesComponent]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Inject,
        args: [TuiResizeService]
      }]
    }, {
      type: Observable,
      decorators: [{
        type: Inject,
        args: [MutationObserverService]
      }]
    }];
  }, null);
})();
var TuiTileComponent = class {
  constructor(service, el, tiles) {
    this.service = service;
    this.el = el;
    this.tiles = tiles;
    this.width = 1;
    this.height = 1;
    this.dragged = false;
  }
  get column() {
    return `span var(--tui-width, ${this.width})`;
  }
  get row() {
    return `span var(--tui-height, ${this.height})`;
  }
  get element() {
    return this.el.nativeElement;
  }
  onEnter() {
    this.tiles.rearrange(this.element);
  }
  onDrag(offset) {
    const dragged = !Number.isNaN(offset[0]);
    this.dragged = this.dragged || dragged;
    this.tiles.element = dragged ? this.element : null;
    this.service.setOffset(offset);
  }
  onTransitionEnd() {
    this.dragged = false;
  }
  ngAfterViewInit() {
    if (this.wrapper) {
      this.service.init(this.wrapper.nativeElement);
    }
  }
  ngOnDestroy() {
    if (this.tiles.element === this.element) {
      this.tiles.element = null;
    }
  }
};
TuiTileComponent.ɵfac = function TuiTileComponent_Factory(t) {
  return new (t || TuiTileComponent)(ɵɵdirectiveInject(TuiTileService), ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(TuiTilesComponent));
};
TuiTileComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiTileComponent,
  selectors: [["tui-tile"]],
  viewQuery: function TuiTileComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(_c137, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.wrapper = _t.first);
    }
  },
  hostVars: 6,
  hostBindings: function TuiTileComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("pointerenter", function TuiTileComponent_pointerenter_HostBindingHandler() {
        return ctx.onEnter();
      });
    }
    if (rf & 2) {
      ɵɵstyleProp("grid-column", ctx.column)("grid-row", ctx.row);
      ɵɵclassProp("_dragged", ctx.dragged);
    }
  },
  inputs: {
    width: "width",
    height: "height"
  },
  features: [ɵɵProvidersFeature([TuiTileService])],
  ngContentSelectors: _c052,
  decls: 3,
  vars: 0,
  consts: [[1, "t-wrapper", 3, "transitionend.self"], ["wrapper", ""]],
  template: function TuiTileComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef();
      ɵɵelementStart(0, "div", 0, 1);
      ɵɵlistener("transitionend.self", function TuiTileComponent_Template_div_transitionend_self_0_listener() {
        return ctx.onTransitionEnd();
      });
      ɵɵprojection(2);
      ɵɵelementEnd();
    }
  },
  encapsulation: 2,
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiTileComponent, [{
    type: Component,
    args: [{
      selector: "tui-tile",
      templateUrl: "./tile.template.html",
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [TuiTileService]
    }]
  }], function() {
    return [{
      type: TuiTileService,
      decorators: [{
        type: Inject,
        args: [TuiTileService]
      }]
    }, {
      type: ElementRef,
      decorators: [{
        type: Inject,
        args: [ElementRef]
      }]
    }, {
      type: TuiTilesComponent,
      decorators: [{
        type: Inject,
        args: [TuiTilesComponent]
      }]
    }];
  }, {
    wrapper: [{
      type: ViewChild,
      args: ["wrapper"]
    }],
    width: [{
      type: Input
    }],
    height: [{
      type: Input
    }],
    dragged: [{
      type: HostBinding,
      args: ["class._dragged"]
    }],
    column: [{
      type: HostBinding,
      args: ["style.gridColumn"]
    }],
    row: [{
      type: HostBinding,
      args: ["style.gridRow"]
    }],
    onEnter: [{
      type: HostListener,
      args: ["pointerenter"]
    }]
  });
})();
function isInteracting(x = NaN) {
  return !Number.isNaN(x) || !Number.isNaN(this["x"]);
}
function isDragging() {
  return !Number.isNaN(this["x"]);
}
var TuiTileHandleDirective = class {
  constructor(tile) {
    this.tile = tile;
    this.x = NaN;
    this.y = NaN;
  }
  onStart(event) {
    const target = tuiGetActualTarget(event);
    const {
      x,
      y,
      pointerId
    } = event;
    if (tuiIsElement(target)) {
      target.releasePointerCapture(pointerId);
    }
    this.onPointer(x, y);
  }
  onPointer(x = NaN, y = NaN) {
    const {
      left,
      top
    } = this.tile.element.getBoundingClientRect();
    this.x = x - left;
    this.y = y - top;
    this.tile.onDrag([NaN, NaN]);
  }
  onMove(x, y) {
    this.tile.onDrag([x - this.x, y - this.y]);
  }
};
TuiTileHandleDirective.ɵfac = function TuiTileHandleDirective_Factory(t) {
  return new (t || TuiTileHandleDirective)(ɵɵdirectiveInject(TuiTileComponent));
};
TuiTileHandleDirective.ɵdir = ɵɵdefineDirective({
  type: TuiTileHandleDirective,
  selectors: [["", "tuiTileHandle", ""]],
  hostVars: 4,
  hostBindings: function TuiTileHandleDirective_HostBindings(rf, ctx) {
    if (rf & 1) {
      ɵɵlistener("pointerdown.silent", function TuiTileHandleDirective_pointerdown_silent_HostBindingHandler($event) {
        return ctx.onStart($event);
      })("pointerup.silent", function TuiTileHandleDirective_pointerup_silent_HostBindingHandler() {
        return ctx.onPointer();
      }, false, ɵɵresolveDocument)("pointermove.silent", function TuiTileHandleDirective_pointermove_silent_HostBindingHandler($event) {
        return ctx.onMove($event.x, $event.y);
      }, false, ɵɵresolveDocument);
    }
    if (rf & 2) {
      ɵɵstyleProp("touch-action", "none")("user-select", "none");
    }
  }
});
__decorate([shouldCall(isInteracting)], TuiTileHandleDirective.prototype, "onPointer", null);
__decorate([shouldCall(isDragging)], TuiTileHandleDirective.prototype, "onMove", null);
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiTileHandleDirective, [{
    type: Directive,
    args: [{
      selector: "[tuiTileHandle]",
      host: {
        "[style.touchAction]": '"none"',
        "[style.userSelect]": '"none"'
      }
    }]
  }], function() {
    return [{
      type: TuiTileComponent,
      decorators: [{
        type: Inject,
        args: [TuiTileComponent]
      }]
    }];
  }, {
    onStart: [{
      type: HostListener,
      args: ["pointerdown.silent", ["$event"]]
    }],
    onPointer: [{
      type: HostListener,
      args: ["document:pointerup.silent"]
    }],
    onMove: [{
      type: HostListener,
      args: ["document:pointermove.silent", ["$event.x", "$event.y"]]
    }]
  });
})();
var TuiTilesModule = class {
};
TuiTilesModule.ɵfac = function TuiTilesModule_Factory(t) {
  return new (t || TuiTilesModule)();
};
TuiTilesModule.ɵmod = ɵɵdefineNgModule({
  type: TuiTilesModule,
  declarations: [TuiTilesComponent, TuiTileComponent, TuiTileHandleDirective],
  exports: [TuiTilesComponent, TuiTileComponent, TuiTileHandleDirective]
});
TuiTilesModule.ɵinj = ɵɵdefineInjector({});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiTilesModule, [{
    type: NgModule,
    args: [{
      declarations: [TuiTilesComponent, TuiTileComponent, TuiTileHandleDirective],
      exports: [TuiTilesComponent, TuiTileComponent, TuiTileHandleDirective]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-toggle.js
var _c053 = ["focusableElement"];
function TuiToggleComponent_tui_loader_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "tui-loader", 7);
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵproperty("inheritColor", true)("showLoader", ctx_r0.value)("size", ctx_r0.loaderSize);
  }
}
function TuiToggleComponent_span_3_tui_svg_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "tui-svg", 10);
  }
  if (rf & 2) {
    const src_r6 = ctx.polymorpheusOutlet;
    ɵɵproperty("src", src_r6);
  }
}
var _c138 = function(a0) {
  return {
    $implicit: a0
  };
};
function TuiToggleComponent_span_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "span", 8);
    ɵɵtemplate(1, TuiToggleComponent_span_3_tui_svg_1_Template, 1, 1, "tui-svg", 9);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("polymorpheusOutlet", ctx_r1.iconOn)("polymorpheusOutletContext", ɵɵpureFunction1(2, _c138, ctx_r1.size));
  }
}
function TuiToggleComponent_tui_loader_5_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "tui-loader", 7);
  }
  if (rf & 2) {
    const ctx_r2 = ɵɵnextContext();
    ɵɵproperty("inheritColor", true)("showLoader", !ctx_r2.value)("size", ctx_r2.loaderSize);
  }
}
function TuiToggleComponent_span_6_tui_svg_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "tui-svg", 12);
  }
  if (rf & 2) {
    const src_r8 = ctx.polymorpheusOutlet;
    ɵɵproperty("src", src_r8);
  }
}
function TuiToggleComponent_span_6_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "span", 8);
    ɵɵtemplate(1, TuiToggleComponent_span_6_tui_svg_1_Template, 1, 1, "tui-svg", 11);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r3 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("polymorpheusOutlet", ctx_r3.iconOff)("polymorpheusOutletContext", ɵɵpureFunction1(2, _c138, ctx_r3.size));
  }
}
var TUI_TOGGLE_DEFAULT_OPTIONS = {
  icons: {
    toggleOff({
      $implicit
    }) {
      return $implicit === "m" ? "tuiIconToggleOff" : "tuiIconToggleOffLarge";
    },
    toggleOn({
      $implicit
    }) {
      return $implicit === "m" ? "tuiIconToggleOn" : "tuiIconToggleOnLarge";
    }
  },
  appearances: {
    checked: TuiAppearance.Primary,
    unchecked: TuiAppearance.Secondary
  },
  singleColor: false,
  showIcons: false,
  size: "m"
};
var TUI_TOGGLE_OPTIONS = tuiCreateToken(TUI_TOGGLE_DEFAULT_OPTIONS);
function tuiToggleOptionsProvider(options) {
  return tuiProvideOptions(TUI_TOGGLE_OPTIONS, options, TUI_TOGGLE_DEFAULT_OPTIONS);
}
var TuiToggleComponent = class extends AbstractTuiControl {
  constructor(control, cdr, modeDirective, options) {
    super(control, cdr);
    this.modeDirective = modeDirective;
    this.options = options;
    this.singleColor = this.options.singleColor;
    this.showIcons = this.options.showIcons;
    this.showLoader = false;
    this.size = this.options.size;
  }
  get iconOn() {
    return this.options.icons.toggleOn;
  }
  get iconOff() {
    return this.options.icons.toggleOff;
  }
  get nativeFocusableElement() {
    var _a, _b;
    return (_b = (_a = this.focusableElement) === null || _a === void 0 ? void 0 : _a.nativeElement) !== null && _b !== void 0 ? _b : null;
  }
  get focused() {
    return tuiIsNativeFocused(this.nativeFocusableElement);
  }
  get appearance() {
    return this.singleColor || this.value ? this.options.appearances.checked : this.options.appearances.unchecked;
  }
  get sizeM() {
    return this.size === "m";
  }
  get loaderSize() {
    return this.sizeM ? "xs" : "s";
  }
  get hostMode() {
    var _a, _b;
    return (_b = (_a = this.modeDirective) === null || _a === void 0 ? void 0 : _a.mode) !== null && _b !== void 0 ? _b : null;
  }
  /** @deprecated use 'value' setter */
  onChecked(checked) {
    this.value = checked;
  }
  onFocused(focused) {
    this.updateFocused(focused);
  }
  onFocusVisible(focusVisible) {
    this.updateFocusVisible(focusVisible);
  }
  getFallbackValue() {
    return false;
  }
};
TuiToggleComponent.ɵfac = function TuiToggleComponent_Factory(t) {
  return new (t || TuiToggleComponent)(ɵɵdirectiveInject(NgControl, 10), ɵɵdirectiveInject(ChangeDetectorRef), ɵɵdirectiveInject(TuiModeDirective, 8), ɵɵdirectiveInject(TUI_TOGGLE_OPTIONS));
};
TuiToggleComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiToggleComponent,
  selectors: [["tui-toggle"]],
  viewQuery: function TuiToggleComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(_c053, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.focusableElement = _t.first);
    }
  },
  hostVars: 4,
  hostBindings: function TuiToggleComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵattribute("data-size", ctx.size)("data-mode", ctx.hostMode);
      ɵɵclassProp("_checked", ctx.value);
    }
  },
  inputs: {
    singleColor: "singleColor",
    showIcons: "showIcons",
    showLoader: "showLoader",
    size: "size"
  },
  features: [ɵɵProvidersFeature([tuiAsFocusableItemAccessor(TuiToggleComponent), tuiAsControl(TuiToggleComponent)]), ɵɵInheritDefinitionFeature],
  decls: 9,
  vars: 16,
  consts: [["tuiWrapper", "", 3, "active", "appearance", "disabled", "focus", "hover", "invalid", "readOnly"], [1, "t-toggle"], ["class", "t-loader", 3, "inheritColor", "showLoader", "size", 4, "ngIf"], ["class", "t-icon-wrapper", 4, "ngIf"], [1, "t-circle"], ["automation-id", "tui-toggle__checkbox", "role", "switch", "type", "checkbox", 1, "t-checkbox", 3, "disabled", "id", "tuiFocusable", "tuiChecked", "tuiCheckedChange", "tuiFocusedChange", "tuiFocusVisibleChange"], ["focusableElement", ""], [1, "t-loader", 3, "inheritColor", "showLoader", "size"], [1, "t-icon-wrapper"], ["automation-id", "tui-toggle__check-icon", "class", "t-icon", 3, "src", 4, "polymorpheusOutlet", "polymorpheusOutletContext"], ["automation-id", "tui-toggle__check-icon", 1, "t-icon", 3, "src"], ["automation-id", "tui-toggle__cancel-icon", "class", "t-icon t-icon_off", 3, "src", 4, "polymorpheusOutlet", "polymorpheusOutletContext"], ["automation-id", "tui-toggle__cancel-icon", 1, "t-icon", "t-icon_off", 3, "src"]],
  template: function TuiToggleComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵelementStart(0, "div", 0)(1, "div", 1);
      ɵɵtemplate(2, TuiToggleComponent_tui_loader_2_Template, 1, 3, "tui-loader", 2);
      ɵɵtemplate(3, TuiToggleComponent_span_3_Template, 2, 4, "span", 3);
      ɵɵelement(4, "div", 4);
      ɵɵtemplate(5, TuiToggleComponent_tui_loader_5_Template, 1, 3, "tui-loader", 2);
      ɵɵtemplate(6, TuiToggleComponent_span_6_Template, 2, 4, "span", 3);
      ɵɵelementEnd();
      ɵɵelementStart(7, "input", 5, 6);
      ɵɵlistener("tuiCheckedChange", function TuiToggleComponent_Template_input_tuiCheckedChange_7_listener($event) {
        return ctx.value = $event;
      })("tuiFocusedChange", function TuiToggleComponent_Template_input_tuiFocusedChange_7_listener($event) {
        return ctx.onFocused($event);
      })("tuiFocusVisibleChange", function TuiToggleComponent_Template_input_tuiFocusVisibleChange_7_listener($event) {
        return ctx.onFocusVisible($event);
      });
      ɵɵelementEnd()();
    }
    if (rf & 2) {
      ɵɵproperty("active", ctx.pseudoActive)("appearance", ctx.appearance)("disabled", ctx.computedDisabled)("focus", ctx.computedFocusVisible)("hover", ctx.pseudoHover)("invalid", ctx.computedInvalid)("readOnly", ctx.readOnly);
      ɵɵadvance(2);
      ɵɵproperty("ngIf", ctx.showLoader);
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.showIcons && !ctx.showLoader);
      ɵɵadvance(2);
      ɵɵproperty("ngIf", ctx.showLoader);
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.showIcons && !ctx.showLoader);
      ɵɵadvance(1);
      ɵɵproperty("disabled", ctx.disabled)("id", ctx.id)("tuiFocusable", ctx.focusable)("tuiChecked", ctx.value);
      ɵɵattribute("aria-checked", ctx.value);
    }
  },
  dependencies: [TuiLoaderComponent, TuiSvgComponent, TuiWrapperDirective, NgIf, PolymorpheusOutletDirective, TuiCheckedDirective, TuiFocusableDirective, TuiFocusedDirective, TuiFocusVisibleDirective],
  styles: ["[_nghost-%COMP%]{position:relative;display:inline-block;vertical-align:middle;overflow:hidden;border-radius:6.25rem}[data-size=m][_nghost-%COMP%]{width:2rem;height:1rem}[data-size=l][_nghost-%COMP%]{width:3rem;height:1.5rem}.t-checkbox[_ngcontent-%COMP%]{padding:0;margin:0;border-width:0;border-radius:inherit;background:none;font-size:inherit;line-height:inherit;font-weight:inherit;color:inherit;caret-color:currentColor;outline:none;-webkit-appearance:none;-moz-appearance:none;appearance:none;word-break:keep-all;-webkit-text-fill-color:currentColor;position:absolute;top:0;left:0;height:100%;width:100%;opacity:0;cursor:pointer}.t-checkbox[_ngcontent-%COMP%]:-webkit-autofill, .t-checkbox[_ngcontent-%COMP%]:-webkit-autofill:hover, .t-checkbox[_ngcontent-%COMP%]:-webkit-autofill:focus{caret-color:var(--tui-base-09);border-radius:inherit;color:inherit!important;background-color:transparent!important;-webkit-text-fill-color:var(--tui-text-01)!important;border-color:var(--tui-autofill);-webkit-box-shadow:0 0 0 100rem var(--tui-autofill) inset!important}@supports (-webkit-touch-callout: none){.t-checkbox[_ngcontent-%COMP%]:active{font-size:1rem}}._disabled[_nghost-%COMP%]   .t-checkbox[_ngcontent-%COMP%]{pointer-events:none;cursor:default}.t-toggle[_ngcontent-%COMP%]{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;display:flex;align-items:center;justify-content:center}[data-size=m][_nghost-%COMP%]   .t-toggle[_ngcontent-%COMP%]{width:3rem;height:1rem;transform:translate(-1rem)}[data-size=l][_nghost-%COMP%]   .t-toggle[_ngcontent-%COMP%]{width:4.5rem;height:1.5rem;transform:translate(-1.5rem)}._checked[_nghost-%COMP%]   .t-toggle[_ngcontent-%COMP%]{transform:translate(0)}.t-circle[_ngcontent-%COMP%]{margin:.125rem 0;flex-shrink:0;border-radius:100%;background-color:var(--tui-base-01)}._disabled[_nghost-%COMP%]   .t-circle_light[_ngcontent-%COMP%]{opacity:.24}[data-size=m][_nghost-%COMP%]   .t-circle[_ngcontent-%COMP%]{width:.75rem;height:.75rem}[data-size=l][_nghost-%COMP%]   .t-circle[_ngcontent-%COMP%]{width:1rem;height:1rem}._disabled[_nghost-%COMP%]   .t-circle[_ngcontent-%COMP%]{background-color:var(--tui-base-01)}.t-loader[_ngcontent-%COMP%]{min-width:auto}[_nghost-%COMP%]:not(._checked)   .t-loader[_ngcontent-%COMP%]{color:var(--tui-base-06)}[_nghost-%COMP%]:not(._checked)._disabled   .t-loader[_ngcontent-%COMP%]{color:var(--tui-base-05)}[_nghost-%COMP%]:not(._checked)[data-mode=onDark]   .t-loader[_ngcontent-%COMP%]{color:var(--tui-text-03-night)}[_nghost-%COMP%]:not(._checked)[data-mode=onDark]._disabled   .t-loader[_ngcontent-%COMP%]{color:var(--tui-clear-inverse-active)}[_nghost-%COMP%]:not(._checked)[data-mode=onLight]   .t-loader[_ngcontent-%COMP%]{color:var(--tui-text-03)}[_nghost-%COMP%]:not(._checked)[data-mode=onLight]._disabled   .t-loader[_ngcontent-%COMP%]{color:var(--tui-clear-active)}[data-size=m][_nghost-%COMP%]   .t-loader[_ngcontent-%COMP%]{width:.75rem;margin:0 .2rem;transform:scale(.75)}[data-size=l][_nghost-%COMP%]   .t-loader[_ngcontent-%COMP%]{width:1rem;margin:0 .25rem}.t-icon-wrapper[_ngcontent-%COMP%]{display:flex}.t-icon[_ngcontent-%COMP%]{opacity:.8}.t-icon_off[_ngcontent-%COMP%]{color:var(--tui-base-06)}._disabled[_nghost-%COMP%]   .t-icon_off[_ngcontent-%COMP%]{color:var(--tui-base-05)}[data-mode=onDark][_nghost-%COMP%]   .t-icon_off[_ngcontent-%COMP%]{color:var(--tui-text-03-night)}[data-mode=onDark]._disabled[_nghost-%COMP%]   .t-icon_off[_ngcontent-%COMP%]{color:var(--tui-clear-inverse-active)}[data-mode=onLight][_nghost-%COMP%]   .t-icon_off[_ngcontent-%COMP%]{color:var(--tui-text-03)}[data-mode=onLight]._disabled[_nghost-%COMP%]   .t-icon_off[_ngcontent-%COMP%]{color:var(--tui-clear-active)}[data-size=m][_nghost-%COMP%]   .t-icon[_ngcontent-%COMP%]{width:1rem;height:1rem;transform:scale(.75)}[data-size=l][_nghost-%COMP%]   .t-icon[_ngcontent-%COMP%]{margin:0 .125rem;width:1.5rem;height:1.5rem}[_nghost-%COMP%]:hover   .t-icon[_ngcontent-%COMP%]{opacity:1}"],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiToggleComponent, [{
    type: Component,
    args: [{
      selector: "tui-toggle",
      templateUrl: "./toggle.template.html",
      styleUrls: ["./toggle.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [tuiAsFocusableItemAccessor(TuiToggleComponent), tuiAsControl(TuiToggleComponent)],
      host: {
        "[class._checked]": "value"
      }
    }]
  }], function() {
    return [{
      type: NgControl,
      decorators: [{
        type: Optional
      }, {
        type: Self
      }, {
        type: Inject,
        args: [NgControl]
      }]
    }, {
      type: ChangeDetectorRef,
      decorators: [{
        type: Inject,
        args: [ChangeDetectorRef]
      }]
    }, {
      type: TuiModeDirective,
      decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [TuiModeDirective]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_TOGGLE_OPTIONS]
      }]
    }];
  }, {
    focusableElement: [{
      type: ViewChild,
      args: ["focusableElement"]
    }],
    singleColor: [{
      type: Input
    }],
    showIcons: [{
      type: Input
    }],
    showLoader: [{
      type: Input
    }],
    size: [{
      type: Input
    }, {
      type: HostBinding,
      args: ["attr.data-size"]
    }],
    hostMode: [{
      type: HostBinding,
      args: ["attr.data-mode"]
    }]
  });
})();
var TuiToggleModule = class {
};
TuiToggleModule.ɵfac = function TuiToggleModule_Factory(t) {
  return new (t || TuiToggleModule)();
};
TuiToggleModule.ɵmod = ɵɵdefineNgModule({
  type: TuiToggleModule,
  declarations: [TuiToggleComponent],
  imports: [CommonModule, TuiFocusedModule, TuiFocusableModule, TuiPressedModule, TuiFocusVisibleModule, TuiCheckedModule, TuiWrapperModule, TuiSvgModule, TuiLoaderModule, PolymorpheusModule],
  exports: [TuiToggleComponent]
});
TuiToggleModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, TuiFocusedModule, TuiFocusableModule, TuiPressedModule, TuiFocusVisibleModule, TuiCheckedModule, TuiWrapperModule, TuiSvgModule, TuiLoaderModule, PolymorpheusModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiToggleModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, TuiFocusedModule, TuiFocusableModule, TuiPressedModule, TuiFocusVisibleModule, TuiCheckedModule, TuiWrapperModule, TuiSvgModule, TuiLoaderModule, PolymorpheusModule],
      declarations: [TuiToggleComponent],
      exports: [TuiToggleComponent]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-tree.js
function TuiTreeItemContentComponent_button_0_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = ɵɵgetCurrentView();
    ɵɵelementStart(0, "button", 2);
    ɵɵlistener("click", function TuiTreeItemContentComponent_button_0_Template_button_click_0_listener() {
      ɵɵrestoreView(_r2);
      const ctx_r1 = ɵɵnextContext();
      return ɵɵresetView(ctx_r1.onClick());
    });
    ɵɵpipe(1, "async");
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const ctx_r0 = ɵɵnextContext();
    ɵɵclassProp("t-button_expanded", ɵɵpipeBind1(1, 3, ctx_r0.expanded$));
    ɵɵproperty("icon", ctx_r0.icons.more);
  }
}
function TuiTreeItemComponent_ng_template_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵprojection(0);
  }
}
function TuiTreeItemComponent_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtext(1);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const text_r5 = ctx.polymorpheusOutlet;
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", text_r5, "\n");
  }
}
function TuiTreeItemComponent_tui_expand_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "tui-expand", 4);
    ɵɵpipe(1, "async");
    ɵɵelementStart(2, "div");
    ɵɵprojection(3, 1);
    ɵɵprojection(4, 2);
    ɵɵelementEnd()();
  }
  if (rf & 2) {
    const ctx_r3 = ɵɵnextContext();
    ɵɵproperty("expanded", ɵɵpipeBind1(1, 1, ctx_r3.expanded$));
  }
}
function TuiTreeItemComponent_ng_container_4_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainer(0);
  }
}
var _c054 = ["*", [["tui-tree-item"]], [["tui-tree"]]];
var _c139 = function(a0, a1) {
  return {
    $implicit: a0,
    template: a1
  };
};
var _c220 = ["*", "tui-tree-item", "tui-tree"];
var _c310 = ["value", ""];
function TuiTreeComponent_tui_tree_item_0_ng_container_2_ng_container_1_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtext(1);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    const text_r6 = ctx.polymorpheusOutlet;
    ɵɵadvance(1);
    ɵɵtextInterpolate1(" ", text_r6, " ");
  }
}
var _c48 = function(a0, a1) {
  return {
    $implicit: a0,
    node: a1
  };
};
function TuiTreeComponent_tui_tree_item_0_ng_container_2_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementContainerStart(0);
    ɵɵtemplate(1, TuiTreeComponent_tui_tree_item_0_ng_container_2_ng_container_1_Template, 2, 1, "ng-container", 5);
    ɵɵelementContainerEnd();
  }
  if (rf & 2) {
    ɵɵnextContext();
    const _r2 = ɵɵreference(1);
    const ctx_r3 = ɵɵnextContext();
    ɵɵadvance(1);
    ɵɵproperty("polymorpheusOutlet", ctx_r3.content)("polymorpheusOutletContext", ɵɵpureFunction2(2, _c48, ctx_r3.value, _r2));
  }
}
function TuiTreeComponent_tui_tree_item_0_tui_tree_3_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelement(0, "tui-tree", 6);
  }
  if (rf & 2) {
    const child_r7 = ctx.$implicit;
    const ctx_r4 = ɵɵnextContext(2);
    ɵɵproperty("content", ctx_r4.content)("trackBy", ctx_r4.trackBy)("value", child_r7);
  }
}
function TuiTreeComponent_tui_tree_item_0_Template(rf, ctx) {
  if (rf & 1) {
    ɵɵelementStart(0, "tui-tree-item", 1, 2);
    ɵɵtemplate(2, TuiTreeComponent_tui_tree_item_0_ng_container_2_Template, 2, 5, "ng-container", 3);
    ɵɵtemplate(3, TuiTreeComponent_tui_tree_item_0_tui_tree_3_Template, 1, 3, "tui-tree", 4);
    ɵɵelementEnd();
  }
  if (rf & 2) {
    const children_r1 = ctx.tuiLet;
    const ctx_r0 = ɵɵnextContext();
    ɵɵproperty("tuiTreeNode", ctx_r0.value);
    ɵɵadvance(2);
    ɵɵproperty("ngIf", ctx_r0.value !== children_r1);
    ɵɵadvance(1);
    ɵɵproperty("ngForOf", children_r1)("ngForTrackBy", ctx_r0.trackBy);
  }
}
var TuiTreeChildrenDirective = class _TuiTreeChildrenDirective {
  constructor() {
    this.childrenHandler = _TuiTreeChildrenDirective.defaultHandler;
  }
  static defaultHandler(item) {
    return Array.isArray(item) ? item : EMPTY_ARRAY;
  }
};
TuiTreeChildrenDirective.ɵfac = function TuiTreeChildrenDirective_Factory(t) {
  return new (t || TuiTreeChildrenDirective)();
};
TuiTreeChildrenDirective.ɵdir = ɵɵdefineDirective({
  type: TuiTreeChildrenDirective,
  selectors: [["tui-tree", "childrenHandler", ""]],
  inputs: {
    childrenHandler: "childrenHandler"
  }
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiTreeChildrenDirective, [{
    type: Directive,
    args: [{
      selector: "tui-tree[childrenHandler]"
    }]
  }], null, {
    childrenHandler: [{
      type: Input
    }]
  });
})();
var TuiTreeItemContentComponent = class {
  constructor(icons, context, controller) {
    this.icons = icons;
    this.context = context;
    this.controller = controller;
    this.change$ = new Subject();
    this.expanded$ = this.change$.pipe(startWith(null), map(() => this.isExpanded), distinctUntilChanged());
  }
  get isExpanded() {
    return this.context.$implicit.isExpanded;
  }
  get isExpandable() {
    return this.context.$implicit.isExpandable && this.controller !== TUI_DEFAULT_TREE_CONTROLLER;
  }
  onClick() {
    this.controller.toggle(this.context.$implicit);
  }
  ngDoCheck() {
    this.change$.next();
  }
};
TuiTreeItemContentComponent.ɵfac = function TuiTreeItemContentComponent_Factory(t) {
  return new (t || TuiTreeItemContentComponent)(ɵɵdirectiveInject(TUI_COMMON_ICONS), ɵɵdirectiveInject(POLYMORPHEUS_CONTEXT), ɵɵdirectiveInject(forwardRef(() => TUI_TREE_CONTROLLER)));
};
TuiTreeItemContentComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiTreeItemContentComponent,
  selectors: [["tui-tree-item-content"]],
  hostVars: 2,
  hostBindings: function TuiTreeItemContentComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("_expandable", ctx.isExpandable);
    }
  },
  decls: 2,
  vars: 2,
  consts: [["appearance", "flat", "shape", "rounded", "size", "xs", "tuiIconButton", "", "type", "button", "class", "t-button", 3, "t-button_expanded", "icon", "click", 4, "ngIf"], [3, "ngTemplateOutlet"], ["appearance", "flat", "shape", "rounded", "size", "xs", "tuiIconButton", "", "type", "button", 1, "t-button", 3, "icon", "click"]],
  template: function TuiTreeItemContentComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵtemplate(0, TuiTreeItemContentComponent_button_0_Template, 2, 5, "button", 0);
      ɵɵelementContainer(1, 1);
    }
    if (rf & 2) {
      ɵɵproperty("ngIf", ctx.isExpandable);
      ɵɵadvance(1);
      ɵɵproperty("ngTemplateOutlet", ctx.context.template);
    }
  },
  dependencies: [TuiButtonComponent, NgIf, NgTemplateOutlet, AsyncPipe],
  styles: ["[_nghost-%COMP%]{display:flex;align-items:center}[_nghost-%COMP%]   tui-tree-item._expandable[_nghost-%COMP%]:not(._expandable), tui-tree-item._expandable   [_nghost-%COMP%]:not(._expandable){padding-left:2rem}.t-button[_ngcontent-%COMP%]{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;margin-right:.5rem}.t-button_expanded[_ngcontent-%COMP%]{transform:rotate(90deg)}"],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiTreeItemContentComponent, [{
    type: Component,
    args: [{
      selector: "tui-tree-item-content",
      templateUrl: "./tree-item-content.template.html",
      styleUrls: ["./tree-item-content.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush
    }]
  }], function() {
    return [{
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_COMMON_ICONS]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [POLYMORPHEUS_CONTEXT]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [forwardRef(() => TUI_TREE_CONTROLLER)]
      }]
    }];
  }, {
    isExpandable: [{
      type: HostBinding,
      args: ["class._expandable"]
    }]
  });
})();
var TUI_TREE_ITEM_CONTENT = new PolymorpheusComponent(TuiTreeItemContentComponent);
var TUI_DEFAULT_TREE_CONTROLLER = {
  isExpanded: ALWAYS_TRUE_HANDLER,
  toggle: EMPTY_FUNCTION
};
var TUI_TREE_ACCESSOR = new InjectionToken("[TUI_TREE_ACCESSOR]");
var TUI_TREE_CONTROLLER = tuiCreateToken(TUI_DEFAULT_TREE_CONTROLLER);
var TUI_TREE_NODE = new InjectionToken("[TUI_TREE_NODE]");
var TUI_TREE_LOADING = tuiCreateToken({});
var TUI_TREE_START = new InjectionToken("[TUI_TREE_START]");
var TUI_TREE_LOADER = new InjectionToken("[TUI_TREE_LOADER]");
var TUI_TREE_CONTENT = tuiCreateToken(TUI_TREE_ITEM_CONTENT);
var TUI_TREE_LEVEL = tuiCreateToken(-1);
var TUI_TREE_ITEM_PROVIDERS = [{
  provide: TUI_TREE_LEVEL,
  deps: [[new SkipSelf(), TUI_TREE_LEVEL]],
  useFactory: (level) => ++level
}, {
  provide: TUI_TREE_NODE,
  useExisting: forwardRef(() => TuiTreeItemComponent)
}];
var TuiTreeItemComponent = class {
  constructor(el, controller, level, content) {
    this.el = el;
    this.controller = controller;
    this.level = level;
    this.content = content;
    this.nested = EMPTY_QUERY;
    this.change$ = new Subject();
    this.expanded$ = this.change$.pipe(startWith(null), map(() => this.isExpanded));
    this.attached$ = this.change$.pipe(map(() => this.el.nativeElement.isConnected), distinctUntilChanged());
  }
  get isExpandable() {
    return !!this.nested.length;
  }
  get isExpanded() {
    return this.controller.isExpanded(this);
  }
  ngDoCheck() {
    this.checkChanges();
  }
  checkChanges() {
    this.change$.next();
  }
};
TuiTreeItemComponent.ɵfac = function TuiTreeItemComponent_Factory(t) {
  return new (t || TuiTreeItemComponent)(ɵɵdirectiveInject(ElementRef), ɵɵdirectiveInject(forwardRef(() => TUI_TREE_CONTROLLER)), ɵɵdirectiveInject(forwardRef(() => TUI_TREE_LEVEL)), ɵɵdirectiveInject(forwardRef(() => TUI_TREE_CONTENT)));
};
TuiTreeItemComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiTreeItemComponent,
  selectors: [["tui-tree-item"]],
  contentQueries: function TuiTreeItemComponent_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      ɵɵcontentQuery(dirIndex, TUI_TREE_NODE, 4);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.nested = _t);
    }
  },
  hostAttrs: ["role", "treeitem"],
  hostVars: 2,
  hostBindings: function TuiTreeItemComponent_HostBindings(rf, ctx) {
    if (rf & 2) {
      ɵɵclassProp("_expandable", ctx.isExpandable);
    }
  },
  features: [ɵɵProvidersFeature(TUI_TREE_ITEM_PROVIDERS)],
  ngContentSelectors: _c220,
  decls: 6,
  vars: 9,
  consts: [["template", ""], [4, "polymorpheusOutlet", "polymorpheusOutletContext"], ["role", "group", "class", "t-children", 3, "expanded", 4, "ngIf"], [4, "ngIf"], ["role", "group", 1, "t-children", 3, "expanded"]],
  template: function TuiTreeItemComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵprojectionDef(_c054);
      ɵɵtemplate(0, TuiTreeItemComponent_ng_template_0_Template, 1, 0, "ng-template", null, 0, ɵɵtemplateRefExtractor);
      ɵɵtemplate(2, TuiTreeItemComponent_ng_container_2_Template, 2, 1, "ng-container", 1);
      ɵɵtemplate(3, TuiTreeItemComponent_tui_expand_3_Template, 5, 3, "tui-expand", 2);
      ɵɵtemplate(4, TuiTreeItemComponent_ng_container_4_Template, 1, 0, "ng-container", 3);
      ɵɵpipe(5, "async");
    }
    if (rf & 2) {
      const _r0 = ɵɵreference(1);
      ɵɵadvance(2);
      ɵɵproperty("polymorpheusOutlet", ctx.content)("polymorpheusOutletContext", ɵɵpureFunction2(6, _c139, ctx, _r0));
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ctx.isExpandable);
      ɵɵadvance(1);
      ɵɵproperty("ngIf", ɵɵpipeBind1(5, 4, ctx.attached$));
    }
  },
  dependencies: [TuiExpandComponent, PolymorpheusOutletDirective, NgIf, AsyncPipe],
  styles: ["[_nghost-%COMP%]{display:block}.t-children[_ngcontent-%COMP%]{position:relative;margin-left:var(--tui-tree-item-indent, 1.5rem)}"],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiTreeItemComponent, [{
    type: Component,
    args: [{
      selector: "tui-tree-item",
      templateUrl: "./tree-item.template.html",
      styleUrls: ["./tree-item.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: TUI_TREE_ITEM_PROVIDERS,
      host: {
        role: "treeitem"
      }
    }]
  }], function() {
    return [{
      type: ElementRef,
      decorators: [{
        type: Inject,
        args: [ElementRef]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [forwardRef(() => TUI_TREE_CONTROLLER)]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [forwardRef(() => TUI_TREE_LEVEL)]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [forwardRef(() => TUI_TREE_CONTENT)]
      }]
    }];
  }, {
    nested: [{
      type: ContentChildren,
      args: [TUI_TREE_NODE]
    }],
    isExpandable: [{
      type: HostBinding,
      args: ["class._expandable"]
    }]
  });
})();
var TuiTreeNodeDirective = class {
  constructor(directive, component) {
    this.directive = directive;
    this.component = component;
  }
  set value(value) {
    var _a;
    (_a = this.directive) === null || _a === void 0 ? void 0 : _a.register(this.component, value);
  }
  ngOnDestroy() {
    var _a;
    (_a = this.directive) === null || _a === void 0 ? void 0 : _a.unregister(this.component);
  }
};
TuiTreeNodeDirective.ɵfac = function TuiTreeNodeDirective_Factory(t) {
  return new (t || TuiTreeNodeDirective)(ɵɵdirectiveInject(TUI_TREE_ACCESSOR, 8), ɵɵdirectiveInject(TuiTreeItemComponent));
};
TuiTreeNodeDirective.ɵdir = ɵɵdefineDirective({
  type: TuiTreeNodeDirective,
  selectors: [["tui-tree-item", "tuiTreeNode", ""]],
  inputs: {
    value: ["tuiTreeNode", "value"]
  }
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiTreeNodeDirective, [{
    type: Directive,
    args: [{
      selector: "tui-tree-item[tuiTreeNode]"
    }]
  }], function() {
    return [{
      type: void 0,
      decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [TUI_TREE_ACCESSOR]
      }]
    }, {
      type: TuiTreeItemComponent,
      decorators: [{
        type: Inject,
        args: [TuiTreeItemComponent]
      }]
    }];
  }, {
    value: [{
      type: Input,
      args: ["tuiTreeNode"]
    }]
  });
})();
var TuiTreeComponent = class {
  constructor(directive) {
    this.directive = directive;
    this.check$ = new Subject();
    this.children$ = this.check$.pipe(startWith(null), map(() => this.handler(this.value)), distinctUntilChanged());
    this.trackBy = (_, item) => item;
    this.content = ({
      $implicit
    }) => String($implicit);
  }
  ngDoCheck() {
    this.checkChanges();
  }
  checkChanges() {
    var _a, _b;
    this.check$.next();
    (_a = this.item) === null || _a === void 0 ? void 0 : _a.checkChanges();
    (_b = this.child) === null || _b === void 0 ? void 0 : _b.checkChanges();
  }
  get handler() {
    var _a;
    return ((_a = this.directive) === null || _a === void 0 ? void 0 : _a.childrenHandler) || TuiTreeChildrenDirective.defaultHandler;
  }
};
TuiTreeComponent.ɵfac = function TuiTreeComponent_Factory(t) {
  return new (t || TuiTreeComponent)(ɵɵdirectiveInject(TuiTreeChildrenDirective, 8));
};
TuiTreeComponent.ɵcmp = ɵɵdefineComponent({
  type: TuiTreeComponent,
  selectors: [["tui-tree", "value", ""]],
  viewQuery: function TuiTreeComponent_Query(rf, ctx) {
    if (rf & 1) {
      ɵɵviewQuery(TuiTreeItemComponent, 5);
      ɵɵviewQuery(TuiTreeComponent, 5);
    }
    if (rf & 2) {
      let _t;
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.item = _t.first);
      ɵɵqueryRefresh(_t = ɵɵloadQuery()) && (ctx.child = _t.first);
    }
  },
  hostAttrs: ["role", "tree"],
  inputs: {
    value: "value",
    trackBy: "trackBy",
    content: "content"
  },
  features: [ɵɵProvidersFeature([{
    provide: TUI_TREE_NODE,
    useExisting: TuiTreeComponent
  }])],
  attrs: _c310,
  decls: 2,
  vars: 3,
  consts: [[3, "tuiTreeNode", 4, "tuiLet"], [3, "tuiTreeNode"], ["view", ""], [4, "ngIf"], [3, "content", "trackBy", "value", 4, "ngFor", "ngForOf", "ngForTrackBy"], [4, "polymorpheusOutlet", "polymorpheusOutletContext"], [3, "content", "trackBy", "value"]],
  template: function TuiTreeComponent_Template(rf, ctx) {
    if (rf & 1) {
      ɵɵtemplate(0, TuiTreeComponent_tui_tree_item_0_Template, 4, 4, "tui-tree-item", 0);
      ɵɵpipe(1, "async");
    }
    if (rf & 2) {
      ɵɵproperty("tuiLet", ɵɵpipeBind1(1, 1, ctx.children$));
    }
  },
  dependencies: [TuiTreeItemComponent, TuiTreeComponent, TuiLetDirective, TuiTreeNodeDirective, NgIf, PolymorpheusOutletDirective, NgForOf, AsyncPipe],
  styles: ["[_nghost-%COMP%]{position:relative;display:block}"],
  changeDetection: 0
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiTreeComponent, [{
    type: Component,
    args: [{
      selector: "tui-tree[value]",
      templateUrl: "./tree.template.html",
      styleUrls: ["./tree.style.less"],
      changeDetection: ChangeDetectionStrategy.OnPush,
      providers: [{
        provide: TUI_TREE_NODE,
        useExisting: TuiTreeComponent
      }],
      host: {
        role: "tree"
      }
    }]
  }], function() {
    return [{
      type: TuiTreeChildrenDirective,
      decorators: [{
        type: Optional
      }, {
        type: Inject,
        args: [TuiTreeChildrenDirective]
      }]
    }];
  }, {
    value: [{
      type: Input
    }],
    item: [{
      type: ViewChild,
      args: [TuiTreeItemComponent]
    }],
    child: [{
      type: ViewChild,
      args: [TuiTreeComponent]
    }],
    trackBy: [{
      type: Input
    }],
    content: [{
      type: Input
    }]
  });
})();
var TuiTreeControllerDirective = class {
  constructor() {
    this.fallback = true;
    this.map = /* @__PURE__ */ new Map();
    this.toggled = new EventEmitter();
    this.items = /* @__PURE__ */ new Map();
  }
  register(item, value) {
    this.items.set(item, value);
  }
  unregister(item) {
    this.items.delete(item);
  }
  isExpanded(item) {
    var _a;
    const value = this.items.get(item);
    return (_a = value && this.map.get(value)) !== null && _a !== void 0 ? _a : this.fallback;
  }
  toggle(item) {
    const value = this.items.get(item);
    const expanded = this.isExpanded(item);
    if (!tuiIsPresent(value)) {
      return;
    }
    this.toggled.emit(value);
    this.map.set(value, !expanded);
  }
};
TuiTreeControllerDirective.ɵfac = function TuiTreeControllerDirective_Factory(t) {
  return new (t || TuiTreeControllerDirective)();
};
TuiTreeControllerDirective.ɵdir = ɵɵdefineDirective({
  type: TuiTreeControllerDirective,
  selectors: [["", "tuiTreeController", "", "map", ""]],
  inputs: {
    fallback: ["tuiTreeController", "fallback"],
    map: "map"
  },
  outputs: {
    toggled: "toggled"
  },
  exportAs: ["tuiTreeController"],
  features: [ɵɵProvidersFeature([{
    provide: TUI_TREE_ACCESSOR,
    useExisting: TuiTreeControllerDirective
  }, {
    provide: TUI_TREE_CONTROLLER,
    useExisting: TuiTreeControllerDirective
  }])]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiTreeControllerDirective, [{
    type: Directive,
    args: [{
      selector: "[tuiTreeController][map]",
      providers: [{
        provide: TUI_TREE_ACCESSOR,
        useExisting: TuiTreeControllerDirective
      }, {
        provide: TUI_TREE_CONTROLLER,
        useExisting: TuiTreeControllerDirective
      }],
      exportAs: "tuiTreeController"
    }]
  }], null, {
    fallback: [{
      type: Input,
      args: ["tuiTreeController"]
    }],
    map: [{
      type: Input
    }],
    toggled: [{
      type: Output
    }]
  });
})();
var TuiTreeItemControllerDirective = class {
  constructor() {
    this.map = /* @__PURE__ */ new WeakMap();
    this.fallback = true;
  }
  isExpanded(item) {
    var _a;
    return (_a = this.map.get(item)) !== null && _a !== void 0 ? _a : this.fallback;
  }
  toggle(item) {
    this.map.set(item, !this.isExpanded(item));
  }
};
TuiTreeItemControllerDirective.ɵfac = function TuiTreeItemControllerDirective_Factory(t) {
  return new (t || TuiTreeItemControllerDirective)();
};
TuiTreeItemControllerDirective.ɵdir = ɵɵdefineDirective({
  type: TuiTreeItemControllerDirective,
  selectors: [["", "tuiTreeController", "", 3, "map", ""]],
  inputs: {
    fallback: ["tuiTreeController", "fallback"]
  },
  exportAs: ["tuiTreeController"],
  features: [ɵɵProvidersFeature([{
    provide: TUI_TREE_CONTROLLER,
    useExisting: TuiTreeItemControllerDirective
  }])]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiTreeItemControllerDirective, [{
    type: Directive,
    args: [{
      selector: "[tuiTreeController]:not([map])",
      providers: [{
        provide: TUI_TREE_CONTROLLER,
        useExisting: TuiTreeItemControllerDirective
      }],
      exportAs: "tuiTreeController"
    }]
  }], null, {
    fallback: [{
      type: Input,
      args: ["tuiTreeController"]
    }]
  });
})();
var TuiTreeService = class {
  constructor(loading, start, loader) {
    this.loading = loading;
    this.start = start;
    this.loader = loader;
    this.map = /* @__PURE__ */ new Map([[this.loading, []]]);
    this.load$ = new Subject();
    this.data$ = this.load$.pipe(switchMap((item) => this.loader.loadChildren(item).pipe(tap((children) => this.map.set(item, children)), map((children) => children.filter((item2) => !this.loader.hasChildren(item2))), tap((children) => children.forEach((child) => this.map.set(child, []))))), startWith(null), map(() => this.start));
  }
  getChildren(item) {
    return this.map.get(item) || [this.loading];
  }
  loadChildren(item) {
    if (this.map.get(item)) {
      return;
    }
    this.map.set(item, [this.loading]);
    this.load$.next(item);
  }
};
TuiTreeService.ɵfac = function TuiTreeService_Factory(t) {
  return new (t || TuiTreeService)(ɵɵinject(TUI_TREE_LOADING), ɵɵinject(TUI_TREE_START), ɵɵinject(TUI_TREE_LOADER));
};
TuiTreeService.ɵprov = ɵɵdefineInjectable({
  token: TuiTreeService,
  factory: TuiTreeService.ɵfac
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiTreeService, [{
    type: Injectable
  }], function() {
    return [{
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_TREE_LOADING]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_TREE_START]
      }]
    }, {
      type: void 0,
      decorators: [{
        type: Inject,
        args: [TUI_TREE_LOADER]
      }]
    }];
  }, null);
})();
var TuiTreeModule = class {
};
TuiTreeModule.ɵfac = function TuiTreeModule_Factory(t) {
  return new (t || TuiTreeModule)();
};
TuiTreeModule.ɵmod = ɵɵdefineNgModule({
  type: TuiTreeModule,
  declarations: [TuiTreeComponent, TuiTreeItemComponent, TuiTreeItemContentComponent, TuiTreeChildrenDirective, TuiTreeItemControllerDirective, TuiTreeControllerDirective, TuiTreeNodeDirective],
  imports: [CommonModule, PolymorpheusModule, TuiExpandModule, TuiLetModule, TuiButtonModule],
  exports: [TuiTreeComponent, TuiTreeItemComponent, TuiTreeChildrenDirective, TuiTreeItemControllerDirective, TuiTreeControllerDirective]
});
TuiTreeModule.ɵinj = ɵɵdefineInjector({
  imports: [[CommonModule, PolymorpheusModule, TuiExpandModule, TuiLetModule, TuiButtonModule]]
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiTreeModule, [{
    type: NgModule,
    args: [{
      imports: [CommonModule, PolymorpheusModule, TuiExpandModule, TuiLetModule, TuiButtonModule],
      declarations: [TuiTreeComponent, TuiTreeItemComponent, TuiTreeItemContentComponent, TuiTreeChildrenDirective, TuiTreeItemControllerDirective, TuiTreeControllerDirective, TuiTreeNodeDirective],
      exports: [TuiTreeComponent, TuiTreeItemComponent, TuiTreeChildrenDirective, TuiTreeItemControllerDirective, TuiTreeControllerDirective]
    }]
  }], null, null);
})();

// node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-services.js
var TuiDialogFormService = class {
  constructor(dialogs) {
    this.dialogs = dialogs;
    this.dirty = false;
  }
  markAsDirty() {
    this.dirty = true;
  }
  markAsPristine() {
    this.dirty = false;
  }
  withPrompt(options) {
    return defer(() => this.dirty ? this.dialogs.open(TUI_PROMPT, Object.assign({
      size: "s"
    }, options)) : of(true));
  }
};
TuiDialogFormService.ɵfac = function TuiDialogFormService_Factory(t) {
  return new (t || TuiDialogFormService)(ɵɵinject(TuiDialogService));
};
TuiDialogFormService.ɵprov = ɵɵdefineInjectable({
  token: TuiDialogFormService,
  factory: TuiDialogFormService.ɵfac
});
(function() {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TuiDialogFormService, [{
    type: Injectable
  }], function() {
    return [{
      type: TuiDialogService,
      decorators: [{
        type: Inject,
        args: [TuiDialogService]
      }]
    }];
  }, null);
})();

export {
  tuiImmutableUpdateInputDateMulti,
  tuiFormatSize,
  tuiGetAcceptArray,
  tuiStringHashToHsl,
  TUI_DATE_MODE_MASKITO_ADAPTER,
  DATE_TIME_SEPARATOR,
  EMPTY_MASK,
  GROUP_CLASS_NAMES,
  MASK_AFTER_CODE_REGEXP,
  TUI_PHONE_MASK,
  TUI_TIME_MASK,
  TUI_FLOATING_PRECISION,
  MAX_DAY_RANGE_LENGTH_MAPPER,
  MAX_TIME_VALUES,
  DEFAULT_ROUTER_LINK_OPTIONS,
  tuiNormalizeDateValue,
  tuiCreateAutoCorrectedDatePipe,
  tuiCreateAutoCorrectedDateRangePipe,
  tuiCreateAutoCorrectedTimePipe,
  tuiCreateAutoCorrectedDateTimePipe,
  tuiCreateDateMask,
  tuiCreateDateRangeMask,
  tuiCreateTimeMask,
  tuiHorizontalDirectionToNumber,
  tuiPercentageToKeyStepValue,
  tuiKeyStepValueToPercentage,
  TuiDayRangePeriod,
  TuiNamedDay,
  TuiStringifiableItem,
  tuiCreateDefaultDayRangePeriods,
  tuiCreateTimePeriods,
  tuiGetPrecision,
  tuiIsFlat,
  tuiControlValueFactory,
  tuiGetMaxAllowedPhoneLength,
  tuiIsoToCountryCode,
  tuiNotKzRegion,
  TUI_CALENDAR_DATE_STREAM,
  tuiDateStreamWithTransformer,
  TUI_COUNTRIES_DEFAULT_MASKS,
  TUI_COUNTRIES_MASKS,
  tuiCountriesMasksProvider,
  TUI_DATE_VALUE_TRANSFORMER,
  TUI_DATE_RANGE_VALUE_TRANSFORMER,
  TUI_DATE_TIME_VALUE_TRANSFORMER,
  TUI_PROMPT_WORDS,
  TUI_CANCEL_WORD,
  TUI_DONE_WORD,
  TUI_MORE_WORD,
  TUI_HIDE_TEXT,
  TUI_SHOW_ALL_TEXT,
  TUI_OTHER_DATE_TEXT,
  TUI_CHOOSE_DAY_OR_RANGE_TEXTS,
  TUI_FROM_TO_TEXTS,
  TUI_PLUS_MINUS_TEXTS,
  TUI_TIME_TEXTS,
  TUI_DATE_TEXTS,
  TUI_DIGITAL_INFORMATION_UNITS,
  TUI_COPY_TEXTS,
  TUI_PASSWORD_TEXTS,
  TUI_CALENDAR_MONTHS,
  TUI_FILE_TEXTS,
  TUI_PAGINATION_TEXTS,
  TUI_INPUT_FILE_TEXTS,
  TUI_MULTI_SELECT_TEXTS,
  TUI_COUNTRIES,
  TUI_INPUT_DATE_DEFAULT_OPTIONS,
  TUI_INPUT_DATE_OPTIONS,
  tuiInputDateOptionsProvider,
  TUI_DEFAULT_ITEMS_HANDLERS,
  TUI_ITEMS_HANDLERS,
  tuiItemsHandlersProvider,
  TUI_MOBILE_CALENDAR,
  TUI_MONTH_FORMATTER,
  TUI_TAB_MARGIN,
  TUI_VALIDATION_ERRORS,
  AbstractTuiNativeSelect,
  TUI_ARROW_DEFAULT_OPTIONS,
  TUI_ARROW_OPTIONS,
  tuiArrowOptionsProvider,
  TuiArrowComponent,
  TUI_ARROW,
  TuiArrowModule,
  TUI_ARROW_DEFAULT_MODE,
  TUI_ARROW_MODE,
  tuiArrowModeProvider,
  TuiAccordionItemContentDirective,
  TuiAccordionItemEagerContentDirective,
  TuiAccordionItemComponent,
  TuiAccordionComponent,
  TuiAccordionModule,
  TuiMarkerIconComponent,
  TuiMarkerIconModule,
  TuiActionComponent,
  TuiActionModule,
  TuiDataListDropdownManagerDirective,
  TuiDataListDropdownManagerModule,
  TuiHighlightDirective,
  TuiHighlightModule,
  INTERSECTION_ROOT_MARGIN,
  INTERSECTION_THRESHOLD,
  IntersectionObserverService,
  TuiLazyLoadingService,
  TuiLazyLoadingDirective,
  TuiLazyLoadingModule,
  MaskedInputDirective,
  TextMaskModule,
  TuiPresentDirective,
  TuiPresentModule,
  TuiProjectClassDirective,
  TuiProjectClassModule,
  tuiCreateUnfinishedValidator,
  TuiUnfinishedValidatorDirective,
  TuiUnfinishedValidatorModule,
  TuiUnmaskHandlerDirective,
  TuiUnmaskHandlerModule,
  TUI_MONTH_FORMATTER_PROVIDER,
  FIXED_DROPDOWN_CONTROLLER_PROVIDER,
  TUI_VALUE_ACCESSOR_PROVIDER,
  TuiValueAccessorDirective,
  TuiValueAccessorModule,
  TUI_AVATAR_DEFAULT_OPTIONS,
  TUI_AVATAR_OPTIONS,
  tuiAvatarOptionsProvider,
  TuiAvatarComponent,
  TuiAvatarModule,
  TuiBadgeComponent,
  TuiBadgeModule,
  TuiBadgedContentComponent,
  TuiBadgedContentModule,
  TUI_BREADCRUMBS_DEFAULT_OPTIONS,
  TUI_BREADCRUMBS_OPTIONS,
  tuiBreadcrumbsOptionsProvider,
  TuiBreadcrumbsComponent,
  TuiBreadcrumbsModule,
  TuiCalendarMonthComponent,
  TuiCalendarMonthModule,
  TuiPrimitiveCalendarRangeComponent,
  TuiPrimitiveCalendarRangeModule,
  TuiCalendarRangeComponent,
  TuiCalendarRangeModule,
  TuiCarouselScrollDirective,
  TuiCarouselDirective,
  TuiCarouselAutoscrollDirective,
  TuiCarouselComponent,
  TuiCarouselButtonsDirective,
  TuiCarouselModule,
  TuiCheckboxComponent,
  TuiCheckboxModule,
  TuiCheckboxBlockComponent,
  TuiCheckboxBlockModule,
  TuiCheckboxLabeledComponent,
  TuiCheckboxLabeledModule,
  TuiSelectOptionComponent,
  TUI_SELECT_OPTION,
  TuiSelectOptionModule,
  TuiComboBoxComponent,
  TuiComboBoxDirective,
  TuiComboBoxStrictDirective,
  TuiComboBoxModule,
  AbstractTuiDataListWrapper,
  TuiDataListGroupWrapperComponent,
  TuiDataListWrapperComponent,
  TuiDataListWrapperModule,
  TuiElasticContainerDirective,
  TuiElasticContainerComponent,
  TuiElasticContainerModule,
  TUI_FILE_DEFAULT_OPTIONS,
  TUI_FILE_OPTIONS,
  TuiFileComponent,
  TuiFilesComponent,
  TuiFilesModule,
  TuiFilterComponent,
  TuiFilterModule,
  TuiInputComponent,
  TuiInputDirective,
  TuiInputModule,
  TUI_INPUT_COPY_DEFAULT_OPTIONS,
  TUI_INPUT_COPY_OPTIONS,
  tuiInputCopyOptionsProvider,
  TuiInputCopyComponent,
  TuiInputCopyDirective,
  TuiInputCopyModule,
  TUI_INPUT_NUMBER_DEFAULT_OPTIONS,
  TUI_INPUT_NUMBER_OPTIONS,
  tuiInputNumberOptionsProvider,
  TUI_NUMBER_VALUE_TRANSFORMER,
  TuiInputNumberComponent,
  TuiInputNumberDirective,
  TuiInputNumberModule,
  TUI_INPUT_COUNT_DEFAULT_OPTIONS,
  TUI_INPUT_COUNT_OPTIONS,
  tuiInputCountOptionsProvider,
  TuiInputCountComponent,
  TuiInputCountDirective,
  TuiInputCountModule,
  TuiInputDateComponent,
  TuiInputDateDirective,
  TuiInputDateModule,
  TUI_TAG_DEFAULT_OPTIONS,
  TUI_TAG_OPTIONS,
  tuiTagOptionsProvider,
  TuiTagComponent,
  TuiTagModule,
  TUI_INPUT_TAG_DEFAULT_OPTIONS,
  TUI_INPUT_TAG_OPTIONS,
  tuiInputTagOptionsProvider,
  TuiInputTagComponent,
  TuiInputTagModule,
  TuiInputDateMultiComponent,
  TuiInputDateMultiModule,
  TuiInputDateRangeComponent,
  TuiInputDateRangeDirective,
  TuiInputDateRangeModule,
  TuiInputDateTimeComponent,
  TuiInputDateTimeDirective,
  TuiInputDateTimeModule,
  TUI_INPUT_FILES_DEFAULT_OPTIONS,
  TUI_INPUT_FILES_OPTIONS,
  tuiInputFilesOptionsProvider,
  TuiInputFilesDirective,
  TuiInputFilesComponent,
  TuiInputFilesModule,
  TuiInputInlineComponent,
  TuiInputInlineModule,
  TuiInputMonthComponent,
  TuiInputMonthDirective,
  TuiInputMonthModule,
  TuiInputMonthRangeComponent,
  TuiInputMonthRangeDirective,
  TuiInputMonthRangeModule,
  TUI_INPUT_PASSWORD_DEFAULT_OPTIONS,
  TUI_INPUT_PASSWORD_OPTIONS,
  tuiInputPasswordOptionsProvider,
  TuiInputPasswordComponent,
  TuiInputPasswordDirective,
  TuiInputPasswordModule,
  TUI_INPUT_PHONE_DEFAULT_OPTIONS,
  TUI_INPUT_PHONE_OPTIONS,
  tuiInputPhoneOptionsProvider,
  TuiInputPhoneComponent,
  TuiInputPhoneDirective,
  TuiInputPhoneModule,
  TuiFieldErrorPipe,
  TuiFieldErrorContentPipe,
  TuiFieldErrorPipeModule,
  TuiMultiSelectOptionComponent,
  TuiMultiSelectOptionModule,
  TuiStringifyContentPipe,
  TuiStringifyContentPipeModule,
  TUI_MULTI_SELECT_DEFAULT_OPTIONS,
  TUI_MULTI_SELECT_OPTIONS,
  tuiMultiSelectOptionsProvider,
  AbstractTuiNativeMultiSelect,
  TuiMultiSelectComponent,
  TuiHideSelectedPipe,
  TuiMultiSelectDirective,
  TuiMultiSelectGroupComponent,
  TUI_MULTI_SELECT_OPTION,
  TuiMultiSelectGroupDirective,
  TuiNativeMultiSelectComponent,
  TuiNativeMultiSelectGroupComponent,
  TuiMultiSelectModule,
  AbstractTuiFilterByInput,
  TuiFilterByInputPipe,
  TuiFilterByInputWithPipe,
  TuiFilterByInputPipeModule,
  TuiIsoToCountryCodePipe,
  TuiIsoToCountryCodeModule,
  TuiSortCountriesPipe,
  TuiSortCountriesPipeModule,
  TuiStringifyPipe,
  TuiStringifyPipeModule,
  TuiToCountryCodePipe,
  TuiExtractCountryCodeModule,
  TuiToYearPipe,
  TuiToYearPipeModule,
  TUI_INPUT_PHONE_INTERNATIONAL_DEFAULT_OPTIONS,
  TUI_INPUT_PHONE_INTERNATIONAL_OPTIONS,
  tuiInputPhoneInternationalOptionsProvider,
  tuiExtractValueFromEvent,
  TuiInputPhoneInternationalComponent,
  TuiInputPhoneInternationalModule,
  TUI_SLIDER_DEFAULT_OPTIONS,
  TUI_SLIDER_OPTIONS,
  tuiSliderOptionsProvider,
  TuiSliderComponent,
  TuiSliderKeyStepsDirective,
  TuiSliderReadonlyDirective,
  TuiSliderThumbLabelComponent,
  TuiSliderModule,
  TuiRangeComponent,
  TuiRangeChangeDirective,
  TuiRangeModule,
  TuiInputRangeComponent,
  TuiInputRangeModule,
  TuiInputSliderComponent,
  TuiInputSliderModule,
  TUI_INPUT_TIME_DEFAULT_OPTIONS,
  TUI_INPUT_TIME_OPTIONS,
  tuiInputTimeOptionsProvider,
  TuiInputTimeComponent,
  TuiInputTimeDirective,
  TuiInputTimeModule,
  TuiInputYearComponent,
  TuiInputYearDirective,
  TuiInputYearModule,
  TuiIslandComponent,
  TuiIslandModule,
  TuiItemsWithMoreDirective,
  TuiItemsWithMoreService,
  TuiMoreDirective,
  TuiItemsWithMoreComponent,
  TuiItemsWithMoreModule,
  TUI_LINE_CLAMP_DEFAULT_OPTIONS,
  TUI_LINE_CLAMP_OPTIONS,
  tuiLineClampOptionsProvider,
  TuiLineClampBoxComponent,
  TuiLineClampComponent,
  TuiLineClampModule,
  TuiPaginationComponent,
  TuiPaginationModule,
  TuiPdfViewerComponent,
  TUI_PDF_VIEWER_DEFAULT_OPTIONS,
  TUI_PDF_VIEWER_OPTIONS,
  tuiPdfViewerOptionsProvider,
  TuiPdfViewerService,
  TuiPdfViewerDirective,
  TuiPdfViewerModule,
  TuiProgressBarComponent,
  TuiProgressColorSegmentsDirective,
  TuiProgressCircleComponent,
  TuiProgressLabelComponent,
  TuiProgressSegmentedComponent,
  TuiProgressModule,
  TuiPromptComponent,
  TUI_PROMPT,
  TuiPromptModule,
  TuiPushComponent,
  TuiPushDirective,
  TUI_PUSH_DEFAULT_OPTIONS,
  TUI_PUSH_OPTIONS,
  tuiPushOptionsProvider,
  TuiPushAlertDirective,
  TuiPushAlertComponent,
  TuiPushService,
  TuiPushModule,
  TuiRadioGroupComponent,
  TuiRadioGroupModule,
  TUI_RADIO_DEFAULT_OPTIONS,
  TUI_RADIO_OPTIONS,
  tuiRadioOptionsProvider,
  TuiRadioComponent,
  TuiRadioModule,
  TuiRadioBlockComponent,
  TuiRadioBlockModule,
  TuiRadioLabeledComponent,
  TuiRadioLabeledModule,
  TuiRadioListComponent,
  TuiRadioListModule,
  TUI_RATING_DEFAULT_OPTIONS,
  TUI_RATING_OPTIONS,
  tuiRatingOptionsProvider,
  TuiRatingComponent,
  TuiRatingModule,
  TuiRoutableDialogComponent,
  tuiGenerateDialogableRoute,
  TuiRoutableDialogModule,
  TuiNativeSelectComponent,
  TuiNativeSelectGroupComponent,
  TUI_SELECT_DEFAULT_OPTIONS,
  TUI_SELECT_OPTIONS,
  tuiSelectOptionsProvider,
  TuiSelectComponent,
  TuiSelectDirective,
  TuiSelectModule,
  TuiStepperComponent,
  TuiStepComponent,
  TuiStepperModule,
  TUI_TAB_EVENT,
  TUI_TAB_ACTIVATE,
  TUI_TAB_PROVIDERS,
  TuiTabComponent,
  TuiTabsDirective,
  TUI_TABS_DEFAULT_OPTIONS,
  TUI_TABS_OPTIONS,
  tuiTabsOptionsProvider,
  TuiUnderlineComponent,
  TuiTabsComponent,
  TuiTabsVerticalComponent,
  TUI_TABS_REFRESH,
  TUI_TABS_PROVIDERS,
  TuiTabsWithMoreComponent,
  TuiTabsModule,
  DEFAULT_ROWS,
  LINE_HEIGHT_M,
  LINE_HEIGHT_L,
  TuiTextareaComponent,
  TuiTextareaDirective,
  TuiTextAreaComponent,
  TuiTextAreaDirective,
  TuiTextAreaModule,
  TuiTextareaModule,
  TuiTilesComponent,
  TuiTileService,
  TuiTileComponent,
  TuiTileHandleDirective,
  TuiTilesModule,
  TUI_TOGGLE_DEFAULT_OPTIONS,
  TUI_TOGGLE_OPTIONS,
  tuiToggleOptionsProvider,
  TuiToggleComponent,
  TuiToggleModule,
  TuiTreeChildrenDirective,
  TuiTreeItemContentComponent,
  TUI_TREE_ITEM_CONTENT,
  TUI_DEFAULT_TREE_CONTROLLER,
  TUI_TREE_ACCESSOR,
  TUI_TREE_CONTROLLER,
  TUI_TREE_NODE,
  TUI_TREE_LOADING,
  TUI_TREE_START,
  TUI_TREE_LOADER,
  TUI_TREE_CONTENT,
  TUI_TREE_LEVEL,
  TUI_TREE_ITEM_PROVIDERS,
  TuiTreeItemComponent,
  TuiTreeNodeDirective,
  TuiTreeComponent,
  TuiTreeControllerDirective,
  TuiTreeItemControllerDirective,
  TuiTreeService,
  TuiTreeModule,
  TuiDialogFormService
};
//# sourceMappingURL=chunk-AEBNJ6EW.js.map
